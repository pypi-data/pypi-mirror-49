# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ProjectEditParams(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, code_access=None, name=None, description=None, members=None, visibility=None, display_class=None):
        """
        ProjectEditParams - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'code_access': 'ProjectCodeAccess',
            'name': 'str',
            'description': 'str',
            'members': 'list[ProjectMember]',
            'visibility': 'VisibilityEnum',
            'display_class': 'str'
        }

        self.attribute_map = {
            'code_access': 'codeAccess',
            'name': 'name',
            'description': 'description',
            'members': 'members',
            'visibility': 'visibility',
            'display_class': 'displayClass'
        }

        self._code_access = code_access
        self._name = name
        self._description = description
        self._members = members
        self._visibility = visibility
        self._display_class = display_class

    @property
    def code_access(self):
        """
        Gets the code_access of this ProjectEditParams.


        :return: The code_access of this ProjectEditParams.
        :rtype: ProjectCodeAccess
        """
        return self._code_access

    @code_access.setter
    def code_access(self, code_access):
        """
        Sets the code_access of this ProjectEditParams.


        :param code_access: The code_access of this ProjectEditParams.
        :type: ProjectCodeAccess
        """
        
        self._code_access = code_access

    @property
    def name(self):
        """
        Gets the name of this ProjectEditParams.


        :return: The name of this ProjectEditParams.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ProjectEditParams.


        :param name: The name of this ProjectEditParams.
        :type: str
        """
        
        self._name = name

    @property
    def description(self):
        """
        Gets the description of this ProjectEditParams.


        :return: The description of this ProjectEditParams.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ProjectEditParams.


        :param description: The description of this ProjectEditParams.
        :type: str
        """
        
        self._description = description

    @property
    def members(self):
        """
        Gets the members of this ProjectEditParams.


        :return: The members of this ProjectEditParams.
        :rtype: list[ProjectMember]
        """
        return self._members

    @members.setter
    def members(self, members):
        """
        Sets the members of this ProjectEditParams.


        :param members: The members of this ProjectEditParams.
        :type: list[ProjectMember]
        """
        
        self._members = members

    @property
    def visibility(self):
        """
        Gets the visibility of this ProjectEditParams.


        :return: The visibility of this ProjectEditParams.
        :rtype: VisibilityEnum
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """
        Sets the visibility of this ProjectEditParams.


        :param visibility: The visibility of this ProjectEditParams.
        :type: VisibilityEnum
        """
        
        self._visibility = visibility

    @property
    def display_class(self):
        """
        Gets the display_class of this ProjectEditParams.


        :return: The display_class of this ProjectEditParams.
        :rtype: str
        """
        return self._display_class

    @display_class.setter
    def display_class(self, display_class):
        """
        Sets the display_class of this ProjectEditParams.


        :param display_class: The display_class of this ProjectEditParams.
        :type: str
        """
        
        self._display_class = display_class

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




