# -*- coding: utf-8 -*-
from distutils.core import setup

packages = \
['pyartifactory', 'pyartifactory.models']

package_data = \
{'': ['*']}

install_requires = \
['email_validator>=1.0,<2.0', 'pydantic>=0.23.0,<0.24.0', 'requests>=2.21,<3.0']

setup_kwargs = {
    'name': 'pyartifactory',
    'version': '1.0.2',
    'description': 'Typed interactions with the Jfrog Artifactory REST API',
    'long_description': '# Python Artifactory\n\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/8b22b5118d67471f81b4de2feefc5763)](https://app.codacy.com/app/Ananias/python-artifactory?utm_source=github.com&utm_medium=referral&utm_content=anancarv/python-artifactory&utm_campaign=Badge_Grade_Dashboard)\n[![Build Status](https://travis-ci.org/anancarv/python-artifactory.svg?branch=master)](https://travis-ci.org/anancarv/python-artifactory)\n\n`python-artifactory` is a Python library to access the [Artifactory REST API](https://www.jfrog.com/confluence/display/RTF/Artifactory+REST+API). \n\nThis library enables you to manage Artifactory resources such as users, groups, permissions, repositories & artifacts in your applications.\nIt requires at least Python 3.6\n\n## Table of contents\n\n\n* [Usage](#Usage)\n    * [Authentication](#Authentication)\n    * [SSL Cert Verification Options](#SSL-Cert-Verification-Options)\n    * [Admin objects](#Admin-objects)\n        * [User](#User)\n        * [Group](#Group)\n        * [Security](#Security)\n        * [Repository](#Repository)\n        * [Permission](#Permission)\n    * [Artifacts & Builds](#Artifacts-&-Builds)\n        * [Artifacts](#Artifacts)\n    \n## Usage\n\n### Authentication\n\n```python\nfrom pyartifactory import Artifactory\nart = Artifactory(url="ARTIFACTORY_URL", auth=(\'USERNAME\',\'PASSORD_OR_API_KEY\'))\n```\n\n### SSL Cert Verification Options\nSpecify a local cert to use as client side certificate\n\n```python\nfrom pyartifactory import Artifactory\nart = Artifactory(url="ARTIFACTORY_URL", auth=(\'USERNAME\',\'PASSORD_OR_API_KEY\'), cert="/path_to_file/server.pem")\n```\n\nDisable host cert verification\n\n```python\nfrom pyartifactory import Artifactory\nart = Artifactory(url="ARTIFACTORY_URL", auth=(\'USERNAME\',\'PASSORD_OR_API_KEY\'), verify=False)\n```\n\n### Admin objects\n\n#### User\n\nFirst, you need to create a new Artifactory object.\n```python\nfrom pyartifactory import Artifactory\nart = Artifactory(url="ARTIFACTORY_URL", auth=(\'USERNAME\',\'PASSORD_OR_API_KEY\'))\n```\n\nGet the list of users:\n```python\nusers = art.users.list()\n```\n\nGet a single user:\n```python\nusers = art.users.get("test_user")\n```\n\nCreate/Update a user:\n```python\nfrom pyartifactory.models.User import NewUser\n\n# Create User\nuser = NewUser(name="test_user", password="test_password", email="user@user.com")\nnew_user = art.users.create(user)\n\n# Update user\nuser.email = "test@test.com"\nupdated_user = art.users.update(user)\n```\n\nDelete a user:\n```python\nart.users.delete("test_user")\n```\n\n#### Group\n\nGet the list of groups:\n```python\nusers = art.groups.list()\n```\n\nGet a single group:\n```python\nusers = art.groups.get("group_name")\n```\n\nCreate/Update a group:\n```python\nfrom pyartifactory.models.Group import Group\n\n# Create a Group\ngroup = Group(name="test_group", description="test_group")\nnew_group = art.groups.create(group)\n\n# Update user\ngroup.description = "test_group_2"\nupdated_group = art.groups.update(group)\n```\n\nDelete a group:\n```python\nart.groups.delete("test_group")\n```\n\n\n#### Security\n\nA set of methods for performing operations on apiKeys, passwords ...\n```python\n>>> art.security.\nart.security.create_api_key(          art.security.get_encrypted_password(  art.security.revoke_api_key(\nart.security.get_api_key(             art.security.regenerate_api_key(      art.security.revoke_user_api_key(\n```\n\n\n### Repository\n\nGet the list of repositories:\n```python\nrepositories = art.repositories.list()\n```\n\nGet a single repository (Local, Virtual or Remote):\n```python\nlocal_repo = art.groups.get_local_repo("local_repo_name")\nvirtual_repo = art.groups.get_virtual_repo("virtual_repo_name")\nremote_repo = art.groups.get_remote_repo("remote_repo_name")\n```\n\nCreate/Update a repository:\n```python\nfrom pyartifactory.models.Repository import LocalRepository, VirtualRepository, RemoteRepository\n\n# Create a repository\nlocal_repo = LocalRepository(key="test_local_repo")\nnew_local_repo = art.repositories.create_local_repo(local_repo)\n\n# Update a repository\nlocal_repo.description = "test_local_repo"\nupdated_local_repo = art.repositories.update_local_repo(local_repo)\n\n# Same process for Virtual and Remote repositories\n```\n\nDelete a repository:\n```python\nart.repositories.delete("test_local_repo")\n```\n\n\n#### Permission\nGet the list of permissions:\n```python\npermissions = art.permissions.list()\n```\n\nGet a single permission:\n```python\nusers = art.permissions.get("test_permission")\n```\n\nCreate/Update a permission:\n```python\nfrom pyartifactory.models.Permission import Permission\n\n# Create a permission\npermission = Permission(\n    **{\n        "name": "test_permission",\n        "repositories": ["test_repository"],\n        "principals": {\n            "users": {"test_user": ["r", "w", "n", "d"]},\n            "groups": {"developers": ["r"]},\n        },\n    }\n)\nperm = art.permissions.create(permission)\n\n# Update permission\npermission.repositories = ["test_repository_2"]\nupdated_permission = art.permissions.update(permission)\n```\n\nDelete a permission:\n```python\nart.permissions.delete("test_permission")\n```\n\n### Artifacts & Builds\n\n#### Artifacts\nTBD\n',
    'author': 'Ananias CARVALHO',
    'author_email': 'carvalhoananias@hotmail.com',
    'url': 'https://github.com/anancarv/python-artifactory',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
