{"version":3,"sources":["webpack:///./app/views/stream/stream.jsx","webpack:///./app/views/stream/index.jsx"],"names":["STATS_PERIODS","Set","Stream","createReactClass","displayName","propTypes","environment","SentryTypes","Environment","tags","PropTypes","object","tagsLoading","bool","mixins","Reflux","listenTo","GroupStore","ApiMixin","ProjectState","getInitialState","searchId","this","props","params","project","getProject","realtimeActiveCookie","Cookies","get","realtimeActive","firstEvent","currentQuery","location","query","sort","hasQuery","groupIds","isDefaultSearch","loading","savedSearchLoading","savedSearchList","selectAllActive","multiSelected","anySelected","statsPeriod","has","pageLinks","queryCount","dataLoading","error","isSidebarVisible","componentWillMount","organization","getOrganization","features","qs","parse","search","id","browserHistory","replace","concat","slug","stringify","_streamManager","utils","StreamManager","_poller","CursorPoller","success","onRealtimePoll","fetchSavedSearches","state","fetchData","componentWillReceiveProps","nextProps","setState","nextSearchId","searchIdChanged","undefined","currentSearchTerm","nextSearchTerm","searchTermChanged","isEqual_default","omit_default","getQueryState","componentDidUpdate","prevProps","prevState","resumePolling","disable","componentWillUnmount","reset","_this","_this$props$params","orgId","projectId","fetchProjectSavedSearches","api","then","data","newState","needsData","match","find","transitionTo","defaultResult","isUserDefault","isDefault","envName","queryString","getQueryEnvironment","env","EnvironmentStore","getByName","setActiveEnvironment","getQueryStringWithoutEnvironment","logAjaxError","onSavedSearchCreate","push","sortBy_default","onSavedSearchSelect","searchResult","queryEnv","_this2","loadInitialData","url","getGroupListEndpoint","formatQueryString","requestParams","limit","shortIdLookup","queryEnvironment","name","cursor","lastRequest","cancel","request","method","ignore","jqXHR","getResponseHeader","matchingEventId","_data$","matchingEventEnvironment","redirect","setActiveEnvironmentName","queryMaxCount","parseInt","err","parseApiError","complete","links","parseLinkHeader","previous","results","setEndpoint","href","enable","onRealtimeChange","realtime","set","toString","onSelectStatsPeriod","period","unshift","valueIsEqual","onGroupChange","getAllItems","map","item","onSearch","_this3","s","length","_this$props$params2","analytics","organization_id","project_id","onSortChange","onSidebarToggle","org","org_id","allResultsVisible","next","queryParams","path","pathname","renderGroupNodes","ids","_this4","userDateJoined","Date","ConfigStore","dateJoined","dateCutoff","setDate","getDate","topIssue","groupNodes","hasGuideAnchor","react_default","a","createElement","group","key","panels","className","renderAwaitingEvents","sampleIssueId","errorRobot","gradient","renderEmpty","message","tct","t","emptyStateWarning","renderLoading","loadingIndicator","renderStreamBody","loadingError","onRetry","tagValueLoader","fetchProjectTagValues","render","classes","context","projectFeatures","getProjectFeatures","selection","projects","environments","datetime","start","end","utc","react_document_title_default","title","classNames","filters","onSavedSearchDelete","isSearchDisabled","actions","hasReleases","latestRelease","processingIssueList","projectIds","pagination","sidebar","onQueryChange","StreamContainer","setProjectNavSection","func","TagStore","getAllTags","fetchProjectTags","onTagsChange","filterTags","filteredTags","stream","extends_default","withEnvironmentInQueryString"],"mappings":"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","file":"Stream.js","sourcesContent":["import {browserHistory} from 'react-router';\nimport {omit, isEqual, sortBy} from 'lodash';\nimport Cookies from 'js-cookie';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Reflux from 'reflux';\nimport classNames from 'classnames';\nimport createReactClass from 'create-react-class';\nimport DocumentTitle from 'react-document-title';\nimport qs from 'query-string';\n\nimport {Panel, PanelBody} from 'app/components/panels';\nimport {analytics} from 'app/utils/analytics';\nimport {logAjaxError} from 'app/utils/logging';\nimport {\n  setActiveEnvironment,\n  setActiveEnvironmentName,\n} from 'app/actionCreators/environments';\nimport {t, tct} from 'app/locale';\nimport ApiMixin from 'app/mixins/apiMixin';\nimport ConfigStore from 'app/stores/configStore';\nimport EnvironmentStore from 'app/stores/environmentStore';\nimport ErrorRobot from 'app/components/errorRobot';\nimport {fetchProjectSavedSearches} from 'app/actionCreators/savedSearches';\nimport {fetchProjectTagValues} from 'app/actionCreators/tags';\nimport GroupStore from 'app/stores/groupStore';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport Pagination from 'app/components/pagination';\nimport ProcessingIssueList from 'app/components/stream/processingIssueList';\nimport ProjectState from 'app/mixins/projectState';\nimport SentryTypes from 'app/sentryTypes';\nimport StreamActions from 'app/views/stream/actions';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport StreamFilters from 'app/views/stream/filters';\nimport StreamGroup from 'app/components/stream/group';\nimport StreamSidebar from 'app/views/stream/sidebar';\nimport parseApiError from 'app/utils/parseApiError';\nimport parseLinkHeader from 'app/utils/parseLinkHeader';\nimport queryString from 'app/utils/queryString';\nimport utils from 'app/utils';\n\nconst MAX_ITEMS = 25;\nconst DEFAULT_SORT = 'date';\nconst DEFAULT_STATS_PERIOD = '24h';\nconst STATS_PERIODS = new Set(['14d', '24h']);\n\nconst Stream = createReactClass({\n  displayName: 'Stream',\n\n  propTypes: {\n    environment: SentryTypes.Environment,\n    tags: PropTypes.object,\n    tagsLoading: PropTypes.bool,\n  },\n\n  mixins: [Reflux.listenTo(GroupStore, 'onGroupChange'), ApiMixin, ProjectState],\n\n  getInitialState() {\n    const searchId = this.props.params.searchId || null;\n    const project = this.getProject();\n    const realtimeActiveCookie = Cookies.get('realtimeActive');\n    const realtimeActive =\n      typeof realtimeActiveCookie === 'undefined'\n        ? project && !project.firstEvent\n        : realtimeActiveCookie === 'true';\n\n    const currentQuery = this.props.location.query || {};\n    const sort = 'sort' in currentQuery ? currentQuery.sort : DEFAULT_SORT;\n\n    const hasQuery = 'query' in currentQuery;\n    const statsPeriod = STATS_PERIODS.has(currentQuery.statsPeriod)\n      ? currentQuery.statsPeriod\n      : DEFAULT_STATS_PERIOD;\n\n    return {\n      groupIds: [],\n      isDefaultSearch: false,\n      searchId: hasQuery ? null : searchId,\n      // if we have no query then we can go ahead and fetch data\n      loading: !!searchId || !hasQuery,\n      savedSearchLoading: true,\n      savedSearchList: [],\n      selectAllActive: false,\n      multiSelected: false,\n      anySelected: false,\n      statsPeriod,\n      realtimeActive,\n      pageLinks: '',\n      queryCount: null,\n      dataLoading: true,\n      error: false,\n      query: hasQuery ? currentQuery.query : '',\n      sort,\n      isSidebarVisible: false,\n      environment: this.props.environment,\n    };\n  },\n\n  componentWillMount() {\n    const organization = this.getOrganization();\n    const hasSentry10 = new Set(organization.features).has('sentry10');\n\n    if (hasSentry10) {\n      const project = this.getProject();\n      const {location} = this.props;\n      const query = qs.parse(location.search);\n      query.project = project.id;\n\n      browserHistory.replace(\n        `/organizations/${organization.slug}/issues/?${qs.stringify(query)}`\n      );\n    }\n\n    this._streamManager = new utils.StreamManager(GroupStore);\n    this._poller = new utils.CursorPoller({\n      success: this.onRealtimePoll,\n    });\n\n    this.fetchSavedSearches();\n    if (!this.state.loading) {\n      this.fetchData();\n    }\n  },\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.environment !== this.props.environment) {\n      this.setState(\n        {\n          environment: nextProps.environment,\n        },\n        this.fetchData\n      );\n    }\n\n    // you cannot apply both a query and a saved search (our routes do not\n    // support it), so the searchId takes priority\n    const nextSearchId = nextProps.params.searchId;\n\n    const searchIdChanged = this.state.isDefaultSearch\n      ? nextSearchId !== undefined\n      : nextSearchId !== this.props.params.searchId;\n\n    // We are using qs.parse with location.search since this.props.location.query\n    // returns the same value as nextProps.location.query\n    const currentSearchTerm = qs.parse(this.props.location.search);\n    const nextSearchTerm = qs.parse(nextProps.location.search);\n\n    const searchTermChanged = !isEqual(\n      omit(currentSearchTerm, 'environment'),\n      omit(nextSearchTerm, 'environment')\n    );\n\n    if (searchIdChanged || searchTermChanged) {\n      this.setState(this.getQueryState(nextProps), this.fetchData);\n    }\n  },\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.realtimeActive !== this.state.realtimeActive) {\n      // User toggled realtime button\n      if (this.state.realtimeActive) {\n        this.resumePolling();\n      } else {\n        this._poller.disable();\n      }\n    }\n  },\n\n  componentWillUnmount() {\n    this._poller.disable();\n    GroupStore.reset();\n  },\n\n  fetchSavedSearches() {\n    this.setState({\n      savedSearchLoading: true,\n    });\n\n    const {orgId, projectId} = this.props.params;\n    const {searchId} = this.state;\n\n    fetchProjectSavedSearches(this.api, orgId, projectId).then(\n      data => {\n        const newState = {\n          isDefaultSearch: false,\n          savedSearchLoading: false,\n          savedSearchList: data,\n          loading: false,\n        };\n        const needsData = this.state.loading;\n        if (searchId) {\n          const match = data.find(search => search.id === searchId);\n\n          if (match) {\n            newState.query = match.query;\n          } else {\n            this.setState(\n              {\n                savedSearchLoading: false,\n                savedSearchList: data,\n                searchId: null,\n                isDefaultSearch: true,\n              },\n              this.transitionTo\n            );\n          }\n        } else if (!this.hasQuery()) {\n          const defaultResult =\n            data.find(search => search.isUserDefault) ||\n            data.find(search => search.isDefault);\n\n          if (defaultResult) {\n            // Check if there is an environment specified in the default search\n            const envName = queryString.getQueryEnvironment(defaultResult.query);\n            const env = EnvironmentStore.getByName(envName);\n            if (env) {\n              setActiveEnvironment(env);\n            }\n\n            newState.searchId = defaultResult.id;\n\n            newState.query = queryString.getQueryStringWithoutEnvironment(\n              defaultResult.query\n            );\n            newState.isDefaultSearch = true;\n          }\n        }\n\n        this.setState(newState, needsData ? this.fetchData : null);\n      },\n      error => {\n        // XXX(dcramer): fail gracefully by still loading the stream\n        logAjaxError(error);\n        this.setState({\n          loading: false,\n          isDefaultSearch: null,\n          searchId: null,\n          savedSearchList: [],\n          savedSearchLoading: false,\n          query: '',\n        });\n      }\n    );\n  },\n\n  onSavedSearchCreate(data) {\n    const savedSearchList = this.state.savedSearchList;\n    savedSearchList.push(data);\n\n    this.setState(\n      {\n        savedSearchList: sortBy(savedSearchList, ['name']),\n        searchId: data.id,\n      },\n      this.transitionTo\n    );\n  },\n\n  onSavedSearchSelect(search) {\n    this.setState({searchId: search.id}, this.transitionTo);\n  },\n\n  getQueryState(props) {\n    const currentQuery = props.location.query || {};\n\n    const hasQuery = 'query' in currentQuery;\n\n    const searchId = hasQuery\n      ? null\n      : props.params.searchId || this.state.searchId || null;\n\n    const sort = 'sort' in currentQuery ? currentQuery.sort : DEFAULT_SORT;\n\n    const statsPeriod = STATS_PERIODS.has(currentQuery.statsPeriod)\n      ? currentQuery.statsPeriod\n      : DEFAULT_STATS_PERIOD;\n\n    const newState = {\n      sort,\n      statsPeriod,\n      query: hasQuery ? currentQuery.query : '',\n      searchId,\n      isDefaultSearch: false,\n    };\n\n    if (searchId) {\n      const searchResult = this.state.savedSearchList.find(\n        search => search.id === searchId\n      );\n      if (searchResult) {\n        // New behavior is that we no longer support environment in saved search\n        // We check if the query contains a valid environment and update the global setting if so\n        // We'll always strip environment from the querystring whether valid or not\n        const queryEnv = queryString.getQueryEnvironment(searchResult.query);\n        if (queryEnv) {\n          const env = EnvironmentStore.getByName(queryEnv);\n          setActiveEnvironment(env);\n        }\n        newState.query = queryString.getQueryStringWithoutEnvironment(searchResult.query);\n\n        if (this.state.searchId && !props.params.searchId) {\n          newState.isDefaultSearch = true;\n        }\n      } else {\n        newState.searchId = null;\n      }\n    } else if (!hasQuery) {\n      const defaultResult = this.state.savedSearchList.find(search => search.isDefault);\n      if (defaultResult) {\n        newState.isDefaultSearch = true;\n        newState.searchId = defaultResult.id;\n        newState.query = defaultResult.query;\n      } else {\n        newState.searchId = null;\n      }\n    }\n    newState.loading = false;\n    return newState;\n  },\n\n  hasQuery(props) {\n    props = props || this.props;\n    const currentQuery = props.location.query || {};\n    return 'query' in currentQuery;\n  },\n\n  fetchData() {\n    GroupStore.loadInitialData([]);\n\n    this.setState({\n      dataLoading: true,\n      queryCount: null,\n      error: false,\n    });\n\n    const url = this.getGroupListEndpoint();\n\n    // Remove leading and trailing whitespace\n    const query = queryString.formatQueryString(this.state.query);\n\n    const {environment} = this.state;\n\n    const requestParams = {\n      query,\n      limit: MAX_ITEMS,\n      sort: this.state.sort,\n      statsPeriod: this.state.statsPeriod,\n      shortIdLookup: '1',\n    };\n\n    // Always keep the global active environment in sync with the queried environment\n    // The global environment wins unless there one is specified by the saved search\n    const queryEnvironment = queryString.getQueryEnvironment(query);\n\n    if (queryEnvironment !== null) {\n      requestParams.environment = queryEnvironment;\n    } else if (environment) {\n      requestParams.environment = environment.name;\n    }\n\n    const currentQuery = this.props.location.query || {};\n    if ('cursor' in currentQuery) {\n      requestParams.cursor = currentQuery.cursor;\n    }\n\n    if (this.lastRequest) {\n      this.lastRequest.cancel();\n    }\n\n    this._poller.disable();\n\n    this.lastRequest = this.api.request(url, {\n      method: 'GET',\n      data: requestParams,\n      success: (data, ignore, jqXHR) => {\n        // if this is a direct hit, we redirect to the intended result directly.\n        // we have to use the project slug from the result data instead of the\n        // the current props one as the shortIdLookup can return results for\n        // different projects.\n        if (jqXHR.getResponseHeader('X-Sentry-Direct-Hit') === '1') {\n          if (data && data[0].matchingEventId) {\n            const {project, id, matchingEventId, matchingEventEnvironment} = data[0];\n            let redirect = `/${this.props.params\n              .orgId}/${project.slug}/issues/${id}/events/${matchingEventId}/`;\n            // Also direct to the environment of this specific event if this\n            // key exists. We need to explicitly check against undefined becasue\n            // an environment name may be an empty string, which is perfectly valid.\n            if (typeof matchingEventEnvironment !== 'undefined') {\n              setActiveEnvironmentName(matchingEventEnvironment);\n              redirect = `${redirect}?${qs.stringify({\n                environment: matchingEventEnvironment,\n              })}`;\n            }\n            return void browserHistory.replace(redirect);\n          }\n        }\n\n        this._streamManager.push(data);\n\n        const queryCount = jqXHR.getResponseHeader('X-Hits');\n        const queryMaxCount = jqXHR.getResponseHeader('X-Max-Hits');\n\n        return void this.setState({\n          error: false,\n          dataLoading: false,\n          query,\n          queryCount:\n            typeof queryCount !== 'undefined' ? parseInt(queryCount, 10) || 0 : 0,\n          queryMaxCount:\n            typeof queryMaxCount !== 'undefined' ? parseInt(queryMaxCount, 10) || 0 : 0,\n          pageLinks: jqXHR.getResponseHeader('Link'),\n        });\n      },\n      error: err => {\n        this.setState({\n          error: parseApiError(err),\n          dataLoading: false,\n        });\n      },\n      complete: jqXHR => {\n        this.lastRequest = null;\n\n        this.resumePolling();\n      },\n    });\n  },\n\n  resumePolling() {\n    if (!this.state.pageLinks) {\n      return;\n    }\n\n    // Only resume polling if we're on the first page of results\n    const links = parseLinkHeader(this.state.pageLinks);\n    if (links && !links.previous.results && this.state.realtimeActive) {\n      this._poller.setEndpoint(links.previous.href);\n      this._poller.enable();\n    }\n  },\n\n  getGroupListEndpoint() {\n    const params = this.props.params;\n\n    return '/projects/' + params.orgId + '/' + params.projectId + '/issues/';\n  },\n\n  onRealtimeChange(realtime) {\n    Cookies.set('realtimeActive', realtime.toString());\n    this.setState({\n      realtimeActive: realtime,\n    });\n  },\n\n  onSelectStatsPeriod(period) {\n    if (period != this.state.statsPeriod) {\n      // TODO(dcramer): all charts should now suggest \"loading\"\n      this.setState(\n        {\n          statsPeriod: period,\n        },\n        function() {\n          this.transitionTo();\n        }\n      );\n    }\n  },\n\n  onRealtimePoll(data, links) {\n    this._streamManager.unshift(data);\n    if (!utils.valueIsEqual(this.state.pageLinks, links, true)) {\n      this.setState({\n        pageLinks: links,\n      });\n    }\n  },\n\n  onGroupChange() {\n    const groupIds = this._streamManager.getAllItems().map(item => item.id);\n    if (!utils.valueIsEqual(groupIds, this.state.groupIds)) {\n      this.setState({\n        groupIds,\n      });\n    }\n  },\n\n  onSearch(query) {\n    if (query === this.state.query) {\n      // if query is the same, just re-fetch data\n      this.fetchData();\n    } else {\n      // We no longer want to support environments specified in the querystring\n      // To keep this aligned with old behavior though we'll update the global environment\n      // and remove it from the query if someone does provide it this way\n      const queryEnvironment = queryString.getQueryEnvironment(query);\n      if (queryEnvironment !== null) {\n        const env = EnvironmentStore.getByName(queryEnvironment);\n        setActiveEnvironment(env);\n      }\n      query = queryString.getQueryStringWithoutEnvironment(query);\n\n      this.setState(\n        {\n          query,\n          searchId: null,\n        },\n        this.transitionTo\n      );\n    }\n\n    // Ignore saved searches\n    if (this.state.savedSearchList.map(s => s.query == this.state.query).length > 0) {\n      const {orgId, projectId} = this.props.params;\n      analytics('issue.search', {\n        query: this.state.query,\n        organization_id: orgId,\n        project_id: projectId,\n      });\n    }\n  },\n\n  onSortChange(sort) {\n    this.setState(\n      {\n        sort,\n      },\n      this.transitionTo\n    );\n  },\n\n  onSidebarToggle() {\n    const org = this.getOrganization();\n    this.setState({\n      isSidebarVisible: !this.state.isSidebarVisible,\n    });\n    analytics('issue.search_sidebar_clicked', {\n      org_id: parseInt(org.id, 10),\n    });\n  },\n\n  /**\n   * Returns true if all results in the current query are visible/on this page\n   */\n  allResultsVisible() {\n    if (!this.state.pageLinks) {\n      return false;\n    }\n\n    const links = parseLinkHeader(this.state.pageLinks);\n    return links && !links.previous.results && !links.next.results;\n  },\n\n  transitionTo() {\n    const queryParams = {};\n\n    if (this.props.location.query.environment) {\n      queryParams.environment = this.props.location.query.environment;\n    }\n\n    if (!this.state.searchId) {\n      queryParams.query = this.state.query;\n    }\n\n    if (this.state.sort !== DEFAULT_SORT) {\n      queryParams.sort = this.state.sort;\n    }\n\n    if (this.state.statsPeriod !== DEFAULT_STATS_PERIOD) {\n      queryParams.statsPeriod = this.state.statsPeriod;\n    }\n\n    const params = this.props.params;\n\n    const path = this.state.searchId\n      ? `/${params.orgId}/${params.projectId}/searches/${this.state.searchId}/`\n      : `/${params.orgId}/${params.projectId}/`;\n    browserHistory.push({\n      pathname: path,\n      query: queryParams,\n    });\n  },\n\n  renderGroupNodes(ids, statsPeriod) {\n    // Restrict this guide to only show for new users (joined<30 days) and add guide anhor only to the first issue\n    const userDateJoined = new Date(ConfigStore.get('user').dateJoined);\n    const dateCutoff = new Date();\n    dateCutoff.setDate(dateCutoff.getDate() - 30);\n\n    const topIssue = ids[0];\n\n    const {orgId} = this.props.params;\n    const groupNodes = ids.map(id => {\n      const hasGuideAnchor = userDateJoined > dateCutoff && id === topIssue;\n      return (\n        <StreamGroup\n          key={id}\n          id={id}\n          orgId={orgId}\n          statsPeriod={statsPeriod}\n          query={this.state.query}\n          hasGuideAnchor={hasGuideAnchor}\n        />\n      );\n    });\n    return <PanelBody className=\"ref-group-list\">{groupNodes}</PanelBody>;\n  },\n\n  renderAwaitingEvents() {\n    const org = this.getOrganization();\n    const project = this.getProject();\n    const sampleIssueId = this.state.groupIds.length > 0 ? this.state.groupIds[0] : '';\n    return (\n      <ErrorRobot\n        org={org}\n        project={project}\n        sampleIssueId={sampleIssueId}\n        gradient={true}\n      />\n    );\n  },\n\n  renderEmpty() {\n    const {environment} = this.state;\n    const message = environment\n      ? tct('Sorry no events match your filters in the [env] environment.', {\n          env: environment.displayName,\n        })\n      : t('Sorry, no events match your filters.');\n\n    return (\n      <EmptyStateWarning>\n        <p>{message}</p>\n      </EmptyStateWarning>\n    );\n  },\n\n  renderLoading() {\n    return <LoadingIndicator />;\n  },\n\n  renderStreamBody() {\n    let body;\n    const project = this.getProject();\n\n    if (project.firstEvent) {\n      ConfigStore.set('sentFirstEvent', project.firstEvent);\n    }\n\n    if (this.state.dataLoading) {\n      body = this.renderLoading();\n    } else if (this.state.error) {\n      body = <LoadingError message={this.state.error} onRetry={this.fetchData} />;\n    } else if (this.state.groupIds.length > 0) {\n      body = this.renderGroupNodes(this.state.groupIds, this.state.statsPeriod);\n    } else if (!project.firstEvent) {\n      body = this.renderAwaitingEvents();\n    } else {\n      body = this.renderEmpty();\n    }\n    return body;\n  },\n\n  tagValueLoader(key, search) {\n    const {orgId} = this.props.params;\n    const project = this.getProject();\n    return fetchProjectTagValues(this.api, orgId, project.slug, key, search);\n  },\n\n  render() {\n    // global loading\n    if (this.state.loading) {\n      return this.renderLoading();\n    }\n    const classes = ['stream-row'];\n    if (this.state.isSidebarVisible) {\n      classes.push('show-sidebar');\n    }\n    const {organization} = this.context;\n\n    const searchId = this.state.searchId;\n    const projectFeatures = this.getProjectFeatures();\n    const project = this.getProject();\n\n    // for compatibility with new filters/stream component\n    const selection = {\n      projects: [project.id],\n      environments: this.state.environment ? [this.state.environment.name] : [],\n      datetime: {start: null, end: null, period: null, utc: null},\n    };\n\n    return (\n      <DocumentTitle title={`Issues - ${project.slug} - ${organization.name} - Sentry`}>\n        <div className={classNames(classes)}>\n          <div className=\"stream-content\">\n            <StreamFilters\n              organization={organization}\n              projectId={project.slug}\n              query={this.state.query}\n              sort={this.state.sort}\n              searchId={searchId}\n              queryCount={this.state.queryCount}\n              queryMaxCount={this.state.queryMaxCount}\n              onSortChange={this.onSortChange}\n              onSearch={this.onSearch}\n              onSavedSearchCreate={this.onSavedSearchCreate}\n              onSavedSearchSelect={this.onSavedSearchSelect}\n              onSavedSearchDelete={() => {}}\n              onSidebarToggle={this.onSidebarToggle}\n              isSearchDisabled={this.state.isSidebarVisible}\n              savedSearchList={this.state.savedSearchList}\n              tagValueLoader={this.tagValueLoader}\n              tags={this.props.tags}\n            />\n            <Panel>\n              <StreamActions\n                orgId={organization.slug}\n                projectId={project.slug}\n                selection={selection}\n                hasReleases={projectFeatures.has('releases')}\n                latestRelease={this.context.project.latestRelease}\n                environment={this.state.environment}\n                query={this.state.query}\n                queryCount={this.state.queryCount}\n                onSelectStatsPeriod={this.onSelectStatsPeriod}\n                onRealtimeChange={this.onRealtimeChange}\n                realtimeActive={this.state.realtimeActive}\n                statsPeriod={this.state.statsPeriod}\n                groupIds={this.state.groupIds}\n                allResultsVisible={this.allResultsVisible()}\n              />\n              <PanelBody>\n                <ProcessingIssueList\n                  organization={organization}\n                  projectIds={selection.projects}\n                />\n                {this.renderStreamBody()}\n              </PanelBody>\n            </Panel>\n            <Pagination pageLinks={this.state.pageLinks} />\n          </div>\n          <StreamSidebar\n            loading={this.props.tagsLoading}\n            tags={this.props.tags}\n            query={this.state.query}\n            onQueryChange={this.onSearch}\n            orgId={organization.slug}\n            projectId={project.slug}\n            tagValueLoader={this.tagValueLoader}\n          />\n        </div>\n      </DocumentTitle>\n    );\n  },\n});\nexport default Stream;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Reflux from 'reflux';\nimport createReactClass from 'create-react-class';\nimport {omit} from 'lodash';\n\nimport SentryTypes from 'app/sentryTypes';\nimport ProjectState from 'app/mixins/projectState';\nimport TagStore from 'app/stores/tagStore';\nimport withEnvironmentInQueryString from 'app/utils/withEnvironmentInQueryString';\nimport Stream from 'app/views/stream/stream';\nimport {fetchProjectTags} from 'app/actionCreators/tags';\n\nconst StreamContainer = createReactClass({\n  displayName: 'StreamContainer',\n  propTypes: {\n    environment: SentryTypes.Environment,\n    setProjectNavSection: PropTypes.func,\n  },\n\n  mixins: [ProjectState, Reflux.listenTo(TagStore, 'onTagsChange')],\n\n  getInitialState() {\n    return {\n      tags: TagStore.getAllTags(),\n      tagsLoading: true,\n    };\n  },\n\n  componentWillMount() {\n    const {orgId, projectId} = this.props.params;\n    this.props.setProjectNavSection('stream');\n    fetchProjectTags(orgId, projectId);\n  },\n\n  onTagsChange(tags) {\n    this.setState({\n      tags,\n      tagsLoading: false,\n    });\n  },\n\n  // We don't want the environment tag to be visible to the user\n  filterTags(tags) {\n    return omit(tags, 'environment');\n  },\n\n  render() {\n    const filteredTags = this.filterTags(this.state.tags);\n\n    return (\n      <Stream tags={filteredTags} tagsLoading={this.state.tagsLoading} {...this.props} />\n    );\n  },\n});\n\nexport default withEnvironmentInQueryString(StreamContainer);\n"],"sourceRoot":""}