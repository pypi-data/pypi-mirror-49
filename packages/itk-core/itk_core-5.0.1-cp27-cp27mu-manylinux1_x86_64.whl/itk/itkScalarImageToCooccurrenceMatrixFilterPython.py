# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkScalarImageToCooccurrenceMatrixFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkScalarImageToCooccurrenceMatrixFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkScalarImageToCooccurrenceMatrixFilterPython
            return _itkScalarImageToCooccurrenceMatrixFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkScalarImageToCooccurrenceMatrixFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkScalarImageToCooccurrenceMatrixFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkScalarImageToCooccurrenceMatrixFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImagePython
import stdcomplexPython
import pyBasePython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import ITKCommonBasePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkRGBAPixelPython
import itkHistogramPython
import itkArrayPython
import itkSamplePython
import itkVectorContainerPython
import itkContinuousIndexPython

def itkScalarImageToCooccurrenceMatrixFilterIF3_New():
  return itkScalarImageToCooccurrenceMatrixFilterIF3.New()


def itkScalarImageToCooccurrenceMatrixFilterIF2_New():
  return itkScalarImageToCooccurrenceMatrixFilterIF2.New()


def itkScalarImageToCooccurrenceMatrixFilterIUS3_New():
  return itkScalarImageToCooccurrenceMatrixFilterIUS3.New()


def itkScalarImageToCooccurrenceMatrixFilterIUS2_New():
  return itkScalarImageToCooccurrenceMatrixFilterIUS2.New()


def itkScalarImageToCooccurrenceMatrixFilterIUC3_New():
  return itkScalarImageToCooccurrenceMatrixFilterIUC3.New()


def itkScalarImageToCooccurrenceMatrixFilterIUC2_New():
  return itkScalarImageToCooccurrenceMatrixFilterIUC2.New()


def itkScalarImageToCooccurrenceMatrixFilterISS3_New():
  return itkScalarImageToCooccurrenceMatrixFilterISS3.New()


def itkScalarImageToCooccurrenceMatrixFilterISS2_New():
  return itkScalarImageToCooccurrenceMatrixFilterISS2.New()

class itkScalarImageToCooccurrenceMatrixFilterIF2(ITKCommonBasePython.itkProcessObject):
    """


    This class computes a co-occurence matrix (histogram) from a given
    image and a mask image if provided. Coocurrence matrces are used for
    image texture description.

    This filters creates a grey-level co-occurence matrix from a N-D
    scalar image. This is the first step in texture description a la
    Haralick. (See Haralick, R.M., K. Shanmugam and I. Dinstein. 1973.
    Textural Features for Image Classification. IEEE Transactions on
    Systems, Man and Cybernetics. SMC-3(6):610-620. See also Haralick,
    R.M. 1979. Statistical and Structural Approaches to Texture.
    Proceedings of the IEEE, 67:786-804.)

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), grey-level co-occurences are pairs of intensity
    values for a specific pixel and the pixel at that offset from the
    specified pixel. These co-occurences can provide eight-bit image of
    alternating pixel-wide white and black vertical lines would have a
    large number of (0, 255) and (255, 0) co-occurences for offset (1, 0).

    The offset (or offsets) along which the co-occurences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features, averages of features computed over
    several histograms with different offsets are generally used, instead
    of computing features from one histogram created with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multy-resulution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the co-occurence pairs in
    the given image's requested region, for a given set of offsets. That
    is, if a given offset falls outside of the requested region at a
    particular point, that co-occurrence pair will not be added to the
    matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    See:  MaskedScalarImageToCooccurrenceMatrixFilter

    See:   HistogramToTextureFeaturesFilter

    See:  ScalarImageTextureCalculator

    Zachary Pincus and Glenn Pierce

    C++ includes: itkScalarImageToCooccurrenceMatrixFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterIF2_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkScalarImageToCooccurrenceMatrixFilterIF2 self) -> itkScalarImageToCooccurrenceMatrixFilterIF2_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_Clone(self)


    def SetOffsets(self, _arg):
        """
        SetOffsets(itkScalarImageToCooccurrenceMatrixFilterIF2 self, itkVectorContainerUCO2 _arg)

        Get/Set the offset or
        offsets over which the co-occurrence pairs will be computed. Calling
        either of these methods clears the previous offsets. 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetOffsets(self, _arg)


    def GetOffsets(self):
        """GetOffsets(itkScalarImageToCooccurrenceMatrixFilterIF2 self) -> itkVectorContainerUCO2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetOffsets(self)


    def SetOffset(self, offset):
        """SetOffset(itkScalarImageToCooccurrenceMatrixFilterIF2 self, itkOffset2 offset)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetOffset(self, offset)


    def SetNumberOfBinsPerAxis(self, _arg):
        """
        SetNumberOfBinsPerAxis(itkScalarImageToCooccurrenceMatrixFilterIF2 self, unsigned int const _arg)

        Set number
        of histogram bins along each axis 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetNumberOfBinsPerAxis(self, _arg)


    def GetNumberOfBinsPerAxis(self):
        """GetNumberOfBinsPerAxis(itkScalarImageToCooccurrenceMatrixFilterIF2 self) -> unsigned int"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetNumberOfBinsPerAxis(self)


    def SetPixelValueMinMax(self, min, max):
        """
        SetPixelValueMinMax(itkScalarImageToCooccurrenceMatrixFilterIF2 self, float min, float max)

        Set the min and
        max (inclusive) pixel value that will be placed in the histogram 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetPixelValueMinMax(self, min, max)


    def GetMin(self):
        """GetMin(itkScalarImageToCooccurrenceMatrixFilterIF2 self) -> float"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetMin(self)


    def GetMax(self):
        """GetMax(itkScalarImageToCooccurrenceMatrixFilterIF2 self) -> float"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetMax(self)


    def SetNormalize(self, _arg):
        """
        SetNormalize(itkScalarImageToCooccurrenceMatrixFilterIF2 self, bool const _arg)

        Set the calculator to
        normalize the histogram (divide all bins by the total frequency).
        Normalization is off by default. 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetNormalize(self, _arg)


    def GetNormalize(self):
        """GetNormalize(itkScalarImageToCooccurrenceMatrixFilterIF2 self) -> bool"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetNormalize(self)


    def NormalizeOn(self):
        """NormalizeOn(itkScalarImageToCooccurrenceMatrixFilterIF2 self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_NormalizeOn(self)


    def NormalizeOff(self):
        """NormalizeOff(itkScalarImageToCooccurrenceMatrixFilterIF2 self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_NormalizeOff(self)


    def SetInput(self, image):
        """SetInput(itkScalarImageToCooccurrenceMatrixFilterIF2 self, itkImageF2 image)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetInput(self, image)


    def GetInput(self):
        """GetInput(itkScalarImageToCooccurrenceMatrixFilterIF2 self) -> itkImageF2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetInput(self)


    def SetMaskImage(self, image):
        """
        SetMaskImage(itkScalarImageToCooccurrenceMatrixFilterIF2 self, itkImageF2 image)

        Method to set/get the
        mask image 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetMaskImage(self, image)


    def GetMaskImage(self):
        """GetMaskImage(itkScalarImageToCooccurrenceMatrixFilterIF2 self) -> itkImageF2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetMaskImage(self)


    def GetOutput(self):
        """
        GetOutput(itkScalarImageToCooccurrenceMatrixFilterIF2 self) -> itkHistogramD

        method to get the
        Histogram 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetOutput(self)


    def SetInsidePixelValue(self, _arg):
        """
        SetInsidePixelValue(itkScalarImageToCooccurrenceMatrixFilterIF2 self, float const _arg)

        Set the pixel
        value of the mask that should be considered "inside" the object.
        Defaults to one. 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetInsidePixelValue(self, _arg)


    def GetInsidePixelValue(self):
        """GetInsidePixelValue(itkScalarImageToCooccurrenceMatrixFilterIF2 self) -> float"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetInsidePixelValue(self)

    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIF2

    def cast(obj):
        """cast(itkLightObject obj) -> itkScalarImageToCooccurrenceMatrixFilterIF2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIF2

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarImageToCooccurrenceMatrixFilterIF2.Clone = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_Clone, None, itkScalarImageToCooccurrenceMatrixFilterIF2)
itkScalarImageToCooccurrenceMatrixFilterIF2.SetOffsets = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetOffsets, None, itkScalarImageToCooccurrenceMatrixFilterIF2)
itkScalarImageToCooccurrenceMatrixFilterIF2.GetOffsets = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetOffsets, None, itkScalarImageToCooccurrenceMatrixFilterIF2)
itkScalarImageToCooccurrenceMatrixFilterIF2.SetOffset = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetOffset, None, itkScalarImageToCooccurrenceMatrixFilterIF2)
itkScalarImageToCooccurrenceMatrixFilterIF2.SetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetNumberOfBinsPerAxis, None, itkScalarImageToCooccurrenceMatrixFilterIF2)
itkScalarImageToCooccurrenceMatrixFilterIF2.GetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetNumberOfBinsPerAxis, None, itkScalarImageToCooccurrenceMatrixFilterIF2)
itkScalarImageToCooccurrenceMatrixFilterIF2.SetPixelValueMinMax = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetPixelValueMinMax, None, itkScalarImageToCooccurrenceMatrixFilterIF2)
itkScalarImageToCooccurrenceMatrixFilterIF2.GetMin = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetMin, None, itkScalarImageToCooccurrenceMatrixFilterIF2)
itkScalarImageToCooccurrenceMatrixFilterIF2.GetMax = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetMax, None, itkScalarImageToCooccurrenceMatrixFilterIF2)
itkScalarImageToCooccurrenceMatrixFilterIF2.SetNormalize = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetNormalize, None, itkScalarImageToCooccurrenceMatrixFilterIF2)
itkScalarImageToCooccurrenceMatrixFilterIF2.GetNormalize = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetNormalize, None, itkScalarImageToCooccurrenceMatrixFilterIF2)
itkScalarImageToCooccurrenceMatrixFilterIF2.NormalizeOn = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_NormalizeOn, None, itkScalarImageToCooccurrenceMatrixFilterIF2)
itkScalarImageToCooccurrenceMatrixFilterIF2.NormalizeOff = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_NormalizeOff, None, itkScalarImageToCooccurrenceMatrixFilterIF2)
itkScalarImageToCooccurrenceMatrixFilterIF2.SetInput = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetInput, None, itkScalarImageToCooccurrenceMatrixFilterIF2)
itkScalarImageToCooccurrenceMatrixFilterIF2.GetInput = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetInput, None, itkScalarImageToCooccurrenceMatrixFilterIF2)
itkScalarImageToCooccurrenceMatrixFilterIF2.SetMaskImage = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetMaskImage, None, itkScalarImageToCooccurrenceMatrixFilterIF2)
itkScalarImageToCooccurrenceMatrixFilterIF2.GetMaskImage = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetMaskImage, None, itkScalarImageToCooccurrenceMatrixFilterIF2)
itkScalarImageToCooccurrenceMatrixFilterIF2.GetOutput = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetOutput, None, itkScalarImageToCooccurrenceMatrixFilterIF2)
itkScalarImageToCooccurrenceMatrixFilterIF2.SetInsidePixelValue = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetInsidePixelValue, None, itkScalarImageToCooccurrenceMatrixFilterIF2)
itkScalarImageToCooccurrenceMatrixFilterIF2.GetInsidePixelValue = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetInsidePixelValue, None, itkScalarImageToCooccurrenceMatrixFilterIF2)
itkScalarImageToCooccurrenceMatrixFilterIF2_swigregister = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_swigregister
itkScalarImageToCooccurrenceMatrixFilterIF2_swigregister(itkScalarImageToCooccurrenceMatrixFilterIF2)

def itkScalarImageToCooccurrenceMatrixFilterIF2___New_orig__():
    """itkScalarImageToCooccurrenceMatrixFilterIF2___New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterIF2_Pointer"""
    return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2___New_orig__()

def itkScalarImageToCooccurrenceMatrixFilterIF2_cast(obj):
    """itkScalarImageToCooccurrenceMatrixFilterIF2_cast(itkLightObject obj) -> itkScalarImageToCooccurrenceMatrixFilterIF2"""
    return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_cast(obj)

class itkScalarImageToCooccurrenceMatrixFilterIF3(ITKCommonBasePython.itkProcessObject):
    """


    This class computes a co-occurence matrix (histogram) from a given
    image and a mask image if provided. Coocurrence matrces are used for
    image texture description.

    This filters creates a grey-level co-occurence matrix from a N-D
    scalar image. This is the first step in texture description a la
    Haralick. (See Haralick, R.M., K. Shanmugam and I. Dinstein. 1973.
    Textural Features for Image Classification. IEEE Transactions on
    Systems, Man and Cybernetics. SMC-3(6):610-620. See also Haralick,
    R.M. 1979. Statistical and Structural Approaches to Texture.
    Proceedings of the IEEE, 67:786-804.)

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), grey-level co-occurences are pairs of intensity
    values for a specific pixel and the pixel at that offset from the
    specified pixel. These co-occurences can provide eight-bit image of
    alternating pixel-wide white and black vertical lines would have a
    large number of (0, 255) and (255, 0) co-occurences for offset (1, 0).

    The offset (or offsets) along which the co-occurences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features, averages of features computed over
    several histograms with different offsets are generally used, instead
    of computing features from one histogram created with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multy-resulution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the co-occurence pairs in
    the given image's requested region, for a given set of offsets. That
    is, if a given offset falls outside of the requested region at a
    particular point, that co-occurrence pair will not be added to the
    matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    See:  MaskedScalarImageToCooccurrenceMatrixFilter

    See:   HistogramToTextureFeaturesFilter

    See:  ScalarImageTextureCalculator

    Zachary Pincus and Glenn Pierce

    C++ includes: itkScalarImageToCooccurrenceMatrixFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterIF3_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkScalarImageToCooccurrenceMatrixFilterIF3 self) -> itkScalarImageToCooccurrenceMatrixFilterIF3_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_Clone(self)


    def SetOffsets(self, _arg):
        """
        SetOffsets(itkScalarImageToCooccurrenceMatrixFilterIF3 self, itkVectorContainerUCO3 _arg)

        Get/Set the offset or
        offsets over which the co-occurrence pairs will be computed. Calling
        either of these methods clears the previous offsets. 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetOffsets(self, _arg)


    def GetOffsets(self):
        """GetOffsets(itkScalarImageToCooccurrenceMatrixFilterIF3 self) -> itkVectorContainerUCO3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetOffsets(self)


    def SetOffset(self, offset):
        """SetOffset(itkScalarImageToCooccurrenceMatrixFilterIF3 self, itkOffset3 offset)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetOffset(self, offset)


    def SetNumberOfBinsPerAxis(self, _arg):
        """
        SetNumberOfBinsPerAxis(itkScalarImageToCooccurrenceMatrixFilterIF3 self, unsigned int const _arg)

        Set number
        of histogram bins along each axis 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetNumberOfBinsPerAxis(self, _arg)


    def GetNumberOfBinsPerAxis(self):
        """GetNumberOfBinsPerAxis(itkScalarImageToCooccurrenceMatrixFilterIF3 self) -> unsigned int"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetNumberOfBinsPerAxis(self)


    def SetPixelValueMinMax(self, min, max):
        """
        SetPixelValueMinMax(itkScalarImageToCooccurrenceMatrixFilterIF3 self, float min, float max)

        Set the min and
        max (inclusive) pixel value that will be placed in the histogram 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetPixelValueMinMax(self, min, max)


    def GetMin(self):
        """GetMin(itkScalarImageToCooccurrenceMatrixFilterIF3 self) -> float"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetMin(self)


    def GetMax(self):
        """GetMax(itkScalarImageToCooccurrenceMatrixFilterIF3 self) -> float"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetMax(self)


    def SetNormalize(self, _arg):
        """
        SetNormalize(itkScalarImageToCooccurrenceMatrixFilterIF3 self, bool const _arg)

        Set the calculator to
        normalize the histogram (divide all bins by the total frequency).
        Normalization is off by default. 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetNormalize(self, _arg)


    def GetNormalize(self):
        """GetNormalize(itkScalarImageToCooccurrenceMatrixFilterIF3 self) -> bool"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetNormalize(self)


    def NormalizeOn(self):
        """NormalizeOn(itkScalarImageToCooccurrenceMatrixFilterIF3 self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_NormalizeOn(self)


    def NormalizeOff(self):
        """NormalizeOff(itkScalarImageToCooccurrenceMatrixFilterIF3 self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_NormalizeOff(self)


    def SetInput(self, image):
        """SetInput(itkScalarImageToCooccurrenceMatrixFilterIF3 self, itkImageF3 image)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetInput(self, image)


    def GetInput(self):
        """GetInput(itkScalarImageToCooccurrenceMatrixFilterIF3 self) -> itkImageF3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetInput(self)


    def SetMaskImage(self, image):
        """
        SetMaskImage(itkScalarImageToCooccurrenceMatrixFilterIF3 self, itkImageF3 image)

        Method to set/get the
        mask image 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetMaskImage(self, image)


    def GetMaskImage(self):
        """GetMaskImage(itkScalarImageToCooccurrenceMatrixFilterIF3 self) -> itkImageF3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetMaskImage(self)


    def GetOutput(self):
        """
        GetOutput(itkScalarImageToCooccurrenceMatrixFilterIF3 self) -> itkHistogramD

        method to get the
        Histogram 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetOutput(self)


    def SetInsidePixelValue(self, _arg):
        """
        SetInsidePixelValue(itkScalarImageToCooccurrenceMatrixFilterIF3 self, float const _arg)

        Set the pixel
        value of the mask that should be considered "inside" the object.
        Defaults to one. 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetInsidePixelValue(self, _arg)


    def GetInsidePixelValue(self):
        """GetInsidePixelValue(itkScalarImageToCooccurrenceMatrixFilterIF3 self) -> float"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetInsidePixelValue(self)

    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIF3

    def cast(obj):
        """cast(itkLightObject obj) -> itkScalarImageToCooccurrenceMatrixFilterIF3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIF3

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarImageToCooccurrenceMatrixFilterIF3.Clone = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_Clone, None, itkScalarImageToCooccurrenceMatrixFilterIF3)
itkScalarImageToCooccurrenceMatrixFilterIF3.SetOffsets = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetOffsets, None, itkScalarImageToCooccurrenceMatrixFilterIF3)
itkScalarImageToCooccurrenceMatrixFilterIF3.GetOffsets = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetOffsets, None, itkScalarImageToCooccurrenceMatrixFilterIF3)
itkScalarImageToCooccurrenceMatrixFilterIF3.SetOffset = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetOffset, None, itkScalarImageToCooccurrenceMatrixFilterIF3)
itkScalarImageToCooccurrenceMatrixFilterIF3.SetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetNumberOfBinsPerAxis, None, itkScalarImageToCooccurrenceMatrixFilterIF3)
itkScalarImageToCooccurrenceMatrixFilterIF3.GetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetNumberOfBinsPerAxis, None, itkScalarImageToCooccurrenceMatrixFilterIF3)
itkScalarImageToCooccurrenceMatrixFilterIF3.SetPixelValueMinMax = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetPixelValueMinMax, None, itkScalarImageToCooccurrenceMatrixFilterIF3)
itkScalarImageToCooccurrenceMatrixFilterIF3.GetMin = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetMin, None, itkScalarImageToCooccurrenceMatrixFilterIF3)
itkScalarImageToCooccurrenceMatrixFilterIF3.GetMax = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetMax, None, itkScalarImageToCooccurrenceMatrixFilterIF3)
itkScalarImageToCooccurrenceMatrixFilterIF3.SetNormalize = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetNormalize, None, itkScalarImageToCooccurrenceMatrixFilterIF3)
itkScalarImageToCooccurrenceMatrixFilterIF3.GetNormalize = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetNormalize, None, itkScalarImageToCooccurrenceMatrixFilterIF3)
itkScalarImageToCooccurrenceMatrixFilterIF3.NormalizeOn = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_NormalizeOn, None, itkScalarImageToCooccurrenceMatrixFilterIF3)
itkScalarImageToCooccurrenceMatrixFilterIF3.NormalizeOff = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_NormalizeOff, None, itkScalarImageToCooccurrenceMatrixFilterIF3)
itkScalarImageToCooccurrenceMatrixFilterIF3.SetInput = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetInput, None, itkScalarImageToCooccurrenceMatrixFilterIF3)
itkScalarImageToCooccurrenceMatrixFilterIF3.GetInput = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetInput, None, itkScalarImageToCooccurrenceMatrixFilterIF3)
itkScalarImageToCooccurrenceMatrixFilterIF3.SetMaskImage = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetMaskImage, None, itkScalarImageToCooccurrenceMatrixFilterIF3)
itkScalarImageToCooccurrenceMatrixFilterIF3.GetMaskImage = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetMaskImage, None, itkScalarImageToCooccurrenceMatrixFilterIF3)
itkScalarImageToCooccurrenceMatrixFilterIF3.GetOutput = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetOutput, None, itkScalarImageToCooccurrenceMatrixFilterIF3)
itkScalarImageToCooccurrenceMatrixFilterIF3.SetInsidePixelValue = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetInsidePixelValue, None, itkScalarImageToCooccurrenceMatrixFilterIF3)
itkScalarImageToCooccurrenceMatrixFilterIF3.GetInsidePixelValue = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetInsidePixelValue, None, itkScalarImageToCooccurrenceMatrixFilterIF3)
itkScalarImageToCooccurrenceMatrixFilterIF3_swigregister = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_swigregister
itkScalarImageToCooccurrenceMatrixFilterIF3_swigregister(itkScalarImageToCooccurrenceMatrixFilterIF3)

def itkScalarImageToCooccurrenceMatrixFilterIF3___New_orig__():
    """itkScalarImageToCooccurrenceMatrixFilterIF3___New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterIF3_Pointer"""
    return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3___New_orig__()

def itkScalarImageToCooccurrenceMatrixFilterIF3_cast(obj):
    """itkScalarImageToCooccurrenceMatrixFilterIF3_cast(itkLightObject obj) -> itkScalarImageToCooccurrenceMatrixFilterIF3"""
    return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_cast(obj)

class itkScalarImageToCooccurrenceMatrixFilterISS2(ITKCommonBasePython.itkProcessObject):
    """


    This class computes a co-occurence matrix (histogram) from a given
    image and a mask image if provided. Coocurrence matrces are used for
    image texture description.

    This filters creates a grey-level co-occurence matrix from a N-D
    scalar image. This is the first step in texture description a la
    Haralick. (See Haralick, R.M., K. Shanmugam and I. Dinstein. 1973.
    Textural Features for Image Classification. IEEE Transactions on
    Systems, Man and Cybernetics. SMC-3(6):610-620. See also Haralick,
    R.M. 1979. Statistical and Structural Approaches to Texture.
    Proceedings of the IEEE, 67:786-804.)

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), grey-level co-occurences are pairs of intensity
    values for a specific pixel and the pixel at that offset from the
    specified pixel. These co-occurences can provide eight-bit image of
    alternating pixel-wide white and black vertical lines would have a
    large number of (0, 255) and (255, 0) co-occurences for offset (1, 0).

    The offset (or offsets) along which the co-occurences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features, averages of features computed over
    several histograms with different offsets are generally used, instead
    of computing features from one histogram created with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multy-resulution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the co-occurence pairs in
    the given image's requested region, for a given set of offsets. That
    is, if a given offset falls outside of the requested region at a
    particular point, that co-occurrence pair will not be added to the
    matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    See:  MaskedScalarImageToCooccurrenceMatrixFilter

    See:   HistogramToTextureFeaturesFilter

    See:  ScalarImageTextureCalculator

    Zachary Pincus and Glenn Pierce

    C++ includes: itkScalarImageToCooccurrenceMatrixFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterISS2_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkScalarImageToCooccurrenceMatrixFilterISS2 self) -> itkScalarImageToCooccurrenceMatrixFilterISS2_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_Clone(self)


    def SetOffsets(self, _arg):
        """
        SetOffsets(itkScalarImageToCooccurrenceMatrixFilterISS2 self, itkVectorContainerUCO2 _arg)

        Get/Set the offset or
        offsets over which the co-occurrence pairs will be computed. Calling
        either of these methods clears the previous offsets. 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetOffsets(self, _arg)


    def GetOffsets(self):
        """GetOffsets(itkScalarImageToCooccurrenceMatrixFilterISS2 self) -> itkVectorContainerUCO2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetOffsets(self)


    def SetOffset(self, offset):
        """SetOffset(itkScalarImageToCooccurrenceMatrixFilterISS2 self, itkOffset2 offset)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetOffset(self, offset)


    def SetNumberOfBinsPerAxis(self, _arg):
        """
        SetNumberOfBinsPerAxis(itkScalarImageToCooccurrenceMatrixFilterISS2 self, unsigned int const _arg)

        Set number
        of histogram bins along each axis 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetNumberOfBinsPerAxis(self, _arg)


    def GetNumberOfBinsPerAxis(self):
        """GetNumberOfBinsPerAxis(itkScalarImageToCooccurrenceMatrixFilterISS2 self) -> unsigned int"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetNumberOfBinsPerAxis(self)


    def SetPixelValueMinMax(self, min, max):
        """
        SetPixelValueMinMax(itkScalarImageToCooccurrenceMatrixFilterISS2 self, short min, short max)

        Set the min and
        max (inclusive) pixel value that will be placed in the histogram 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetPixelValueMinMax(self, min, max)


    def GetMin(self):
        """GetMin(itkScalarImageToCooccurrenceMatrixFilterISS2 self) -> short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetMin(self)


    def GetMax(self):
        """GetMax(itkScalarImageToCooccurrenceMatrixFilterISS2 self) -> short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetMax(self)


    def SetNormalize(self, _arg):
        """
        SetNormalize(itkScalarImageToCooccurrenceMatrixFilterISS2 self, bool const _arg)

        Set the calculator to
        normalize the histogram (divide all bins by the total frequency).
        Normalization is off by default. 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetNormalize(self, _arg)


    def GetNormalize(self):
        """GetNormalize(itkScalarImageToCooccurrenceMatrixFilterISS2 self) -> bool"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetNormalize(self)


    def NormalizeOn(self):
        """NormalizeOn(itkScalarImageToCooccurrenceMatrixFilterISS2 self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_NormalizeOn(self)


    def NormalizeOff(self):
        """NormalizeOff(itkScalarImageToCooccurrenceMatrixFilterISS2 self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_NormalizeOff(self)


    def SetInput(self, image):
        """SetInput(itkScalarImageToCooccurrenceMatrixFilterISS2 self, itkImageSS2 image)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetInput(self, image)


    def GetInput(self):
        """GetInput(itkScalarImageToCooccurrenceMatrixFilterISS2 self) -> itkImageSS2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetInput(self)


    def SetMaskImage(self, image):
        """
        SetMaskImage(itkScalarImageToCooccurrenceMatrixFilterISS2 self, itkImageSS2 image)

        Method to set/get the
        mask image 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetMaskImage(self, image)


    def GetMaskImage(self):
        """GetMaskImage(itkScalarImageToCooccurrenceMatrixFilterISS2 self) -> itkImageSS2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetMaskImage(self)


    def GetOutput(self):
        """
        GetOutput(itkScalarImageToCooccurrenceMatrixFilterISS2 self) -> itkHistogramD

        method to get the
        Histogram 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetOutput(self)


    def SetInsidePixelValue(self, _arg):
        """
        SetInsidePixelValue(itkScalarImageToCooccurrenceMatrixFilterISS2 self, short const _arg)

        Set the pixel
        value of the mask that should be considered "inside" the object.
        Defaults to one. 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetInsidePixelValue(self, _arg)


    def GetInsidePixelValue(self):
        """GetInsidePixelValue(itkScalarImageToCooccurrenceMatrixFilterISS2 self) -> short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetInsidePixelValue(self)

    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterISS2

    def cast(obj):
        """cast(itkLightObject obj) -> itkScalarImageToCooccurrenceMatrixFilterISS2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterISS2

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarImageToCooccurrenceMatrixFilterISS2.Clone = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_Clone, None, itkScalarImageToCooccurrenceMatrixFilterISS2)
itkScalarImageToCooccurrenceMatrixFilterISS2.SetOffsets = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetOffsets, None, itkScalarImageToCooccurrenceMatrixFilterISS2)
itkScalarImageToCooccurrenceMatrixFilterISS2.GetOffsets = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetOffsets, None, itkScalarImageToCooccurrenceMatrixFilterISS2)
itkScalarImageToCooccurrenceMatrixFilterISS2.SetOffset = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetOffset, None, itkScalarImageToCooccurrenceMatrixFilterISS2)
itkScalarImageToCooccurrenceMatrixFilterISS2.SetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetNumberOfBinsPerAxis, None, itkScalarImageToCooccurrenceMatrixFilterISS2)
itkScalarImageToCooccurrenceMatrixFilterISS2.GetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetNumberOfBinsPerAxis, None, itkScalarImageToCooccurrenceMatrixFilterISS2)
itkScalarImageToCooccurrenceMatrixFilterISS2.SetPixelValueMinMax = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetPixelValueMinMax, None, itkScalarImageToCooccurrenceMatrixFilterISS2)
itkScalarImageToCooccurrenceMatrixFilterISS2.GetMin = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetMin, None, itkScalarImageToCooccurrenceMatrixFilterISS2)
itkScalarImageToCooccurrenceMatrixFilterISS2.GetMax = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetMax, None, itkScalarImageToCooccurrenceMatrixFilterISS2)
itkScalarImageToCooccurrenceMatrixFilterISS2.SetNormalize = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetNormalize, None, itkScalarImageToCooccurrenceMatrixFilterISS2)
itkScalarImageToCooccurrenceMatrixFilterISS2.GetNormalize = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetNormalize, None, itkScalarImageToCooccurrenceMatrixFilterISS2)
itkScalarImageToCooccurrenceMatrixFilterISS2.NormalizeOn = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_NormalizeOn, None, itkScalarImageToCooccurrenceMatrixFilterISS2)
itkScalarImageToCooccurrenceMatrixFilterISS2.NormalizeOff = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_NormalizeOff, None, itkScalarImageToCooccurrenceMatrixFilterISS2)
itkScalarImageToCooccurrenceMatrixFilterISS2.SetInput = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetInput, None, itkScalarImageToCooccurrenceMatrixFilterISS2)
itkScalarImageToCooccurrenceMatrixFilterISS2.GetInput = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetInput, None, itkScalarImageToCooccurrenceMatrixFilterISS2)
itkScalarImageToCooccurrenceMatrixFilterISS2.SetMaskImage = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetMaskImage, None, itkScalarImageToCooccurrenceMatrixFilterISS2)
itkScalarImageToCooccurrenceMatrixFilterISS2.GetMaskImage = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetMaskImage, None, itkScalarImageToCooccurrenceMatrixFilterISS2)
itkScalarImageToCooccurrenceMatrixFilterISS2.GetOutput = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetOutput, None, itkScalarImageToCooccurrenceMatrixFilterISS2)
itkScalarImageToCooccurrenceMatrixFilterISS2.SetInsidePixelValue = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetInsidePixelValue, None, itkScalarImageToCooccurrenceMatrixFilterISS2)
itkScalarImageToCooccurrenceMatrixFilterISS2.GetInsidePixelValue = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetInsidePixelValue, None, itkScalarImageToCooccurrenceMatrixFilterISS2)
itkScalarImageToCooccurrenceMatrixFilterISS2_swigregister = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_swigregister
itkScalarImageToCooccurrenceMatrixFilterISS2_swigregister(itkScalarImageToCooccurrenceMatrixFilterISS2)

def itkScalarImageToCooccurrenceMatrixFilterISS2___New_orig__():
    """itkScalarImageToCooccurrenceMatrixFilterISS2___New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterISS2_Pointer"""
    return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2___New_orig__()

def itkScalarImageToCooccurrenceMatrixFilterISS2_cast(obj):
    """itkScalarImageToCooccurrenceMatrixFilterISS2_cast(itkLightObject obj) -> itkScalarImageToCooccurrenceMatrixFilterISS2"""
    return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_cast(obj)

class itkScalarImageToCooccurrenceMatrixFilterISS3(ITKCommonBasePython.itkProcessObject):
    """


    This class computes a co-occurence matrix (histogram) from a given
    image and a mask image if provided. Coocurrence matrces are used for
    image texture description.

    This filters creates a grey-level co-occurence matrix from a N-D
    scalar image. This is the first step in texture description a la
    Haralick. (See Haralick, R.M., K. Shanmugam and I. Dinstein. 1973.
    Textural Features for Image Classification. IEEE Transactions on
    Systems, Man and Cybernetics. SMC-3(6):610-620. See also Haralick,
    R.M. 1979. Statistical and Structural Approaches to Texture.
    Proceedings of the IEEE, 67:786-804.)

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), grey-level co-occurences are pairs of intensity
    values for a specific pixel and the pixel at that offset from the
    specified pixel. These co-occurences can provide eight-bit image of
    alternating pixel-wide white and black vertical lines would have a
    large number of (0, 255) and (255, 0) co-occurences for offset (1, 0).

    The offset (or offsets) along which the co-occurences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features, averages of features computed over
    several histograms with different offsets are generally used, instead
    of computing features from one histogram created with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multy-resulution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the co-occurence pairs in
    the given image's requested region, for a given set of offsets. That
    is, if a given offset falls outside of the requested region at a
    particular point, that co-occurrence pair will not be added to the
    matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    See:  MaskedScalarImageToCooccurrenceMatrixFilter

    See:   HistogramToTextureFeaturesFilter

    See:  ScalarImageTextureCalculator

    Zachary Pincus and Glenn Pierce

    C++ includes: itkScalarImageToCooccurrenceMatrixFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterISS3_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkScalarImageToCooccurrenceMatrixFilterISS3 self) -> itkScalarImageToCooccurrenceMatrixFilterISS3_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_Clone(self)


    def SetOffsets(self, _arg):
        """
        SetOffsets(itkScalarImageToCooccurrenceMatrixFilterISS3 self, itkVectorContainerUCO3 _arg)

        Get/Set the offset or
        offsets over which the co-occurrence pairs will be computed. Calling
        either of these methods clears the previous offsets. 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetOffsets(self, _arg)


    def GetOffsets(self):
        """GetOffsets(itkScalarImageToCooccurrenceMatrixFilterISS3 self) -> itkVectorContainerUCO3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetOffsets(self)


    def SetOffset(self, offset):
        """SetOffset(itkScalarImageToCooccurrenceMatrixFilterISS3 self, itkOffset3 offset)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetOffset(self, offset)


    def SetNumberOfBinsPerAxis(self, _arg):
        """
        SetNumberOfBinsPerAxis(itkScalarImageToCooccurrenceMatrixFilterISS3 self, unsigned int const _arg)

        Set number
        of histogram bins along each axis 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetNumberOfBinsPerAxis(self, _arg)


    def GetNumberOfBinsPerAxis(self):
        """GetNumberOfBinsPerAxis(itkScalarImageToCooccurrenceMatrixFilterISS3 self) -> unsigned int"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetNumberOfBinsPerAxis(self)


    def SetPixelValueMinMax(self, min, max):
        """
        SetPixelValueMinMax(itkScalarImageToCooccurrenceMatrixFilterISS3 self, short min, short max)

        Set the min and
        max (inclusive) pixel value that will be placed in the histogram 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetPixelValueMinMax(self, min, max)


    def GetMin(self):
        """GetMin(itkScalarImageToCooccurrenceMatrixFilterISS3 self) -> short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetMin(self)


    def GetMax(self):
        """GetMax(itkScalarImageToCooccurrenceMatrixFilterISS3 self) -> short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetMax(self)


    def SetNormalize(self, _arg):
        """
        SetNormalize(itkScalarImageToCooccurrenceMatrixFilterISS3 self, bool const _arg)

        Set the calculator to
        normalize the histogram (divide all bins by the total frequency).
        Normalization is off by default. 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetNormalize(self, _arg)


    def GetNormalize(self):
        """GetNormalize(itkScalarImageToCooccurrenceMatrixFilterISS3 self) -> bool"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetNormalize(self)


    def NormalizeOn(self):
        """NormalizeOn(itkScalarImageToCooccurrenceMatrixFilterISS3 self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_NormalizeOn(self)


    def NormalizeOff(self):
        """NormalizeOff(itkScalarImageToCooccurrenceMatrixFilterISS3 self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_NormalizeOff(self)


    def SetInput(self, image):
        """SetInput(itkScalarImageToCooccurrenceMatrixFilterISS3 self, itkImageSS3 image)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetInput(self, image)


    def GetInput(self):
        """GetInput(itkScalarImageToCooccurrenceMatrixFilterISS3 self) -> itkImageSS3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetInput(self)


    def SetMaskImage(self, image):
        """
        SetMaskImage(itkScalarImageToCooccurrenceMatrixFilterISS3 self, itkImageSS3 image)

        Method to set/get the
        mask image 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetMaskImage(self, image)


    def GetMaskImage(self):
        """GetMaskImage(itkScalarImageToCooccurrenceMatrixFilterISS3 self) -> itkImageSS3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetMaskImage(self)


    def GetOutput(self):
        """
        GetOutput(itkScalarImageToCooccurrenceMatrixFilterISS3 self) -> itkHistogramD

        method to get the
        Histogram 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetOutput(self)


    def SetInsidePixelValue(self, _arg):
        """
        SetInsidePixelValue(itkScalarImageToCooccurrenceMatrixFilterISS3 self, short const _arg)

        Set the pixel
        value of the mask that should be considered "inside" the object.
        Defaults to one. 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetInsidePixelValue(self, _arg)


    def GetInsidePixelValue(self):
        """GetInsidePixelValue(itkScalarImageToCooccurrenceMatrixFilterISS3 self) -> short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetInsidePixelValue(self)

    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterISS3

    def cast(obj):
        """cast(itkLightObject obj) -> itkScalarImageToCooccurrenceMatrixFilterISS3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterISS3

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarImageToCooccurrenceMatrixFilterISS3.Clone = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_Clone, None, itkScalarImageToCooccurrenceMatrixFilterISS3)
itkScalarImageToCooccurrenceMatrixFilterISS3.SetOffsets = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetOffsets, None, itkScalarImageToCooccurrenceMatrixFilterISS3)
itkScalarImageToCooccurrenceMatrixFilterISS3.GetOffsets = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetOffsets, None, itkScalarImageToCooccurrenceMatrixFilterISS3)
itkScalarImageToCooccurrenceMatrixFilterISS3.SetOffset = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetOffset, None, itkScalarImageToCooccurrenceMatrixFilterISS3)
itkScalarImageToCooccurrenceMatrixFilterISS3.SetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetNumberOfBinsPerAxis, None, itkScalarImageToCooccurrenceMatrixFilterISS3)
itkScalarImageToCooccurrenceMatrixFilterISS3.GetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetNumberOfBinsPerAxis, None, itkScalarImageToCooccurrenceMatrixFilterISS3)
itkScalarImageToCooccurrenceMatrixFilterISS3.SetPixelValueMinMax = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetPixelValueMinMax, None, itkScalarImageToCooccurrenceMatrixFilterISS3)
itkScalarImageToCooccurrenceMatrixFilterISS3.GetMin = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetMin, None, itkScalarImageToCooccurrenceMatrixFilterISS3)
itkScalarImageToCooccurrenceMatrixFilterISS3.GetMax = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetMax, None, itkScalarImageToCooccurrenceMatrixFilterISS3)
itkScalarImageToCooccurrenceMatrixFilterISS3.SetNormalize = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetNormalize, None, itkScalarImageToCooccurrenceMatrixFilterISS3)
itkScalarImageToCooccurrenceMatrixFilterISS3.GetNormalize = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetNormalize, None, itkScalarImageToCooccurrenceMatrixFilterISS3)
itkScalarImageToCooccurrenceMatrixFilterISS3.NormalizeOn = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_NormalizeOn, None, itkScalarImageToCooccurrenceMatrixFilterISS3)
itkScalarImageToCooccurrenceMatrixFilterISS3.NormalizeOff = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_NormalizeOff, None, itkScalarImageToCooccurrenceMatrixFilterISS3)
itkScalarImageToCooccurrenceMatrixFilterISS3.SetInput = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetInput, None, itkScalarImageToCooccurrenceMatrixFilterISS3)
itkScalarImageToCooccurrenceMatrixFilterISS3.GetInput = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetInput, None, itkScalarImageToCooccurrenceMatrixFilterISS3)
itkScalarImageToCooccurrenceMatrixFilterISS3.SetMaskImage = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetMaskImage, None, itkScalarImageToCooccurrenceMatrixFilterISS3)
itkScalarImageToCooccurrenceMatrixFilterISS3.GetMaskImage = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetMaskImage, None, itkScalarImageToCooccurrenceMatrixFilterISS3)
itkScalarImageToCooccurrenceMatrixFilterISS3.GetOutput = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetOutput, None, itkScalarImageToCooccurrenceMatrixFilterISS3)
itkScalarImageToCooccurrenceMatrixFilterISS3.SetInsidePixelValue = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetInsidePixelValue, None, itkScalarImageToCooccurrenceMatrixFilterISS3)
itkScalarImageToCooccurrenceMatrixFilterISS3.GetInsidePixelValue = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetInsidePixelValue, None, itkScalarImageToCooccurrenceMatrixFilterISS3)
itkScalarImageToCooccurrenceMatrixFilterISS3_swigregister = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_swigregister
itkScalarImageToCooccurrenceMatrixFilterISS3_swigregister(itkScalarImageToCooccurrenceMatrixFilterISS3)

def itkScalarImageToCooccurrenceMatrixFilterISS3___New_orig__():
    """itkScalarImageToCooccurrenceMatrixFilterISS3___New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterISS3_Pointer"""
    return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3___New_orig__()

def itkScalarImageToCooccurrenceMatrixFilterISS3_cast(obj):
    """itkScalarImageToCooccurrenceMatrixFilterISS3_cast(itkLightObject obj) -> itkScalarImageToCooccurrenceMatrixFilterISS3"""
    return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_cast(obj)

class itkScalarImageToCooccurrenceMatrixFilterIUC2(ITKCommonBasePython.itkProcessObject):
    """


    This class computes a co-occurence matrix (histogram) from a given
    image and a mask image if provided. Coocurrence matrces are used for
    image texture description.

    This filters creates a grey-level co-occurence matrix from a N-D
    scalar image. This is the first step in texture description a la
    Haralick. (See Haralick, R.M., K. Shanmugam and I. Dinstein. 1973.
    Textural Features for Image Classification. IEEE Transactions on
    Systems, Man and Cybernetics. SMC-3(6):610-620. See also Haralick,
    R.M. 1979. Statistical and Structural Approaches to Texture.
    Proceedings of the IEEE, 67:786-804.)

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), grey-level co-occurences are pairs of intensity
    values for a specific pixel and the pixel at that offset from the
    specified pixel. These co-occurences can provide eight-bit image of
    alternating pixel-wide white and black vertical lines would have a
    large number of (0, 255) and (255, 0) co-occurences for offset (1, 0).

    The offset (or offsets) along which the co-occurences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features, averages of features computed over
    several histograms with different offsets are generally used, instead
    of computing features from one histogram created with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multy-resulution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the co-occurence pairs in
    the given image's requested region, for a given set of offsets. That
    is, if a given offset falls outside of the requested region at a
    particular point, that co-occurrence pair will not be added to the
    matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    See:  MaskedScalarImageToCooccurrenceMatrixFilter

    See:   HistogramToTextureFeaturesFilter

    See:  ScalarImageTextureCalculator

    Zachary Pincus and Glenn Pierce

    C++ includes: itkScalarImageToCooccurrenceMatrixFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterIUC2_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkScalarImageToCooccurrenceMatrixFilterIUC2 self) -> itkScalarImageToCooccurrenceMatrixFilterIUC2_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_Clone(self)


    def SetOffsets(self, _arg):
        """
        SetOffsets(itkScalarImageToCooccurrenceMatrixFilterIUC2 self, itkVectorContainerUCO2 _arg)

        Get/Set the offset or
        offsets over which the co-occurrence pairs will be computed. Calling
        either of these methods clears the previous offsets. 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetOffsets(self, _arg)


    def GetOffsets(self):
        """GetOffsets(itkScalarImageToCooccurrenceMatrixFilterIUC2 self) -> itkVectorContainerUCO2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetOffsets(self)


    def SetOffset(self, offset):
        """SetOffset(itkScalarImageToCooccurrenceMatrixFilterIUC2 self, itkOffset2 offset)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetOffset(self, offset)


    def SetNumberOfBinsPerAxis(self, _arg):
        """
        SetNumberOfBinsPerAxis(itkScalarImageToCooccurrenceMatrixFilterIUC2 self, unsigned int const _arg)

        Set number
        of histogram bins along each axis 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetNumberOfBinsPerAxis(self, _arg)


    def GetNumberOfBinsPerAxis(self):
        """GetNumberOfBinsPerAxis(itkScalarImageToCooccurrenceMatrixFilterIUC2 self) -> unsigned int"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetNumberOfBinsPerAxis(self)


    def SetPixelValueMinMax(self, min, max):
        """
        SetPixelValueMinMax(itkScalarImageToCooccurrenceMatrixFilterIUC2 self, unsigned char min, unsigned char max)

        Set the min and
        max (inclusive) pixel value that will be placed in the histogram 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetPixelValueMinMax(self, min, max)


    def GetMin(self):
        """GetMin(itkScalarImageToCooccurrenceMatrixFilterIUC2 self) -> unsigned char"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetMin(self)


    def GetMax(self):
        """GetMax(itkScalarImageToCooccurrenceMatrixFilterIUC2 self) -> unsigned char"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetMax(self)


    def SetNormalize(self, _arg):
        """
        SetNormalize(itkScalarImageToCooccurrenceMatrixFilterIUC2 self, bool const _arg)

        Set the calculator to
        normalize the histogram (divide all bins by the total frequency).
        Normalization is off by default. 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetNormalize(self, _arg)


    def GetNormalize(self):
        """GetNormalize(itkScalarImageToCooccurrenceMatrixFilterIUC2 self) -> bool"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetNormalize(self)


    def NormalizeOn(self):
        """NormalizeOn(itkScalarImageToCooccurrenceMatrixFilterIUC2 self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_NormalizeOn(self)


    def NormalizeOff(self):
        """NormalizeOff(itkScalarImageToCooccurrenceMatrixFilterIUC2 self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_NormalizeOff(self)


    def SetInput(self, image):
        """SetInput(itkScalarImageToCooccurrenceMatrixFilterIUC2 self, itkImageUC2 image)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetInput(self, image)


    def GetInput(self):
        """GetInput(itkScalarImageToCooccurrenceMatrixFilterIUC2 self) -> itkImageUC2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetInput(self)


    def SetMaskImage(self, image):
        """
        SetMaskImage(itkScalarImageToCooccurrenceMatrixFilterIUC2 self, itkImageUC2 image)

        Method to set/get the
        mask image 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetMaskImage(self, image)


    def GetMaskImage(self):
        """GetMaskImage(itkScalarImageToCooccurrenceMatrixFilterIUC2 self) -> itkImageUC2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetMaskImage(self)


    def GetOutput(self):
        """
        GetOutput(itkScalarImageToCooccurrenceMatrixFilterIUC2 self) -> itkHistogramD

        method to get the
        Histogram 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetOutput(self)


    def SetInsidePixelValue(self, _arg):
        """
        SetInsidePixelValue(itkScalarImageToCooccurrenceMatrixFilterIUC2 self, unsigned char const _arg)

        Set the pixel
        value of the mask that should be considered "inside" the object.
        Defaults to one. 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetInsidePixelValue(self, _arg)


    def GetInsidePixelValue(self):
        """GetInsidePixelValue(itkScalarImageToCooccurrenceMatrixFilterIUC2 self) -> unsigned char"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetInsidePixelValue(self)

    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIUC2

    def cast(obj):
        """cast(itkLightObject obj) -> itkScalarImageToCooccurrenceMatrixFilterIUC2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIUC2

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarImageToCooccurrenceMatrixFilterIUC2.Clone = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_Clone, None, itkScalarImageToCooccurrenceMatrixFilterIUC2)
itkScalarImageToCooccurrenceMatrixFilterIUC2.SetOffsets = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetOffsets, None, itkScalarImageToCooccurrenceMatrixFilterIUC2)
itkScalarImageToCooccurrenceMatrixFilterIUC2.GetOffsets = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetOffsets, None, itkScalarImageToCooccurrenceMatrixFilterIUC2)
itkScalarImageToCooccurrenceMatrixFilterIUC2.SetOffset = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetOffset, None, itkScalarImageToCooccurrenceMatrixFilterIUC2)
itkScalarImageToCooccurrenceMatrixFilterIUC2.SetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetNumberOfBinsPerAxis, None, itkScalarImageToCooccurrenceMatrixFilterIUC2)
itkScalarImageToCooccurrenceMatrixFilterIUC2.GetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetNumberOfBinsPerAxis, None, itkScalarImageToCooccurrenceMatrixFilterIUC2)
itkScalarImageToCooccurrenceMatrixFilterIUC2.SetPixelValueMinMax = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetPixelValueMinMax, None, itkScalarImageToCooccurrenceMatrixFilterIUC2)
itkScalarImageToCooccurrenceMatrixFilterIUC2.GetMin = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetMin, None, itkScalarImageToCooccurrenceMatrixFilterIUC2)
itkScalarImageToCooccurrenceMatrixFilterIUC2.GetMax = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetMax, None, itkScalarImageToCooccurrenceMatrixFilterIUC2)
itkScalarImageToCooccurrenceMatrixFilterIUC2.SetNormalize = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetNormalize, None, itkScalarImageToCooccurrenceMatrixFilterIUC2)
itkScalarImageToCooccurrenceMatrixFilterIUC2.GetNormalize = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetNormalize, None, itkScalarImageToCooccurrenceMatrixFilterIUC2)
itkScalarImageToCooccurrenceMatrixFilterIUC2.NormalizeOn = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_NormalizeOn, None, itkScalarImageToCooccurrenceMatrixFilterIUC2)
itkScalarImageToCooccurrenceMatrixFilterIUC2.NormalizeOff = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_NormalizeOff, None, itkScalarImageToCooccurrenceMatrixFilterIUC2)
itkScalarImageToCooccurrenceMatrixFilterIUC2.SetInput = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetInput, None, itkScalarImageToCooccurrenceMatrixFilterIUC2)
itkScalarImageToCooccurrenceMatrixFilterIUC2.GetInput = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetInput, None, itkScalarImageToCooccurrenceMatrixFilterIUC2)
itkScalarImageToCooccurrenceMatrixFilterIUC2.SetMaskImage = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetMaskImage, None, itkScalarImageToCooccurrenceMatrixFilterIUC2)
itkScalarImageToCooccurrenceMatrixFilterIUC2.GetMaskImage = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetMaskImage, None, itkScalarImageToCooccurrenceMatrixFilterIUC2)
itkScalarImageToCooccurrenceMatrixFilterIUC2.GetOutput = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetOutput, None, itkScalarImageToCooccurrenceMatrixFilterIUC2)
itkScalarImageToCooccurrenceMatrixFilterIUC2.SetInsidePixelValue = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetInsidePixelValue, None, itkScalarImageToCooccurrenceMatrixFilterIUC2)
itkScalarImageToCooccurrenceMatrixFilterIUC2.GetInsidePixelValue = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetInsidePixelValue, None, itkScalarImageToCooccurrenceMatrixFilterIUC2)
itkScalarImageToCooccurrenceMatrixFilterIUC2_swigregister = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_swigregister
itkScalarImageToCooccurrenceMatrixFilterIUC2_swigregister(itkScalarImageToCooccurrenceMatrixFilterIUC2)

def itkScalarImageToCooccurrenceMatrixFilterIUC2___New_orig__():
    """itkScalarImageToCooccurrenceMatrixFilterIUC2___New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterIUC2_Pointer"""
    return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2___New_orig__()

def itkScalarImageToCooccurrenceMatrixFilterIUC2_cast(obj):
    """itkScalarImageToCooccurrenceMatrixFilterIUC2_cast(itkLightObject obj) -> itkScalarImageToCooccurrenceMatrixFilterIUC2"""
    return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_cast(obj)

class itkScalarImageToCooccurrenceMatrixFilterIUC3(ITKCommonBasePython.itkProcessObject):
    """


    This class computes a co-occurence matrix (histogram) from a given
    image and a mask image if provided. Coocurrence matrces are used for
    image texture description.

    This filters creates a grey-level co-occurence matrix from a N-D
    scalar image. This is the first step in texture description a la
    Haralick. (See Haralick, R.M., K. Shanmugam and I. Dinstein. 1973.
    Textural Features for Image Classification. IEEE Transactions on
    Systems, Man and Cybernetics. SMC-3(6):610-620. See also Haralick,
    R.M. 1979. Statistical and Structural Approaches to Texture.
    Proceedings of the IEEE, 67:786-804.)

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), grey-level co-occurences are pairs of intensity
    values for a specific pixel and the pixel at that offset from the
    specified pixel. These co-occurences can provide eight-bit image of
    alternating pixel-wide white and black vertical lines would have a
    large number of (0, 255) and (255, 0) co-occurences for offset (1, 0).

    The offset (or offsets) along which the co-occurences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features, averages of features computed over
    several histograms with different offsets are generally used, instead
    of computing features from one histogram created with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multy-resulution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the co-occurence pairs in
    the given image's requested region, for a given set of offsets. That
    is, if a given offset falls outside of the requested region at a
    particular point, that co-occurrence pair will not be added to the
    matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    See:  MaskedScalarImageToCooccurrenceMatrixFilter

    See:   HistogramToTextureFeaturesFilter

    See:  ScalarImageTextureCalculator

    Zachary Pincus and Glenn Pierce

    C++ includes: itkScalarImageToCooccurrenceMatrixFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterIUC3_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkScalarImageToCooccurrenceMatrixFilterIUC3 self) -> itkScalarImageToCooccurrenceMatrixFilterIUC3_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_Clone(self)


    def SetOffsets(self, _arg):
        """
        SetOffsets(itkScalarImageToCooccurrenceMatrixFilterIUC3 self, itkVectorContainerUCO3 _arg)

        Get/Set the offset or
        offsets over which the co-occurrence pairs will be computed. Calling
        either of these methods clears the previous offsets. 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetOffsets(self, _arg)


    def GetOffsets(self):
        """GetOffsets(itkScalarImageToCooccurrenceMatrixFilterIUC3 self) -> itkVectorContainerUCO3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetOffsets(self)


    def SetOffset(self, offset):
        """SetOffset(itkScalarImageToCooccurrenceMatrixFilterIUC3 self, itkOffset3 offset)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetOffset(self, offset)


    def SetNumberOfBinsPerAxis(self, _arg):
        """
        SetNumberOfBinsPerAxis(itkScalarImageToCooccurrenceMatrixFilterIUC3 self, unsigned int const _arg)

        Set number
        of histogram bins along each axis 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetNumberOfBinsPerAxis(self, _arg)


    def GetNumberOfBinsPerAxis(self):
        """GetNumberOfBinsPerAxis(itkScalarImageToCooccurrenceMatrixFilterIUC3 self) -> unsigned int"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetNumberOfBinsPerAxis(self)


    def SetPixelValueMinMax(self, min, max):
        """
        SetPixelValueMinMax(itkScalarImageToCooccurrenceMatrixFilterIUC3 self, unsigned char min, unsigned char max)

        Set the min and
        max (inclusive) pixel value that will be placed in the histogram 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetPixelValueMinMax(self, min, max)


    def GetMin(self):
        """GetMin(itkScalarImageToCooccurrenceMatrixFilterIUC3 self) -> unsigned char"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetMin(self)


    def GetMax(self):
        """GetMax(itkScalarImageToCooccurrenceMatrixFilterIUC3 self) -> unsigned char"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetMax(self)


    def SetNormalize(self, _arg):
        """
        SetNormalize(itkScalarImageToCooccurrenceMatrixFilterIUC3 self, bool const _arg)

        Set the calculator to
        normalize the histogram (divide all bins by the total frequency).
        Normalization is off by default. 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetNormalize(self, _arg)


    def GetNormalize(self):
        """GetNormalize(itkScalarImageToCooccurrenceMatrixFilterIUC3 self) -> bool"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetNormalize(self)


    def NormalizeOn(self):
        """NormalizeOn(itkScalarImageToCooccurrenceMatrixFilterIUC3 self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_NormalizeOn(self)


    def NormalizeOff(self):
        """NormalizeOff(itkScalarImageToCooccurrenceMatrixFilterIUC3 self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_NormalizeOff(self)


    def SetInput(self, image):
        """SetInput(itkScalarImageToCooccurrenceMatrixFilterIUC3 self, itkImageUC3 image)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetInput(self, image)


    def GetInput(self):
        """GetInput(itkScalarImageToCooccurrenceMatrixFilterIUC3 self) -> itkImageUC3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetInput(self)


    def SetMaskImage(self, image):
        """
        SetMaskImage(itkScalarImageToCooccurrenceMatrixFilterIUC3 self, itkImageUC3 image)

        Method to set/get the
        mask image 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetMaskImage(self, image)


    def GetMaskImage(self):
        """GetMaskImage(itkScalarImageToCooccurrenceMatrixFilterIUC3 self) -> itkImageUC3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetMaskImage(self)


    def GetOutput(self):
        """
        GetOutput(itkScalarImageToCooccurrenceMatrixFilterIUC3 self) -> itkHistogramD

        method to get the
        Histogram 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetOutput(self)


    def SetInsidePixelValue(self, _arg):
        """
        SetInsidePixelValue(itkScalarImageToCooccurrenceMatrixFilterIUC3 self, unsigned char const _arg)

        Set the pixel
        value of the mask that should be considered "inside" the object.
        Defaults to one. 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetInsidePixelValue(self, _arg)


    def GetInsidePixelValue(self):
        """GetInsidePixelValue(itkScalarImageToCooccurrenceMatrixFilterIUC3 self) -> unsigned char"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetInsidePixelValue(self)

    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIUC3

    def cast(obj):
        """cast(itkLightObject obj) -> itkScalarImageToCooccurrenceMatrixFilterIUC3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIUC3

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarImageToCooccurrenceMatrixFilterIUC3.Clone = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_Clone, None, itkScalarImageToCooccurrenceMatrixFilterIUC3)
itkScalarImageToCooccurrenceMatrixFilterIUC3.SetOffsets = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetOffsets, None, itkScalarImageToCooccurrenceMatrixFilterIUC3)
itkScalarImageToCooccurrenceMatrixFilterIUC3.GetOffsets = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetOffsets, None, itkScalarImageToCooccurrenceMatrixFilterIUC3)
itkScalarImageToCooccurrenceMatrixFilterIUC3.SetOffset = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetOffset, None, itkScalarImageToCooccurrenceMatrixFilterIUC3)
itkScalarImageToCooccurrenceMatrixFilterIUC3.SetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetNumberOfBinsPerAxis, None, itkScalarImageToCooccurrenceMatrixFilterIUC3)
itkScalarImageToCooccurrenceMatrixFilterIUC3.GetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetNumberOfBinsPerAxis, None, itkScalarImageToCooccurrenceMatrixFilterIUC3)
itkScalarImageToCooccurrenceMatrixFilterIUC3.SetPixelValueMinMax = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetPixelValueMinMax, None, itkScalarImageToCooccurrenceMatrixFilterIUC3)
itkScalarImageToCooccurrenceMatrixFilterIUC3.GetMin = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetMin, None, itkScalarImageToCooccurrenceMatrixFilterIUC3)
itkScalarImageToCooccurrenceMatrixFilterIUC3.GetMax = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetMax, None, itkScalarImageToCooccurrenceMatrixFilterIUC3)
itkScalarImageToCooccurrenceMatrixFilterIUC3.SetNormalize = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetNormalize, None, itkScalarImageToCooccurrenceMatrixFilterIUC3)
itkScalarImageToCooccurrenceMatrixFilterIUC3.GetNormalize = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetNormalize, None, itkScalarImageToCooccurrenceMatrixFilterIUC3)
itkScalarImageToCooccurrenceMatrixFilterIUC3.NormalizeOn = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_NormalizeOn, None, itkScalarImageToCooccurrenceMatrixFilterIUC3)
itkScalarImageToCooccurrenceMatrixFilterIUC3.NormalizeOff = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_NormalizeOff, None, itkScalarImageToCooccurrenceMatrixFilterIUC3)
itkScalarImageToCooccurrenceMatrixFilterIUC3.SetInput = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetInput, None, itkScalarImageToCooccurrenceMatrixFilterIUC3)
itkScalarImageToCooccurrenceMatrixFilterIUC3.GetInput = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetInput, None, itkScalarImageToCooccurrenceMatrixFilterIUC3)
itkScalarImageToCooccurrenceMatrixFilterIUC3.SetMaskImage = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetMaskImage, None, itkScalarImageToCooccurrenceMatrixFilterIUC3)
itkScalarImageToCooccurrenceMatrixFilterIUC3.GetMaskImage = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetMaskImage, None, itkScalarImageToCooccurrenceMatrixFilterIUC3)
itkScalarImageToCooccurrenceMatrixFilterIUC3.GetOutput = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetOutput, None, itkScalarImageToCooccurrenceMatrixFilterIUC3)
itkScalarImageToCooccurrenceMatrixFilterIUC3.SetInsidePixelValue = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetInsidePixelValue, None, itkScalarImageToCooccurrenceMatrixFilterIUC3)
itkScalarImageToCooccurrenceMatrixFilterIUC3.GetInsidePixelValue = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetInsidePixelValue, None, itkScalarImageToCooccurrenceMatrixFilterIUC3)
itkScalarImageToCooccurrenceMatrixFilterIUC3_swigregister = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_swigregister
itkScalarImageToCooccurrenceMatrixFilterIUC3_swigregister(itkScalarImageToCooccurrenceMatrixFilterIUC3)

def itkScalarImageToCooccurrenceMatrixFilterIUC3___New_orig__():
    """itkScalarImageToCooccurrenceMatrixFilterIUC3___New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterIUC3_Pointer"""
    return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3___New_orig__()

def itkScalarImageToCooccurrenceMatrixFilterIUC3_cast(obj):
    """itkScalarImageToCooccurrenceMatrixFilterIUC3_cast(itkLightObject obj) -> itkScalarImageToCooccurrenceMatrixFilterIUC3"""
    return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_cast(obj)

class itkScalarImageToCooccurrenceMatrixFilterIUS2(ITKCommonBasePython.itkProcessObject):
    """


    This class computes a co-occurence matrix (histogram) from a given
    image and a mask image if provided. Coocurrence matrces are used for
    image texture description.

    This filters creates a grey-level co-occurence matrix from a N-D
    scalar image. This is the first step in texture description a la
    Haralick. (See Haralick, R.M., K. Shanmugam and I. Dinstein. 1973.
    Textural Features for Image Classification. IEEE Transactions on
    Systems, Man and Cybernetics. SMC-3(6):610-620. See also Haralick,
    R.M. 1979. Statistical and Structural Approaches to Texture.
    Proceedings of the IEEE, 67:786-804.)

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), grey-level co-occurences are pairs of intensity
    values for a specific pixel and the pixel at that offset from the
    specified pixel. These co-occurences can provide eight-bit image of
    alternating pixel-wide white and black vertical lines would have a
    large number of (0, 255) and (255, 0) co-occurences for offset (1, 0).

    The offset (or offsets) along which the co-occurences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features, averages of features computed over
    several histograms with different offsets are generally used, instead
    of computing features from one histogram created with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multy-resulution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the co-occurence pairs in
    the given image's requested region, for a given set of offsets. That
    is, if a given offset falls outside of the requested region at a
    particular point, that co-occurrence pair will not be added to the
    matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    See:  MaskedScalarImageToCooccurrenceMatrixFilter

    See:   HistogramToTextureFeaturesFilter

    See:  ScalarImageTextureCalculator

    Zachary Pincus and Glenn Pierce

    C++ includes: itkScalarImageToCooccurrenceMatrixFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterIUS2_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkScalarImageToCooccurrenceMatrixFilterIUS2 self) -> itkScalarImageToCooccurrenceMatrixFilterIUS2_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_Clone(self)


    def SetOffsets(self, _arg):
        """
        SetOffsets(itkScalarImageToCooccurrenceMatrixFilterIUS2 self, itkVectorContainerUCO2 _arg)

        Get/Set the offset or
        offsets over which the co-occurrence pairs will be computed. Calling
        either of these methods clears the previous offsets. 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetOffsets(self, _arg)


    def GetOffsets(self):
        """GetOffsets(itkScalarImageToCooccurrenceMatrixFilterIUS2 self) -> itkVectorContainerUCO2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetOffsets(self)


    def SetOffset(self, offset):
        """SetOffset(itkScalarImageToCooccurrenceMatrixFilterIUS2 self, itkOffset2 offset)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetOffset(self, offset)


    def SetNumberOfBinsPerAxis(self, _arg):
        """
        SetNumberOfBinsPerAxis(itkScalarImageToCooccurrenceMatrixFilterIUS2 self, unsigned int const _arg)

        Set number
        of histogram bins along each axis 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetNumberOfBinsPerAxis(self, _arg)


    def GetNumberOfBinsPerAxis(self):
        """GetNumberOfBinsPerAxis(itkScalarImageToCooccurrenceMatrixFilterIUS2 self) -> unsigned int"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetNumberOfBinsPerAxis(self)


    def SetPixelValueMinMax(self, min, max):
        """
        SetPixelValueMinMax(itkScalarImageToCooccurrenceMatrixFilterIUS2 self, unsigned short min, unsigned short max)

        Set the min and
        max (inclusive) pixel value that will be placed in the histogram 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetPixelValueMinMax(self, min, max)


    def GetMin(self):
        """GetMin(itkScalarImageToCooccurrenceMatrixFilterIUS2 self) -> unsigned short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetMin(self)


    def GetMax(self):
        """GetMax(itkScalarImageToCooccurrenceMatrixFilterIUS2 self) -> unsigned short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetMax(self)


    def SetNormalize(self, _arg):
        """
        SetNormalize(itkScalarImageToCooccurrenceMatrixFilterIUS2 self, bool const _arg)

        Set the calculator to
        normalize the histogram (divide all bins by the total frequency).
        Normalization is off by default. 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetNormalize(self, _arg)


    def GetNormalize(self):
        """GetNormalize(itkScalarImageToCooccurrenceMatrixFilterIUS2 self) -> bool"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetNormalize(self)


    def NormalizeOn(self):
        """NormalizeOn(itkScalarImageToCooccurrenceMatrixFilterIUS2 self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_NormalizeOn(self)


    def NormalizeOff(self):
        """NormalizeOff(itkScalarImageToCooccurrenceMatrixFilterIUS2 self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_NormalizeOff(self)


    def SetInput(self, image):
        """SetInput(itkScalarImageToCooccurrenceMatrixFilterIUS2 self, itkImageUS2 image)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetInput(self, image)


    def GetInput(self):
        """GetInput(itkScalarImageToCooccurrenceMatrixFilterIUS2 self) -> itkImageUS2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetInput(self)


    def SetMaskImage(self, image):
        """
        SetMaskImage(itkScalarImageToCooccurrenceMatrixFilterIUS2 self, itkImageUS2 image)

        Method to set/get the
        mask image 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetMaskImage(self, image)


    def GetMaskImage(self):
        """GetMaskImage(itkScalarImageToCooccurrenceMatrixFilterIUS2 self) -> itkImageUS2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetMaskImage(self)


    def GetOutput(self):
        """
        GetOutput(itkScalarImageToCooccurrenceMatrixFilterIUS2 self) -> itkHistogramD

        method to get the
        Histogram 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetOutput(self)


    def SetInsidePixelValue(self, _arg):
        """
        SetInsidePixelValue(itkScalarImageToCooccurrenceMatrixFilterIUS2 self, unsigned short const _arg)

        Set the pixel
        value of the mask that should be considered "inside" the object.
        Defaults to one. 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetInsidePixelValue(self, _arg)


    def GetInsidePixelValue(self):
        """GetInsidePixelValue(itkScalarImageToCooccurrenceMatrixFilterIUS2 self) -> unsigned short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetInsidePixelValue(self)

    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIUS2

    def cast(obj):
        """cast(itkLightObject obj) -> itkScalarImageToCooccurrenceMatrixFilterIUS2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIUS2

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarImageToCooccurrenceMatrixFilterIUS2.Clone = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_Clone, None, itkScalarImageToCooccurrenceMatrixFilterIUS2)
itkScalarImageToCooccurrenceMatrixFilterIUS2.SetOffsets = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetOffsets, None, itkScalarImageToCooccurrenceMatrixFilterIUS2)
itkScalarImageToCooccurrenceMatrixFilterIUS2.GetOffsets = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetOffsets, None, itkScalarImageToCooccurrenceMatrixFilterIUS2)
itkScalarImageToCooccurrenceMatrixFilterIUS2.SetOffset = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetOffset, None, itkScalarImageToCooccurrenceMatrixFilterIUS2)
itkScalarImageToCooccurrenceMatrixFilterIUS2.SetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetNumberOfBinsPerAxis, None, itkScalarImageToCooccurrenceMatrixFilterIUS2)
itkScalarImageToCooccurrenceMatrixFilterIUS2.GetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetNumberOfBinsPerAxis, None, itkScalarImageToCooccurrenceMatrixFilterIUS2)
itkScalarImageToCooccurrenceMatrixFilterIUS2.SetPixelValueMinMax = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetPixelValueMinMax, None, itkScalarImageToCooccurrenceMatrixFilterIUS2)
itkScalarImageToCooccurrenceMatrixFilterIUS2.GetMin = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetMin, None, itkScalarImageToCooccurrenceMatrixFilterIUS2)
itkScalarImageToCooccurrenceMatrixFilterIUS2.GetMax = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetMax, None, itkScalarImageToCooccurrenceMatrixFilterIUS2)
itkScalarImageToCooccurrenceMatrixFilterIUS2.SetNormalize = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetNormalize, None, itkScalarImageToCooccurrenceMatrixFilterIUS2)
itkScalarImageToCooccurrenceMatrixFilterIUS2.GetNormalize = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetNormalize, None, itkScalarImageToCooccurrenceMatrixFilterIUS2)
itkScalarImageToCooccurrenceMatrixFilterIUS2.NormalizeOn = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_NormalizeOn, None, itkScalarImageToCooccurrenceMatrixFilterIUS2)
itkScalarImageToCooccurrenceMatrixFilterIUS2.NormalizeOff = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_NormalizeOff, None, itkScalarImageToCooccurrenceMatrixFilterIUS2)
itkScalarImageToCooccurrenceMatrixFilterIUS2.SetInput = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetInput, None, itkScalarImageToCooccurrenceMatrixFilterIUS2)
itkScalarImageToCooccurrenceMatrixFilterIUS2.GetInput = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetInput, None, itkScalarImageToCooccurrenceMatrixFilterIUS2)
itkScalarImageToCooccurrenceMatrixFilterIUS2.SetMaskImage = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetMaskImage, None, itkScalarImageToCooccurrenceMatrixFilterIUS2)
itkScalarImageToCooccurrenceMatrixFilterIUS2.GetMaskImage = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetMaskImage, None, itkScalarImageToCooccurrenceMatrixFilterIUS2)
itkScalarImageToCooccurrenceMatrixFilterIUS2.GetOutput = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetOutput, None, itkScalarImageToCooccurrenceMatrixFilterIUS2)
itkScalarImageToCooccurrenceMatrixFilterIUS2.SetInsidePixelValue = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetInsidePixelValue, None, itkScalarImageToCooccurrenceMatrixFilterIUS2)
itkScalarImageToCooccurrenceMatrixFilterIUS2.GetInsidePixelValue = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetInsidePixelValue, None, itkScalarImageToCooccurrenceMatrixFilterIUS2)
itkScalarImageToCooccurrenceMatrixFilterIUS2_swigregister = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_swigregister
itkScalarImageToCooccurrenceMatrixFilterIUS2_swigregister(itkScalarImageToCooccurrenceMatrixFilterIUS2)

def itkScalarImageToCooccurrenceMatrixFilterIUS2___New_orig__():
    """itkScalarImageToCooccurrenceMatrixFilterIUS2___New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterIUS2_Pointer"""
    return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2___New_orig__()

def itkScalarImageToCooccurrenceMatrixFilterIUS2_cast(obj):
    """itkScalarImageToCooccurrenceMatrixFilterIUS2_cast(itkLightObject obj) -> itkScalarImageToCooccurrenceMatrixFilterIUS2"""
    return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_cast(obj)

class itkScalarImageToCooccurrenceMatrixFilterIUS3(ITKCommonBasePython.itkProcessObject):
    """


    This class computes a co-occurence matrix (histogram) from a given
    image and a mask image if provided. Coocurrence matrces are used for
    image texture description.

    This filters creates a grey-level co-occurence matrix from a N-D
    scalar image. This is the first step in texture description a la
    Haralick. (See Haralick, R.M., K. Shanmugam and I. Dinstein. 1973.
    Textural Features for Image Classification. IEEE Transactions on
    Systems, Man and Cybernetics. SMC-3(6):610-620. See also Haralick,
    R.M. 1979. Statistical and Structural Approaches to Texture.
    Proceedings of the IEEE, 67:786-804.)

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), grey-level co-occurences are pairs of intensity
    values for a specific pixel and the pixel at that offset from the
    specified pixel. These co-occurences can provide eight-bit image of
    alternating pixel-wide white and black vertical lines would have a
    large number of (0, 255) and (255, 0) co-occurences for offset (1, 0).

    The offset (or offsets) along which the co-occurences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features, averages of features computed over
    several histograms with different offsets are generally used, instead
    of computing features from one histogram created with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multy-resulution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the co-occurence pairs in
    the given image's requested region, for a given set of offsets. That
    is, if a given offset falls outside of the requested region at a
    particular point, that co-occurrence pair will not be added to the
    matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    See:  MaskedScalarImageToCooccurrenceMatrixFilter

    See:   HistogramToTextureFeaturesFilter

    See:  ScalarImageTextureCalculator

    Zachary Pincus and Glenn Pierce

    C++ includes: itkScalarImageToCooccurrenceMatrixFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterIUS3_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkScalarImageToCooccurrenceMatrixFilterIUS3 self) -> itkScalarImageToCooccurrenceMatrixFilterIUS3_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_Clone(self)


    def SetOffsets(self, _arg):
        """
        SetOffsets(itkScalarImageToCooccurrenceMatrixFilterIUS3 self, itkVectorContainerUCO3 _arg)

        Get/Set the offset or
        offsets over which the co-occurrence pairs will be computed. Calling
        either of these methods clears the previous offsets. 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetOffsets(self, _arg)


    def GetOffsets(self):
        """GetOffsets(itkScalarImageToCooccurrenceMatrixFilterIUS3 self) -> itkVectorContainerUCO3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetOffsets(self)


    def SetOffset(self, offset):
        """SetOffset(itkScalarImageToCooccurrenceMatrixFilterIUS3 self, itkOffset3 offset)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetOffset(self, offset)


    def SetNumberOfBinsPerAxis(self, _arg):
        """
        SetNumberOfBinsPerAxis(itkScalarImageToCooccurrenceMatrixFilterIUS3 self, unsigned int const _arg)

        Set number
        of histogram bins along each axis 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetNumberOfBinsPerAxis(self, _arg)


    def GetNumberOfBinsPerAxis(self):
        """GetNumberOfBinsPerAxis(itkScalarImageToCooccurrenceMatrixFilterIUS3 self) -> unsigned int"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetNumberOfBinsPerAxis(self)


    def SetPixelValueMinMax(self, min, max):
        """
        SetPixelValueMinMax(itkScalarImageToCooccurrenceMatrixFilterIUS3 self, unsigned short min, unsigned short max)

        Set the min and
        max (inclusive) pixel value that will be placed in the histogram 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetPixelValueMinMax(self, min, max)


    def GetMin(self):
        """GetMin(itkScalarImageToCooccurrenceMatrixFilterIUS3 self) -> unsigned short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetMin(self)


    def GetMax(self):
        """GetMax(itkScalarImageToCooccurrenceMatrixFilterIUS3 self) -> unsigned short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetMax(self)


    def SetNormalize(self, _arg):
        """
        SetNormalize(itkScalarImageToCooccurrenceMatrixFilterIUS3 self, bool const _arg)

        Set the calculator to
        normalize the histogram (divide all bins by the total frequency).
        Normalization is off by default. 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetNormalize(self, _arg)


    def GetNormalize(self):
        """GetNormalize(itkScalarImageToCooccurrenceMatrixFilterIUS3 self) -> bool"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetNormalize(self)


    def NormalizeOn(self):
        """NormalizeOn(itkScalarImageToCooccurrenceMatrixFilterIUS3 self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_NormalizeOn(self)


    def NormalizeOff(self):
        """NormalizeOff(itkScalarImageToCooccurrenceMatrixFilterIUS3 self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_NormalizeOff(self)


    def SetInput(self, image):
        """SetInput(itkScalarImageToCooccurrenceMatrixFilterIUS3 self, itkImageUS3 image)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetInput(self, image)


    def GetInput(self):
        """GetInput(itkScalarImageToCooccurrenceMatrixFilterIUS3 self) -> itkImageUS3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetInput(self)


    def SetMaskImage(self, image):
        """
        SetMaskImage(itkScalarImageToCooccurrenceMatrixFilterIUS3 self, itkImageUS3 image)

        Method to set/get the
        mask image 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetMaskImage(self, image)


    def GetMaskImage(self):
        """GetMaskImage(itkScalarImageToCooccurrenceMatrixFilterIUS3 self) -> itkImageUS3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetMaskImage(self)


    def GetOutput(self):
        """
        GetOutput(itkScalarImageToCooccurrenceMatrixFilterIUS3 self) -> itkHistogramD

        method to get the
        Histogram 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetOutput(self)


    def SetInsidePixelValue(self, _arg):
        """
        SetInsidePixelValue(itkScalarImageToCooccurrenceMatrixFilterIUS3 self, unsigned short const _arg)

        Set the pixel
        value of the mask that should be considered "inside" the object.
        Defaults to one. 
        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetInsidePixelValue(self, _arg)


    def GetInsidePixelValue(self):
        """GetInsidePixelValue(itkScalarImageToCooccurrenceMatrixFilterIUS3 self) -> unsigned short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetInsidePixelValue(self)

    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIUS3

    def cast(obj):
        """cast(itkLightObject obj) -> itkScalarImageToCooccurrenceMatrixFilterIUS3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIUS3

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarImageToCooccurrenceMatrixFilterIUS3.Clone = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_Clone, None, itkScalarImageToCooccurrenceMatrixFilterIUS3)
itkScalarImageToCooccurrenceMatrixFilterIUS3.SetOffsets = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetOffsets, None, itkScalarImageToCooccurrenceMatrixFilterIUS3)
itkScalarImageToCooccurrenceMatrixFilterIUS3.GetOffsets = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetOffsets, None, itkScalarImageToCooccurrenceMatrixFilterIUS3)
itkScalarImageToCooccurrenceMatrixFilterIUS3.SetOffset = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetOffset, None, itkScalarImageToCooccurrenceMatrixFilterIUS3)
itkScalarImageToCooccurrenceMatrixFilterIUS3.SetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetNumberOfBinsPerAxis, None, itkScalarImageToCooccurrenceMatrixFilterIUS3)
itkScalarImageToCooccurrenceMatrixFilterIUS3.GetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetNumberOfBinsPerAxis, None, itkScalarImageToCooccurrenceMatrixFilterIUS3)
itkScalarImageToCooccurrenceMatrixFilterIUS3.SetPixelValueMinMax = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetPixelValueMinMax, None, itkScalarImageToCooccurrenceMatrixFilterIUS3)
itkScalarImageToCooccurrenceMatrixFilterIUS3.GetMin = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetMin, None, itkScalarImageToCooccurrenceMatrixFilterIUS3)
itkScalarImageToCooccurrenceMatrixFilterIUS3.GetMax = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetMax, None, itkScalarImageToCooccurrenceMatrixFilterIUS3)
itkScalarImageToCooccurrenceMatrixFilterIUS3.SetNormalize = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetNormalize, None, itkScalarImageToCooccurrenceMatrixFilterIUS3)
itkScalarImageToCooccurrenceMatrixFilterIUS3.GetNormalize = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetNormalize, None, itkScalarImageToCooccurrenceMatrixFilterIUS3)
itkScalarImageToCooccurrenceMatrixFilterIUS3.NormalizeOn = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_NormalizeOn, None, itkScalarImageToCooccurrenceMatrixFilterIUS3)
itkScalarImageToCooccurrenceMatrixFilterIUS3.NormalizeOff = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_NormalizeOff, None, itkScalarImageToCooccurrenceMatrixFilterIUS3)
itkScalarImageToCooccurrenceMatrixFilterIUS3.SetInput = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetInput, None, itkScalarImageToCooccurrenceMatrixFilterIUS3)
itkScalarImageToCooccurrenceMatrixFilterIUS3.GetInput = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetInput, None, itkScalarImageToCooccurrenceMatrixFilterIUS3)
itkScalarImageToCooccurrenceMatrixFilterIUS3.SetMaskImage = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetMaskImage, None, itkScalarImageToCooccurrenceMatrixFilterIUS3)
itkScalarImageToCooccurrenceMatrixFilterIUS3.GetMaskImage = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetMaskImage, None, itkScalarImageToCooccurrenceMatrixFilterIUS3)
itkScalarImageToCooccurrenceMatrixFilterIUS3.GetOutput = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetOutput, None, itkScalarImageToCooccurrenceMatrixFilterIUS3)
itkScalarImageToCooccurrenceMatrixFilterIUS3.SetInsidePixelValue = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetInsidePixelValue, None, itkScalarImageToCooccurrenceMatrixFilterIUS3)
itkScalarImageToCooccurrenceMatrixFilterIUS3.GetInsidePixelValue = new_instancemethod(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetInsidePixelValue, None, itkScalarImageToCooccurrenceMatrixFilterIUS3)
itkScalarImageToCooccurrenceMatrixFilterIUS3_swigregister = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_swigregister
itkScalarImageToCooccurrenceMatrixFilterIUS3_swigregister(itkScalarImageToCooccurrenceMatrixFilterIUS3)

def itkScalarImageToCooccurrenceMatrixFilterIUS3___New_orig__():
    """itkScalarImageToCooccurrenceMatrixFilterIUS3___New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterIUS3_Pointer"""
    return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3___New_orig__()

def itkScalarImageToCooccurrenceMatrixFilterIUS3_cast(obj):
    """itkScalarImageToCooccurrenceMatrixFilterIUS3_cast(itkLightObject obj) -> itkScalarImageToCooccurrenceMatrixFilterIUS3"""
    return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_cast(obj)


def scalar_image_to_cooccurrence_matrix_filter(*args, **kwargs):
    """Procedural interface for ScalarImageToCooccurrenceMatrixFilter"""
    import itk
    instance = itk.ScalarImageToCooccurrenceMatrixFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def scalar_image_to_cooccurrence_matrix_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.ScalarImageToCooccurrenceMatrixFilter, itkTemplate.itkTemplate):
        scalar_image_to_cooccurrence_matrix_filter.__doc__ = itk.ScalarImageToCooccurrenceMatrixFilter.values()[0].__doc__
    else:
        scalar_image_to_cooccurrence_matrix_filter.__doc__ = itk.ScalarImageToCooccurrenceMatrixFilter.__doc__




