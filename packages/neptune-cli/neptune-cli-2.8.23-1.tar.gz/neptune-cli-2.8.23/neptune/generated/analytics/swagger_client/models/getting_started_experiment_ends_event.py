# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class GettingStartedExperimentEndsEvent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, channels=None, experiment_name=None, experiment_status=None, experiment_type=None, inputs=None, worker=None):
        """
        GettingStartedExperimentEndsEvent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'channels': 'int',
            'experiment_name': 'str',
            'experiment_status': 'str',
            'experiment_type': 'str',
            'inputs': 'int',
            'worker': 'str'
        }

        self.attribute_map = {
            'channels': 'channels',
            'experiment_name': 'experimentName',
            'experiment_status': 'experimentStatus',
            'experiment_type': 'experimentType',
            'inputs': 'inputs',
            'worker': 'worker'
        }

        self._channels = channels
        self._experiment_name = experiment_name
        self._experiment_status = experiment_status
        self._experiment_type = experiment_type
        self._inputs = inputs
        self._worker = worker

    @property
    def channels(self):
        """
        Gets the channels of this GettingStartedExperimentEndsEvent.


        :return: The channels of this GettingStartedExperimentEndsEvent.
        :rtype: int
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """
        Sets the channels of this GettingStartedExperimentEndsEvent.


        :param channels: The channels of this GettingStartedExperimentEndsEvent.
        :type: int
        """
        
        self._channels = channels

    @property
    def experiment_name(self):
        """
        Gets the experiment_name of this GettingStartedExperimentEndsEvent.


        :return: The experiment_name of this GettingStartedExperimentEndsEvent.
        :rtype: str
        """
        return self._experiment_name

    @experiment_name.setter
    def experiment_name(self, experiment_name):
        """
        Sets the experiment_name of this GettingStartedExperimentEndsEvent.


        :param experiment_name: The experiment_name of this GettingStartedExperimentEndsEvent.
        :type: str
        """
        
        self._experiment_name = experiment_name

    @property
    def experiment_status(self):
        """
        Gets the experiment_status of this GettingStartedExperimentEndsEvent.


        :return: The experiment_status of this GettingStartedExperimentEndsEvent.
        :rtype: str
        """
        return self._experiment_status

    @experiment_status.setter
    def experiment_status(self, experiment_status):
        """
        Sets the experiment_status of this GettingStartedExperimentEndsEvent.


        :param experiment_status: The experiment_status of this GettingStartedExperimentEndsEvent.
        :type: str
        """
        
        self._experiment_status = experiment_status

    @property
    def experiment_type(self):
        """
        Gets the experiment_type of this GettingStartedExperimentEndsEvent.


        :return: The experiment_type of this GettingStartedExperimentEndsEvent.
        :rtype: str
        """
        return self._experiment_type

    @experiment_type.setter
    def experiment_type(self, experiment_type):
        """
        Sets the experiment_type of this GettingStartedExperimentEndsEvent.


        :param experiment_type: The experiment_type of this GettingStartedExperimentEndsEvent.
        :type: str
        """
        
        self._experiment_type = experiment_type

    @property
    def inputs(self):
        """
        Gets the inputs of this GettingStartedExperimentEndsEvent.


        :return: The inputs of this GettingStartedExperimentEndsEvent.
        :rtype: int
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """
        Sets the inputs of this GettingStartedExperimentEndsEvent.


        :param inputs: The inputs of this GettingStartedExperimentEndsEvent.
        :type: int
        """
        
        self._inputs = inputs

    @property
    def worker(self):
        """
        Gets the worker of this GettingStartedExperimentEndsEvent.


        :return: The worker of this GettingStartedExperimentEndsEvent.
        :rtype: str
        """
        return self._worker

    @worker.setter
    def worker(self, worker):
        """
        Sets the worker of this GettingStartedExperimentEndsEvent.


        :param worker: The worker of this GettingStartedExperimentEndsEvent.
        :type: str
        """
        
        self._worker = worker

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




