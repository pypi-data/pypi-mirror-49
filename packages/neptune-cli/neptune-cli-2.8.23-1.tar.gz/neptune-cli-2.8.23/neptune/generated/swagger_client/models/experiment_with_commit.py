# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ExperimentWithCommit(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, dirty=None, author_email=None, experiment_name=None, parents=None, commit_id=None, experiment_id=None, message=None, commit_date=None, author_name=None):
        """
        ExperimentWithCommit - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'dirty': 'bool',
            'author_email': 'str',
            'experiment_name': 'str',
            'parents': 'list[str]',
            'commit_id': 'str',
            'experiment_id': 'str',
            'message': 'str',
            'commit_date': 'datetime',
            'author_name': 'str'
        }

        self.attribute_map = {
            'dirty': 'dirty',
            'author_email': 'authorEmail',
            'experiment_name': 'experimentName',
            'parents': 'parents',
            'commit_id': 'commitId',
            'experiment_id': 'experimentId',
            'message': 'message',
            'commit_date': 'commitDate',
            'author_name': 'authorName'
        }

        self._dirty = dirty
        self._author_email = author_email
        self._experiment_name = experiment_name
        self._parents = parents
        self._commit_id = commit_id
        self._experiment_id = experiment_id
        self._message = message
        self._commit_date = commit_date
        self._author_name = author_name

    @property
    def dirty(self):
        """
        Gets the dirty of this ExperimentWithCommit.


        :return: The dirty of this ExperimentWithCommit.
        :rtype: bool
        """
        return self._dirty

    @dirty.setter
    def dirty(self, dirty):
        """
        Sets the dirty of this ExperimentWithCommit.


        :param dirty: The dirty of this ExperimentWithCommit.
        :type: bool
        """
        
        self._dirty = dirty

    @property
    def author_email(self):
        """
        Gets the author_email of this ExperimentWithCommit.


        :return: The author_email of this ExperimentWithCommit.
        :rtype: str
        """
        return self._author_email

    @author_email.setter
    def author_email(self, author_email):
        """
        Sets the author_email of this ExperimentWithCommit.


        :param author_email: The author_email of this ExperimentWithCommit.
        :type: str
        """
        
        self._author_email = author_email

    @property
    def experiment_name(self):
        """
        Gets the experiment_name of this ExperimentWithCommit.


        :return: The experiment_name of this ExperimentWithCommit.
        :rtype: str
        """
        return self._experiment_name

    @experiment_name.setter
    def experiment_name(self, experiment_name):
        """
        Sets the experiment_name of this ExperimentWithCommit.


        :param experiment_name: The experiment_name of this ExperimentWithCommit.
        :type: str
        """
        
        self._experiment_name = experiment_name

    @property
    def parents(self):
        """
        Gets the parents of this ExperimentWithCommit.


        :return: The parents of this ExperimentWithCommit.
        :rtype: list[str]
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """
        Sets the parents of this ExperimentWithCommit.


        :param parents: The parents of this ExperimentWithCommit.
        :type: list[str]
        """
        
        self._parents = parents

    @property
    def commit_id(self):
        """
        Gets the commit_id of this ExperimentWithCommit.


        :return: The commit_id of this ExperimentWithCommit.
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """
        Sets the commit_id of this ExperimentWithCommit.


        :param commit_id: The commit_id of this ExperimentWithCommit.
        :type: str
        """
        
        self._commit_id = commit_id

    @property
    def experiment_id(self):
        """
        Gets the experiment_id of this ExperimentWithCommit.


        :return: The experiment_id of this ExperimentWithCommit.
        :rtype: str
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id):
        """
        Sets the experiment_id of this ExperimentWithCommit.


        :param experiment_id: The experiment_id of this ExperimentWithCommit.
        :type: str
        """
        
        self._experiment_id = experiment_id

    @property
    def message(self):
        """
        Gets the message of this ExperimentWithCommit.


        :return: The message of this ExperimentWithCommit.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this ExperimentWithCommit.


        :param message: The message of this ExperimentWithCommit.
        :type: str
        """
        
        self._message = message

    @property
    def commit_date(self):
        """
        Gets the commit_date of this ExperimentWithCommit.


        :return: The commit_date of this ExperimentWithCommit.
        :rtype: datetime
        """
        return self._commit_date

    @commit_date.setter
    def commit_date(self, commit_date):
        """
        Sets the commit_date of this ExperimentWithCommit.


        :param commit_date: The commit_date of this ExperimentWithCommit.
        :type: datetime
        """
        
        self._commit_date = commit_date

    @property
    def author_name(self):
        """
        Gets the author_name of this ExperimentWithCommit.


        :return: The author_name of this ExperimentWithCommit.
        :rtype: str
        """
        return self._author_name

    @author_name.setter
    def author_name(self, author_name):
        """
        Sets the author_name of this ExperimentWithCommit.


        :param author_name: The author_name of this ExperimentWithCommit.
        :type: str
        """
        
        self._author_name = author_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




