# -*- coding: utf-8 -*-

"""
    api_tester_upload_test

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from api_tester_upload_test.api_helper import APIHelper
from api_tester_upload_test.configuration import Configuration
from api_tester_upload_test.controllers.base_controller import BaseController
from api_tester_upload_test.http.auth.o_auth_2 import OAuth2
from api_tester_upload_test.models.authentication_response import AuthenticationResponse

class AuthenticationOperationsController(BaseController):

    """A Controller to access Endpoints in the api_tester_upload_test API."""


    def get_ping(self,
                 authorization):
        """Does a GET request to /v2/ping HTTP/1.1.

        TODO: type endpoint description here.

        Args:
            authorization (string): Bearer

        Returns:
            void: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v2/ping HTTP/1.1'
        _query_builder = Configuration.base_uri.format(Configuration.account_id)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Authorization': authorization,
            'Content-Type': 'application/x-www-form-urlencoded; charset=utf8'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

    def create_o_auth_2_password_credentials_grant(self,
                                                   authorization,
                                                   date,
                                                   username,
                                                   password):
        """Does a POST request to /v2/oauth2/token.

        TODO: type endpoint description here.

        Args:
            authorization (string): BCS :
            date (datetime): TODO: type description here. Example: 
            username (string): TODO: type description here. Example: 
            password (string): TODO: type description here. Example: 

        Returns:
            AuthenticationResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v2/oauth2/token'
        _query_builder = Configuration.base_uri.format(Configuration.account_id)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Authorization': authorization,
            'Date': APIHelper.when_defined(APIHelper.RFC3339DateTime, date)
        }

        # Prepare form parameters
        _form_parameters = {
            'grant_type': 'password',
            'username': username,
            'password': password
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, AuthenticationResponse.from_dictionary)
