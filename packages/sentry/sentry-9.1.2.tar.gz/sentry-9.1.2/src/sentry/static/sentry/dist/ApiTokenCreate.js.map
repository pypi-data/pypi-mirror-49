{"version":3,"sources":["webpack:///./app/views/settings/components/forms/controls/multipleCheckbox.jsx","webpack:///./app/views/settings/account/apiNewToken.jsx"],"names":["MultipleCheckboxWrapper","styled","target","Label","CheckboxLabel","MultipleCheckbox","onChange","selectedValue","e","_this$props","_this","props","value","checked","concat","_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default","filter","v","_this2","this","_this$props2","disabled","choices","react__WEBPACK_IMPORTED_MODULE_9___default","a","createElement","map","_ref","_ref2","_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default","choiceValue","choiceLabel","grid_emotion__WEBPACK_IMPORTED_MODULE_7__","key","w","type","bind","defined","indexOf","React","Component","propTypes","PropTypes","arrayOf","oneOfType","string","number","func","bool","array","isRequired","SORTED_DEFAULT_API_SCOPES","DEFAULT_API_SCOPES","sort","API_CHOICES","API_SCOPES","s","API_INDEX_ROUTE","ApiNewToken","onCancel","browserHistory","push","onSubmitSuccess","react__WEBPACK_IMPORTED_MODULE_7___default","react_document_title__WEBPACK_IMPORTED_MODULE_6___default","title","app_views_settings_components_settingsPageHeader__WEBPACK_IMPORTED_MODULE_14__","t","app_views_settings_components_text_textBlock__WEBPACK_IMPORTED_MODULE_15__","tct","link","href","app_components_panels__WEBPACK_IMPORTED_MODULE_13__","app_views_settings_components_forms_apiForm__WEBPACK_IMPORTED_MODULE_10__","apiMethod","apiEndpoint","initialData","scopes","footerStyle","marginTop","paddingRight","submitLabel","app_views_settings_components_forms_formField__WEBPACK_IMPORTED_MODULE_11__","name","label","inline","required","app_views_settings_components_forms_controls_multipleCheckbox__WEBPACK_IMPORTED_MODULE_12__","peek"],"mappings":"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","file":"ApiTokenCreate.js","sourcesContent":["import {Box} from 'grid-emotion';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport {defined} from 'app/utils';\n\nconst MultipleCheckboxWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Label = styled.label`\n  font-weight: normal;\n  white-space: nowrap;\n  margin-right: 10px;\n  margin-bottom: 10px;\n  width: 20%;\n`;\n\nconst CheckboxLabel = styled.span`\n  margin-left: 3px;\n`;\n\nexport default class MultipleCheckbox extends React.Component {\n  static propTypes = {\n    value: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n    onChange: PropTypes.func,\n    disabled: PropTypes.bool,\n    choices: PropTypes.array.isRequired,\n  };\n\n  onChange = (selectedValue, e) => {\n    const {value, onChange} = this.props;\n    let newValue;\n\n    if (typeof onChange !== 'function') {\n      return;\n    }\n\n    if (e.target.checked) {\n      newValue = value ? [...value, selectedValue] : [value];\n    } else {\n      newValue = value.filter(v => v !== selectedValue);\n    }\n\n    onChange(newValue, e);\n  };\n\n  render() {\n    const {disabled, choices, value} = this.props;\n\n    return (\n      <MultipleCheckboxWrapper>\n        {choices.map(([choiceValue, choiceLabel]) => {\n          return (\n            <Box key={choiceValue} w={[1, 1 / 2, 1 / 3, 1 / 4]}>\n              <Label>\n                <input\n                  type=\"checkbox\"\n                  value={choiceValue}\n                  onChange={this.onChange.bind(this, choiceValue)}\n                  disabled={disabled}\n                  checked={defined(value) && value.indexOf(choiceValue) !== -1}\n                />\n                <CheckboxLabel>{choiceLabel}</CheckboxLabel>\n              </Label>\n            </Box>\n          );\n        })}\n      </MultipleCheckboxWrapper>\n    );\n  }\n}\n","import {browserHistory} from 'react-router';\nimport DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport {API_SCOPES, DEFAULT_API_SCOPES} from 'app/constants';\nimport {t, tct} from 'app/locale';\nimport ApiForm from 'app/views/settings/components/forms/apiForm';\nimport FormField from 'app/views/settings/components/forms/formField';\nimport MultipleCheckbox from 'app/views/settings/components/forms/controls/multipleCheckbox';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nconst SORTED_DEFAULT_API_SCOPES = DEFAULT_API_SCOPES.sort();\nconst API_CHOICES = API_SCOPES.map(s => [s, s]);\nconst API_INDEX_ROUTE = '/settings/account/api/auth-tokens/';\n\nexport default class ApiNewToken extends React.Component {\n  onCancel = () => {\n    browserHistory.push(API_INDEX_ROUTE);\n  };\n\n  onSubmitSuccess = () => {\n    browserHistory.push(API_INDEX_ROUTE);\n  };\n\n  render() {\n    return (\n      <DocumentTitle title=\"Create API Token - Sentry\">\n        <div>\n          <SettingsPageHeader title={t('Create New Token')} />\n          <TextBlock>\n            {t(\n              \"Authentication tokens allow you to perform actions against the Sentry API on behalf of your account. They're the easiest way to get started using the API.\"\n            )}\n          </TextBlock>\n          <TextBlock>\n            {tct(\n              'For more information on how to use the web API, see our [link:documentation].',\n              {\n                link: <a href=\"https://docs.sentry.io/hosted/api/\" />,\n              }\n            )}\n          </TextBlock>\n          <Panel>\n            <PanelHeader>{t('Create New Token')}</PanelHeader>\n            <ApiForm\n              apiMethod=\"POST\"\n              apiEndpoint=\"/api-tokens/\"\n              initialData={{scopes: SORTED_DEFAULT_API_SCOPES}}\n              onSubmitSuccess={this.onSubmitSuccess}\n              onCancel={this.onCancel}\n              footerStyle={{\n                marginTop: 0,\n                paddingRight: 20,\n              }}\n              submitLabel={t('Create Token')}\n            >\n              <PanelBody>\n                <FormField\n                  name=\"scopes\"\n                  choices={API_CHOICES}\n                  label={t('Scopes')}\n                  inline={false}\n                  required\n                >\n                  {({value, onChange}) => (\n                    <MultipleCheckbox\n                      onChange={onChange}\n                      value={value.peek()}\n                      choices={API_CHOICES}\n                    />\n                  )}\n                </FormField>\n              </PanelBody>\n            </ApiForm>\n          </Panel>\n        </div>\n      </DocumentTitle>\n    );\n  }\n}\n"],"sourceRoot":""}