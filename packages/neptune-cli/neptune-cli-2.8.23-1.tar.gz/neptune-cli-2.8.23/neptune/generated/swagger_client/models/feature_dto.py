# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class FeatureDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, headline=None, media_type=None, released=None, description=None, media_url=None, id=None, is_active=None, is_viewed=None, thumbnail_url=None):
        """
        FeatureDTO - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'headline': 'str',
            'media_type': 'FeatureMediaType',
            'released': 'datetime',
            'description': 'str',
            'media_url': 'str',
            'id': 'str',
            'is_active': 'bool',
            'is_viewed': 'bool',
            'thumbnail_url': 'str'
        }

        self.attribute_map = {
            'headline': 'headline',
            'media_type': 'mediaType',
            'released': 'released',
            'description': 'description',
            'media_url': 'mediaUrl',
            'id': 'id',
            'is_active': 'isActive',
            'is_viewed': 'isViewed',
            'thumbnail_url': 'thumbnailUrl'
        }

        self._headline = headline
        self._media_type = media_type
        self._released = released
        self._description = description
        self._media_url = media_url
        self._id = id
        self._is_active = is_active
        self._is_viewed = is_viewed
        self._thumbnail_url = thumbnail_url

    @property
    def headline(self):
        """
        Gets the headline of this FeatureDTO.


        :return: The headline of this FeatureDTO.
        :rtype: str
        """
        return self._headline

    @headline.setter
    def headline(self, headline):
        """
        Sets the headline of this FeatureDTO.


        :param headline: The headline of this FeatureDTO.
        :type: str
        """
        
        self._headline = headline

    @property
    def media_type(self):
        """
        Gets the media_type of this FeatureDTO.


        :return: The media_type of this FeatureDTO.
        :rtype: FeatureMediaType
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """
        Sets the media_type of this FeatureDTO.


        :param media_type: The media_type of this FeatureDTO.
        :type: FeatureMediaType
        """
        
        self._media_type = media_type

    @property
    def released(self):
        """
        Gets the released of this FeatureDTO.


        :return: The released of this FeatureDTO.
        :rtype: datetime
        """
        return self._released

    @released.setter
    def released(self, released):
        """
        Sets the released of this FeatureDTO.


        :param released: The released of this FeatureDTO.
        :type: datetime
        """
        
        self._released = released

    @property
    def description(self):
        """
        Gets the description of this FeatureDTO.


        :return: The description of this FeatureDTO.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this FeatureDTO.


        :param description: The description of this FeatureDTO.
        :type: str
        """
        
        self._description = description

    @property
    def media_url(self):
        """
        Gets the media_url of this FeatureDTO.


        :return: The media_url of this FeatureDTO.
        :rtype: str
        """
        return self._media_url

    @media_url.setter
    def media_url(self, media_url):
        """
        Sets the media_url of this FeatureDTO.


        :param media_url: The media_url of this FeatureDTO.
        :type: str
        """
        
        self._media_url = media_url

    @property
    def id(self):
        """
        Gets the id of this FeatureDTO.


        :return: The id of this FeatureDTO.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this FeatureDTO.


        :param id: The id of this FeatureDTO.
        :type: str
        """
        
        self._id = id

    @property
    def is_active(self):
        """
        Gets the is_active of this FeatureDTO.


        :return: The is_active of this FeatureDTO.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """
        Sets the is_active of this FeatureDTO.


        :param is_active: The is_active of this FeatureDTO.
        :type: bool
        """
        
        self._is_active = is_active

    @property
    def is_viewed(self):
        """
        Gets the is_viewed of this FeatureDTO.


        :return: The is_viewed of this FeatureDTO.
        :rtype: bool
        """
        return self._is_viewed

    @is_viewed.setter
    def is_viewed(self, is_viewed):
        """
        Sets the is_viewed of this FeatureDTO.


        :param is_viewed: The is_viewed of this FeatureDTO.
        :type: bool
        """
        
        self._is_viewed = is_viewed

    @property
    def thumbnail_url(self):
        """
        Gets the thumbnail_url of this FeatureDTO.


        :return: The thumbnail_url of this FeatureDTO.
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """
        Sets the thumbnail_url of this FeatureDTO.


        :param thumbnail_url: The thumbnail_url of this FeatureDTO.
        :type: str
        """
        
        self._thumbnail_url = thumbnail_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




