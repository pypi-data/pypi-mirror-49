{"version":3,"sources":["webpack:///./app/views/settings/project/projectServiceHooks.jsx"],"names":["ServiceHookRow","createReactClass","displayName","propTypes","orgId","PropTypes","string","isRequired","projectId","hook","object","onToggleActive","func","mixins","ApiMixin","getInitialState","loading","error","render","_this$props","this","props","react__WEBPACK_IMPORTED_MODULE_8___default","a","createElement","app_views_settings_components_forms_field__WEBPACK_IMPORTED_MODULE_15__","label","react_router__WEBPACK_IMPORTED_MODULE_7__","to","concat","id","app_components_truncate__WEBPACK_IMPORTED_MODULE_20__","value","url","help","events","length","join","app_components_switch__WEBPACK_IMPORTED_MODULE_19__","isActive","status","size","toggle","ProjectServiceHooks","_this$props$params","_this","params","loadingIndicator","IndicatorStore","add","t","api","request","method","data","success","remove","hookList","state","map","h","_babel_runtime_helpers_objectSpread__WEBPACK_IMPORTED_MODULE_0___default","setState","duration","_this$props$params2","app_views_settings_components_emptyMessage__WEBPACK_IMPORTED_MODULE_14__","_this2","_this$props$params3","Fragment","app_components_panels__WEBPACK_IMPORTED_MODULE_17__","key","type","icon","bind","body","renderResults","renderEmpty","_this$props$params4","access","Set","context","organization","className","app_views_settings_components_settingsPageHeader__WEBPACK_IMPORTED_MODULE_18__","title","action","has","app_components_button__WEBPACK_IMPORTED_MODULE_13__","data-test-id","priority","AsyncView","contextTypes"],"mappings":"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","file":"ProjectServiceHooks.js","sourcesContent":["import PropTypes from 'prop-types';\nimport {Link} from 'react-router';\nimport React from 'react';\nimport createReactClass from 'create-react-class';\n\nimport {t} from 'app/locale';\nimport ApiMixin from 'app/mixins/apiMixin';\nimport AsyncView from 'app/views/asyncView';\nimport Button from 'app/components/button';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport Field from 'app/views/settings/components/forms/field';\nimport IndicatorStore from 'app/stores/indicatorStore';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'app/components/panels';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport Switch from 'app/components/switch';\nimport Truncate from 'app/components/truncate';\n\nconst ServiceHookRow = createReactClass({\n  displayName: 'ServiceHookRow',\n\n  propTypes: {\n    orgId: PropTypes.string.isRequired,\n    projectId: PropTypes.string.isRequired,\n    hook: PropTypes.object.isRequired,\n    onToggleActive: PropTypes.func.isRequired,\n  },\n\n  mixins: [ApiMixin],\n\n  getInitialState() {\n    return {\n      loading: false,\n      error: false,\n    };\n  },\n\n  render() {\n    const {orgId, projectId, hook} = this.props;\n    return (\n      <Field\n        label={\n          <Link to={`/settings/${orgId}/projects/${projectId}/hooks/${hook.id}/`}>\n            <Truncate value={hook.url} />\n          </Link>\n        }\n        help={\n          hook.events && hook.events.length !== 0 ? (\n            <small>{hook.events.join(', ')}</small>\n          ) : (\n            <small>\n              <em>no events configured</em>\n            </small>\n          )\n        }\n      >\n        <Switch\n          isActive={hook.status === 'active'}\n          size=\"lg\"\n          toggle={this.props.onToggleActive}\n        />\n      </Field>\n    );\n  },\n});\n\nexport default class ProjectServiceHooks extends AsyncView {\n  static contextTypes = {\n    organization: PropTypes.object.isRequired,\n  };\n\n  getEndpoints() {\n    const {orgId, projectId} = this.props.params;\n    return [['hookList', `/projects/${orgId}/${projectId}/hooks/`]];\n  }\n\n  onToggleActive = hook => {\n    const {orgId, projectId} = this.props.params;\n    const loadingIndicator = IndicatorStore.add(t('Saving changes..'));\n    this.api.request(`/projects/${orgId}/${projectId}/hooks/${hook.id}/`, {\n      method: 'PUT',\n      data: {\n        isActive: hook.status !== 'active',\n      },\n      success: data => {\n        IndicatorStore.remove(loadingIndicator);\n        const hookList = this.state.hookList.map(h => {\n          if (h.id === data.id) {\n            return {\n              ...h,\n              ...data,\n            };\n          }\n          return h;\n        });\n        this.setState({hookList});\n      },\n      error: () => {\n        IndicatorStore.remove(loadingIndicator);\n        IndicatorStore.add(\n          t('Unable to remove application. Please try again.'),\n          'error',\n          {\n            duration: 3000,\n          }\n        );\n      },\n    });\n  };\n\n  renderEmpty() {\n    return (\n      <EmptyMessage>\n        {t('There are no service hooks associated with this project.')}\n      </EmptyMessage>\n    );\n  }\n\n  renderResults() {\n    const {orgId, projectId} = this.props.params;\n\n    return (\n      <React.Fragment>\n        <PanelHeader key={'header'}>{t('Service Hook')}</PanelHeader>\n        <PanelBody key={'body'}>\n          <PanelAlert type=\"info\" icon=\"icon-circle-exclamation\">\n            Service Hooks are an early adopter preview feature and will change in the\n            future.\n          </PanelAlert>\n          {this.state.hookList.map(hook => {\n            return (\n              <ServiceHookRow\n                key={hook.id}\n                orgId={orgId}\n                projectId={projectId}\n                hook={hook}\n                onToggleActive={this.onToggleActive.bind(this, hook)}\n              />\n            );\n          })}\n        </PanelBody>\n      </React.Fragment>\n    );\n  }\n\n  renderBody() {\n    let body;\n    if (this.state.hookList.length > 0) {\n      body = this.renderResults();\n    } else {\n      body = this.renderEmpty();\n    }\n\n    const {orgId, projectId} = this.props.params;\n    const access = new Set(this.context.organization.access);\n\n    return (\n      <div className=\"ref-project-service-hooks\">\n        <SettingsPageHeader\n          title={t('Service Hooks')}\n          action={\n            access.has('project:write') ? (\n              <Button\n                data-test-id=\"new-service-hook\"\n                to={`/settings/${orgId}/projects/${projectId}/hooks/new/`}\n                size=\"small\"\n                priority=\"primary\"\n              >\n                <span className=\"icon-plus\" />&nbsp;{t('Create New Hook')}\n              </Button>\n            ) : null\n          }\n        />\n        <Panel>{body}</Panel>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}