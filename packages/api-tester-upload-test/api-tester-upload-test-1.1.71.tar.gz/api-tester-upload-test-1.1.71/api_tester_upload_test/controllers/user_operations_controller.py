# -*- coding: utf-8 -*-

"""
    api_tester_upload_test

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from api_tester_upload_test.api_helper import APIHelper
from api_tester_upload_test.configuration import Configuration
from api_tester_upload_test.controllers.base_controller import BaseController
from api_tester_upload_test.http.auth.o_auth_2 import OAuth2
from api_tester_upload_test.models.upload_file_response import UploadFileResponse
from api_tester_upload_test.models.get_profile_response import GetProfileResponse

class UserOperationsController(BaseController):

    """A Controller to access Endpoints in the api_tester_upload_test API."""


    def upload_file(self,
                    path,
                    file,
                    exists=None,
                    reuse_attributes=None,
                    reuse_fallback=None):
        """Does a POST request to /v2/files/{path}/.

        TODO: type endpoint description here.

        Args:
            path (string): TODO: type description here. Example: 
            file (string): TODO: type description here. Example: 
            exists (ExistsEnum, optional): TODO: type description here.
                Example: 
            reuse_attributes (string, optional): TODO: type description here.
                Example: 
            reuse_fallback (string, optional): TODO: type description here.
                Example: 

        Returns:
            UploadFileResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v2/files/{path}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'path': path
        })
        _query_builder = Configuration.base_uri.format(Configuration.account_id)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare files
        _files = {
            'file': file
        }

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'exists': exists,
            'reuse-attributes': reuse_attributes,
            'reuse-fallback': reuse_fallback
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=_form_parameters, files=_files)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, UploadFileResponse.from_dictionary)

    def get_profile(self):
        """Does a GET request to /v2/user/profile/.

        TODO: type endpoint description here.

        Returns:
            GetProfileResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v2/user/profile/'
        _query_builder = Configuration.base_uri.format(Configuration.account_id)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, GetProfileResponse.from_dictionary)
