# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class Version(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, version=None, commit_id=None, build_date=None, environments=None):
        """
        Version - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'version': 'str',
            'commit_id': 'str',
            'build_date': 'str',
            'environments': 'EnvironmentVersion'
        }

        self.attribute_map = {
            'version': 'version',
            'commit_id': 'commitId',
            'build_date': 'buildDate',
            'environments': 'environments'
        }

        self._version = version
        self._commit_id = commit_id
        self._build_date = build_date
        self._environments = environments

    @property
    def version(self):
        """
        Gets the version of this Version.


        :return: The version of this Version.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this Version.


        :param version: The version of this Version.
        :type: str
        """
        
        self._version = version

    @property
    def commit_id(self):
        """
        Gets the commit_id of this Version.


        :return: The commit_id of this Version.
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """
        Sets the commit_id of this Version.


        :param commit_id: The commit_id of this Version.
        :type: str
        """
        
        self._commit_id = commit_id

    @property
    def build_date(self):
        """
        Gets the build_date of this Version.


        :return: The build_date of this Version.
        :rtype: str
        """
        return self._build_date

    @build_date.setter
    def build_date(self, build_date):
        """
        Sets the build_date of this Version.


        :param build_date: The build_date of this Version.
        :type: str
        """
        
        self._build_date = build_date

    @property
    def environments(self):
        """
        Gets the environments of this Version.


        :return: The environments of this Version.
        :rtype: EnvironmentVersion
        """
        return self._environments

    @environments.setter
    def environments(self, environments):
        """
        Sets the environments of this Version.


        :param environments: The environments of this Version.
        :type: EnvironmentVersion
        """
        
        self._environments = environments

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




