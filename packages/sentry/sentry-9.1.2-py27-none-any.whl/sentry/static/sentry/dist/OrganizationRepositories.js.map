{"version":3,"sources":["webpack:///./app/actionCreators/integrations.jsx","webpack:///./app/components/repositoryRow.jsx","webpack:///./app/views/settings/organizationRepositories/organizationRepositories.jsx","webpack:///./app/views/settings/organizationRepositories/index.jsx"],"names":["__webpack_require__","d","__webpack_exports__","deleteRepository","cancelDeleteRepository","migrateRepository","addRepository","app_api__WEBPACK_IMPORTED_MODULE_0__","app_actionCreators_indicator__WEBPACK_IMPORTED_MODULE_1__","app_locale__WEBPACK_IMPORTED_MODULE_2__","Client","client","orgId","repositoryId","addLoadingMessage","promise","requestPromise","concat","method","then","clearIndicators","addErrorMessage","t","data","status","applyRepositoryAddComplete","repo","message","tct","name","addSuccessMessage","errorData","text","responseJSON","errors","__all__","integration","integrationId","id","installation","identifier","provider","key","RepositoryRow","cancelDelete","_this$props","_this","props","api","repository","onRepositoryChange","deleteRepo","_this$props2","_this2","this","_this$props3","showProvider","isActive","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","app_components_acl_access__WEBPACK_IMPORTED_MODULE_12__","access","_ref","hasAccess","StyledRow","grid_emotion__WEBPACK_IMPORTED_MODULE_5__","direction","RepositoryTitle","getStatusLabel","StyledButton","size","onClick","disabled","data-test-id","url","href","replace","app_components_confirm__WEBPACK_IMPORTED_MODULE_14__","onConfirm","app_components_button__WEBPACK_IMPORTED_MODULE_13__","icon","React","Component","propTypes","Repository","PropTypes","object","isRequired","string","bool","func","defaultProps","styled","SpreadLayout","target","p","theme","borderLight","space","Button","Box","OrganizationRepositories","params","itemList","hasItemList","length","react_default","settingsPageHeader","title","alertLink","to","className","textBlock","link","panels","disablePadding","index_es","px","map","repositoryRow","mb","heroIcon","src","components_button","array","OrganizationRepositoriesContainer","state","forEach","item","setState","onAddRepo","push","sortArray","query","Fragment","organizationRepositories_OrganizationRepositories","extends_default","itemListPageLinks","pagination","pageLinks","AsyncView"],"mappings":"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","file":"OrganizationRepositories.js","sourcesContent":["import {Client} from 'app/api';\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n  clearIndicators,\n} from 'app/actionCreators/indicator';\nimport {t, tct} from 'app/locale';\n\nconst api = new Client();\n\n/**\n * Removes an integration from a project.\n *\n * @param {String} orgId Organization Slug\n * @param {String} projectId Project Slug\n * @param {Object} integration The organization integration to remove\n */\nexport function removeIntegrationFromProject(orgId, projectId, integration) {\n  const endpoint = `/projects/${orgId}/${projectId}/integrations/${integration.id}/`;\n  addLoadingMessage();\n\n  return api.requestPromise(endpoint, {method: 'DELETE'}).then(\n    () => {\n      addSuccessMessage(t('Disabled %s for %s', integration.name, projectId));\n    },\n    err => {\n      addErrorMessage(t('Failed to disable %s for %s', integration.name, projectId));\n    }\n  );\n}\n\n/**\n * Add an integration to a project\n *\n * @param {String} orgId Organization Slug\n * @param {String} projectId Project Slug\n * @param {Object} integration The organization integration to add\n */\nexport function addIntegrationToProject(orgId, projectId, integration) {\n  const endpoint = `/projects/${orgId}/${projectId}/integrations/${integration.id}/`;\n  addLoadingMessage();\n\n  return api.requestPromise(endpoint, {method: 'PUT'}).then(\n    () => {\n      addSuccessMessage(t('Enabled %s for %s', integration.name, projectId));\n    },\n    err => {\n      addErrorMessage(t('Failed to enabled %s for %s', integration.name, projectId));\n    }\n  );\n}\n\n/**\n * Delete a respository\n *\n * @param {Object} client ApiClient\n * @param {String} orgId Organization Slug\n * @param {String} repositoryId Repository ID\n */\nexport function deleteRepository(client, orgId, repositoryId) {\n  addLoadingMessage();\n  const promise = client.requestPromise(\n    `/organizations/${orgId}/repos/${repositoryId}/`,\n    {\n      method: 'DELETE',\n    }\n  );\n  promise.then(\n    () => clearIndicators(),\n    () => addErrorMessage(t('Unable to delete repository.'))\n  );\n  return promise;\n}\n\n/**\n * Cancel the deletion of a respository\n *\n * @param {Object} client ApiClient\n * @param {String} orgId Organization Slug\n * @param {String} repositoryId Repository ID\n */\nexport function cancelDeleteRepository(client, orgId, repositoryId) {\n  addLoadingMessage();\n  const promise = client.requestPromise(\n    `/organizations/${orgId}/repos/${repositoryId}/`,\n    {\n      method: 'PUT',\n      data: {status: 'visible'},\n    }\n  );\n  promise.then(\n    () => clearIndicators(),\n    () => addErrorMessage(t('Unable to cancel deletion.'))\n  );\n  return promise;\n}\n\nfunction applyRepositoryAddComplete(promise) {\n  promise.then(\n    repo => {\n      const message = tct('[repo] has been successfully added.', {\n        repo: repo.name,\n      });\n      addSuccessMessage(message);\n    },\n    errorData => {\n      const text = errorData.responseJSON.errors\n        ? errorData.responseJSON.errors.__all__\n        : t('Unable to add repository.');\n      addErrorMessage(text);\n    }\n  );\n  return promise;\n}\n\n/**\n * Migrate a repository to a new integration.\n *\n * @param {Object} client ApiClient\n * @param {String} orgId Organization Slug\n * @param {String} repositoryId Repository ID\n * @param {Object} integration Integration provider data.\n */\nexport function migrateRepository(client, orgId, repositoryId, integration) {\n  const data = {integrationId: integration.id};\n  addLoadingMessage();\n  const promise = client.requestPromise(\n    `/organizations/${orgId}/repos/${repositoryId}/`,\n    {\n      data,\n      method: 'PUT',\n    }\n  );\n  return applyRepositoryAddComplete(promise);\n}\n\n/**\n * Add a repository\n *\n * @param {Object} client ApiClient\n * @param {String} orgId Organization Slug\n * @param {String} name Repository identifier/name to add\n * @param {Object} integration Integration provider data.\n */\nexport function addRepository(client, orgId, name, integration) {\n  const data = {\n    installation: integration.id,\n    identifier: name,\n    provider: `integrations:${integration.provider.key}`,\n  };\n  addLoadingMessage();\n  const promise = client.requestPromise(`/organizations/${orgId}/repos/`, {\n    method: 'POST',\n    data,\n  });\n  return applyRepositoryAddComplete(promise);\n}\n","import {Box, Flex} from 'grid-emotion';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport {Repository} from 'app/sentryTypes';\nimport {deleteRepository, cancelDeleteRepository} from 'app/actionCreators/integrations';\nimport {t} from 'app/locale';\nimport Access from 'app/components/acl/access';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport SpreadLayout from 'app/components/spreadLayout';\nimport space from 'app/styles/space';\n\nclass RepositoryRow extends React.Component {\n  static propTypes = {\n    repository: Repository,\n    api: PropTypes.object.isRequired,\n    orgId: PropTypes.string.isRequired,\n    showProvider: PropTypes.bool,\n    onRepositoryChange: PropTypes.func,\n  };\n\n  static defaultProps = {\n    showProvider: false,\n  };\n\n  getStatusLabel(repo) {\n    switch (repo.status) {\n      case 'pending_deletion':\n        return 'Deletion Queued';\n      case 'deletion_in_progress':\n        return 'Deletion in Progress';\n      case 'disabled':\n        return 'Disabled';\n      case 'hidden':\n        return 'Disabled';\n      default:\n        return null;\n    }\n  }\n\n  cancelDelete = () => {\n    const {api, orgId, repository, onRepositoryChange} = this.props;\n    cancelDeleteRepository(api, orgId, repository.id).then(\n      data => {\n        if (onRepositoryChange) {\n          onRepositoryChange(data);\n        }\n      },\n      () => {}\n    );\n  };\n\n  deleteRepo = () => {\n    const {api, orgId, repository, onRepositoryChange} = this.props;\n    deleteRepository(api, orgId, repository.id).then(\n      data => {\n        if (onRepositoryChange) {\n          onRepositoryChange(data);\n        }\n      },\n      () => {}\n    );\n  };\n\n  get isActive() {\n    return this.props.repository.status === 'active';\n  }\n\n  render() {\n    const {repository, showProvider} = this.props;\n    const isActive = this.isActive;\n\n    return (\n      <Access access={['org:admin']}>\n        {({hasAccess}) => (\n          <StyledRow status={repository.status}>\n            <Flex direction=\"column\">\n              <RepositoryTitle>\n                <strong>{repository.name}</strong>\n                {!isActive && <small> &mdash; {this.getStatusLabel(repository)}</small>}\n                {repository.status === 'pending_deletion' && (\n                  <StyledButton\n                    size=\"xsmall\"\n                    onClick={this.cancelDelete}\n                    disabled={!hasAccess}\n                    data-test-id=\"repo-cancel\"\n                  >\n                    {t('Cancel')}\n                  </StyledButton>\n                )}\n              </RepositoryTitle>\n              <Box>\n                {showProvider && <small>{repository.provider.name}</small>}\n                {showProvider && repository.url && <span>&nbsp;&mdash;&nbsp;</span>}\n                {repository.url && (\n                  <small>\n                    <a href={repository.url}>{repository.url.replace('https://', '')}</a>\n                  </small>\n                )}\n              </Box>\n            </Flex>\n\n            <Confirm\n              disabled={!hasAccess || (!isActive && repository.status !== 'disabled')}\n              onConfirm={this.deleteRepo}\n              message={t(\n                'Are you sure you want to remove this repository? All associated commit data will be removed in addition to the repository.'\n              )}\n            >\n              <Button size=\"xsmall\" icon=\"icon-trash\" disabled={!hasAccess} />\n            </Confirm>\n          </StyledRow>\n        )}\n      </Access>\n    );\n  }\n}\n\nconst StyledRow = styled(SpreadLayout)`\n  border-bottom: 1px solid ${p => p.theme.borderLight};\n  /* shorter top padding because of title lineheight */\n  padding: ${space(1)} ${space(2)} ${space(2)};\n  flex: 1;\n  align-items: space-between;\n\n  ${p =>\n    p.status === 'disabled' &&\n    `\n    filter: grayscale(1);\n    opacity: 0.4;\n  `};\n\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst StyledButton = styled(Button)`\n  margin-left: ${space(1)};\n`;\n\nconst RepositoryTitle = styled(Box)`\n  margin-bottom: ${space(1)};\n  /* accomodate cancel button height */\n  line-height: 26px;\n`;\n\nexport default RepositoryRow;\n","import {Box, Flex} from 'grid-emotion';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {t, tct} from 'app/locale';\nimport AlertLink from 'app/components/alertLink';\nimport Button from 'app/components/button';\nimport HeroIcon from 'app/components/heroIcon';\nimport RepositoryRow from 'app/components/repositoryRow';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nexport default class OrganizationRepositories extends React.Component {\n  static propTypes = {\n    itemList: PropTypes.array,\n    api: PropTypes.object,\n    onRepositoryChange: PropTypes.func,\n  };\n\n  render() {\n    const {params, itemList, api, onRepositoryChange} = this.props;\n    const {orgId} = params;\n    const hasItemList = itemList && itemList.length > 0;\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('Repositories')} />\n        <AlertLink to={`/settings/${orgId}/integrations/`}>\n          {t(\n            'Want to add a repository to start tracking commits? Install or configure your version control integration here.'\n          )}\n        </AlertLink>\n        {!hasItemList && (\n          <div className=\"m-b-2\">\n            <TextBlock>\n              {t(\n                'Connecting a repository allows Sentry to capture commit data via webhooks. ' +\n                  'This enables features like suggested assignees and resolving issues via commit message. ' +\n                  \"Once you've connected a repository, you can associate commits with releases via the API.\"\n              )}\n              &nbsp;\n              {tct('See our [link:documentation] for more details.', {\n                link: <a href=\"https://docs.sentry.io/learn/releases/\" />,\n              })}\n            </TextBlock>\n          </div>\n        )}\n\n        {hasItemList ? (\n          <Panel>\n            <PanelHeader disablePadding={true}>\n              <Flex>\n                <Box px={2}>{t('Added Repositories')}</Box>\n              </Flex>\n            </PanelHeader>\n            <PanelBody>\n              <Box>\n                {itemList.map(repo => {\n                  return (\n                    <RepositoryRow\n                      key={repo.id}\n                      repository={repo}\n                      api={api}\n                      showProvider={true}\n                      orgId={orgId}\n                      onRepositoryChange={onRepositoryChange}\n                    />\n                  );\n                })}\n              </Box>\n            </PanelBody>\n          </Panel>\n        ) : (\n          <Panel className=\"align-center p-x-2 p-y-1\">\n            <Box mb={1}>\n              <HeroIcon src=\"icon-commit\" />\n            </Box>\n            <h3>{t('Sentry is better with commit data')}</h3>\n            <TextBlock>\n              {t(\n                'Adding one or more repositories will enable enhanced releases and the ability to resolve Sentry Issues via git message.'\n              )}\n            </TextBlock>\n            <Box mb={1}>\n              <Button href=\"https://docs.sentry.io/learn/releases/\">\n                {t('Learn more')}\n              </Button>\n            </Box>\n          </Panel>\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport {sortArray} from 'app/utils';\nimport AsyncView from 'app/views/asyncView';\nimport Pagination from 'app/components/pagination';\nimport OrganizationRepositories from './organizationRepositories';\n\nexport default class OrganizationRepositoriesContainer extends AsyncView {\n  getEndpoints() {\n    const {orgId} = this.props.params;\n    return [\n      ['itemList', `/organizations/${orgId}/repos/`, {query: {status: ''}}],\n      ['repoConfig', `/organizations/${orgId}/config/repos/`],\n    ];\n  }\n\n  // Callback used by child component to signal state change\n  onRepositoryChange = data => {\n    const itemList = this.state.itemList;\n    itemList.forEach(item => {\n      if (item.id === data.id) {\n        item.status = data.status;\n      }\n    });\n    this.setState({itemList});\n  };\n\n  onAddRepo = repo => {\n    const itemList = this.state.itemList;\n    itemList.push(repo);\n    this.setState({\n      itemList: sortArray(itemList, item => item.name),\n    });\n  };\n\n  getTitle() {\n    return 'Repositories';\n  }\n\n  renderBody() {\n    return (\n      <React.Fragment>\n        <OrganizationRepositories\n          {...this.props}\n          {...this.state}\n          api={this.api}\n          onAddRepo={this.onAddRepo}\n          onRepositoryChange={this.onRepositoryChange}\n        />\n        {this.state.itemListPageLinks && (\n          <Pagination pageLinks={this.state.itemListPageLinks} {...this.props} />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n"],"sourceRoot":""}