# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class SendEmailResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, email=None, status=None, reject_reason=None):
        """
        SendEmailResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'email': 'str',
            'status': 'str',
            'reject_reason': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'email': 'email',
            'status': 'status',
            'reject_reason': 'rejectReason'
        }

        self._id = id
        self._email = email
        self._status = status
        self._reject_reason = reject_reason

    @property
    def id(self):
        """
        Gets the id of this SendEmailResponse.


        :return: The id of this SendEmailResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SendEmailResponse.


        :param id: The id of this SendEmailResponse.
        :type: str
        """
        
        self._id = id

    @property
    def email(self):
        """
        Gets the email of this SendEmailResponse.


        :return: The email of this SendEmailResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this SendEmailResponse.


        :param email: The email of this SendEmailResponse.
        :type: str
        """
        
        self._email = email

    @property
    def status(self):
        """
        Gets the status of this SendEmailResponse.


        :return: The status of this SendEmailResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this SendEmailResponse.


        :param status: The status of this SendEmailResponse.
        :type: str
        """
        
        self._status = status

    @property
    def reject_reason(self):
        """
        Gets the reject_reason of this SendEmailResponse.


        :return: The reject_reason of this SendEmailResponse.
        :rtype: str
        """
        return self._reject_reason

    @reject_reason.setter
    def reject_reason(self, reject_reason):
        """
        Sets the reject_reason of this SendEmailResponse.


        :param reject_reason: The reject_reason of this SendEmailResponse.
        :type: str
        """
        
        self._reject_reason = reject_reason

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




