{"version":3,"sources":["webpack:///./app/views/releases/list/projectReleases/releaseEmptyState.jsx","webpack:///./app/views/releases/list/projectReleases/index.jsx"],"names":["ReleaseEmptyState","react_default","a","createElement","emptyStateWarning","this","props","message","href","t","React","Component","propTypes","PropTypes","string","isRequired","ProjectReleases","createReactClass","displayName","setProjectNavSection","func","environment","SentryTypes","Environment","contextTypes","organization","Organization","project","Project","mixins","ApiMixin","getInitialState","releaseList","loading","error","query","location","pageLinks","componentWillMount","_this$props","orgId","params","Set","context","features","has","browserHistory","replace","concat","search","fetchData","componentDidMount","_this$context","analytics","org_id","parseInt","id","project_id","componentWillReceiveProps","nextProps","isEqual_default","omit_default","qs","parse","queryParams","setState","onSearch","targetQueryParams","_this$props$params","projectId","push","pathname","_this","_this$props$params2","url","objectSpread_default","per_page","state","name","api","request","success","data","_","jqXHR","getResponseHeader","renderStreamBody","renderLoading","loadingError","onRetry","length","releaseProgress","renderNoQueryResults","renderEmpty","loadingIndicator","anyProjectReleases","latestRelease","tct","env","releaseLanding","releaseEmptyState","render","_this$context2","projectSlug","slug","orgName","react_document_title_default","title","className","guideAnchor","target","type","style","marginBottom","pageHeading","withMargins","marginTop","searchBar","defaultQuery","placeholder","panels","releaseListHeader","pagination","withEnvironmentInQueryString"],"mappings":"2bAMMA,2IAMF,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,SAAIE,KAAKC,MAAMC,SACfN,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,KAAGK,KAAK,0CACLC,YAAE,qDAXiBC,IAAMC,WAAhCX,EACGY,UAAY,CACjBL,QAASM,IAAUC,OAAOC,YAiBff,oFCEf,IAEMgB,EAAkBC,IAAiB,CACvCC,YAAa,kBAEbN,UAAW,CACTO,qBAAsBN,IAAUO,KAChCC,YAAaC,UAAYC,aAG3BC,aAAc,CACZC,aAAcH,UAAYI,aAC1BC,QAASL,UAAYM,SAGvBC,OAAQ,CAACC,WAETC,gBAfuC,WAkBrC,MAAO,CACLC,YAAa,GACbC,SAAS,EACTC,OAAO,EACPC,MANkB9B,KAAKC,MAAM8B,SAASD,MAMnBA,OAxBH,GAyBhBE,UAAW,GACXhB,YAAahB,KAAKC,MAAMe,cAI5BiB,mBA5BuC,WA4BlB,IAAAC,EAEiBlC,KAAKC,MAAlC8B,EAFYG,EAEZH,SAAmBI,EAFPD,EAEFE,OAASD,MACN,IAAIE,IAAIrC,KAAKsC,QAAQlB,aAAamB,UAAUC,IAAI,aAElEC,iBAAeC,QAAf,kBAAAC,OAAyCR,EAAzC,cAAAQ,OAA2DZ,EAASa,SAGtE5C,KAAKC,MAAMa,qBAAqB,YAChCd,KAAK6C,aAGPC,kBAxCuC,WAwCnB,IAAAC,EACc/C,KAAKsC,QAA9BlB,EADW2B,EACX3B,aAAcE,EADHyB,EACGzB,QAErB0B,YAAU,sBAAuB,CAC/BC,OAAQC,SAAS9B,EAAa+B,GAAI,IAClCC,WAAYF,SAAS5B,EAAQ6B,GAAI,OAIrCE,0BAjDuC,SAiDbC,GAMxB,IAL0BC,IACxBC,IAAKC,IAAGC,MAAMJ,EAAUvB,SAASa,QAAS,eAC1CY,IAAKC,IAAGC,MAAM1D,KAAKC,MAAM8B,SAASa,QAAS,gBAGvB,CACpB,IAAMe,EAAcL,EAAUvB,SAASD,MACvC9B,KAAK4D,SACH,CACE9B,MAAO6B,EAAY7B,OAErB9B,KAAK6C,WAILS,EAAUtC,cAAgBhB,KAAKC,MAAMe,aACvChB,KAAK4D,SAAS,CAAC5C,YAAasC,EAAUtC,aAAchB,KAAK6C,YAI7DgB,SAtEuC,SAsE9B/B,GACP,IAAMgC,EAAoB,GACZ,KAAVhC,IACFgC,EAAkBhC,MAAQA,GAHd,IAAAiC,EAMa/D,KAAKC,MAAMmC,OAA/BD,EANO4B,EAMP5B,MAAO6B,EANAD,EAMAC,UACdvB,iBAAewB,KAAK,CAClBC,SAAQ,IAAAvB,OAAMR,EAAN,KAAAQ,OAAeqB,EAAf,cACRlC,MAAOgC,KAIXjB,UAnFuC,WAmF3B,IAAAsB,EAAAnE,KACVA,KAAK4D,SAAS,CACZhC,SAAS,EACTC,OAAO,IAHC,IAAAuC,EAMiBpE,KAAKC,MAAMmC,OAA/BD,EANGiC,EAMHjC,MAAO6B,EANJI,EAMIJ,UAERK,EAAG,aAAA1B,OAAgBR,EAAhB,KAAAQ,OAAyBqB,EAAzB,cAEHlC,EAAQwC,IAAA,GACTtE,KAAKC,MAAM8B,SAASD,MADd,CAETyC,SAAU,GACVzC,MAAO9B,KAAKwE,MAAM1C,QAGhB9B,KAAKwE,MAAMxD,YACbc,EAAMd,YAAchB,KAAKwE,MAAMxD,YAAYyD,YAEpC3C,EAAMd,YAGfhB,KAAK0E,IAAIC,QAAQN,EAAK,CACpBvC,QACA8C,QAAS,SAACC,EAAMC,EAAGC,GACjBZ,EAAKP,SAAS,CACZ/B,OAAO,EACPD,SAAS,EACTD,YAAakD,EACb7C,UAAW+C,EAAMC,kBAAkB,WAGvCnD,MAAO,WACLsC,EAAKP,SAAS,CACZ/B,OAAO,EACPD,SAAS,QAMjBqD,iBA5HuC,WA6HrC,IACO7C,EAAUpC,KAAKC,MAAfmC,OAuBP,OArBIpC,KAAKwE,MAAM5C,QACN5B,KAAKkF,gBACHlF,KAAKwE,MAAM3C,MACbjC,EAAAC,EAAAC,cAACqF,EAAA,QAAD,CAAcC,QAASpF,KAAK6C,YAC1B7C,KAAKwE,MAAM7C,YAAY0D,OAAS,EAEvCzF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwF,EAAA,EAAD,CAAiBhE,QAAStB,KAAKsC,QAAQhB,UACvC1B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CACEQ,MAAOC,EAAOD,MACd6B,UAAW5B,EAAO4B,UAClBrC,YAAa3B,KAAKwE,MAAM7C,eAIrB3B,KAAKwE,MAAM1C,OAjJJ,KAiJa9B,KAAKwE,MAAM1C,MACjC9B,KAAKuF,uBAELvF,KAAKwF,eAMhBN,cAxJuC,WAyJrC,OAAOtF,EAAAC,EAAAC,cAAC2F,EAAA,QAAD,OAGTF,qBA5JuC,WA6JrC,OACE3F,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,SAAIM,YAAE,6CAKZoF,YApKuC,WAoKzB,IACLxE,EAAehB,KAAKwE,MAApBxD,YACAM,EAAWtB,KAAKsC,QAAhBhB,QACDoE,EAAqBpE,EAAQqE,cAE7BzF,EAAUc,EACZ4E,cAAI,oEAAqE,CACvEC,IAAK7E,EAAYH,cAEnBT,YAAE,4CAEN,OAA8B,OAAvBsF,EACL9F,EAAAC,EAAAC,cAACgG,EAAA,EAAD,MAEAlG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwF,EAAA,EAAD,CAAiBhE,QAASA,IAC1B1B,EAAAC,EAAAC,cAACiG,EAAD,CAAmB7F,QAASA,MAKlC8F,OAzLuC,WAyL9B,IAAAC,EAC+DjG,KAAKsC,QAApD4D,EADhBD,EACA3E,QAAU6E,KAAyCC,EADnDH,EAC8B7E,aAAeqD,KAEpD,OACE7E,EAAAC,EAAAC,cAACuG,EAAAxG,EAAD,CAAeyG,MAAK,cAAA3D,OAAgBuD,EAAhB,OAAAvD,OAAiCyD,EAAjC,cAClBxG,EAAAC,EAAAC,cAAA,OAAKyG,UAAU,wBACb3G,EAAAC,EAAAC,cAAC0G,EAAA,QAAD,CAAaC,OAAO,WAAWC,KAAK,cACpC9G,EAAAC,EAAAC,cAAA,OAAKyG,UAAU,MAAMI,MAAO,CAACC,aAAc,QACzChH,EAAAC,EAAAC,cAAA,OAAKyG,UAAU,YACb3G,EAAAC,EAAAC,cAAC+G,EAAA,EAAD,CAAaC,aAAW,GAAE1G,YAAE,cAE9BR,EAAAC,EAAAC,cAAA,OAAKyG,UAAU,0BAA0BI,MAAO,CAACI,UAAW,QAC1DnH,EAAAC,EAAAC,cAACkH,EAAA,EAAD,CACEC,aAAa,GACbC,YAAa9G,YAAE,wBACf0B,MAAO9B,KAAKwE,MAAM1C,MAClB+B,SAAU7D,KAAK6D,aAIrBjE,EAAAC,EAAAC,cAACqH,EAAA,EAAD,KACEvH,EAAAC,EAAAC,cAACsH,EAAA,EAAD,MACAxH,EAAAC,EAAAC,cAACqH,EAAA,EAAD,KAAYnH,KAAKiF,qBAEnBrF,EAAAC,EAAAC,cAACuH,EAAA,QAAD,CAAYrF,UAAWhC,KAAKwE,MAAMxC,iBAQ7BsF,sBAA6B3G","file":"ProjectReleases.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport {t} from 'app/locale';\n\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\n\nclass ReleaseEmptyState extends React.Component {\n  static propTypes = {\n    message: PropTypes.string.isRequired,\n  };\n\n  render() {\n    return (\n      <EmptyStateWarning>\n        <p>{this.props.message}</p>\n        <p>\n          <a href=\"https://docs.sentry.io/learn/releases/\">\n            {t('Learn how to integrate Release Tracking')}\n          </a>\n        </p>\n      </EmptyStateWarning>\n    );\n  }\n}\n\nexport default ReleaseEmptyState;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport createReactClass from 'create-react-class';\nimport {browserHistory} from 'react-router';\nimport DocumentTitle from 'react-document-title';\nimport {omit, isEqual} from 'lodash';\nimport qs from 'query-string';\n\nimport {analytics} from 'app/utils/analytics';\nimport SentryTypes from 'app/sentryTypes';\nimport ApiMixin from 'app/mixins/apiMixin';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport Pagination from 'app/components/pagination';\nimport GuideAnchor from 'app/components/assistant/guideAnchor';\nimport SearchBar from 'app/components/searchBar';\nimport {t, tct} from 'app/locale';\nimport {Panel, PanelBody} from 'app/components/panels';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport withEnvironmentInQueryString from 'app/utils/withEnvironmentInQueryString';\nimport PageHeading from 'app/components/pageHeading';\nimport ReleaseLanding from '../shared/releaseLanding';\nimport ReleaseEmptyState from './releaseEmptyState';\nimport ReleaseList from '../shared/releaseList';\nimport ReleaseListHeader from '../shared/releaseListHeader';\nimport ReleaseProgress from '../shared/releaseProgress';\n\nconst DEFAULT_QUERY = '';\n\nconst ProjectReleases = createReactClass({\n  displayName: 'ProjectReleases',\n\n  propTypes: {\n    setProjectNavSection: PropTypes.func,\n    environment: SentryTypes.Environment,\n  },\n\n  contextTypes: {\n    organization: SentryTypes.Organization,\n    project: SentryTypes.Project,\n  },\n\n  mixins: [ApiMixin],\n\n  getInitialState() {\n    const queryParams = this.props.location.query;\n\n    return {\n      releaseList: [],\n      loading: true,\n      error: false,\n      query: queryParams.query || DEFAULT_QUERY,\n      pageLinks: '',\n      environment: this.props.environment,\n    };\n  },\n\n  componentWillMount() {\n    // Redirect any Sentry 10 user that has followed an old link and ended up here\n    const {location, params: {orgId}} = this.props;\n    const hasSentry10 = new Set(this.context.organization.features).has('sentry10');\n    if (hasSentry10) {\n      browserHistory.replace(`/organizations/${orgId}/releases/${location.search}`);\n    }\n\n    this.props.setProjectNavSection('releases');\n    this.fetchData();\n  },\n\n  componentDidMount() {\n    const {organization, project} = this.context;\n\n    analytics('releases.tab_viewed', {\n      org_id: parseInt(organization.id, 10),\n      project_id: parseInt(project.id, 10),\n    });\n  },\n\n  componentWillReceiveProps(nextProps) {\n    const searchHasChanged = !isEqual(\n      omit(qs.parse(nextProps.location.search), 'environment'),\n      omit(qs.parse(this.props.location.search), 'environment')\n    );\n\n    if (searchHasChanged) {\n      const queryParams = nextProps.location.query;\n      this.setState(\n        {\n          query: queryParams.query,\n        },\n        this.fetchData\n      );\n    }\n\n    if (nextProps.environment !== this.props.environment) {\n      this.setState({environment: nextProps.environment}, this.fetchData);\n    }\n  },\n\n  onSearch(query) {\n    const targetQueryParams = {};\n    if (query !== '') {\n      targetQueryParams.query = query;\n    }\n\n    const {orgId, projectId} = this.props.params;\n    browserHistory.push({\n      pathname: `/${orgId}/${projectId}/releases/`,\n      query: targetQueryParams,\n    });\n  },\n\n  fetchData() {\n    this.setState({\n      loading: true,\n      error: false,\n    });\n\n    const {orgId, projectId} = this.props.params;\n\n    const url = `/projects/${orgId}/${projectId}/releases/`;\n\n    const query = {\n      ...this.props.location.query,\n      per_page: 20,\n      query: this.state.query,\n    };\n\n    if (this.state.environment) {\n      query.environment = this.state.environment.name;\n    } else {\n      delete query.environment;\n    }\n\n    this.api.request(url, {\n      query,\n      success: (data, _, jqXHR) => {\n        this.setState({\n          error: false,\n          loading: false,\n          releaseList: data,\n          pageLinks: jqXHR.getResponseHeader('Link'),\n        });\n      },\n      error: () => {\n        this.setState({\n          error: true,\n          loading: false,\n        });\n      },\n    });\n  },\n\n  renderStreamBody() {\n    let body;\n    const {params} = this.props;\n\n    if (this.state.loading) {\n      body = this.renderLoading();\n    } else if (this.state.error) {\n      body = <LoadingError onRetry={this.fetchData} />;\n    } else if (this.state.releaseList.length > 0) {\n      body = (\n        <div>\n          <ReleaseProgress project={this.context.project} />\n          <ReleaseList\n            orgId={params.orgId}\n            projectId={params.projectId}\n            releaseList={this.state.releaseList}\n          />\n        </div>\n      );\n    } else if (this.state.query && this.state.query !== DEFAULT_QUERY) {\n      body = this.renderNoQueryResults();\n    } else {\n      body = this.renderEmpty();\n    }\n\n    return body;\n  },\n\n  renderLoading() {\n    return <LoadingIndicator />;\n  },\n\n  renderNoQueryResults() {\n    return (\n      <EmptyStateWarning>\n        <p>{t('Sorry, no releases match your filters.')}</p>\n      </EmptyStateWarning>\n    );\n  },\n\n  renderEmpty() {\n    const {environment} = this.state;\n    const {project} = this.context;\n    const anyProjectReleases = project.latestRelease;\n\n    const message = environment\n      ? tct(\"There don't seem to be any releases in your [env] environment yet\", {\n          env: environment.displayName,\n        })\n      : t(\"There don't seem to be any releases yet.\");\n\n    return anyProjectReleases === null ? (\n      <ReleaseLanding />\n    ) : (\n      <div>\n        <ReleaseProgress project={project} />\n        <ReleaseEmptyState message={message} />\n      </div>\n    );\n  },\n\n  render() {\n    const {project: {slug: projectSlug}, organization: {name: orgName}} = this.context;\n\n    return (\n      <DocumentTitle title={`Releases - ${projectSlug} - ${orgName} - Sentry`}>\n        <div className=\"ref-project-releases\">\n          <GuideAnchor target=\"releases\" type=\"invisible\" />\n          <div className=\"row\" style={{marginBottom: '5px'}}>\n            <div className=\"col-sm-7\">\n              <PageHeading withMargins>{t('Releases')}</PageHeading>\n            </div>\n            <div className=\"col-sm-5 release-search\" style={{marginTop: '5px'}}>\n              <SearchBar\n                defaultQuery=\"\"\n                placeholder={t('Search for a release')}\n                query={this.state.query}\n                onSearch={this.onSearch}\n              />\n            </div>\n          </div>\n          <Panel>\n            <ReleaseListHeader />\n            <PanelBody>{this.renderStreamBody()}</PanelBody>\n          </Panel>\n          <Pagination pageLinks={this.state.pageLinks} />\n        </div>\n      </DocumentTitle>\n    );\n  },\n});\n\nexport {ProjectReleases}; // For tests\nexport default withEnvironmentInQueryString(ProjectReleases);\n"],"sourceRoot":""}