# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class CliUsageEvent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cli_version=None, command_name=None, correct_usage=None, full_command=None, local_config=None, locale=None, os=None, python_version=None):
        """
        CliUsageEvent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cli_version': 'str',
            'command_name': 'str',
            'correct_usage': 'bool',
            'full_command': 'str',
            'local_config': 'bool',
            'locale': 'str',
            'os': 'str',
            'python_version': 'str'
        }

        self.attribute_map = {
            'cli_version': 'cliVersion',
            'command_name': 'commandName',
            'correct_usage': 'correctUsage',
            'full_command': 'fullCommand',
            'local_config': 'localConfig',
            'locale': 'locale',
            'os': 'os',
            'python_version': 'pythonVersion'
        }

        self._cli_version = cli_version
        self._command_name = command_name
        self._correct_usage = correct_usage
        self._full_command = full_command
        self._local_config = local_config
        self._locale = locale
        self._os = os
        self._python_version = python_version

    @property
    def cli_version(self):
        """
        Gets the cli_version of this CliUsageEvent.


        :return: The cli_version of this CliUsageEvent.
        :rtype: str
        """
        return self._cli_version

    @cli_version.setter
    def cli_version(self, cli_version):
        """
        Sets the cli_version of this CliUsageEvent.


        :param cli_version: The cli_version of this CliUsageEvent.
        :type: str
        """
        
        self._cli_version = cli_version

    @property
    def command_name(self):
        """
        Gets the command_name of this CliUsageEvent.


        :return: The command_name of this CliUsageEvent.
        :rtype: str
        """
        return self._command_name

    @command_name.setter
    def command_name(self, command_name):
        """
        Sets the command_name of this CliUsageEvent.


        :param command_name: The command_name of this CliUsageEvent.
        :type: str
        """
        
        self._command_name = command_name

    @property
    def correct_usage(self):
        """
        Gets the correct_usage of this CliUsageEvent.


        :return: The correct_usage of this CliUsageEvent.
        :rtype: bool
        """
        return self._correct_usage

    @correct_usage.setter
    def correct_usage(self, correct_usage):
        """
        Sets the correct_usage of this CliUsageEvent.


        :param correct_usage: The correct_usage of this CliUsageEvent.
        :type: bool
        """
        
        self._correct_usage = correct_usage

    @property
    def full_command(self):
        """
        Gets the full_command of this CliUsageEvent.


        :return: The full_command of this CliUsageEvent.
        :rtype: str
        """
        return self._full_command

    @full_command.setter
    def full_command(self, full_command):
        """
        Sets the full_command of this CliUsageEvent.


        :param full_command: The full_command of this CliUsageEvent.
        :type: str
        """
        
        self._full_command = full_command

    @property
    def local_config(self):
        """
        Gets the local_config of this CliUsageEvent.


        :return: The local_config of this CliUsageEvent.
        :rtype: bool
        """
        return self._local_config

    @local_config.setter
    def local_config(self, local_config):
        """
        Sets the local_config of this CliUsageEvent.


        :param local_config: The local_config of this CliUsageEvent.
        :type: bool
        """
        
        self._local_config = local_config

    @property
    def locale(self):
        """
        Gets the locale of this CliUsageEvent.


        :return: The locale of this CliUsageEvent.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """
        Sets the locale of this CliUsageEvent.


        :param locale: The locale of this CliUsageEvent.
        :type: str
        """
        
        self._locale = locale

    @property
    def os(self):
        """
        Gets the os of this CliUsageEvent.


        :return: The os of this CliUsageEvent.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """
        Sets the os of this CliUsageEvent.


        :param os: The os of this CliUsageEvent.
        :type: str
        """
        
        self._os = os

    @property
    def python_version(self):
        """
        Gets the python_version of this CliUsageEvent.


        :return: The python_version of this CliUsageEvent.
        :rtype: str
        """
        return self._python_version

    @python_version.setter
    def python_version(self, python_version):
        """
        Sets the python_version of this CliUsageEvent.


        :param python_version: The python_version of this CliUsageEvent.
        :type: str
        """
        
        self._python_version = python_version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




