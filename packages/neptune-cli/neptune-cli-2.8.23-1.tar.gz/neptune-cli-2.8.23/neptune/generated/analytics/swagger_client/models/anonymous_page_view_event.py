# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class AnonymousPageViewEvent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, campaign_id=None, current_url=None, during_maintenance=None, initial_referrer=None, type=None):
        """
        AnonymousPageViewEvent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'campaign_id': 'str',
            'current_url': 'str',
            'during_maintenance': 'bool',
            'initial_referrer': 'str',
            'type': 'str'
        }

        self.attribute_map = {
            'campaign_id': 'campaignId',
            'current_url': 'currentUrl',
            'during_maintenance': 'duringMaintenance',
            'initial_referrer': 'initialReferrer',
            'type': 'type'
        }

        self._campaign_id = campaign_id
        self._current_url = current_url
        self._during_maintenance = during_maintenance
        self._initial_referrer = initial_referrer
        self._type = type

    @property
    def campaign_id(self):
        """
        Gets the campaign_id of this AnonymousPageViewEvent.


        :return: The campaign_id of this AnonymousPageViewEvent.
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """
        Sets the campaign_id of this AnonymousPageViewEvent.


        :param campaign_id: The campaign_id of this AnonymousPageViewEvent.
        :type: str
        """
        
        self._campaign_id = campaign_id

    @property
    def current_url(self):
        """
        Gets the current_url of this AnonymousPageViewEvent.


        :return: The current_url of this AnonymousPageViewEvent.
        :rtype: str
        """
        return self._current_url

    @current_url.setter
    def current_url(self, current_url):
        """
        Sets the current_url of this AnonymousPageViewEvent.


        :param current_url: The current_url of this AnonymousPageViewEvent.
        :type: str
        """
        
        self._current_url = current_url

    @property
    def during_maintenance(self):
        """
        Gets the during_maintenance of this AnonymousPageViewEvent.


        :return: The during_maintenance of this AnonymousPageViewEvent.
        :rtype: bool
        """
        return self._during_maintenance

    @during_maintenance.setter
    def during_maintenance(self, during_maintenance):
        """
        Sets the during_maintenance of this AnonymousPageViewEvent.


        :param during_maintenance: The during_maintenance of this AnonymousPageViewEvent.
        :type: bool
        """
        
        self._during_maintenance = during_maintenance

    @property
    def initial_referrer(self):
        """
        Gets the initial_referrer of this AnonymousPageViewEvent.
        This either an URI or 'direct', if the user came directly to the site.

        :return: The initial_referrer of this AnonymousPageViewEvent.
        :rtype: str
        """
        return self._initial_referrer

    @initial_referrer.setter
    def initial_referrer(self, initial_referrer):
        """
        Sets the initial_referrer of this AnonymousPageViewEvent.
        This either an URI or 'direct', if the user came directly to the site.

        :param initial_referrer: The initial_referrer of this AnonymousPageViewEvent.
        :type: str
        """
        
        self._initial_referrer = initial_referrer

    @property
    def type(self):
        """
        Gets the type of this AnonymousPageViewEvent.


        :return: The type of this AnonymousPageViewEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this AnonymousPageViewEvent.


        :param type: The type of this AnonymousPageViewEvent.
        :type: str
        """
        allowed_values = ["APP", "WWW", "DOCS"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




