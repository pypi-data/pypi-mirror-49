#!/usr/bin/env python
# -*- encoding: utf-8 -*-
"""

To install as normal Python with pip, go to the home project directory and type::
    pip install .
or to install in developer mode use::
    pip install -e .

To install with pip and the `--use-cython` option go to the home directory and type::
    pip install --install-option="--use-cython" .

To install with Cython in developer mode use::
    pip install --install-option="--use-cython" -e .

To force all the Cython .c files to be regenerated you can use the install
option `--force-regen`::
    pip install --install-option="--use-cython" --install-option="--force-regen" -e .

A setuptools-based setup module.

See:
   https://packaging.python.org/en/latest/distributing.html
   https://github.com/pypa/sampleproject

Docs on the setup function kwargs:
   https://packaging.python.org/distributing/#setup-args

"""

from __future__ import absolute_import, print_function

import glob
import os
import sys
from setuptools import setup, find_packages
import codecs # Use a consistent encoding.

PACKAGE_NAME = "typped"
BUILD_DIR_NAME = "cython_c_code" # Name of dir inside main package.
PACKAGE_CODE_DIR = os.path.join("src", PACKAGE_NAME)
# BUILD_DIR is where to put .c files; if set to None they are put with the .py files.
BUILD_DIR = os.path.join(PACKAGE_CODE_DIR, BUILD_DIR_NAME) # Cython .c files in subpackage.

from cython_setup import calculate_ext_modules, InstallCommand, DevelopCommand

project_dir, cython_C_files, cmdclass, ext_modules = calculate_ext_modules(
    PACKAGE_NAME=PACKAGE_NAME,
    PACKAGE_CODE_DIR=PACKAGE_CODE_DIR,
    BUILD_DIR_NAME=BUILD_DIR_NAME,
    BUILD_DIR=BUILD_DIR,

    USE_CYTHON=False, # Use Cython or at least the .c files already generated by Cython.
    FORCE_RECOMPILATION=False, # Force all files to be compiled.
    FORCE_REGENERATION=False, # Force all .c files to be regenerated (by deleting them).
    REGENERATE_C_CODE=True, # Either regenerate C code with Cython or use existing code.

    EXTRA_COMPILE_ARGS=[], # Extra compile arguments used for all compilations.
    COMPILER_IS_GCC=True, # Extra GCC compile args are used if true and compiling.
    EXTRA_GCC_COMPILE_ARGS=["-O1"], # ["-O3"] # Optimize code more than the default.

    INCLUDE_DIRS=[], # Include directories.

    # https://cython.readthedocs.io/en/latest/src/reference/compilation.html#compiler-directives
    GLOBAL_CYTHON_DIRECTIVES={ # Set as compiler_directives kwarg to cythonize.
            "infer_types": True,
            #"embedsignature": True, # For Sphinx.
            #"annotation_typing": False, # Whether to take type info from PEP484 annotations.
            "optimize.use_switch": True,
            "optimize.unpack_method_calls": True,
            "language_level": 3,
            },
    )

#
# Regular setup.py below.
#

# Get the long description from the README.rst file.
with codecs.open(os.path.join(project_dir, "README.rst"), encoding="utf-8") as f:
    long_description = f.read()

setup(
    name="typped",
    version="0.1.2", # Versions should comply with PEP440.
    description="A framework for generalized Pratt parsing which can optionally check simple types.",
    url="https://github.com/abarker/typped",
    keywords=["parser", "Pratt", "grammar", "language", "syntax", "syntax tree",
              "BNF", "EBNF", "typped"],
    install_requires=["pytest-helper", "pytest>=2.0"],

    license="MIT",
    classifiers=[
        # See https://pypi.python.org/pypi?%3Aaction=list_classifiers
        # Development Status: Common values are
        #   3 - Alpha
        #   4 - Beta
        #   5 - Production/Stable
        "Development Status :: 3 - Alpha",
        'Intended Audience :: Developers',
        'License :: OSI Approved :: MIT License',
        'Operating System :: Unix',
        'Operating System :: POSIX',
        'Operating System :: Microsoft :: Windows',
        'Programming Language :: Python',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.3',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: Implementation :: CPython',
        'Programming Language :: Python :: Implementation :: PyPy',
        # uncomment if you test on these interpreters:
        # 'Programming Language :: Python :: Implementation :: IronPython',
        # 'Programming Language :: Python :: Implementation :: Jython',
        # 'Programming Language :: Python :: Implementation :: Stackless',
        'Topic :: Utilities',
    ],

    # Settings usually the same.
    author="Allen Barker",
    author_email="Allen.L.Barker@gmail.com",
    zip_safe=False,

    #include_package_data=True, # Files must be listed in MANIFEST.in file, don't set.
    package_data={PACKAGE_NAME: cython_C_files},

    ext_modules=ext_modules,
    #cmdclass=cmdclass,
    cmdclass={ # TODO, trying to make pip recognize args...
        'install': InstallCommand,
        'develop': DevelopCommand,
        },

    # Automated stuff below.
    long_description=long_description,
    packages=find_packages('src'),
    package_dir={'': 'src'},
    py_modules=[os.path.splitext(os.path.basename(path))[0]
                                    for path in glob.glob('src/*.py')],
)


