# -*- coding: utf-8 -*-

"""
    api_tester_upload_test

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import api_tester_upload_test.models.account_state
import api_tester_upload_test.models.storage
import api_tester_upload_test.models.account_plan
import api_tester_upload_test.models.session
import api_tester_upload_test.models.holds

class Result(object):

    """Implementation of the 'result' model.

    TODO: type model description here.

    Attributes:
        username (string): TODO: type description here.
        created_at (float): TODO: type description here.
        first_name (string): TODO: type description here.
        last_name (string): TODO: type description here.
        account_id (string): TODO: type description here.
        locale (string): TODO: type description here.
        account_state (AccountState): TODO: type description here.
        storage (Storage): TODO: type description here.
        account_plan (AccountPlan): TODO: type description here.
        email (string): TODO: type description here.
        session (Session): TODO: type description here.
        last_login (string): TODO: type description here.
        id (string): TODO: type description here.
        holds (Holds): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "username":'username',
        "created_at":'created_at',
        "first_name":'first_name',
        "last_name":'last_name',
        "account_id":'account_id',
        "locale":'locale',
        "account_state":'account_state',
        "storage":'storage',
        "account_plan":'account_plan',
        "email":'email',
        "session":'session',
        "last_login":'last_login',
        "id":'id',
        "holds":'holds'
    }

    def __init__(self,
                 username=None,
                 created_at=None,
                 first_name=None,
                 last_name=None,
                 account_id=None,
                 locale=None,
                 account_state=None,
                 storage=None,
                 account_plan=None,
                 email=None,
                 session=None,
                 last_login=None,
                 id=None,
                 holds=None):
        """Constructor for the Result class"""

        # Initialize members of the class
        self.username = username
        self.created_at = created_at
        self.first_name = first_name
        self.last_name = last_name
        self.account_id = account_id
        self.locale = locale
        self.account_state = account_state
        self.storage = storage
        self.account_plan = account_plan
        self.email = email
        self.session = session
        self.last_login = last_login
        self.id = id
        self.holds = holds


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        username = dictionary.get('username')
        created_at = dictionary.get('created_at')
        first_name = dictionary.get('first_name')
        last_name = dictionary.get('last_name')
        account_id = dictionary.get('account_id')
        locale = dictionary.get('locale')
        account_state = api_tester_upload_test.models.account_state.AccountState.from_dictionary(dictionary.get('account_state')) if dictionary.get('account_state') else None
        storage = api_tester_upload_test.models.storage.Storage.from_dictionary(dictionary.get('storage')) if dictionary.get('storage') else None
        account_plan = api_tester_upload_test.models.account_plan.AccountPlan.from_dictionary(dictionary.get('account_plan')) if dictionary.get('account_plan') else None
        email = dictionary.get('email')
        session = api_tester_upload_test.models.session.Session.from_dictionary(dictionary.get('session')) if dictionary.get('session') else None
        last_login = dictionary.get('last_login')
        id = dictionary.get('id')
        holds = api_tester_upload_test.models.holds.Holds.from_dictionary(dictionary.get('holds')) if dictionary.get('holds') else None

        # Return an object of this model
        return cls(username,
                   created_at,
                   first_name,
                   last_name,
                   account_id,
                   locale,
                   account_state,
                   storage,
                   account_plan,
                   email,
                   session,
                   last_login,
                   id,
                   holds)


