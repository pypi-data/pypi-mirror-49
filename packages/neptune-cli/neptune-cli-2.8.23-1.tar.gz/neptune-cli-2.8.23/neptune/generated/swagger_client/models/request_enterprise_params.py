# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class RequestEnterpriseParams(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, email=None, company=None, upgrade_type=None, company_role=None, message=None, team_size=None):
        """
        RequestEnterpriseParams - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'email': 'str',
            'company': 'str',
            'upgrade_type': 'UpgradeTypeEnum',
            'company_role': 'str',
            'message': 'str',
            'team_size': 'str'
        }

        self.attribute_map = {
            'email': 'email',
            'company': 'company',
            'upgrade_type': 'upgradeType',
            'company_role': 'companyRole',
            'message': 'message',
            'team_size': 'teamSize'
        }

        self._email = email
        self._company = company
        self._upgrade_type = upgrade_type
        self._company_role = company_role
        self._message = message
        self._team_size = team_size

    @property
    def email(self):
        """
        Gets the email of this RequestEnterpriseParams.


        :return: The email of this RequestEnterpriseParams.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this RequestEnterpriseParams.


        :param email: The email of this RequestEnterpriseParams.
        :type: str
        """
        
        self._email = email

    @property
    def company(self):
        """
        Gets the company of this RequestEnterpriseParams.


        :return: The company of this RequestEnterpriseParams.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """
        Sets the company of this RequestEnterpriseParams.


        :param company: The company of this RequestEnterpriseParams.
        :type: str
        """
        
        self._company = company

    @property
    def upgrade_type(self):
        """
        Gets the upgrade_type of this RequestEnterpriseParams.


        :return: The upgrade_type of this RequestEnterpriseParams.
        :rtype: UpgradeTypeEnum
        """
        return self._upgrade_type

    @upgrade_type.setter
    def upgrade_type(self, upgrade_type):
        """
        Sets the upgrade_type of this RequestEnterpriseParams.


        :param upgrade_type: The upgrade_type of this RequestEnterpriseParams.
        :type: UpgradeTypeEnum
        """
        
        self._upgrade_type = upgrade_type

    @property
    def company_role(self):
        """
        Gets the company_role of this RequestEnterpriseParams.


        :return: The company_role of this RequestEnterpriseParams.
        :rtype: str
        """
        return self._company_role

    @company_role.setter
    def company_role(self, company_role):
        """
        Sets the company_role of this RequestEnterpriseParams.


        :param company_role: The company_role of this RequestEnterpriseParams.
        :type: str
        """
        
        self._company_role = company_role

    @property
    def message(self):
        """
        Gets the message of this RequestEnterpriseParams.


        :return: The message of this RequestEnterpriseParams.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this RequestEnterpriseParams.


        :param message: The message of this RequestEnterpriseParams.
        :type: str
        """
        
        self._message = message

    @property
    def team_size(self):
        """
        Gets the team_size of this RequestEnterpriseParams.


        :return: The team_size of this RequestEnterpriseParams.
        :rtype: str
        """
        return self._team_size

    @team_size.setter
    def team_size(self, team_size):
        """
        Sets the team_size of this RequestEnterpriseParams.


        :param team_size: The team_size of this RequestEnterpriseParams.
        :type: str
        """
        
        self._team_size = team_size

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




