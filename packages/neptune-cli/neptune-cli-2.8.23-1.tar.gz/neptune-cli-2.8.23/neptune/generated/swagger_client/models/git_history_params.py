# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class GitHistoryParams(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, experiment_ids=None, dirty=None, repo_id=None, current_commit_id=None, commits=None):
        """
        GitHistoryParams - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'experiment_ids': 'list[str]',
            'dirty': 'bool',
            'repo_id': 'str',
            'current_commit_id': 'str',
            'commits': 'list[GitCommit]'
        }

        self.attribute_map = {
            'experiment_ids': 'experimentIds',
            'dirty': 'dirty',
            'repo_id': 'repoId',
            'current_commit_id': 'currentCommitId',
            'commits': 'commits'
        }

        self._experiment_ids = experiment_ids
        self._dirty = dirty
        self._repo_id = repo_id
        self._current_commit_id = current_commit_id
        self._commits = commits

    @property
    def experiment_ids(self):
        """
        Gets the experiment_ids of this GitHistoryParams.


        :return: The experiment_ids of this GitHistoryParams.
        :rtype: list[str]
        """
        return self._experiment_ids

    @experiment_ids.setter
    def experiment_ids(self, experiment_ids):
        """
        Sets the experiment_ids of this GitHistoryParams.


        :param experiment_ids: The experiment_ids of this GitHistoryParams.
        :type: list[str]
        """
        
        self._experiment_ids = experiment_ids

    @property
    def dirty(self):
        """
        Gets the dirty of this GitHistoryParams.


        :return: The dirty of this GitHistoryParams.
        :rtype: bool
        """
        return self._dirty

    @dirty.setter
    def dirty(self, dirty):
        """
        Sets the dirty of this GitHistoryParams.


        :param dirty: The dirty of this GitHistoryParams.
        :type: bool
        """
        
        self._dirty = dirty

    @property
    def repo_id(self):
        """
        Gets the repo_id of this GitHistoryParams.


        :return: The repo_id of this GitHistoryParams.
        :rtype: str
        """
        return self._repo_id

    @repo_id.setter
    def repo_id(self, repo_id):
        """
        Sets the repo_id of this GitHistoryParams.


        :param repo_id: The repo_id of this GitHistoryParams.
        :type: str
        """
        
        self._repo_id = repo_id

    @property
    def current_commit_id(self):
        """
        Gets the current_commit_id of this GitHistoryParams.


        :return: The current_commit_id of this GitHistoryParams.
        :rtype: str
        """
        return self._current_commit_id

    @current_commit_id.setter
    def current_commit_id(self, current_commit_id):
        """
        Sets the current_commit_id of this GitHistoryParams.


        :param current_commit_id: The current_commit_id of this GitHistoryParams.
        :type: str
        """
        
        self._current_commit_id = current_commit_id

    @property
    def commits(self):
        """
        Gets the commits of this GitHistoryParams.


        :return: The commits of this GitHistoryParams.
        :rtype: list[GitCommit]
        """
        return self._commits

    @commits.setter
    def commits(self, commits):
        """
        Sets the commits of this GitHistoryParams.


        :param commits: The commits of this GitHistoryParams.
        :type: list[GitCommit]
        """
        
        self._commits = commits

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




