# coding: utf-8

"""
    Coinmarketcap API Swagger Implementation

    Define coinmarketcap's api in swagger 2.0 openapi standard  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CmcClient.models.platform import Platform  # noqa: F401,E501


class CryptocurrencyMap(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'symbol': 'str',
        'slug': 'str',
        'is_active': 'int',
        'first_historical_data': 'datetime',
        'last_historical_data': 'datetime',
        'platform': 'Platform'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'symbol': 'symbol',
        'slug': 'slug',
        'is_active': 'is_active',
        'first_historical_data': 'first_historical_data',
        'last_historical_data': 'last_historical_data',
        'platform': 'platform'
    }

    def __init__(self, id=None, name=None, symbol=None, slug=None, is_active=None, first_historical_data=None, last_historical_data=None, platform=None):  # noqa: E501
        """CryptocurrencyMap - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._symbol = None
        self._slug = None
        self._is_active = None
        self._first_historical_data = None
        self._last_historical_data = None
        self._platform = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if symbol is not None:
            self.symbol = symbol
        if slug is not None:
            self.slug = slug
        if is_active is not None:
            self.is_active = is_active
        if first_historical_data is not None:
            self.first_historical_data = first_historical_data
        if last_historical_data is not None:
            self.last_historical_data = last_historical_data
        if platform is not None:
            self.platform = platform

    @property
    def id(self):
        """Gets the id of this CryptocurrencyMap.  # noqa: E501


        :return: The id of this CryptocurrencyMap.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CryptocurrencyMap.


        :param id: The id of this CryptocurrencyMap.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CryptocurrencyMap.  # noqa: E501


        :return: The name of this CryptocurrencyMap.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CryptocurrencyMap.


        :param name: The name of this CryptocurrencyMap.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def symbol(self):
        """Gets the symbol of this CryptocurrencyMap.  # noqa: E501


        :return: The symbol of this CryptocurrencyMap.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this CryptocurrencyMap.


        :param symbol: The symbol of this CryptocurrencyMap.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def slug(self):
        """Gets the slug of this CryptocurrencyMap.  # noqa: E501


        :return: The slug of this CryptocurrencyMap.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this CryptocurrencyMap.


        :param slug: The slug of this CryptocurrencyMap.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def is_active(self):
        """Gets the is_active of this CryptocurrencyMap.  # noqa: E501


        :return: The is_active of this CryptocurrencyMap.  # noqa: E501
        :rtype: int
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this CryptocurrencyMap.


        :param is_active: The is_active of this CryptocurrencyMap.  # noqa: E501
        :type: int
        """

        self._is_active = is_active

    @property
    def first_historical_data(self):
        """Gets the first_historical_data of this CryptocurrencyMap.  # noqa: E501


        :return: The first_historical_data of this CryptocurrencyMap.  # noqa: E501
        :rtype: datetime
        """
        return self._first_historical_data

    @first_historical_data.setter
    def first_historical_data(self, first_historical_data):
        """Sets the first_historical_data of this CryptocurrencyMap.


        :param first_historical_data: The first_historical_data of this CryptocurrencyMap.  # noqa: E501
        :type: datetime
        """

        self._first_historical_data = first_historical_data

    @property
    def last_historical_data(self):
        """Gets the last_historical_data of this CryptocurrencyMap.  # noqa: E501


        :return: The last_historical_data of this CryptocurrencyMap.  # noqa: E501
        :rtype: datetime
        """
        return self._last_historical_data

    @last_historical_data.setter
    def last_historical_data(self, last_historical_data):
        """Sets the last_historical_data of this CryptocurrencyMap.


        :param last_historical_data: The last_historical_data of this CryptocurrencyMap.  # noqa: E501
        :type: datetime
        """

        self._last_historical_data = last_historical_data

    @property
    def platform(self):
        """Gets the platform of this CryptocurrencyMap.  # noqa: E501


        :return: The platform of this CryptocurrencyMap.  # noqa: E501
        :rtype: Platform
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this CryptocurrencyMap.


        :param platform: The platform of this CryptocurrencyMap.  # noqa: E501
        :type: Platform
        """

        self._platform = platform

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CryptocurrencyMap, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CryptocurrencyMap):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
