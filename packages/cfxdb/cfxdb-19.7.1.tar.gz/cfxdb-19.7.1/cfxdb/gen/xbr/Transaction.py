# automatically generated by the FlatBuffers compiler, do not modify

# namespace: xbr

import flatbuffers

# /// Data encryption key buy-sell transactions.
class Transaction(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTransaction(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Transaction()
        x.Init(buf, n + offset)
        return x

    # Transaction
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

# /// ID of the transaction..
    # Transaction
    def Tid(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Transaction
    def TidAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Transaction
    def TidLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

# /// Creation time of the transaction (epoch time in ns)
    # Transaction
    def Created(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

# /// Sequence number of the created-state transaction within the payment channel.
    # Transaction
    def CreatedPaymentChannelSeq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

# /// Sequence number of the created-state transaction within the paying channel.
    # Transaction
    def CreatedPayingChannelSeq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

# /// ID of the data encryption key offer this transaction is for.
    # Transaction
    def Offer(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Transaction
    def OfferAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Transaction
    def OfferLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

# /// Transaction amount in XBR.
    # Transaction
    def Amount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Transaction
    def AmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Transaction
    def AmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

# /// Address of the payment channel (of the buyer) this transaction is transacting on.
    # Transaction
    def PaymentChannel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Transaction
    def PaymentChannelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Transaction
    def PaymentChannelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

# /// Address of the paying channel (of the seller) this transaction is transacting on.
    # Transaction
    def PayingChannel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Transaction
    def PayingChannelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Transaction
    def PayingChannelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

# /// State of the transaction: TransactionState.INFLIGHT when created, and then either TransactionState.SUCCESS or TransactionState.FAILED.
    # Transaction
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

# /// Completion time of the transaction (epoch time in ns)
    # Transaction
    def Completed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

# /// Sequence number of the completed-state transaction within the payment channel.
    # Transaction
    def CompletedPaymentChannelSeq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

# /// Sequence number of the completed-state transaction within the paying channel.
    # Transaction
    def CompletedPayingChannelSeq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def TransactionStart(builder): builder.StartObject(12)
def TransactionAddTid(builder, tid): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(tid), 0)
def TransactionStartTidVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def TransactionAddCreated(builder, created): builder.PrependUint64Slot(1, created, 0)
def TransactionAddCreatedPaymentChannelSeq(builder, createdPaymentChannelSeq): builder.PrependUint32Slot(2, createdPaymentChannelSeq, 0)
def TransactionAddCreatedPayingChannelSeq(builder, createdPayingChannelSeq): builder.PrependUint32Slot(3, createdPayingChannelSeq, 0)
def TransactionAddOffer(builder, offer): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(offer), 0)
def TransactionStartOfferVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def TransactionAddAmount(builder, amount): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(amount), 0)
def TransactionStartAmountVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def TransactionAddPaymentChannel(builder, paymentChannel): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(paymentChannel), 0)
def TransactionStartPaymentChannelVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def TransactionAddPayingChannel(builder, payingChannel): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(payingChannel), 0)
def TransactionStartPayingChannelVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def TransactionAddState(builder, state): builder.PrependUint8Slot(8, state, 0)
def TransactionAddCompleted(builder, completed): builder.PrependUint64Slot(9, completed, 0)
def TransactionAddCompletedPaymentChannelSeq(builder, completedPaymentChannelSeq): builder.PrependUint32Slot(10, completedPaymentChannelSeq, 0)
def TransactionAddCompletedPayingChannelSeq(builder, completedPayingChannelSeq): builder.PrependUint32Slot(11, completedPayingChannelSeq, 0)
def TransactionEnd(builder): return builder.EndObject()
