# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkFrequencyDomain1DImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkFrequencyDomain1DImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkFrequencyDomain1DImageFilterPython
            return _itkFrequencyDomain1DImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkFrequencyDomain1DImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkFrequencyDomain1DImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkFrequencyDomain1DImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImagePython
import stdcomplexPython
import pyBasePython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import ITKCommonBasePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkRGBAPixelPython
import itkImageSourceCommonPython
import itkCurvilinearArraySpecialCoordinatesImagePython
import ITKIOImageBaseBasePython
import itkTransformBasePython
import itkDiffusionTensor3DPython
import itkOptimizerParametersPython
import itkArrayPython
import itkArray2DPython
import itkVariableLengthVectorPython
import itkSpectra1DSupportWindowImageFilterPython
import itkImageToImageFilterCommonPython
import itkContinuousIndexPython
import itkSimpleDataObjectDecoratorPython
import itkFrequencyDomain1DFilterFunctionPython

def itkFrequencyDomain1DImageFilterCASCICFCASCICF_New():
  return itkFrequencyDomain1DImageFilterCASCICFCASCICF.New()


def itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_New():
  return itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass.New()


def itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass_New():
  return itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass.New()


def itkFrequencyDomain1DImageFilterICF3ICF3_New():
  return itkFrequencyDomain1DImageFilterICF3ICF3.New()


def itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_New():
  return itkFrequencyDomain1DImageFilterICF3ICF3_Superclass.New()


def itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass_New():
  return itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass.New()


def itkFrequencyDomain1DImageFilterICF2ICF2_New():
  return itkFrequencyDomain1DImageFilterICF2ICF2.New()


def itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_New():
  return itkFrequencyDomain1DImageFilterICF2ICF2_Superclass.New()


def itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass_New():
  return itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass.New()

class itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        """
        GetOutput(itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass self) -> itkCurvilinearArraySpecialCoordinatesImageCF2
        GetOutput(itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass self) -> itkCurvilinearArraySpecialCoordinatesImageCF2
        GetOutput(itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass self, unsigned int idx) -> itkCurvilinearArraySpecialCoordinatesImageCF2
        """
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass_GetOutput(self, *args)


    def GraftOutput(self, *args):
        """
        GraftOutput(itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass self, itkDataObject output)
        GraftOutput(itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass self, std::string const & key, itkDataObject output)
        """
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass_GraftOutput(self, *args)


    def GraftNthOutput(self, idx, output):
        """GraftNthOutput(itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass self, unsigned int idx, itkDataObject output)"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass_GraftNthOutput(self, idx, output)


    def MakeOutput(self, *args):
        """
        MakeOutput(itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass self, unsigned long idx) -> itkDataObject_Pointer
        MakeOutput(itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass self, std::string const & arg0) -> itkDataObject_Pointer

        Make a DataObject of the
        correct type to used as the specified output.

        Every ProcessObject subclass must be able to create a DataObject that
        can be used as a specified output. This method is automatically called
        when DataObject::DisconnectPipeline() is called.
        DataObject::DisconnectPipeline, disconnects a data object from being
        an output of its current source. When the data object is disconnected,
        the ProcessObject needs to construct a replacement output data object
        so that the ProcessObject is in a valid state. So
        DataObject::DisconnectPipeline eventually calls
        ProcessObject::MakeOutput. Note that MakeOutput always returns a
        itkSmartPointer to a DataObject. ImageSource and MeshSource override
        this method to create the correct type of image and mesh respectively.
        If a filter has multiple outputs of different types, then that filter
        must provide an implementation of MakeOutput(). 
        """
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass_MakeOutput(self, *args)

    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass

        Create a new object of the class itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass.GetOutput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass_GetOutput, None, itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass)
itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass.GraftOutput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass_GraftOutput, None, itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass)
itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass.GraftNthOutput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass_GraftNthOutput, None, itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass)
itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass.MakeOutput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass_MakeOutput, None, itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass)
itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass_swigregister = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass_swigregister
itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass_swigregister(itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass)

def itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass_cast(obj):
    """itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass_cast(itkLightObject obj) -> itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass"""
    return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass_cast(obj)

class itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        """
        GetOutput(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass self) -> itkImageCF2
        GetOutput(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass self) -> itkImageCF2
        GetOutput(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass self, unsigned int idx) -> itkImageCF2
        """
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass_GetOutput(self, *args)


    def GraftOutput(self, *args):
        """
        GraftOutput(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass self, itkDataObject output)
        GraftOutput(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass self, std::string const & key, itkDataObject output)
        """
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass_GraftOutput(self, *args)


    def GraftNthOutput(self, idx, output):
        """GraftNthOutput(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass self, unsigned int idx, itkDataObject output)"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass_GraftNthOutput(self, idx, output)


    def MakeOutput(self, *args):
        """
        MakeOutput(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass self, unsigned long idx) -> itkDataObject_Pointer
        MakeOutput(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass self, std::string const & arg0) -> itkDataObject_Pointer

        Make a DataObject of the
        correct type to used as the specified output.

        Every ProcessObject subclass must be able to create a DataObject that
        can be used as a specified output. This method is automatically called
        when DataObject::DisconnectPipeline() is called.
        DataObject::DisconnectPipeline, disconnects a data object from being
        an output of its current source. When the data object is disconnected,
        the ProcessObject needs to construct a replacement output data object
        so that the ProcessObject is in a valid state. So
        DataObject::DisconnectPipeline eventually calls
        ProcessObject::MakeOutput. Note that MakeOutput always returns a
        itkSmartPointer to a DataObject. ImageSource and MeshSource override
        this method to create the correct type of image and mesh respectively.
        If a filter has multiple outputs of different types, then that filter
        must provide an implementation of MakeOutput(). 
        """
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass_MakeOutput(self, *args)

    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass

        Create a new object of the class itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass.GetOutput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass_GetOutput, None, itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass)
itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass.GraftOutput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass_GraftOutput, None, itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass)
itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass.GraftNthOutput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass_GraftNthOutput, None, itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass)
itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass.MakeOutput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass_MakeOutput, None, itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass)
itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass_swigregister = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass_swigregister
itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass_swigregister(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass)

def itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass_cast(obj):
    """itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass_cast(itkLightObject obj) -> itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass"""
    return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass_cast(obj)

class itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        """
        GetOutput(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass self) -> itkImageCF3
        GetOutput(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass self) -> itkImageCF3
        GetOutput(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass self, unsigned int idx) -> itkImageCF3
        """
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass_GetOutput(self, *args)


    def GraftOutput(self, *args):
        """
        GraftOutput(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass self, itkDataObject output)
        GraftOutput(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass self, std::string const & key, itkDataObject output)
        """
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass_GraftOutput(self, *args)


    def GraftNthOutput(self, idx, output):
        """GraftNthOutput(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass self, unsigned int idx, itkDataObject output)"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass_GraftNthOutput(self, idx, output)


    def MakeOutput(self, *args):
        """
        MakeOutput(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass self, unsigned long idx) -> itkDataObject_Pointer
        MakeOutput(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass self, std::string const & arg0) -> itkDataObject_Pointer

        Make a DataObject of the
        correct type to used as the specified output.

        Every ProcessObject subclass must be able to create a DataObject that
        can be used as a specified output. This method is automatically called
        when DataObject::DisconnectPipeline() is called.
        DataObject::DisconnectPipeline, disconnects a data object from being
        an output of its current source. When the data object is disconnected,
        the ProcessObject needs to construct a replacement output data object
        so that the ProcessObject is in a valid state. So
        DataObject::DisconnectPipeline eventually calls
        ProcessObject::MakeOutput. Note that MakeOutput always returns a
        itkSmartPointer to a DataObject. ImageSource and MeshSource override
        this method to create the correct type of image and mesh respectively.
        If a filter has multiple outputs of different types, then that filter
        must provide an implementation of MakeOutput(). 
        """
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass_MakeOutput(self, *args)

    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass

        Create a new object of the class itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass.GetOutput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass_GetOutput, None, itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass)
itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass.GraftOutput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass_GraftOutput, None, itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass)
itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass.GraftNthOutput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass_GraftNthOutput, None, itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass)
itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass.MakeOutput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass_MakeOutput, None, itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass)
itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass_swigregister = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass_swigregister
itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass_swigregister(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass)

def itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass_cast(obj):
    """itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass_cast(itkLightObject obj) -> itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass"""
    return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass_cast(obj)

class itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass(itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_Superclass):
    """Proxy of C++ itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass self, itkCurvilinearArraySpecialCoordinatesImageCF2 image)
        SetInput(itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass self, unsigned int arg0, itkCurvilinearArraySpecialCoordinatesImageCF2 image)
        """
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass self) -> itkCurvilinearArraySpecialCoordinatesImageCF2
        GetInput(itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass self, unsigned int idx) -> itkCurvilinearArraySpecialCoordinatesImageCF2
        """
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass self, itkCurvilinearArraySpecialCoordinatesImageCF2 image)"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass self)"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass self, itkCurvilinearArraySpecialCoordinatesImageCF2 image)"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass self)"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass self, double const _arg)"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass self) -> double"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass self, double const _arg)"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass self) -> double"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass

        Create a new object of the class itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass.SetInput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_SetInput, None, itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass)
itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass.GetInput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_GetInput, None, itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass)
itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass.PushBackInput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_PushBackInput, None, itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass)
itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass.PopBackInput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_PopBackInput, None, itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass)
itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass.PushFrontInput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_PushFrontInput, None, itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass)
itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass.PopFrontInput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_PopFrontInput, None, itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass)
itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass.SetCoordinateTolerance = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_SetCoordinateTolerance, None, itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass)
itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass.GetCoordinateTolerance = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_GetCoordinateTolerance, None, itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass)
itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass.SetDirectionTolerance = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_SetDirectionTolerance, None, itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass)
itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass.GetDirectionTolerance = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_GetDirectionTolerance, None, itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass)
itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_swigregister = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_swigregister
itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_swigregister(itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass)

def itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_cast(obj):
    """itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_cast(itkLightObject obj) -> itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass"""
    return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass_cast(obj)

class itkFrequencyDomain1DImageFilterICF2ICF2_Superclass(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_Superclass):
    """Proxy of C++ itkFrequencyDomain1DImageFilterICF2ICF2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass self, itkImageCF2 image)
        SetInput(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass self, unsigned int arg0, itkImageCF2 image)
        """
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass self) -> itkImageCF2
        GetInput(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass self, unsigned int idx) -> itkImageCF2
        """
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass self, itkImageCF2 image)"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass self)"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass self, itkImageCF2 image)"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass self)"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass self, double const _arg)"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass self) -> double"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass self, double const _arg)"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass self) -> double"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterICF2ICF2_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkFrequencyDomain1DImageFilterICF2ICF2_Superclass"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyDomain1DImageFilterICF2ICF2_Superclass

        Create a new object of the class itkFrequencyDomain1DImageFilterICF2ICF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyDomain1DImageFilterICF2ICF2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFrequencyDomain1DImageFilterICF2ICF2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFrequencyDomain1DImageFilterICF2ICF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFrequencyDomain1DImageFilterICF2ICF2_Superclass.SetInput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_SetInput, None, itkFrequencyDomain1DImageFilterICF2ICF2_Superclass)
itkFrequencyDomain1DImageFilterICF2ICF2_Superclass.GetInput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_GetInput, None, itkFrequencyDomain1DImageFilterICF2ICF2_Superclass)
itkFrequencyDomain1DImageFilterICF2ICF2_Superclass.PushBackInput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_PushBackInput, None, itkFrequencyDomain1DImageFilterICF2ICF2_Superclass)
itkFrequencyDomain1DImageFilterICF2ICF2_Superclass.PopBackInput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_PopBackInput, None, itkFrequencyDomain1DImageFilterICF2ICF2_Superclass)
itkFrequencyDomain1DImageFilterICF2ICF2_Superclass.PushFrontInput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_PushFrontInput, None, itkFrequencyDomain1DImageFilterICF2ICF2_Superclass)
itkFrequencyDomain1DImageFilterICF2ICF2_Superclass.PopFrontInput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_PopFrontInput, None, itkFrequencyDomain1DImageFilterICF2ICF2_Superclass)
itkFrequencyDomain1DImageFilterICF2ICF2_Superclass.SetCoordinateTolerance = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_SetCoordinateTolerance, None, itkFrequencyDomain1DImageFilterICF2ICF2_Superclass)
itkFrequencyDomain1DImageFilterICF2ICF2_Superclass.GetCoordinateTolerance = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_GetCoordinateTolerance, None, itkFrequencyDomain1DImageFilterICF2ICF2_Superclass)
itkFrequencyDomain1DImageFilterICF2ICF2_Superclass.SetDirectionTolerance = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_SetDirectionTolerance, None, itkFrequencyDomain1DImageFilterICF2ICF2_Superclass)
itkFrequencyDomain1DImageFilterICF2ICF2_Superclass.GetDirectionTolerance = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_GetDirectionTolerance, None, itkFrequencyDomain1DImageFilterICF2ICF2_Superclass)
itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_swigregister = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_swigregister
itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_swigregister(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass)

def itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_cast(obj):
    """itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_cast(itkLightObject obj) -> itkFrequencyDomain1DImageFilterICF2ICF2_Superclass"""
    return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_cast(obj)

class itkFrequencyDomain1DImageFilterICF3ICF3_Superclass(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_Superclass):
    """Proxy of C++ itkFrequencyDomain1DImageFilterICF3ICF3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass self, itkImageCF3 image)
        SetInput(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass self, unsigned int arg0, itkImageCF3 image)
        """
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass self) -> itkImageCF3
        GetInput(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass self, unsigned int idx) -> itkImageCF3
        """
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass self, itkImageCF3 image)"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass self)"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass self, itkImageCF3 image)"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass self)"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass self, double const _arg)"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass self) -> double"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass self, double const _arg)"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass self) -> double"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterICF3ICF3_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkFrequencyDomain1DImageFilterICF3ICF3_Superclass"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyDomain1DImageFilterICF3ICF3_Superclass

        Create a new object of the class itkFrequencyDomain1DImageFilterICF3ICF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyDomain1DImageFilterICF3ICF3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFrequencyDomain1DImageFilterICF3ICF3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFrequencyDomain1DImageFilterICF3ICF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFrequencyDomain1DImageFilterICF3ICF3_Superclass.SetInput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_SetInput, None, itkFrequencyDomain1DImageFilterICF3ICF3_Superclass)
itkFrequencyDomain1DImageFilterICF3ICF3_Superclass.GetInput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_GetInput, None, itkFrequencyDomain1DImageFilterICF3ICF3_Superclass)
itkFrequencyDomain1DImageFilterICF3ICF3_Superclass.PushBackInput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_PushBackInput, None, itkFrequencyDomain1DImageFilterICF3ICF3_Superclass)
itkFrequencyDomain1DImageFilterICF3ICF3_Superclass.PopBackInput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_PopBackInput, None, itkFrequencyDomain1DImageFilterICF3ICF3_Superclass)
itkFrequencyDomain1DImageFilterICF3ICF3_Superclass.PushFrontInput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_PushFrontInput, None, itkFrequencyDomain1DImageFilterICF3ICF3_Superclass)
itkFrequencyDomain1DImageFilterICF3ICF3_Superclass.PopFrontInput = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_PopFrontInput, None, itkFrequencyDomain1DImageFilterICF3ICF3_Superclass)
itkFrequencyDomain1DImageFilterICF3ICF3_Superclass.SetCoordinateTolerance = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_SetCoordinateTolerance, None, itkFrequencyDomain1DImageFilterICF3ICF3_Superclass)
itkFrequencyDomain1DImageFilterICF3ICF3_Superclass.GetCoordinateTolerance = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_GetCoordinateTolerance, None, itkFrequencyDomain1DImageFilterICF3ICF3_Superclass)
itkFrequencyDomain1DImageFilterICF3ICF3_Superclass.SetDirectionTolerance = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_SetDirectionTolerance, None, itkFrequencyDomain1DImageFilterICF3ICF3_Superclass)
itkFrequencyDomain1DImageFilterICF3ICF3_Superclass.GetDirectionTolerance = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_GetDirectionTolerance, None, itkFrequencyDomain1DImageFilterICF3ICF3_Superclass)
itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_swigregister = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_swigregister
itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_swigregister(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass)

def itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_cast(obj):
    """itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_cast(itkLightObject obj) -> itkFrequencyDomain1DImageFilterICF3ICF3_Superclass"""
    return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_cast(obj)

class itkFrequencyDomain1DImageFilterCASCICFCASCICF(itkFrequencyDomain1DImageFilterCASCICFCASCICF_Superclass):
    """Proxy of C++ itkFrequencyDomain1DImageFilterCASCICFCASCICF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkFrequencyDomain1DImageFilterCASCICFCASCICF_Pointer"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkFrequencyDomain1DImageFilterCASCICFCASCICF self) -> itkFrequencyDomain1DImageFilterCASCICFCASCICF_Pointer"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Clone(self)


    def SetDirection(self, _arg):
        """SetDirection(itkFrequencyDomain1DImageFilterCASCICFCASCICF self, unsigned int const _arg)"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_SetDirection(self, _arg)


    def GetDirection(self):
        """GetDirection(itkFrequencyDomain1DImageFilterCASCICFCASCICF self) -> unsigned int"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_GetDirection(self)


    def SetFilterFunction(self, function):
        """SetFilterFunction(itkFrequencyDomain1DImageFilterCASCICFCASCICF self, itkFrequencyDomain1DFilterFunction function)"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_SetFilterFunction(self, function)

    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterCASCICFCASCICF

    def cast(obj):
        """cast(itkLightObject obj) -> itkFrequencyDomain1DImageFilterCASCICFCASCICF"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyDomain1DImageFilterCASCICFCASCICF

        Create a new object of the class itkFrequencyDomain1DImageFilterCASCICFCASCICF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyDomain1DImageFilterCASCICFCASCICF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFrequencyDomain1DImageFilterCASCICFCASCICF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFrequencyDomain1DImageFilterCASCICFCASCICF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFrequencyDomain1DImageFilterCASCICFCASCICF.Clone = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_Clone, None, itkFrequencyDomain1DImageFilterCASCICFCASCICF)
itkFrequencyDomain1DImageFilterCASCICFCASCICF.SetDirection = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_SetDirection, None, itkFrequencyDomain1DImageFilterCASCICFCASCICF)
itkFrequencyDomain1DImageFilterCASCICFCASCICF.GetDirection = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_GetDirection, None, itkFrequencyDomain1DImageFilterCASCICFCASCICF)
itkFrequencyDomain1DImageFilterCASCICFCASCICF.SetFilterFunction = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_SetFilterFunction, None, itkFrequencyDomain1DImageFilterCASCICFCASCICF)
itkFrequencyDomain1DImageFilterCASCICFCASCICF_swigregister = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_swigregister
itkFrequencyDomain1DImageFilterCASCICFCASCICF_swigregister(itkFrequencyDomain1DImageFilterCASCICFCASCICF)

def itkFrequencyDomain1DImageFilterCASCICFCASCICF___New_orig__():
    """itkFrequencyDomain1DImageFilterCASCICFCASCICF___New_orig__() -> itkFrequencyDomain1DImageFilterCASCICFCASCICF_Pointer"""
    return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF___New_orig__()

def itkFrequencyDomain1DImageFilterCASCICFCASCICF_cast(obj):
    """itkFrequencyDomain1DImageFilterCASCICFCASCICF_cast(itkLightObject obj) -> itkFrequencyDomain1DImageFilterCASCICFCASCICF"""
    return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICFCASCICF_cast(obj)

class itkFrequencyDomain1DImageFilterICF2ICF2(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass):
    """Proxy of C++ itkFrequencyDomain1DImageFilterICF2ICF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkFrequencyDomain1DImageFilterICF2ICF2_Pointer"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkFrequencyDomain1DImageFilterICF2ICF2 self) -> itkFrequencyDomain1DImageFilterICF2ICF2_Pointer"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Clone(self)


    def SetDirection(self, _arg):
        """SetDirection(itkFrequencyDomain1DImageFilterICF2ICF2 self, unsigned int const _arg)"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_SetDirection(self, _arg)


    def GetDirection(self):
        """GetDirection(itkFrequencyDomain1DImageFilterICF2ICF2 self) -> unsigned int"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_GetDirection(self)


    def SetFilterFunction(self, function):
        """SetFilterFunction(itkFrequencyDomain1DImageFilterICF2ICF2 self, itkFrequencyDomain1DFilterFunction function)"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_SetFilterFunction(self, function)

    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterICF2ICF2

    def cast(obj):
        """cast(itkLightObject obj) -> itkFrequencyDomain1DImageFilterICF2ICF2"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyDomain1DImageFilterICF2ICF2

        Create a new object of the class itkFrequencyDomain1DImageFilterICF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyDomain1DImageFilterICF2ICF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFrequencyDomain1DImageFilterICF2ICF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFrequencyDomain1DImageFilterICF2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFrequencyDomain1DImageFilterICF2ICF2.Clone = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Clone, None, itkFrequencyDomain1DImageFilterICF2ICF2)
itkFrequencyDomain1DImageFilterICF2ICF2.SetDirection = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_SetDirection, None, itkFrequencyDomain1DImageFilterICF2ICF2)
itkFrequencyDomain1DImageFilterICF2ICF2.GetDirection = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_GetDirection, None, itkFrequencyDomain1DImageFilterICF2ICF2)
itkFrequencyDomain1DImageFilterICF2ICF2.SetFilterFunction = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_SetFilterFunction, None, itkFrequencyDomain1DImageFilterICF2ICF2)
itkFrequencyDomain1DImageFilterICF2ICF2_swigregister = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_swigregister
itkFrequencyDomain1DImageFilterICF2ICF2_swigregister(itkFrequencyDomain1DImageFilterICF2ICF2)

def itkFrequencyDomain1DImageFilterICF2ICF2___New_orig__():
    """itkFrequencyDomain1DImageFilterICF2ICF2___New_orig__() -> itkFrequencyDomain1DImageFilterICF2ICF2_Pointer"""
    return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2___New_orig__()

def itkFrequencyDomain1DImageFilterICF2ICF2_cast(obj):
    """itkFrequencyDomain1DImageFilterICF2ICF2_cast(itkLightObject obj) -> itkFrequencyDomain1DImageFilterICF2ICF2"""
    return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_cast(obj)

class itkFrequencyDomain1DImageFilterICF3ICF3(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass):
    """Proxy of C++ itkFrequencyDomain1DImageFilterICF3ICF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkFrequencyDomain1DImageFilterICF3ICF3_Pointer"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkFrequencyDomain1DImageFilterICF3ICF3 self) -> itkFrequencyDomain1DImageFilterICF3ICF3_Pointer"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Clone(self)


    def SetDirection(self, _arg):
        """SetDirection(itkFrequencyDomain1DImageFilterICF3ICF3 self, unsigned int const _arg)"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_SetDirection(self, _arg)


    def GetDirection(self):
        """GetDirection(itkFrequencyDomain1DImageFilterICF3ICF3 self) -> unsigned int"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_GetDirection(self)


    def SetFilterFunction(self, function):
        """SetFilterFunction(itkFrequencyDomain1DImageFilterICF3ICF3 self, itkFrequencyDomain1DFilterFunction function)"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_SetFilterFunction(self, function)

    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterICF3ICF3

    def cast(obj):
        """cast(itkLightObject obj) -> itkFrequencyDomain1DImageFilterICF3ICF3"""
        return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyDomain1DImageFilterICF3ICF3

        Create a new object of the class itkFrequencyDomain1DImageFilterICF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyDomain1DImageFilterICF3ICF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFrequencyDomain1DImageFilterICF3ICF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFrequencyDomain1DImageFilterICF3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFrequencyDomain1DImageFilterICF3ICF3.Clone = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Clone, None, itkFrequencyDomain1DImageFilterICF3ICF3)
itkFrequencyDomain1DImageFilterICF3ICF3.SetDirection = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_SetDirection, None, itkFrequencyDomain1DImageFilterICF3ICF3)
itkFrequencyDomain1DImageFilterICF3ICF3.GetDirection = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_GetDirection, None, itkFrequencyDomain1DImageFilterICF3ICF3)
itkFrequencyDomain1DImageFilterICF3ICF3.SetFilterFunction = new_instancemethod(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_SetFilterFunction, None, itkFrequencyDomain1DImageFilterICF3ICF3)
itkFrequencyDomain1DImageFilterICF3ICF3_swigregister = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_swigregister
itkFrequencyDomain1DImageFilterICF3ICF3_swigregister(itkFrequencyDomain1DImageFilterICF3ICF3)

def itkFrequencyDomain1DImageFilterICF3ICF3___New_orig__():
    """itkFrequencyDomain1DImageFilterICF3ICF3___New_orig__() -> itkFrequencyDomain1DImageFilterICF3ICF3_Pointer"""
    return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3___New_orig__()

def itkFrequencyDomain1DImageFilterICF3ICF3_cast(obj):
    """itkFrequencyDomain1DImageFilterICF3ICF3_cast(itkLightObject obj) -> itkFrequencyDomain1DImageFilterICF3ICF3"""
    return _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_cast(obj)


def image_to_image_filter(*args, **kwargs):
    """Procedural interface for ImageToImageFilter"""
    import itk
    instance = itk.ImageToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def image_to_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.ImageToImageFilter, itkTemplate.itkTemplate):
        image_to_image_filter.__doc__ = itk.ImageToImageFilter.values()[0].__doc__
    else:
        image_to_image_filter.__doc__ = itk.ImageToImageFilter.__doc__

def image_source(*args, **kwargs):
    """Procedural interface for ImageSource"""
    import itk
    instance = itk.ImageSource.New(*args, **kwargs)
    return instance.__internal_call__()

def image_source_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.ImageSource, itkTemplate.itkTemplate):
        image_source.__doc__ = itk.ImageSource.values()[0].__doc__
    else:
        image_source.__doc__ = itk.ImageSource.__doc__

def frequency_domain1_d_image_filter(*args, **kwargs):
    """Procedural interface for FrequencyDomain1DImageFilter"""
    import itk
    instance = itk.FrequencyDomain1DImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def frequency_domain1_d_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.FrequencyDomain1DImageFilter, itkTemplate.itkTemplate):
        frequency_domain1_d_image_filter.__doc__ = itk.FrequencyDomain1DImageFilter.values()[0].__doc__
    else:
        frequency_domain1_d_image_filter.__doc__ = itk.FrequencyDomain1DImageFilter.__doc__




