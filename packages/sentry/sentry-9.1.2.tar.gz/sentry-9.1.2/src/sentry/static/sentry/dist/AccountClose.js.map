{"version":3,"sources":["webpack:///./app/views/settings/account/accountClose.jsx"],"names":["leaveRedirect","window","location","href","Important","styled","target","GoodbyeModalContent","_ref","Header","Body","Footer","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","t","app_views_settings_components_text_textBlock__WEBPACK_IMPORTED_MODULE_17__","app_components_button__WEBPACK_IMPORTED_MODULE_14__","propTypes","PropTypes","node","AccountClose","_getPrototypeOf2","_this","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default","this","_len","arguments","length","args","Array","_key","_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2___default","call","apply","concat","getSingleOwners","state","organizations","filter","_ref2","singleOwner","map","_ref3","organization","slug","handleChange","_ref4","isSingle","event","checked","setState","set","orgsToRemove","Set","add","delete","handleRemoveAccount","orgs","from","addMessage","api","requestPromise","method","data","then","openModal","onClose","setTimeout","addErrorMessage","_this2","_this$state","app_views_settings_components_settingsPageHeader__WEBPACK_IMPORTED_MODULE_16__","title","app_components_alert__WEBPACK_IMPORTED_MODULE_12__","type","icon","app_components_panels__WEBPACK_IMPORTED_MODULE_8__","_ref5","key","style","marginRight","value","onChange","bind","name","has","disabled","app_components_confirm__WEBPACK_IMPORTED_MODULE_15__","priority","message","onConfirm","AsyncView"],"mappings":"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","file":"AccountClose.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport {\n  Panel,\n  PanelAlert,\n  PanelBody,\n  PanelHeader,\n  PanelItem,\n} from 'app/components/panels';\nimport {addMessage, addErrorMessage} from 'app/actionCreators/indicator';\nimport {openModal} from 'app/actionCreators/modal';\nimport {t} from 'app/locale';\nimport Alert from 'app/components/alert';\nimport AsyncView from 'app/views/asyncView';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nconst BYE_URL = '/';\nconst leaveRedirect = () => (window.location.href = BYE_URL);\n\nconst Important = styled.div`\n  font-weight: bold;\n  font-size: 1.2em;\n`;\n\nconst GoodbyeModalContent = ({Header, Body, Footer}) => (\n  <div>\n    <Header>{t('Closing Account')}</Header>\n    <Body>\n      <TextBlock>\n        {t('Your account has been deactivated and scheduled for removal.')}\n      </TextBlock>\n      <TextBlock>\n        {t('Thanks for using Sentry! We hope to see you again soon!')}\n      </TextBlock>\n    </Body>\n    <Footer>\n      <Button href={BYE_URL}>{t('Goodbye')}</Button>\n    </Footer>\n  </div>\n);\n\nGoodbyeModalContent.propTypes = {\n  Header: PropTypes.node,\n  Body: PropTypes.node,\n  Footer: PropTypes.node,\n};\n\nclass AccountClose extends AsyncView {\n  getEndpoints() {\n    return [['organizations', '/organizations/?owner=1']];\n  }\n\n  constructor(...args) {\n    super(...args);\n    this.state.orgsToRemove = null;\n  }\n\n  // Returns an array of single owners\n  getSingleOwners = () => {\n    return this.state.organizations\n      .filter(({singleOwner}) => singleOwner)\n      .map(({organization}) => organization.slug);\n  };\n\n  handleChange = ({slug}, isSingle, event) => {\n    const checked = event.target.checked;\n\n    // Can't unselect an org where you are the single owner\n    if (isSingle) {\n      return;\n    }\n\n    this.setState(state => {\n      const set = state.orgsToRemove || new Set(this.getSingleOwners());\n      if (checked) {\n        set.add(slug);\n      } else {\n        set.delete(slug);\n      }\n\n      return {\n        orgsToRemove: set,\n      };\n    });\n  };\n\n  handleRemoveAccount = () => {\n    const {orgsToRemove} = this.state;\n    const orgs =\n      orgsToRemove === null ? this.getSingleOwners() : Array.from(orgsToRemove);\n\n    addMessage('Closing account...');\n\n    this.api\n      .requestPromise('/users/me/', {\n        method: 'DELETE',\n        data: {organizations: orgs},\n      })\n      .then(\n        () => {\n          openModal(GoodbyeModalContent, {\n            onClose: leaveRedirect,\n          });\n\n          // Redirect after 10 seconds\n          setTimeout(leaveRedirect, 10000);\n        },\n        () => {\n          addErrorMessage('Error closing account');\n        }\n      );\n  };\n\n  renderBody() {\n    const {organizations, orgsToRemove} = this.state;\n\n    return (\n      <div>\n        <SettingsPageHeader title=\"Close Account\" />\n\n        <TextBlock>\n          {t('This will permanently remove all associated data for your user')}.\n        </TextBlock>\n\n        <Alert type=\"error\" icon=\"icon-circle-exclamation\">\n          <Important>\n            {t('Closing your account is permanent and cannot be undone')}!\n          </Important>\n        </Alert>\n\n        <Panel>\n          <PanelHeader>{t('Remove the following organizations')}</PanelHeader>\n          <PanelBody>\n            <PanelAlert type=\"info\">\n              {t(\n                'Ownership will remain with other members if an organization is not deleted.'\n              )}\n              <br />\n              {t(\n                'Disabled boxes mean that there is no other owner within the organization so no one else can take ownership.'\n              )}\n            </PanelAlert>\n\n            {organizations.map(({organization, singleOwner}) => (\n              <PanelItem key={organization.slug}>\n                <label>\n                  <input\n                    style={{marginRight: 6}}\n                    type=\"checkbox\"\n                    value={organization.slug}\n                    onChange={this.handleChange.bind(this, organization, singleOwner)}\n                    name=\"organizations\"\n                    checked={\n                      orgsToRemove === null\n                        ? singleOwner\n                        : orgsToRemove.has(organization.slug)\n                    }\n                    disabled={singleOwner}\n                  />\n                  {organization.slug}\n                </label>\n              </PanelItem>\n            ))}\n          </PanelBody>\n        </Panel>\n\n        <Confirm\n          priority=\"danger\"\n          message={t(\n            'This is permanent and cannot be undone, are you really sure you want to do this?'\n          )}\n          onConfirm={this.handleRemoveAccount}\n        >\n          <Button priority=\"danger\">{t('Close Account')}</Button>\n        </Confirm>\n      </div>\n    );\n  }\n}\n\nexport default AccountClose;\n"],"sourceRoot":""}