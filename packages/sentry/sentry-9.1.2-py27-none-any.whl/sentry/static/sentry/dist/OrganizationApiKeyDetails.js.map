{"version":3,"sources":["webpack:///./app/components/splitLayout.jsx","webpack:///./app/views/settings/organizationApiKeys/organizationApiKeyDetails.jsx"],"names":["SplitLayout","_ref","children","className","responsive","splitWidth","props","objectWithoutProperties_default","cx","classNames","allow-responsive","childCount","totalChildren","React","Children","count","react_default","a","createElement","spreadLayout","extends_default","map","child","childProps","isLastChild","cloneElement","style","objectSpread_default","marginRight","undefined","propTypes","PropTypes","node","number","bool","API_CHOICES","API_SCOPES","s","OrganizationApiKeyDetails","handleSubmitSuccess","addSuccessMessage","browserHistory","push","recreateRoute","stepBack","routes","_this","params","handleSubmitError","addErrorMessage","loading","error","apiKey","nextProps","location","search","this","orgId","remountComponent","concat","org","context","organization","name","_this2","t","apiForm","apiMethod","apiEndpoint","initialData","state","onSubmitSuccess","onSubmitError","onCancel","splitLayout","textField","label","disabled","multipleCheckboxField","required","choices","textareaField","placeholder","help","AsyncView","contextTypes","SentryTypes","Organization"],"mappings":"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","file":"OrganizationApiKeyDetails.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\nimport SpreadLayout from 'app/components/spreadLayout';\n\n// Flexbox, use when you want your children to be equal sizes\nconst SplitLayout = ({children, className, responsive, splitWidth, ...props}) => {\n  const cx = classNames('split-layout', className, {\n    'allow-responsive': responsive,\n  });\n  let childCount = 0;\n  const totalChildren = React.Children.count(children);\n\n  return (\n    <SpreadLayout {...props} className={cx}>\n      {React.Children.map(children, child => {\n        const childProps = (child && child.props) || {};\n        childCount++;\n        const isLastChild = childCount === totalChildren;\n\n        return React.cloneElement(child, {\n          style: {\n            marginRight: isLastChild ? undefined : splitWidth,\n            ...((child.props && child.props.style) || {}),\n          },\n          className: classNames(childProps.className, 'split-layout-child'),\n        });\n      })}\n    </SpreadLayout>\n  );\n};\n\nSplitLayout.propTypes = {\n  children: PropTypes.node,\n  /** Distance in # of pixels to separate children */\n  splitWidth: PropTypes.number,\n  /** Changes flex-direction to be column on smaller widths */\n  responsive: PropTypes.bool,\n};\n\nexport default SplitLayout;\n","import {browserHistory} from 'react-router';\nimport React from 'react';\n\nimport {API_SCOPES} from 'app/constants';\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport ApiForm from 'app/components/forms/apiForm';\nimport MultipleCheckboxField from 'app/components/forms/multipleCheckboxField';\nimport AsyncView from 'app/views/asyncView';\nimport SentryTypes from 'app/sentryTypes';\nimport SplitLayout from 'app/components/splitLayout';\nimport TextField from 'app/components/forms/textField';\nimport TextareaField from 'app/components/forms/textareaField';\nimport recreateRoute from 'app/utils/recreateRoute';\n\nconst API_CHOICES = API_SCOPES.map(s => [s, s]);\n\nclass OrganizationApiKeyDetails extends AsyncView {\n  static contextTypes = {\n    organization: SentryTypes.Organization,\n  };\n\n  getDefaultState() {\n    return {\n      loading: true,\n      error: false,\n      apiKey: {},\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (\n      nextProps.location.search !== this.props.location.search ||\n      nextProps.params.orgId !== this.props.params.orgId\n    ) {\n      this.remountComponent();\n    }\n  }\n\n  getEndpoints() {\n    return [\n      [\n        'apiKey',\n        `/organizations/${this.props.params.orgId}/api-keys/${this.props.params.apiKey}/`,\n      ],\n    ];\n  }\n\n  getTitle() {\n    const org = this.context.organization;\n    return `${org.name} Edit API Key`;\n  }\n\n  handleSubmitSuccess = () => {\n    addSuccessMessage('Saved changes');\n\n    // Go back to API list\n    browserHistory.push(\n      recreateRoute('', {\n        stepBack: -1,\n        routes: this.props.routes,\n        params: this.props.params,\n      })\n    );\n  };\n\n  handleSubmitError = () => {\n    addErrorMessage('Unable to save changes. Please try again.');\n  };\n\n  renderBody() {\n    return (\n      <div>\n        <div className=\"page-header\">\n          <h3>{t('Edit Api Key')}</h3>\n        </div>\n\n        <ApiForm\n          apiMethod=\"PUT\"\n          apiEndpoint={`/organizations/${this.props.params.orgId}/api-keys/${this.props\n            .params.apiKey}/`}\n          initialData={this.state.apiKey}\n          onSubmitSuccess={this.handleSubmitSuccess}\n          onSubmitError={this.handleSubmitError}\n          onCancel={() =>\n            browserHistory.push(\n              recreateRoute('', {\n                stepBack: -1,\n                routes: this.props.routes,\n                params: this.props.params,\n              })\n            )}\n        >\n          <SplitLayout splitWidth={15}>\n            <TextField label={t('Label')} name=\"label\" />\n            <TextField label={t('API Key')} name=\"key\" disabled />\n          </SplitLayout>\n\n          <MultipleCheckboxField\n            className=\"api-key-details\"\n            name=\"scope_list\"\n            label={t('Scopes')}\n            required\n            choices={API_CHOICES}\n          />\n\n          <TextareaField\n            label={t('Allowed Domains')}\n            name=\"allowed_origins\"\n            placeholder=\"e.g. example.com or https://example.com\"\n            help=\"Separate multiple entries with a newline\"\n          />\n        </ApiForm>\n      </div>\n    );\n  }\n}\n\nexport default OrganizationApiKeyDetails;\n"],"sourceRoot":""}