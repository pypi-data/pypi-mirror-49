# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from aom_framework import protocols_pb2 as aom__framework_dot_protocols__pb2


class EnvironmentStub(object):
  """This is the connection between the orchestrator and the Env backend.
  This service is hosted on the backend executable, and contacted by the 
  orchestrator.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Start = channel.unary_unary(
        '/aom_api.Environment/Start',
        request_serializer=aom__framework_dot_protocols__pb2.EnvStartRequest.SerializeToString,
        response_deserializer=aom__framework_dot_protocols__pb2.EnvStartReply.FromString,
        )
    self.Update = channel.unary_unary(
        '/aom_api.Environment/Update',
        request_serializer=aom__framework_dot_protocols__pb2.EnvUpdateRequest.SerializeToString,
        response_deserializer=aom__framework_dot_protocols__pb2.EnvUpdateReply.FromString,
        )
    self.Version = channel.unary_unary(
        '/aom_api.Environment/Version',
        request_serializer=aom__framework_dot_protocols__pb2.VersionRequest.SerializeToString,
        response_deserializer=aom__framework_dot_protocols__pb2.VersionInfo.FromString,
        )


class EnvironmentServicer(object):
  """This is the connection between the orchestrator and the Env backend.
  This service is hosted on the backend executable, and contacted by the 
  orchestrator.
  """

  def Start(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Update(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Version(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_EnvironmentServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Start': grpc.unary_unary_rpc_method_handler(
          servicer.Start,
          request_deserializer=aom__framework_dot_protocols__pb2.EnvStartRequest.FromString,
          response_serializer=aom__framework_dot_protocols__pb2.EnvStartReply.SerializeToString,
      ),
      'Update': grpc.unary_unary_rpc_method_handler(
          servicer.Update,
          request_deserializer=aom__framework_dot_protocols__pb2.EnvUpdateRequest.FromString,
          response_serializer=aom__framework_dot_protocols__pb2.EnvUpdateReply.SerializeToString,
      ),
      'Version': grpc.unary_unary_rpc_method_handler(
          servicer.Version,
          request_deserializer=aom__framework_dot_protocols__pb2.VersionRequest.FromString,
          response_serializer=aom__framework_dot_protocols__pb2.VersionInfo.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'aom_api.Environment', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class TrialStub(object):
  """This is the connection between a client application and the orchestrator.
  The service is hosted on the orchestrator itself. 
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Start = channel.unary_unary(
        '/aom_api.Trial/Start',
        request_serializer=aom__framework_dot_protocols__pb2.TrialStartRequest.SerializeToString,
        response_deserializer=aom__framework_dot_protocols__pb2.TrialStartReply.FromString,
        )
    self.End = channel.unary_unary(
        '/aom_api.Trial/End',
        request_serializer=aom__framework_dot_protocols__pb2.TrialEndRequest.SerializeToString,
        response_deserializer=aom__framework_dot_protocols__pb2.TrialEndReply.FromString,
        )
    self.Action = channel.unary_unary(
        '/aom_api.Trial/Action',
        request_serializer=aom__framework_dot_protocols__pb2.TrialActionRequest.SerializeToString,
        response_deserializer=aom__framework_dot_protocols__pb2.TrialActionReply.FromString,
        )
    self.Reward = channel.unary_unary(
        '/aom_api.Trial/Reward',
        request_serializer=aom__framework_dot_protocols__pb2.TrialRewardRequest.SerializeToString,
        response_deserializer=aom__framework_dot_protocols__pb2.TrialRewardReply.FromString,
        )


class TrialServicer(object):
  """This is the connection between a client application and the orchestrator.
  The service is hosted on the orchestrator itself. 
  """

  def Start(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def End(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Action(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Reward(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TrialServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Start': grpc.unary_unary_rpc_method_handler(
          servicer.Start,
          request_deserializer=aom__framework_dot_protocols__pb2.TrialStartRequest.FromString,
          response_serializer=aom__framework_dot_protocols__pb2.TrialStartReply.SerializeToString,
      ),
      'End': grpc.unary_unary_rpc_method_handler(
          servicer.End,
          request_deserializer=aom__framework_dot_protocols__pb2.TrialEndRequest.FromString,
          response_serializer=aom__framework_dot_protocols__pb2.TrialEndReply.SerializeToString,
      ),
      'Action': grpc.unary_unary_rpc_method_handler(
          servicer.Action,
          request_deserializer=aom__framework_dot_protocols__pb2.TrialActionRequest.FromString,
          response_serializer=aom__framework_dot_protocols__pb2.TrialActionReply.SerializeToString,
      ),
      'Reward': grpc.unary_unary_rpc_method_handler(
          servicer.Reward,
          request_deserializer=aom__framework_dot_protocols__pb2.TrialRewardRequest.FromString,
          response_serializer=aom__framework_dot_protocols__pb2.TrialRewardReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'aom_api.Trial', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class AgentStub(object):
  """This is the connection between a model application and the orchestrator.
  The service is hosted on the model. 
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Start = channel.unary_unary(
        '/aom_api.Agent/Start',
        request_serializer=aom__framework_dot_protocols__pb2.AgentStartRequest.SerializeToString,
        response_deserializer=aom__framework_dot_protocols__pb2.AgentStartReply.FromString,
        )
    self.Decide = channel.unary_unary(
        '/aom_api.Agent/Decide',
        request_serializer=aom__framework_dot_protocols__pb2.AgentDecideRequest.SerializeToString,
        response_deserializer=aom__framework_dot_protocols__pb2.AgentDecideReply.FromString,
        )
    self.Reward = channel.unary_unary(
        '/aom_api.Agent/Reward',
        request_serializer=aom__framework_dot_protocols__pb2.AgentRewardRequest.SerializeToString,
        response_deserializer=aom__framework_dot_protocols__pb2.AgentRewardReply.FromString,
        )
    self.Version = channel.unary_unary(
        '/aom_api.Agent/Version',
        request_serializer=aom__framework_dot_protocols__pb2.VersionRequest.SerializeToString,
        response_deserializer=aom__framework_dot_protocols__pb2.VersionInfo.FromString,
        )


class AgentServicer(object):
  """This is the connection between a model application and the orchestrator.
  The service is hosted on the model. 
  """

  def Start(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Decide(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Reward(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Version(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_AgentServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Start': grpc.unary_unary_rpc_method_handler(
          servicer.Start,
          request_deserializer=aom__framework_dot_protocols__pb2.AgentStartRequest.FromString,
          response_serializer=aom__framework_dot_protocols__pb2.AgentStartReply.SerializeToString,
      ),
      'Decide': grpc.unary_unary_rpc_method_handler(
          servicer.Decide,
          request_deserializer=aom__framework_dot_protocols__pb2.AgentDecideRequest.FromString,
          response_serializer=aom__framework_dot_protocols__pb2.AgentDecideReply.SerializeToString,
      ),
      'Reward': grpc.unary_unary_rpc_method_handler(
          servicer.Reward,
          request_deserializer=aom__framework_dot_protocols__pb2.AgentRewardRequest.FromString,
          response_serializer=aom__framework_dot_protocols__pb2.AgentRewardReply.SerializeToString,
      ),
      'Version': grpc.unary_unary_rpc_method_handler(
          servicer.Version,
          request_deserializer=aom__framework_dot_protocols__pb2.VersionRequest.FromString,
          response_serializer=aom__framework_dot_protocols__pb2.VersionInfo.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'aom_api.Agent', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
