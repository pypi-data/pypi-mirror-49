{"version":3,"sources":["webpack:///./app/components/groupListHeader.jsx","webpack:///./app/components/groupList.jsx","webpack:///./app/views/releases/detail/project/releaseAllEvents.jsx"],"names":["GroupListHeader","react_default","a","createElement","panels","disablePadding","index_es","w","mx","flex","className","t","justify","React","Component","GroupList","createReactClass","displayName","propTypes","api","PropTypes","object","isRequired","query","string","canSelectGroups","bool","orgId","projectId","environment","SentryTypes","Environment","contextTypes","location","mixins","Reflux","listenTo","GroupStore","getDefaultProps","getInitialState","loading","error","groups","componentWillMount","this","_streamManager","utils","StreamManager","fetchData","shouldComponentUpdate","_nextProps","nextState","isEqual_default","state","componentDidUpdate","prevProps","props","componentWillUnmount","loadInitialData","_this","_this$props","setState","fetchOrgMembers","then","members","memberList","indexMembersByProject","request","getGroupListEndpoint","success","data","_","jqXHR","push","pageLinks","getResponseHeader","_this$props2","path","concat","qs","stringify","getQueryParams","_this$props3","queryParams","context","limit","sort","name","onGroupChange","getAllItems","render","_this2","loadingIndicator","loadingError","onRetry","length","emptyStateWarning","groupListHeader","map","_ref","id","project","slug","group","key","canSelect","withApi","ReleaseAllEvents","_this$props$params","params","react__WEBPACK_IMPORTED_MODULE_6___default","react_router__WEBPACK_IMPORTED_MODULE_7__","to","pathname","release","version","app_components_groupList__WEBPACK_IMPORTED_MODULE_10__","withEnvironmentInQueryString"],"mappings":"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","file":"ReleaseAllEvents.js","sourcesContent":["import React from 'react';\nimport {Flex, Box} from 'grid-emotion';\nimport {t} from 'app/locale';\nimport {PanelHeader} from 'app/components/panels';\n\nclass GroupListHeader extends React.Component {\n  render() {\n    return (\n      <PanelHeader disablePadding>\n        <Box w={[8 / 12, 8 / 12, 6 / 12]} mx={2} flex=\"1\" className=\"toolbar-header\">\n          {t('Event')}\n        </Box>\n        <Box w={160} mx={2} className=\"toolbar-header hidden-xs hidden-sm\">\n          {t('Last 24 hours')}\n        </Box>\n        <Flex w={80} mx={2} justify=\"flex-end\" className=\"toolbar-header\">\n          {t('events')}\n        </Flex>\n        <Flex w={80} mx={2} justify=\"flex-end\" className=\"toolbar-header\">\n          {t('users')}\n        </Flex>\n        <Flex\n          w={80}\n          mx={2}\n          justify=\"flex-end\"\n          className=\"hidden-xs hidden-sm toolbar-header\"\n        >\n          {t('Assignee')}\n        </Flex>\n      </PanelHeader>\n    );\n  }\n}\n\nexport default GroupListHeader;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\nimport {isEqual} from 'lodash';\nimport qs from 'query-string';\n\nimport SentryTypes from 'app/sentryTypes';\nimport {fetchOrgMembers, indexMembersByProject} from 'app/actionCreators/members';\nimport GroupListHeader from 'app/components/groupListHeader';\nimport GroupStore from 'app/stores/groupStore';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport StreamGroup from 'app/components/stream/group';\nimport utils from 'app/utils';\nimport withApi from 'app/utils/withApi';\nimport {t} from 'app/locale';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport {Panel, PanelBody} from 'app/components/panels';\n\nconst GroupList = createReactClass({\n  displayName: 'GroupList',\n\n  propTypes: {\n    api: PropTypes.object.isRequired,\n    query: PropTypes.string.isRequired,\n    canSelectGroups: PropTypes.bool,\n    orgId: PropTypes.string.isRequired,\n    // Provided in the project version, not in org version\n    projectId: PropTypes.string,\n    environment: SentryTypes.Environment,\n  },\n\n  contextTypes: {\n    location: PropTypes.object,\n  },\n\n  mixins: [Reflux.listenTo(GroupStore, 'onGroupChange')],\n\n  getDefaultProps() {\n    return {\n      canSelectGroups: true,\n    };\n  },\n\n  getInitialState() {\n    return {\n      loading: true,\n      error: false,\n      groups: [],\n    };\n  },\n\n  componentWillMount() {\n    this._streamManager = new utils.StreamManager(GroupStore);\n\n    this.fetchData();\n  },\n\n  shouldComponentUpdate(_nextProps, nextState) {\n    return !isEqual(this.state, nextState);\n  },\n\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.orgId !== this.props.orgId ||\n      prevProps.projectId !== this.props.projectId\n    ) {\n      this.fetchData();\n    }\n  },\n\n  componentWillUnmount() {\n    GroupStore.loadInitialData([]);\n  },\n\n  fetchData() {\n    GroupStore.loadInitialData([]);\n    const {api, orgId} = this.props;\n\n    this.setState({\n      loading: true,\n      error: false,\n    });\n\n    fetchOrgMembers(api, orgId).then(members => {\n      this.setState({memberList: indexMembersByProject(members)});\n    });\n\n    api.request(this.getGroupListEndpoint(), {\n      success: (data, _, jqXHR) => {\n        this._streamManager.push(data);\n\n        this.setState({\n          error: false,\n          loading: false,\n          pageLinks: jqXHR.getResponseHeader('Link'),\n        });\n      },\n      error: () => {\n        this.setState({\n          error: true,\n          loading: false,\n        });\n      },\n    });\n  },\n\n  getGroupListEndpoint() {\n    const {orgId, projectId} = this.props;\n    const path = projectId\n      ? `/projects/${orgId}/${projectId}/issues/`\n      : `/organizations/${orgId}/issues/`;\n\n    return `${path}?${qs.stringify(this.getQueryParams())}`;\n  },\n\n  getQueryParams() {\n    const {projectId, query, environment} = this.props;\n\n    const queryParams = this.context.location.query;\n    queryParams.limit = 50;\n    queryParams.sort = 'new';\n    queryParams.query = query;\n\n    if (projectId) {\n      if (environment) {\n        queryParams.environment = environment.name;\n      } else {\n        delete queryParams.environment;\n      }\n    }\n\n    return queryParams;\n  },\n\n  onGroupChange() {\n    const groups = this._streamManager.getAllItems();\n\n    if (!isEqual(groups, this.state.groups)) {\n      this.setState({\n        groups,\n      });\n    }\n  },\n\n  render() {\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    } else if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    } else if (this.state.groups.length === 0) {\n      return (\n        <Panel>\n          <PanelBody>\n            <EmptyStateWarning>\n              <p>{t(\"There doesn't seem to be any events fitting the query.\")}</p>\n            </EmptyStateWarning>\n          </PanelBody>\n        </Panel>\n      );\n    }\n\n    const {orgId} = this.props;\n\n    return (\n      <Panel>\n        <GroupListHeader />\n        <PanelBody>\n          {this.state.groups.map(({id, project}) => {\n            let members = null;\n            if (this.state.memberList) {\n              members = this.state.memberList[project.slug] || null;\n            }\n\n            return (\n              <StreamGroup\n                key={id}\n                id={id}\n                orgId={orgId}\n                canSelect={this.props.canSelectGroups}\n                memberList={members}\n              />\n            );\n          })}\n        </PanelBody>\n      </Panel>\n    );\n  },\n});\n\nexport default withApi(GroupList);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport {Link} from 'react-router';\n\nimport SentryTypes from 'app/sentryTypes';\nimport withEnvironmentInQueryString from 'app/utils/withEnvironmentInQueryString';\nimport GroupList from 'app/components/groupList';\nimport {t} from 'app/locale';\n\nclass ReleaseAllEvents extends React.Component {\n  static propTypes = {\n    environment: SentryTypes.Environment,\n  };\n\n  static contextTypes = {\n    release: PropTypes.object,\n  };\n\n  render() {\n    const {orgId, projectId} = this.props.params;\n    return (\n      <div>\n        <div className=\"alert alert-block\">\n          <Link\n            to={{\n              pathname: `/${orgId}/${projectId}/`,\n              query: {query: 'release:' + this.context.release.version},\n            }}\n          >\n            <span className=\"icon icon-open\" />\n            {t('View all events seen in this release in the stream')}\n          </Link>\n        </div>\n        <GroupList\n          orgId={orgId}\n          projectId={projectId}\n          query={'release:\"' + this.context.release.version + '\"'}\n          canSelectGroups={false}\n          environment={this.props.environment}\n        />\n      </div>\n    );\n  }\n}\n\nexport default withEnvironmentInQueryString(ReleaseAllEvents);\n"],"sourceRoot":""}