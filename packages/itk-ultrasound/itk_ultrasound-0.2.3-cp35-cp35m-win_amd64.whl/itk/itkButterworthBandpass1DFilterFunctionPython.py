# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkButterworthBandpass1DFilterFunctionPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkButterworthBandpass1DFilterFunctionPython', [dirname(__file__)])
        except ImportError:
            import _itkButterworthBandpass1DFilterFunctionPython
            return _itkButterworthBandpass1DFilterFunctionPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkButterworthBandpass1DFilterFunctionPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkButterworthBandpass1DFilterFunctionPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkButterworthBandpass1DFilterFunctionPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
class listIndex2(object):
    """Proxy of C++ std::list<(itk::Index<(2)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(listIndex2 self) -> SwigPyIterator"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(listIndex2 self) -> bool"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(listIndex2 self) -> bool"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2___bool__(self)


    def __len__(self) -> "std::list< itk::Index< 2 > >::size_type":
        """__len__(listIndex2 self) -> std::list< itk::Index< 2 > >::size_type"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2___len__(self)


    def __getslice__(self, i: 'std::list< itk::Index< 2 > >::difference_type', j: 'std::list< itk::Index< 2 > >::difference_type') -> "std::list< itk::Index< 2 >,std::allocator< itk::Index< 2 > > > *":
        """__getslice__(listIndex2 self, std::list< itk::Index< 2 > >::difference_type i, std::list< itk::Index< 2 > >::difference_type j) -> listIndex2"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(listIndex2 self, std::list< itk::Index< 2 > >::difference_type i, std::list< itk::Index< 2 > >::difference_type j)
        __setslice__(listIndex2 self, std::list< itk::Index< 2 > >::difference_type i, std::list< itk::Index< 2 > >::difference_type j, listIndex2 v)
        """
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2___setslice__(self, *args)


    def __delslice__(self, i: 'std::list< itk::Index< 2 > >::difference_type', j: 'std::list< itk::Index< 2 > >::difference_type') -> "void":
        """__delslice__(listIndex2 self, std::list< itk::Index< 2 > >::difference_type i, std::list< itk::Index< 2 > >::difference_type j)"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(listIndex2 self, std::list< itk::Index< 2 > >::difference_type i)
        __delitem__(listIndex2 self, PySliceObject * slice)
        """
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::list< itk::Index< 2 > >::value_type const &":
        """
        __getitem__(listIndex2 self, PySliceObject * slice) -> listIndex2
        __getitem__(listIndex2 self, std::list< itk::Index< 2 > >::difference_type i) -> std::list< itk::Index< 2 > >::value_type const &
        """
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(listIndex2 self, PySliceObject * slice, listIndex2 v)
        __setitem__(listIndex2 self, PySliceObject * slice)
        __setitem__(listIndex2 self, std::list< itk::Index< 2 > >::difference_type i, std::list< itk::Index< 2 > >::value_type const & x)
        """
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2___setitem__(self, *args)


    def pop(self) -> "std::list< itk::Index< 2 > >::value_type":
        """pop(listIndex2 self) -> std::list< itk::Index< 2 > >::value_type"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2_pop(self)


    def append(self, x: 'std::list< itk::Index< 2 > >::value_type const &') -> "void":
        """append(listIndex2 self, std::list< itk::Index< 2 > >::value_type const & x)"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2_append(self, x)


    def empty(self) -> "bool":
        """empty(listIndex2 self) -> bool"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2_empty(self)


    def size(self) -> "std::list< itk::Index< 2 > >::size_type":
        """size(listIndex2 self) -> std::list< itk::Index< 2 > >::size_type"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2_size(self)


    def swap(self, v: 'listIndex2') -> "void":
        """swap(listIndex2 self, listIndex2 v)"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2_swap(self, v)


    def begin(self) -> "std::list< itk::Index< 2 > >::iterator":
        """begin(listIndex2 self) -> std::list< itk::Index< 2 > >::iterator"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2_begin(self)


    def end(self) -> "std::list< itk::Index< 2 > >::iterator":
        """end(listIndex2 self) -> std::list< itk::Index< 2 > >::iterator"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2_end(self)


    def rbegin(self) -> "std::list< itk::Index< 2 > >::reverse_iterator":
        """rbegin(listIndex2 self) -> std::list< itk::Index< 2 > >::reverse_iterator"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2_rbegin(self)


    def rend(self) -> "std::list< itk::Index< 2 > >::reverse_iterator":
        """rend(listIndex2 self) -> std::list< itk::Index< 2 > >::reverse_iterator"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2_rend(self)


    def clear(self) -> "void":
        """clear(listIndex2 self)"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2_clear(self)


    def get_allocator(self) -> "std::list< itk::Index< 2 > >::allocator_type":
        """get_allocator(listIndex2 self) -> std::list< itk::Index< 2 > >::allocator_type"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(listIndex2 self)"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2_pop_back(self)


    def erase(self, *args) -> "std::list< itk::Index< 2 > >::iterator":
        """
        erase(listIndex2 self, std::list< itk::Index< 2 > >::iterator pos) -> std::list< itk::Index< 2 > >::iterator
        erase(listIndex2 self, std::list< itk::Index< 2 > >::iterator first, std::list< itk::Index< 2 > >::iterator last) -> std::list< itk::Index< 2 > >::iterator
        """
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::list<(itk::Index<(2)>)> self) -> listIndex2
        __init__(std::list<(itk::Index<(2)>)> self, listIndex2 arg2) -> listIndex2
        __init__(std::list<(itk::Index<(2)>)> self, std::list< itk::Index< 2 > >::size_type size) -> listIndex2
        __init__(std::list<(itk::Index<(2)>)> self, std::list< itk::Index< 2 > >::size_type size, std::list< itk::Index< 2 > >::value_type const & value) -> listIndex2
        """
        _itkButterworthBandpass1DFilterFunctionPython.listIndex2_swiginit(self, _itkButterworthBandpass1DFilterFunctionPython.new_listIndex2(*args))

    def push_back(self, x: 'std::list< itk::Index< 2 > >::value_type const &') -> "void":
        """push_back(listIndex2 self, std::list< itk::Index< 2 > >::value_type const & x)"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2_push_back(self, x)


    def front(self) -> "std::list< itk::Index< 2 > >::value_type const &":
        """front(listIndex2 self) -> std::list< itk::Index< 2 > >::value_type const &"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2_front(self)


    def back(self) -> "std::list< itk::Index< 2 > >::value_type const &":
        """back(listIndex2 self) -> std::list< itk::Index< 2 > >::value_type const &"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2_back(self)


    def assign(self, n: 'std::list< itk::Index< 2 > >::size_type', x: 'std::list< itk::Index< 2 > >::value_type const &') -> "void":
        """assign(listIndex2 self, std::list< itk::Index< 2 > >::size_type n, std::list< itk::Index< 2 > >::value_type const & x)"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(listIndex2 self, std::list< itk::Index< 2 > >::size_type new_size)
        resize(listIndex2 self, std::list< itk::Index< 2 > >::size_type new_size, std::list< itk::Index< 2 > >::value_type const & x)
        """
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(listIndex2 self, std::list< itk::Index< 2 > >::iterator pos, std::list< itk::Index< 2 > >::value_type const & x) -> std::list< itk::Index< 2 > >::iterator
        insert(listIndex2 self, std::list< itk::Index< 2 > >::iterator pos, std::list< itk::Index< 2 > >::size_type n, std::list< itk::Index< 2 > >::value_type const & x)
        """
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2_insert(self, *args)


    def pop_front(self) -> "void":
        """pop_front(listIndex2 self)"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2_pop_front(self)


    def push_front(self, x: 'std::list< itk::Index< 2 > >::value_type const &') -> "void":
        """push_front(listIndex2 self, std::list< itk::Index< 2 > >::value_type const & x)"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2_push_front(self, x)


    def reverse(self) -> "void":
        """reverse(listIndex2 self)"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex2_reverse(self)

    __swig_destroy__ = _itkButterworthBandpass1DFilterFunctionPython.delete_listIndex2
listIndex2.iterator = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2_iterator, None, listIndex2)
listIndex2.__nonzero__ = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2___nonzero__, None, listIndex2)
listIndex2.__bool__ = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2___bool__, None, listIndex2)
listIndex2.__len__ = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2___len__, None, listIndex2)
listIndex2.__getslice__ = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2___getslice__, None, listIndex2)
listIndex2.__setslice__ = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2___setslice__, None, listIndex2)
listIndex2.__delslice__ = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2___delslice__, None, listIndex2)
listIndex2.__delitem__ = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2___delitem__, None, listIndex2)
listIndex2.__getitem__ = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2___getitem__, None, listIndex2)
listIndex2.__setitem__ = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2___setitem__, None, listIndex2)
listIndex2.pop = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2_pop, None, listIndex2)
listIndex2.append = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2_append, None, listIndex2)
listIndex2.empty = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2_empty, None, listIndex2)
listIndex2.size = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2_size, None, listIndex2)
listIndex2.swap = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2_swap, None, listIndex2)
listIndex2.begin = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2_begin, None, listIndex2)
listIndex2.end = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2_end, None, listIndex2)
listIndex2.rbegin = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2_rbegin, None, listIndex2)
listIndex2.rend = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2_rend, None, listIndex2)
listIndex2.clear = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2_clear, None, listIndex2)
listIndex2.get_allocator = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2_get_allocator, None, listIndex2)
listIndex2.pop_back = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2_pop_back, None, listIndex2)
listIndex2.erase = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2_erase, None, listIndex2)
listIndex2.push_back = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2_push_back, None, listIndex2)
listIndex2.front = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2_front, None, listIndex2)
listIndex2.back = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2_back, None, listIndex2)
listIndex2.assign = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2_assign, None, listIndex2)
listIndex2.resize = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2_resize, None, listIndex2)
listIndex2.insert = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2_insert, None, listIndex2)
listIndex2.pop_front = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2_pop_front, None, listIndex2)
listIndex2.push_front = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2_push_front, None, listIndex2)
listIndex2.reverse = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex2_reverse, None, listIndex2)
listIndex2_swigregister = _itkButterworthBandpass1DFilterFunctionPython.listIndex2_swigregister
listIndex2_swigregister(listIndex2)

class listIndex3(object):
    """Proxy of C++ std::list<(itk::Index<(3)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(listIndex3 self) -> SwigPyIterator"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(listIndex3 self) -> bool"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(listIndex3 self) -> bool"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3___bool__(self)


    def __len__(self) -> "std::list< itk::Index< 3 > >::size_type":
        """__len__(listIndex3 self) -> std::list< itk::Index< 3 > >::size_type"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3___len__(self)


    def __getslice__(self, i: 'std::list< itk::Index< 3 > >::difference_type', j: 'std::list< itk::Index< 3 > >::difference_type') -> "std::list< itk::Index< 3 >,std::allocator< itk::Index< 3 > > > *":
        """__getslice__(listIndex3 self, std::list< itk::Index< 3 > >::difference_type i, std::list< itk::Index< 3 > >::difference_type j) -> listIndex3"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(listIndex3 self, std::list< itk::Index< 3 > >::difference_type i, std::list< itk::Index< 3 > >::difference_type j)
        __setslice__(listIndex3 self, std::list< itk::Index< 3 > >::difference_type i, std::list< itk::Index< 3 > >::difference_type j, listIndex3 v)
        """
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3___setslice__(self, *args)


    def __delslice__(self, i: 'std::list< itk::Index< 3 > >::difference_type', j: 'std::list< itk::Index< 3 > >::difference_type') -> "void":
        """__delslice__(listIndex3 self, std::list< itk::Index< 3 > >::difference_type i, std::list< itk::Index< 3 > >::difference_type j)"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(listIndex3 self, std::list< itk::Index< 3 > >::difference_type i)
        __delitem__(listIndex3 self, PySliceObject * slice)
        """
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::list< itk::Index< 3 > >::value_type const &":
        """
        __getitem__(listIndex3 self, PySliceObject * slice) -> listIndex3
        __getitem__(listIndex3 self, std::list< itk::Index< 3 > >::difference_type i) -> std::list< itk::Index< 3 > >::value_type const &
        """
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(listIndex3 self, PySliceObject * slice, listIndex3 v)
        __setitem__(listIndex3 self, PySliceObject * slice)
        __setitem__(listIndex3 self, std::list< itk::Index< 3 > >::difference_type i, std::list< itk::Index< 3 > >::value_type const & x)
        """
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3___setitem__(self, *args)


    def pop(self) -> "std::list< itk::Index< 3 > >::value_type":
        """pop(listIndex3 self) -> std::list< itk::Index< 3 > >::value_type"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3_pop(self)


    def append(self, x: 'std::list< itk::Index< 3 > >::value_type const &') -> "void":
        """append(listIndex3 self, std::list< itk::Index< 3 > >::value_type const & x)"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3_append(self, x)


    def empty(self) -> "bool":
        """empty(listIndex3 self) -> bool"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3_empty(self)


    def size(self) -> "std::list< itk::Index< 3 > >::size_type":
        """size(listIndex3 self) -> std::list< itk::Index< 3 > >::size_type"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3_size(self)


    def swap(self, v: 'listIndex3') -> "void":
        """swap(listIndex3 self, listIndex3 v)"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3_swap(self, v)


    def begin(self) -> "std::list< itk::Index< 3 > >::iterator":
        """begin(listIndex3 self) -> std::list< itk::Index< 3 > >::iterator"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3_begin(self)


    def end(self) -> "std::list< itk::Index< 3 > >::iterator":
        """end(listIndex3 self) -> std::list< itk::Index< 3 > >::iterator"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3_end(self)


    def rbegin(self) -> "std::list< itk::Index< 3 > >::reverse_iterator":
        """rbegin(listIndex3 self) -> std::list< itk::Index< 3 > >::reverse_iterator"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3_rbegin(self)


    def rend(self) -> "std::list< itk::Index< 3 > >::reverse_iterator":
        """rend(listIndex3 self) -> std::list< itk::Index< 3 > >::reverse_iterator"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3_rend(self)


    def clear(self) -> "void":
        """clear(listIndex3 self)"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3_clear(self)


    def get_allocator(self) -> "std::list< itk::Index< 3 > >::allocator_type":
        """get_allocator(listIndex3 self) -> std::list< itk::Index< 3 > >::allocator_type"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(listIndex3 self)"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3_pop_back(self)


    def erase(self, *args) -> "std::list< itk::Index< 3 > >::iterator":
        """
        erase(listIndex3 self, std::list< itk::Index< 3 > >::iterator pos) -> std::list< itk::Index< 3 > >::iterator
        erase(listIndex3 self, std::list< itk::Index< 3 > >::iterator first, std::list< itk::Index< 3 > >::iterator last) -> std::list< itk::Index< 3 > >::iterator
        """
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::list<(itk::Index<(3)>)> self) -> listIndex3
        __init__(std::list<(itk::Index<(3)>)> self, listIndex3 arg2) -> listIndex3
        __init__(std::list<(itk::Index<(3)>)> self, std::list< itk::Index< 3 > >::size_type size) -> listIndex3
        __init__(std::list<(itk::Index<(3)>)> self, std::list< itk::Index< 3 > >::size_type size, std::list< itk::Index< 3 > >::value_type const & value) -> listIndex3
        """
        _itkButterworthBandpass1DFilterFunctionPython.listIndex3_swiginit(self, _itkButterworthBandpass1DFilterFunctionPython.new_listIndex3(*args))

    def push_back(self, x: 'std::list< itk::Index< 3 > >::value_type const &') -> "void":
        """push_back(listIndex3 self, std::list< itk::Index< 3 > >::value_type const & x)"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3_push_back(self, x)


    def front(self) -> "std::list< itk::Index< 3 > >::value_type const &":
        """front(listIndex3 self) -> std::list< itk::Index< 3 > >::value_type const &"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3_front(self)


    def back(self) -> "std::list< itk::Index< 3 > >::value_type const &":
        """back(listIndex3 self) -> std::list< itk::Index< 3 > >::value_type const &"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3_back(self)


    def assign(self, n: 'std::list< itk::Index< 3 > >::size_type', x: 'std::list< itk::Index< 3 > >::value_type const &') -> "void":
        """assign(listIndex3 self, std::list< itk::Index< 3 > >::size_type n, std::list< itk::Index< 3 > >::value_type const & x)"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(listIndex3 self, std::list< itk::Index< 3 > >::size_type new_size)
        resize(listIndex3 self, std::list< itk::Index< 3 > >::size_type new_size, std::list< itk::Index< 3 > >::value_type const & x)
        """
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(listIndex3 self, std::list< itk::Index< 3 > >::iterator pos, std::list< itk::Index< 3 > >::value_type const & x) -> std::list< itk::Index< 3 > >::iterator
        insert(listIndex3 self, std::list< itk::Index< 3 > >::iterator pos, std::list< itk::Index< 3 > >::size_type n, std::list< itk::Index< 3 > >::value_type const & x)
        """
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3_insert(self, *args)


    def pop_front(self) -> "void":
        """pop_front(listIndex3 self)"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3_pop_front(self)


    def push_front(self, x: 'std::list< itk::Index< 3 > >::value_type const &') -> "void":
        """push_front(listIndex3 self, std::list< itk::Index< 3 > >::value_type const & x)"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3_push_front(self, x)


    def reverse(self) -> "void":
        """reverse(listIndex3 self)"""
        return _itkButterworthBandpass1DFilterFunctionPython.listIndex3_reverse(self)

    __swig_destroy__ = _itkButterworthBandpass1DFilterFunctionPython.delete_listIndex3
listIndex3.iterator = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3_iterator, None, listIndex3)
listIndex3.__nonzero__ = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3___nonzero__, None, listIndex3)
listIndex3.__bool__ = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3___bool__, None, listIndex3)
listIndex3.__len__ = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3___len__, None, listIndex3)
listIndex3.__getslice__ = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3___getslice__, None, listIndex3)
listIndex3.__setslice__ = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3___setslice__, None, listIndex3)
listIndex3.__delslice__ = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3___delslice__, None, listIndex3)
listIndex3.__delitem__ = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3___delitem__, None, listIndex3)
listIndex3.__getitem__ = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3___getitem__, None, listIndex3)
listIndex3.__setitem__ = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3___setitem__, None, listIndex3)
listIndex3.pop = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3_pop, None, listIndex3)
listIndex3.append = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3_append, None, listIndex3)
listIndex3.empty = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3_empty, None, listIndex3)
listIndex3.size = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3_size, None, listIndex3)
listIndex3.swap = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3_swap, None, listIndex3)
listIndex3.begin = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3_begin, None, listIndex3)
listIndex3.end = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3_end, None, listIndex3)
listIndex3.rbegin = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3_rbegin, None, listIndex3)
listIndex3.rend = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3_rend, None, listIndex3)
listIndex3.clear = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3_clear, None, listIndex3)
listIndex3.get_allocator = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3_get_allocator, None, listIndex3)
listIndex3.pop_back = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3_pop_back, None, listIndex3)
listIndex3.erase = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3_erase, None, listIndex3)
listIndex3.push_back = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3_push_back, None, listIndex3)
listIndex3.front = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3_front, None, listIndex3)
listIndex3.back = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3_back, None, listIndex3)
listIndex3.assign = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3_assign, None, listIndex3)
listIndex3.resize = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3_resize, None, listIndex3)
listIndex3.insert = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3_insert, None, listIndex3)
listIndex3.pop_front = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3_pop_front, None, listIndex3)
listIndex3.push_front = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3_push_front, None, listIndex3)
listIndex3.reverse = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.listIndex3_reverse, None, listIndex3)
listIndex3_swigregister = _itkButterworthBandpass1DFilterFunctionPython.listIndex3_swigregister
listIndex3_swigregister(listIndex3)


def itkButterworthBandpass1DFilterFunction_New():
  return itkButterworthBandpass1DFilterFunction.New()


def itkButterworthBandpass1DFilterFunction_Superclass_New():
  return itkButterworthBandpass1DFilterFunction_Superclass.New()

class itkButterworthBandpass1DFilterFunction_Superclass(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkButterworthBandpass1DFilterFunction_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkButterworthBandpass1DFilterFunction_Superclass_Pointer":
        """__New_orig__() -> itkButterworthBandpass1DFilterFunction_Superclass_Pointer"""
        return _itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkButterworthBandpass1DFilterFunction_Superclass_Pointer":
        """Clone(itkButterworthBandpass1DFilterFunction_Superclass self) -> itkButterworthBandpass1DFilterFunction_Superclass_Pointer"""
        return _itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_Superclass_Clone(self)


    def EvaluateIndex(self, i: 'unsigned long long &') -> "double":
        """EvaluateIndex(itkButterworthBandpass1DFilterFunction_Superclass self, unsigned long long & i) -> double"""
        return _itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_Superclass_EvaluateIndex(self, i)


    def SetSignalSize(self, size: 'unsigned long long const &') -> "void":
        """SetSignalSize(itkButterworthBandpass1DFilterFunction_Superclass self, unsigned long long const & size)"""
        return _itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_Superclass_SetSignalSize(self, size)


    def GetSignalSize(self) -> "unsigned long long":
        """GetSignalSize(itkButterworthBandpass1DFilterFunction_Superclass self) -> unsigned long long"""
        return _itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_Superclass_GetSignalSize(self)


    def SetUseCache(self, _arg: 'bool const') -> "void":
        """SetUseCache(itkButterworthBandpass1DFilterFunction_Superclass self, bool const _arg)"""
        return _itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_Superclass_SetUseCache(self, _arg)


    def GetUseCache(self) -> "bool":
        """GetUseCache(itkButterworthBandpass1DFilterFunction_Superclass self) -> bool"""
        return _itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_Superclass_GetUseCache(self)


    def EvaluateFrequency(self, arg0: 'double') -> "double":
        """EvaluateFrequency(itkButterworthBandpass1DFilterFunction_Superclass self, double arg0) -> double"""
        return _itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_Superclass_EvaluateFrequency(self, arg0)

    __swig_destroy__ = _itkButterworthBandpass1DFilterFunctionPython.delete_itkButterworthBandpass1DFilterFunction_Superclass

    def cast(obj: 'itkLightObject') -> "itkButterworthBandpass1DFilterFunction_Superclass *":
        """cast(itkLightObject obj) -> itkButterworthBandpass1DFilterFunction_Superclass"""
        return _itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkButterworthBandpass1DFilterFunction_Superclass

        Create a new object of the class itkButterworthBandpass1DFilterFunction_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkButterworthBandpass1DFilterFunction_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkButterworthBandpass1DFilterFunction_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkButterworthBandpass1DFilterFunction_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkButterworthBandpass1DFilterFunction_Superclass.Clone = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_Superclass_Clone, None, itkButterworthBandpass1DFilterFunction_Superclass)
itkButterworthBandpass1DFilterFunction_Superclass.EvaluateIndex = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_Superclass_EvaluateIndex, None, itkButterworthBandpass1DFilterFunction_Superclass)
itkButterworthBandpass1DFilterFunction_Superclass.SetSignalSize = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_Superclass_SetSignalSize, None, itkButterworthBandpass1DFilterFunction_Superclass)
itkButterworthBandpass1DFilterFunction_Superclass.GetSignalSize = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_Superclass_GetSignalSize, None, itkButterworthBandpass1DFilterFunction_Superclass)
itkButterworthBandpass1DFilterFunction_Superclass.SetUseCache = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_Superclass_SetUseCache, None, itkButterworthBandpass1DFilterFunction_Superclass)
itkButterworthBandpass1DFilterFunction_Superclass.GetUseCache = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_Superclass_GetUseCache, None, itkButterworthBandpass1DFilterFunction_Superclass)
itkButterworthBandpass1DFilterFunction_Superclass.EvaluateFrequency = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_Superclass_EvaluateFrequency, None, itkButterworthBandpass1DFilterFunction_Superclass)
itkButterworthBandpass1DFilterFunction_Superclass_swigregister = _itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_Superclass_swigregister
itkButterworthBandpass1DFilterFunction_Superclass_swigregister(itkButterworthBandpass1DFilterFunction_Superclass)

def itkButterworthBandpass1DFilterFunction_Superclass___New_orig__() -> "itkButterworthBandpass1DFilterFunction_Superclass_Pointer":
    """itkButterworthBandpass1DFilterFunction_Superclass___New_orig__() -> itkButterworthBandpass1DFilterFunction_Superclass_Pointer"""
    return _itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_Superclass___New_orig__()

def itkButterworthBandpass1DFilterFunction_Superclass_cast(obj: 'itkLightObject') -> "itkButterworthBandpass1DFilterFunction_Superclass *":
    """itkButterworthBandpass1DFilterFunction_Superclass_cast(itkLightObject obj) -> itkButterworthBandpass1DFilterFunction_Superclass"""
    return _itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_Superclass_cast(obj)

class itkButterworthBandpass1DFilterFunction(itkButterworthBandpass1DFilterFunction_Superclass):
    """Proxy of C++ itkButterworthBandpass1DFilterFunction class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkButterworthBandpass1DFilterFunction_Pointer":
        """__New_orig__() -> itkButterworthBandpass1DFilterFunction_Pointer"""
        return _itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkButterworthBandpass1DFilterFunction_Pointer":
        """Clone(itkButterworthBandpass1DFilterFunction self) -> itkButterworthBandpass1DFilterFunction_Pointer"""
        return _itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_Clone(self)


    def SetUpperFrequency(self, _arg: 'double const') -> "void":
        """SetUpperFrequency(itkButterworthBandpass1DFilterFunction self, double const _arg)"""
        return _itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_SetUpperFrequency(self, _arg)


    def GetUpperFrequency(self) -> "double":
        """GetUpperFrequency(itkButterworthBandpass1DFilterFunction self) -> double"""
        return _itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_GetUpperFrequency(self)


    def SetLowerFrequency(self, _arg: 'double const') -> "void":
        """SetLowerFrequency(itkButterworthBandpass1DFilterFunction self, double const _arg)"""
        return _itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_SetLowerFrequency(self, _arg)


    def GetLowerFrequency(self) -> "double":
        """GetLowerFrequency(itkButterworthBandpass1DFilterFunction self) -> double"""
        return _itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_GetLowerFrequency(self)


    def SetOrder(self, _arg: 'int const') -> "void":
        """SetOrder(itkButterworthBandpass1DFilterFunction self, int const _arg)"""
        return _itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_SetOrder(self, _arg)


    def GetOrder(self) -> "int":
        """GetOrder(itkButterworthBandpass1DFilterFunction self) -> int"""
        return _itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_GetOrder(self)

    __swig_destroy__ = _itkButterworthBandpass1DFilterFunctionPython.delete_itkButterworthBandpass1DFilterFunction

    def cast(obj: 'itkLightObject') -> "itkButterworthBandpass1DFilterFunction *":
        """cast(itkLightObject obj) -> itkButterworthBandpass1DFilterFunction"""
        return _itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkButterworthBandpass1DFilterFunction

        Create a new object of the class itkButterworthBandpass1DFilterFunction and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkButterworthBandpass1DFilterFunction.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkButterworthBandpass1DFilterFunction.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkButterworthBandpass1DFilterFunction.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkButterworthBandpass1DFilterFunction.Clone = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_Clone, None, itkButterworthBandpass1DFilterFunction)
itkButterworthBandpass1DFilterFunction.SetUpperFrequency = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_SetUpperFrequency, None, itkButterworthBandpass1DFilterFunction)
itkButterworthBandpass1DFilterFunction.GetUpperFrequency = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_GetUpperFrequency, None, itkButterworthBandpass1DFilterFunction)
itkButterworthBandpass1DFilterFunction.SetLowerFrequency = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_SetLowerFrequency, None, itkButterworthBandpass1DFilterFunction)
itkButterworthBandpass1DFilterFunction.GetLowerFrequency = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_GetLowerFrequency, None, itkButterworthBandpass1DFilterFunction)
itkButterworthBandpass1DFilterFunction.SetOrder = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_SetOrder, None, itkButterworthBandpass1DFilterFunction)
itkButterworthBandpass1DFilterFunction.GetOrder = new_instancemethod(_itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_GetOrder, None, itkButterworthBandpass1DFilterFunction)
itkButterworthBandpass1DFilterFunction_swigregister = _itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_swigregister
itkButterworthBandpass1DFilterFunction_swigregister(itkButterworthBandpass1DFilterFunction)

def itkButterworthBandpass1DFilterFunction___New_orig__() -> "itkButterworthBandpass1DFilterFunction_Pointer":
    """itkButterworthBandpass1DFilterFunction___New_orig__() -> itkButterworthBandpass1DFilterFunction_Pointer"""
    return _itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction___New_orig__()

def itkButterworthBandpass1DFilterFunction_cast(obj: 'itkLightObject') -> "itkButterworthBandpass1DFilterFunction *":
    """itkButterworthBandpass1DFilterFunction_cast(itkLightObject obj) -> itkButterworthBandpass1DFilterFunction"""
    return _itkButterworthBandpass1DFilterFunctionPython.itkButterworthBandpass1DFilterFunction_cast(obj)



