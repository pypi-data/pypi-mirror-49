# -*- coding: utf-8 -*-
from distutils.core import setup

packages = \
['morelia']

package_data = \
{'': ['*']}

install_requires = \
['parse>=1.12.0,<2.0.0', 'requests>=2.21,<3.0', 'toml>=0.10.0,<0.11.0']

setup_kwargs = {
    'name': 'morelia',
    'version': '0.9.2',
    'description': 'for "Behavior Driven Development" (BDD) -- a client-facing scripting language to put the squeeze on all your features',
    'long_description': '#######\nMorelia\n#######\n\n.. image:: https://img.shields.io/pypi/wheel/Morelia.svg\n    :target: https://pypi.python.org/pypi/Morelia/\n    :alt: Wheel Status\n\n.. image:: https://img.shields.io/pypi/pyversions/Morelia.svg\n    :target: https://pypi.python.org/pypi/Morelia/\n    :alt: Python versions\n\n.. image:: https://img.shields.io/pypi/v/Morelia.svg\n    :target: https://pypi.python.org/pypi/Morelia/\n    :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/l/Morelia.svg\n    :target: https://pypi.python.org/pypi/Morelia/\n    :alt: License\n\n.. image:: https://travis-ci.org/kidosoft/Morelia.svg?branch=master\n    :target: https://travis-ci.org/kidosoft/Morelia\n    :alt: Build status\n\n.. image:: https://coveralls.io/repos/kidosoft/Morelia/badge.svg\n    :target: https://coveralls.io/r/kidosoft/Morelia\n    :alt: Coverage\n\n.. image:: https://readthedocs.org/projects/morelia/badge/?format=svg\n    :target: https://morelia.readthedocs.io\n    :alt: Documentation\n\n.. image:: https://pyup.io/repos/github/kidosoft/Morelia/shield.svg\n    :target: https://pyup.io/repos/github/kidosoft/Morelia/\n    :alt: Updates\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\nMorelia is a Python Behavior Driven Development (BDD) library.\n\nBDD is an agile software development process that encourages\ncollaboration between developers, QA and business participants.\n\nTest scenarios written in natural language make BDD foundation.\nThey are comprehensible for non-technical participants who wrote them\nand unambiguous for developers and QA.\n\nMorelia makes it easy for developers to integrate BDD into their existing\nunittest frameworks.  It is easy to run under nose, pytest, tox, trial or integrate\nwith django, flask or any other python framework because no special code\nhave to be written.\n\nYou as developer are in charge of how tests are organized. No need to fit into\nrigid rules forced by some other BDD frameworks.\n\n**Mascot**:\n\n.. image:: http://www.naturfoto.cz/fotografie/ostatni/krajta-zelena-47784.jpg\n\nInstallation\n============\n\n.. code-block:: console\n\n    pip install morelia\n\nQuick usage guide\n=================\n\nWrite a feature description:\n\n.. code-block:: cucumber\n\n    # calculator.feature\n\n    Feature: Addition\n        In order to avoid silly mistakes\n        As a math idiot\n        I want to be told the sum of two numbers\n\n    Scenario: Add two numbers\n        Given I have powered calculator on\n        When I enter "50" into the calculator\n        And I enter "70" into the calculator\n        And I press add\n        Then the result should be "120" on the screen\n\n\nCreate standard Python\'s `unittest` and hook Morelia into it:\n\n.. code-block:: python\n\n    # test_acceptance.py\n\n    import unittest\n\n    from morelia import verify\n\n\n    class CalculatorTestCase(unittest.TestCase):\n    \n        def test_addition(self):\n            """ Addition feature """\n            verify(\'calculator.feature\', self)\n\nRun test with your favourite runner: unittest, nose, py.test, trial. You name it!\n\n.. code-block:: console\n\n    $ python -m unittest -v test_acceptance  # or\n    $ pytest test_acceptance.py  # or\n    $ nosetests -v test_acceptance.py  # or\n    $ trial test_acceptance.py  # or\n    $ # django/pyramid/flask/(place for your favourite test runner)\n\nAnd you\'ll see which steps are missing:\n\n.. code-block:: python\n\n    F\n    ======================================================================\n    FAIL: test_addition (test_acceptance.CalculatorTestCase)\n    Addition feature.\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File "(..)test_acceptance.py", line 31, in test_addition\n        verify(filename, self)\n      File "(..)/morelia/__init__.py", line 120, in verify\n        execute_script(feature, suite, scenario=scenario, config=conf)\n      File "(..)/morelia/parser.py", line 59, in execute_script\n        assert not_found == set(), message\n    AssertionError: Cannot match steps:\n\n        def step_I_have_powered_calculator_on(self):\n            r\'I have powered calculator on\'\n\n            raise NotImplementedError(\'I have powered calculator on\')\n\n        def step_I_enter_number_into_the_calculator(self, number):\n            r\'I enter "([^"]+)" into the calculator\'\n\n            raise NotImplementedError(\'I enter "50" into the calculator\')\n\n        def step_I_enter_number_into_the_calculator(self, number):\n            r\'I enter "([^"]+)" into the calculator\'\n\n            raise NotImplementedError(\'I enter "70" into the calculator\')\n\n        def step_I_press_add(self):\n            r\'I press add\'\n\n            raise NotImplementedError(\'I press add\')\n\n        def step_the_result_should_be_number_on_the_screen(self, number):\n            r\'the result should be "([^"]+)" on the screen\'\n\n            raise NotImplementedError(\'the result should be "120" on the screen\')\n\n    ----------------------------------------------------------------------\n    Ran 1 test in 0.013s\n\n    FAILED (failures=1)\n\nNow implement steps with standard `TestCases` that you are familiar:\n\n.. code-block:: python\n\n    # test_acceptance.py\n\n    import unittest\n\n    from morelia import verify\n    \n\n    class CalculatorTestCase(unittest.TestCase):\n    \n        def test_addition(self):\n            """ Addition feature """\n            verify(\'calculator.feature\', self)\n    \n        def step_I_have_powered_calculator_on(self):\n            r\'I have powered calculator on\'\n            self.stack = []\n\n        def step_I_enter_a_number_into_the_calculator(self, number):\n            r\'I enter "(\\d+)" into the calculator\'  # match by regexp\n            self.stack.append(int(number))\n    \n        def step_I_press_add(self):  # matched by method name\n            self.result = sum(self.stack)\n    \n        def step_the_result_should_be_on_the_screen(self, number):\n            r\'the result should be "{number}" on the screen\'  # match by format-like string\n            self.assertEqual(int(number), self.result)\n\n\nAnd run it again:\n\n.. code-block:: console\n\n    $ python -m unittest test_acceptance\n\n    Feature: Addition\n        In order to avoid silly mistakes\n        As a math idiot\n        I want to be told the sum of two numbers\n    Scenario: Add two numbers\n        Given I have powered calculator on                       # pass  0.000s\n        When I enter "50" into the calculator                    # pass  0.000s\n        And I enter "70" into the calculator                     # pass  0.000s\n        And I press add                                          # pass  0.001s\n        Then the result should be "120" on the screen            # pass  0.001s\n    .\n    ----------------------------------------------------------------------\n    Ran 1 test in 0.028s\n\n    OK\n\nNote that Morelia does not waste anyone\'s time inventing a new testing back-end\njust to add a layer of literacy over our testage. Steps are miniature `TestCases`.\nYour onsite customer need never know, and your unit tests and customer tests\ncan share their support methods. The same one test button can run all TDD and BDD tests.\n\nLook at example directory for a little more enhanced example and read full\ndocumentation for more advanced topics.\n\nDocumentation\n=============\n\nFull documentation is available at http://morelia.readthedocs.org/en/latest/index.html\n\n.. image:: http://zeroplayer.com/images/stuff/sneakySnake.jpg\n.. _the cheeseshop: http://pypi.python.org/pypi/Morelia/\n.. _GitHub: http://github.com/kidosoft/Morelia/\n\nCredits\n---------\n\nThis package was created with Cookiecutter_ and the `kidosoft/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`kidosoft/cookiecutter-pypackage`: https://github.com/kidosoft/cookiecutter-pypackage\n',
    'author': 'dryobates',
    'author_email': 'jakub.stolarski@gmail.com',
    'url': 'https://github.com/kidosoft/morelia',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.5,<4.0',
}


setup(**setup_kwargs)
