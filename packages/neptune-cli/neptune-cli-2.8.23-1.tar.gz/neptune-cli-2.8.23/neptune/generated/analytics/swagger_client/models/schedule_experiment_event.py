# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ScheduleExperimentEvent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, environment=None, experiment_name=None, experiment_type=None, gpu=None, grid_search_size=None, input_data_size=None, inputs=None, worker=None):
        """
        ScheduleExperimentEvent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'environment': 'str',
            'experiment_name': 'str',
            'experiment_type': 'str',
            'gpu': 'bool',
            'grid_search_size': 'int',
            'input_data_size': 'int',
            'inputs': 'int',
            'worker': 'str'
        }

        self.attribute_map = {
            'environment': 'environment',
            'experiment_name': 'experimentName',
            'experiment_type': 'experimentType',
            'gpu': 'gpu',
            'grid_search_size': 'gridSearchSize',
            'input_data_size': 'inputDataSize',
            'inputs': 'inputs',
            'worker': 'worker'
        }

        self._environment = environment
        self._experiment_name = experiment_name
        self._experiment_type = experiment_type
        self._gpu = gpu
        self._grid_search_size = grid_search_size
        self._input_data_size = input_data_size
        self._inputs = inputs
        self._worker = worker

    @property
    def environment(self):
        """
        Gets the environment of this ScheduleExperimentEvent.


        :return: The environment of this ScheduleExperimentEvent.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """
        Sets the environment of this ScheduleExperimentEvent.


        :param environment: The environment of this ScheduleExperimentEvent.
        :type: str
        """
        
        self._environment = environment

    @property
    def experiment_name(self):
        """
        Gets the experiment_name of this ScheduleExperimentEvent.


        :return: The experiment_name of this ScheduleExperimentEvent.
        :rtype: str
        """
        return self._experiment_name

    @experiment_name.setter
    def experiment_name(self, experiment_name):
        """
        Sets the experiment_name of this ScheduleExperimentEvent.


        :param experiment_name: The experiment_name of this ScheduleExperimentEvent.
        :type: str
        """
        
        self._experiment_name = experiment_name

    @property
    def experiment_type(self):
        """
        Gets the experiment_type of this ScheduleExperimentEvent.


        :return: The experiment_type of this ScheduleExperimentEvent.
        :rtype: str
        """
        return self._experiment_type

    @experiment_type.setter
    def experiment_type(self, experiment_type):
        """
        Sets the experiment_type of this ScheduleExperimentEvent.


        :param experiment_type: The experiment_type of this ScheduleExperimentEvent.
        :type: str
        """
        
        self._experiment_type = experiment_type

    @property
    def gpu(self):
        """
        Gets the gpu of this ScheduleExperimentEvent.


        :return: The gpu of this ScheduleExperimentEvent.
        :rtype: bool
        """
        return self._gpu

    @gpu.setter
    def gpu(self, gpu):
        """
        Sets the gpu of this ScheduleExperimentEvent.


        :param gpu: The gpu of this ScheduleExperimentEvent.
        :type: bool
        """
        
        self._gpu = gpu

    @property
    def grid_search_size(self):
        """
        Gets the grid_search_size of this ScheduleExperimentEvent.


        :return: The grid_search_size of this ScheduleExperimentEvent.
        :rtype: int
        """
        return self._grid_search_size

    @grid_search_size.setter
    def grid_search_size(self, grid_search_size):
        """
        Sets the grid_search_size of this ScheduleExperimentEvent.


        :param grid_search_size: The grid_search_size of this ScheduleExperimentEvent.
        :type: int
        """
        
        self._grid_search_size = grid_search_size

    @property
    def input_data_size(self):
        """
        Gets the input_data_size of this ScheduleExperimentEvent.


        :return: The input_data_size of this ScheduleExperimentEvent.
        :rtype: int
        """
        return self._input_data_size

    @input_data_size.setter
    def input_data_size(self, input_data_size):
        """
        Sets the input_data_size of this ScheduleExperimentEvent.


        :param input_data_size: The input_data_size of this ScheduleExperimentEvent.
        :type: int
        """
        
        self._input_data_size = input_data_size

    @property
    def inputs(self):
        """
        Gets the inputs of this ScheduleExperimentEvent.


        :return: The inputs of this ScheduleExperimentEvent.
        :rtype: int
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """
        Sets the inputs of this ScheduleExperimentEvent.


        :param inputs: The inputs of this ScheduleExperimentEvent.
        :type: int
        """
        
        self._inputs = inputs

    @property
    def worker(self):
        """
        Gets the worker of this ScheduleExperimentEvent.


        :return: The worker of this ScheduleExperimentEvent.
        :rtype: str
        """
        return self._worker

    @worker.setter
    def worker(self, worker):
        """
        Sets the worker of this ScheduleExperimentEvent.


        :param worker: The worker of this ScheduleExperimentEvent.
        :type: str
        """
        
        self._worker = worker

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




