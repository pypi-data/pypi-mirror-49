{"version":3,"sources":["webpack:///./app/views/settings/organizationTeams/allTeamsRow.jsx","webpack:///./app/views/settings/organizationTeams/allTeamsList.jsx","webpack:///./app/views/settings/organizationTeams/organizationTeams.jsx","webpack:///./app/views/settings/organizationTeams/index.jsx"],"names":["AllTeamsRow","createReactClass","displayName","propTypes","urlPrefix","PropTypes","string","isRequired","access","object","organization","team","openMembership","bool","mixins","ApiMixin","getInitialState","loading","error","joinTeam","_this","this","_this$props","props","setState","api","orgId","slug","teamId","success","addSuccessMessage","tct","concat","addErrorMessage","leaveTeam","_this2","_this$props2","render","_this$props3","display","react_default","a","createElement","idBadge","avatarSize","description","tn","memberCount","panels","p","align","index_es","flex","has","es","to","state","className","isMember","onClick","t","isPending","AllTeamsList","handleCreateTeam","e","useCreateModal","preventDefault","openCreateTeamModal","onClose","teamNodes","teamList","map","teamIdx","allTeamsRow","key","length","emptyMessage","root","textBlock","noMargin","teamCreate","link","React","Component","SentryTypes","Organization","arrayOf","Team","OrganizationTeams","allTeams","activeTeams","features","routes","params","org","canCreateTeams","getOrganizationState","getAccess","action","components_button","priority","size","disabled","title","undefined","icon","teamRoute","find","_ref","path","recreateRoute","stepBack","activeTeamIds","Set","id","otherTeams","filter","data-test-id","settingsPageHeader","allTeamsList","array","OrganizationTeamsContainer","OrganizationState","Reflux","listenTo","TeamStore","ProjectsStore","sortArray","getAll","o","name","projectList","projectStats","componentDidMount","fetchStats","loadStats","query","since","Date","getTime","stat","group","onTeamListChange","newTeamList","onProjectListChange","newProjectList","context","getFeatures","getOrganization","organizationTeams","extends_default"],"mappings":"gbA8JeA,EA/IKC,IAAiB,CACnCC,YAAa,cAEbC,UAAW,CACTC,UAAWC,IAAUC,OAAOC,WAC5BC,OAAQH,IAAUI,OAAOF,WACzBG,aAAcL,IAAUI,OAAOF,WAC/BI,KAAMN,IAAUI,OAAOF,WACvBK,eAAgBP,IAAUQ,KAAKN,YAGjCO,OAAQ,CAACC,WAETC,gBAbmC,WAcjC,MAAO,CACLC,SAAS,EACTC,OAAO,IAIXC,SApBmC,WAoBxB,IAAAC,EAAAC,KAAAC,EACoBD,KAAKE,MAA3Bb,EADEY,EACFZ,aAAcC,EADZW,EACYX,KAErBU,KAAKG,SAAS,CACZP,SAAS,IAGXE,YACEE,KAAKI,IACL,CACEC,MAAOhB,EAAaiB,KACpBC,OAAQjB,EAAKgB,MAEf,CACEE,QAAS,WACPT,EAAKI,SAAS,CACZP,SAAS,EACTC,OAAO,IAETY,4BACEC,cAAI,yBAA0B,CAC5BpB,KAAI,IAAAqB,OAAMrB,EAAKgB,UAIrBT,MAAO,WACLE,EAAKI,SAAS,CACZP,SAAS,EACTC,OAAO,IAETe,0BACEF,cAAI,wBAAyB,CAC3BpB,KAAI,IAAAqB,OAAMrB,EAAKgB,aAQ3BO,UA5DmC,WA4DvB,IAAAC,EAAAd,KAAAe,EACmBf,KAAKE,MAA3Bb,EADG0B,EACH1B,aAAcC,EADXyB,EACWzB,KAErBU,KAAKG,SAAS,CACZP,SAAS,IAGXiB,YACEb,KAAKI,IACL,CACEC,MAAOhB,EAAaiB,KACpBC,OAAQjB,EAAKgB,MAEf,CACEE,QAAS,WACPM,EAAKX,SAAS,CACZP,SAAS,EACTC,OAAO,IAETY,4BACEC,cAAI,uBAAwB,CAC1BpB,KAAI,IAAAqB,OAAMrB,EAAKgB,UAIrBT,MAAO,WACLiB,EAAKX,SAAS,CACZP,SAAS,EACTC,OAAO,IAETe,0BACEF,cAAI,yBAA0B,CAC5BpB,KAAI,IAAAqB,OAAMrB,EAAKgB,aAQ3BU,OApGmC,WAoG1B,IAAAC,EAC2CjB,KAAKE,MAAhDf,EADA8B,EACA9B,OAAQG,EADR2B,EACQ3B,KAAMP,EADdkC,EACclC,UAAWQ,EADzB0B,EACyB1B,eAC1B2B,EACJC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEhC,KAAMA,EACNiC,WAAY,GACZC,YAAaC,aAAG,YAAa,aAAcnC,EAAKoC,eAIpD,OACEP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAWC,EAAG,EAAGC,MAAM,UACrBV,EAAAC,EAAAC,cAACS,EAAA,IAAD,CAAKC,KAAK,IAAIH,EAAG,GACdzC,EAAO6C,IAAI,aACVb,EAAAC,EAAAC,cAACY,EAAA,KAAD,CAAMC,GAAE,GAAAvB,OAAK5B,EAAL,UAAA4B,OAAuBrB,EAAKgB,KAA5B,MAAsCY,GAE9CA,GAGJC,EAAAC,EAAAC,cAACS,EAAA,IAAD,CAAKF,EAAG,GACL5B,KAAKmC,MAAMvC,QACVuB,EAAAC,EAAAC,cAAA,KAAGe,UAAU,mDAAb,OACE9C,EAAK+C,SACPlB,EAAAC,EAAAC,cAAA,KAAGe,UAAU,oCAAoCE,QAAStC,KAAKa,WAC5D0B,YAAE,eAEHjD,EAAKkD,UACPrB,EAAAC,EAAAC,cAAA,KAAGe,UAAU,uCAAuCG,YAAE,oBACpDhD,EACF4B,EAAAC,EAAAC,cAAA,KAAGe,UAAU,yBAAyBE,QAAStC,KAAKF,UACjDyC,YAAE,cAGLpB,EAAAC,EAAAC,cAAA,KAAGe,UAAU,yBAAyBE,QAAStC,KAAKF,UACjDyC,YAAE,wBCzIXE,qLAUJC,iBAAmB,SAAAC,GAAK,IAAA1C,EACiBF,EAAKG,MAArC0C,EADe3C,EACf2C,eAAgBvD,EADDY,EACCZ,aAElBuD,IAILD,EAAEE,iBAEFC,YAAoB,CAClBzD,eACA0D,QAAS,yEAIJ,IAAAhC,EACmEf,KAAKE,MAAxEf,EADA4B,EACA5B,OAAQE,EADR0B,EACQ1B,aAAcN,EADtBgC,EACsBhC,UAAWQ,EADjCwB,EACiCxB,eAAgBqD,EADjD7B,EACiD6B,eAClDI,EAAYhD,KAAKE,MAAM+C,SAASC,IAAI,SAAC5D,EAAM6D,GAC/C,OACEhC,EAAAC,EAAAC,cAAC+B,EAAD,CACErE,UAAWA,EACXI,OAAQA,EACRG,KAAMA,EACND,aAAcA,EACdE,eAAgBA,EAChB8D,IAAK/D,EAAKgB,SAKhB,GAAyB,IAArB0C,EAAUM,OACZ,OAAON,EAGT,IAAMd,EAAKU,EAAiB,IAAH,kBAAAjC,OAA2BtB,EAAaiB,KAAxC,eACzB,OACEa,EAAAC,EAAAC,cAACkC,EAAA,QAAD,KACG7C,cAAI,8BAA+B,CAClC8C,KAAMrC,EAAAC,EAAAC,cAACoC,EAAA,QAAD,CAAWC,UAAQ,IACzBC,WAAYxE,EAAO6C,IAAI,iBACnBtB,cAAI,oCAAqC,CACvCkD,KAAMzC,EAAAC,EAAAC,cAACY,EAAA,KAAD,CAAMC,GAAIA,EAAII,QAAStC,KAAK0C,qBAEpC,eArDamB,IAAMC,WAA3BrB,EACG3D,UAAY,CACjBC,UAAWC,IAAUC,OACrBE,OAAQH,IAAUI,OAClBC,aAAc0E,UAAYC,aAC1Bf,SAAUjE,IAAUiF,QAAQF,UAAYG,MACxC3E,eAAgBP,IAAUQ,KAC1BoD,eAAgB5D,IAAUQ,MAqDfiD,QC1DT0B,2IAWK,IAAAlE,EASHD,KAAKE,MAPPkE,EAFKnE,EAELmE,SACAC,EAHKpE,EAGLoE,YACAhF,EAJKY,EAILZ,aACAF,EALKc,EAKLd,OACAmF,EANKrE,EAMLqE,SACAC,EAPKtE,EAOLsE,OACAC,EARKvE,EAQLuE,OAEIC,EAAMpF,EAEZ,IAAKA,EACH,OAAO,KAGT,IAAMqF,EAAiBC,YAAqBtF,GACzCuF,YACA5C,IAAI,iBAED6C,EACJ1D,EAAAC,EAAAC,cAACyD,EAAA,QAAD,CACEC,SAAS,UACTC,KAAK,QACLC,UAAWP,EACXQ,MACGR,OAAmES,EAAlD5C,YAAE,8CAEtBD,QAAS,kBACPQ,YAAoB,CAClBzD,kBAEJ+F,KAAK,mBAEJ7C,YAAE,gBAID8C,EAAYd,EAAOe,KAAK,SAAAC,GAAA,MAAqB,WAArBA,EAAEC,OAC1BzG,EAAY0G,YAAcJ,EAAW,CAACd,SAAQC,SAAQkB,UAAW,IAEjEC,EAAgB,IAAIC,IAAIvB,EAAYnB,IAAI,SAAA5D,GAAI,OAAIA,EAAKuG,MACrDC,EAAa1B,EAAS2B,OAAO,SAAAzG,GAAI,OAAKqG,EAAc3D,IAAI1C,EAAKuG,MAEnE,OACE1E,EAAAC,EAAAC,cAAA,OAAK2E,eAAa,YAAY5D,UAAU,aACtCjB,EAAAC,EAAAC,cAAC4E,EAAA,QAAD,CAAoBf,MAAO3C,YAAE,SAAUsC,OAAQA,IAC/C1D,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACM,EAAA,EAAD,KAAcY,YAAE,eAChBpB,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAAC6E,EAAD,CACEtD,gBAAc,EACd7D,UAAWA,EACXM,aAAcoF,EACdxB,SAAUoB,EACVlF,OAAQA,EACRI,gBAAgB,MAItB4B,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACM,EAAA,EAAD,KAAcY,YAAE,gBAChBpB,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAAC6E,EAAD,CACEtD,gBAAc,EACd7D,UAAWA,EACXM,aAAcoF,EACdxB,SAAU6C,EACV3G,OAAQA,EACRI,kBACK+E,EAAStC,IAAI,qBAAsB7C,EAAO6C,IAAI,0BAjFjC6B,IAAMC,WAAhCK,EACGrF,UAAY,CACjBsF,SAAUpF,IAAUiF,QAAQF,UAAYG,MACxCG,YAAarF,IAAUiF,QAAQF,UAAYG,MAC3C7E,aAAc0E,UAAYC,aAC1B7E,OAAQH,IAAUI,OAClBkF,SAAUtF,IAAUI,OACpBmF,OAAQvF,IAAUmH,MAClB3B,OAAQxF,IAAUI,QAmFP+E,QC5FTiC,EAA6BxH,IAAiB,CAClDC,YAAa,6BAEbC,UAAW,CACTyF,OAAQvF,IAAUiF,QAAQjF,IAAUI,SAGtCK,OAAQ,CACNC,UACA2G,IACAC,IAAOC,SAASC,IAAW,oBAC3BF,IAAOC,SAASE,IAAe,wBAGjC9G,gBAdkD,WAehD,MAAO,CACLsD,SAAUyD,oBAAUF,IAAUG,SAAU,SAASC,GAC/C,OAAOA,GAAKA,EAAEC,OAEhBC,YAAaJ,oBAAUD,IAAcE,SAAU,SAASC,GACtD,OAAOA,GAAKA,EAAEC,OAEhBE,aAAc,KAIlBC,kBA1BkD,WA2BhDhH,KAAKiH,cAGPA,WA9BkD,WA+BhDC,YAAUlH,KAAKI,IAAK,CAClBC,MAAOL,KAAKE,MAAMsE,OAAOnE,MACzB8G,MAAO,CACLC,OAAO,IAAIC,MAAOC,UAAY,IAAO,MACrCC,KAAM,YACNC,MAAO,cAKbC,iBAzCkD,WA0ChD,IAAMC,EAAclB,IAAUG,SAE9B3G,KAAKG,SAAS,CACZ8C,SAAUyD,oBAAUgB,EAAa,SAASd,GACxC,OAAOA,EAAEC,UAKfc,oBAnDkD,WAoDhD,IAAMC,EAAiBnB,IAAcE,SAErC3G,KAAKG,SAAS,CACZ2G,YAAaJ,oBAAUkB,EAAgB,SAAShB,GAC9C,OAAOA,EAAEC,UAKf7F,OA7DkD,WA8DhD,IAAKhB,KAAK6H,QAAQxI,aAChB,OAAO,KAGT,IAAMF,EAASa,KAAK4E,YACdN,EAAWtE,KAAK8H,cAChBrD,EAAMzE,KAAK+H,kBAEX3D,EAAWpE,KAAKmC,MAAMc,SACtBoB,EAAcrE,KAAKmC,MAAMc,SAAS8C,OAAO,SAAAzG,GAAI,OAAIA,EAAK+C,WAE5D,OACElB,EAAAC,EAAAC,cAAC2G,EAADC,IAAA,GACMjI,KAAKE,MADX,CAEEf,OAAQA,EACRmF,SAAUA,EACVjF,aAAcoF,EACdqC,YAAa9G,KAAKmC,MAAM2E,YACxB1C,SAAUA,EACVC,YAAaA,QAMN+B","file":"OrganizationTeams.js","sourcesContent":["import {Box} from 'grid-emotion';\nimport {Link} from 'react-router';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport createReactClass from 'create-react-class';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {joinTeam, leaveTeam} from 'app/actionCreators/teams';\nimport {t, tct, tn} from 'app/locale';\nimport ApiMixin from 'app/mixins/apiMixin';\nimport {PanelItem} from 'app/components/panels';\nimport IdBadge from 'app/components/idBadge';\n\n// TODO(dcramer): this isnt great UX\n\nconst AllTeamsRow = createReactClass({\n  displayName: 'AllTeamsRow',\n\n  propTypes: {\n    urlPrefix: PropTypes.string.isRequired,\n    access: PropTypes.object.isRequired,\n    organization: PropTypes.object.isRequired,\n    team: PropTypes.object.isRequired,\n    openMembership: PropTypes.bool.isRequired,\n  },\n\n  mixins: [ApiMixin],\n\n  getInitialState() {\n    return {\n      loading: false,\n      error: false,\n    };\n  },\n\n  joinTeam() {\n    const {organization, team} = this.props;\n\n    this.setState({\n      loading: true,\n    });\n\n    joinTeam(\n      this.api,\n      {\n        orgId: organization.slug,\n        teamId: team.slug,\n      },\n      {\n        success: () => {\n          this.setState({\n            loading: false,\n            error: false,\n          });\n          addSuccessMessage(\n            tct('You have joined [team]', {\n              team: `#${team.slug}`,\n            })\n          );\n        },\n        error: () => {\n          this.setState({\n            loading: false,\n            error: true,\n          });\n          addErrorMessage(\n            tct('Unable to join [team]', {\n              team: `#${team.slug}`,\n            })\n          );\n        },\n      }\n    );\n  },\n\n  leaveTeam() {\n    const {organization, team} = this.props;\n\n    this.setState({\n      loading: true,\n    });\n\n    leaveTeam(\n      this.api,\n      {\n        orgId: organization.slug,\n        teamId: team.slug,\n      },\n      {\n        success: () => {\n          this.setState({\n            loading: false,\n            error: false,\n          });\n          addSuccessMessage(\n            tct('You have left [team]', {\n              team: `#${team.slug}`,\n            })\n          );\n        },\n        error: () => {\n          this.setState({\n            loading: false,\n            error: true,\n          });\n          addErrorMessage(\n            tct('Unable to leave [team]', {\n              team: `#${team.slug}`,\n            })\n          );\n        },\n      }\n    );\n  },\n\n  render() {\n    const {access, team, urlPrefix, openMembership} = this.props;\n    const display = (\n      <IdBadge\n        team={team}\n        avatarSize={36}\n        description={tn('%s Member', '%s Members', team.memberCount)}\n      />\n    );\n\n    return (\n      <PanelItem p={0} align=\"center\">\n        <Box flex=\"1\" p={2}>\n          {access.has('team:read') ? (\n            <Link to={`${urlPrefix}teams/${team.slug}/`}>{display}</Link>\n          ) : (\n            display\n          )}\n        </Box>\n        <Box p={2}>\n          {this.state.loading ? (\n            <a className=\"btn btn-default btn-sm btn-loading btn-disabled\">...</a>\n          ) : team.isMember ? (\n            <a className=\"leave-team btn btn-default btn-sm\" onClick={this.leaveTeam}>\n              {t('Leave Team')}\n            </a>\n          ) : team.isPending ? (\n            <a className=\"btn btn-default btn-sm btn-disabled\">{t('Request Pending')}</a>\n          ) : openMembership ? (\n            <a className=\"btn btn-default btn-sm\" onClick={this.joinTeam}>\n              {t('Join Team')}\n            </a>\n          ) : (\n            <a className=\"btn btn-default btn-sm\" onClick={this.joinTeam}>\n              {t('Request Access')}\n            </a>\n          )}\n        </Box>\n      </PanelItem>\n    );\n  },\n});\n\nexport default AllTeamsRow;\n","import {Link} from 'react-router';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {openCreateTeamModal} from 'app/actionCreators/modal';\nimport {tct} from 'app/locale';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport SentryTypes from 'app/sentryTypes';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nimport AllTeamsRow from './allTeamsRow';\n\nclass AllTeamsList extends React.Component {\n  static propTypes = {\n    urlPrefix: PropTypes.string,\n    access: PropTypes.object,\n    organization: SentryTypes.Organization,\n    teamList: PropTypes.arrayOf(SentryTypes.Team),\n    openMembership: PropTypes.bool,\n    useCreateModal: PropTypes.bool,\n  };\n\n  handleCreateTeam = e => {\n    const {useCreateModal, organization} = this.props;\n\n    if (!useCreateModal) {\n      return;\n    }\n\n    e.preventDefault();\n\n    openCreateTeamModal({\n      organization,\n      onClose: () => {},\n    });\n  };\n\n  render() {\n    const {access, organization, urlPrefix, openMembership, useCreateModal} = this.props;\n    const teamNodes = this.props.teamList.map((team, teamIdx) => {\n      return (\n        <AllTeamsRow\n          urlPrefix={urlPrefix}\n          access={access}\n          team={team}\n          organization={organization}\n          openMembership={openMembership}\n          key={team.slug}\n        />\n      );\n    });\n\n    if (teamNodes.length !== 0) {\n      return teamNodes;\n    }\n\n    const to = useCreateModal ? '#' : `/organizations/${organization.slug}/teams/new/`;\n    return (\n      <EmptyMessage>\n        {tct('No teams here. [teamCreate]', {\n          root: <TextBlock noMargin />,\n          teamCreate: access.has('project:admin')\n            ? tct('You can always [link:create one].', {\n                link: <Link to={to} onClick={this.handleCreateTeam} />,\n              })\n            : null,\n        })}\n      </EmptyMessage>\n    );\n  }\n}\n\nexport default AllTeamsList;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {getOrganizationState} from 'app/mixins/organizationState';\nimport {openCreateTeamModal} from 'app/actionCreators/modal';\nimport {t} from 'app/locale';\nimport Button from 'app/components/button';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport SentryTypes from 'app/sentryTypes';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport recreateRoute from 'app/utils/recreateRoute';\n\nimport AllTeamsList from './allTeamsList';\n\nclass OrganizationTeams extends React.Component {\n  static propTypes = {\n    allTeams: PropTypes.arrayOf(SentryTypes.Team),\n    activeTeams: PropTypes.arrayOf(SentryTypes.Team),\n    organization: SentryTypes.Organization,\n    access: PropTypes.object,\n    features: PropTypes.object,\n    routes: PropTypes.array,\n    params: PropTypes.object,\n  };\n\n  render() {\n    const {\n      allTeams,\n      activeTeams,\n      organization,\n      access,\n      features,\n      routes,\n      params,\n    } = this.props;\n    const org = organization;\n\n    if (!organization) {\n      return null;\n    }\n\n    const canCreateTeams = getOrganizationState(organization)\n      .getAccess()\n      .has('project:admin');\n\n    const action = (\n      <Button\n        priority=\"primary\"\n        size=\"small\"\n        disabled={!canCreateTeams}\n        title={\n          !canCreateTeams ? t('You do not have permission to create teams') : undefined\n        }\n        onClick={() =>\n          openCreateTeamModal({\n            organization,\n          })}\n        icon=\"icon-circle-add\"\n      >\n        {t('Create Team')}\n      </Button>\n    );\n\n    const teamRoute = routes.find(({path}) => path === 'teams/');\n    const urlPrefix = recreateRoute(teamRoute, {routes, params, stepBack: -2});\n\n    const activeTeamIds = new Set(activeTeams.map(team => team.id));\n    const otherTeams = allTeams.filter(team => !activeTeamIds.has(team.id));\n\n    return (\n      <div data-test-id=\"team-list\" className=\"team-list\">\n        <SettingsPageHeader title={t('Teams')} action={action} />\n        <Panel>\n          <PanelHeader>{t('Your Teams')}</PanelHeader>\n          <PanelBody>\n            <AllTeamsList\n              useCreateModal\n              urlPrefix={urlPrefix}\n              organization={org}\n              teamList={activeTeams}\n              access={access}\n              openMembership={false}\n            />\n          </PanelBody>\n        </Panel>\n        <Panel>\n          <PanelHeader>{t('Other Teams')}</PanelHeader>\n          <PanelBody>\n            <AllTeamsList\n              useCreateModal\n              urlPrefix={urlPrefix}\n              organization={org}\n              teamList={otherTeams}\n              access={access}\n              openMembership={\n                !!(features.has('open-membership') || access.has('org:write'))\n              }\n            />\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nexport default OrganizationTeams;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport {loadStats} from 'app/actionCreators/projects';\nimport {sortArray} from 'app/utils';\nimport ApiMixin from 'app/mixins/apiMixin';\nimport OrganizationState from 'app/mixins/organizationState';\nimport ProjectsStore from 'app/stores/projectsStore';\nimport TeamStore from 'app/stores/teamStore';\nimport OrganizationTeams from './organizationTeams';\n\nconst OrganizationTeamsContainer = createReactClass({\n  displayName: 'OrganizationTeamsContainer',\n\n  propTypes: {\n    routes: PropTypes.arrayOf(PropTypes.object),\n  },\n\n  mixins: [\n    ApiMixin,\n    OrganizationState,\n    Reflux.listenTo(TeamStore, 'onTeamListChange'),\n    Reflux.listenTo(ProjectsStore, 'onProjectListChange'),\n  ],\n\n  getInitialState() {\n    return {\n      teamList: sortArray(TeamStore.getAll(), function(o) {\n        return o && o.name;\n      }),\n      projectList: sortArray(ProjectsStore.getAll(), function(o) {\n        return o && o.name;\n      }),\n      projectStats: {},\n    };\n  },\n\n  componentDidMount() {\n    this.fetchStats();\n  },\n\n  fetchStats() {\n    loadStats(this.api, {\n      orgId: this.props.params.orgId,\n      query: {\n        since: new Date().getTime() / 1000 - 3600 * 24,\n        stat: 'generated',\n        group: 'project',\n      },\n    });\n  },\n\n  onTeamListChange() {\n    const newTeamList = TeamStore.getAll();\n\n    this.setState({\n      teamList: sortArray(newTeamList, function(o) {\n        return o.name;\n      }),\n    });\n  },\n\n  onProjectListChange() {\n    const newProjectList = ProjectsStore.getAll();\n\n    this.setState({\n      projectList: sortArray(newProjectList, function(o) {\n        return o.name;\n      }),\n    });\n  },\n\n  render() {\n    if (!this.context.organization) {\n      return null;\n    }\n\n    const access = this.getAccess();\n    const features = this.getFeatures();\n    const org = this.getOrganization();\n\n    const allTeams = this.state.teamList;\n    const activeTeams = this.state.teamList.filter(team => team.isMember);\n\n    return (\n      <OrganizationTeams\n        {...this.props}\n        access={access}\n        features={features}\n        organization={org}\n        projectList={this.state.projectList}\n        allTeams={allTeams}\n        activeTeams={activeTeams}\n      />\n    );\n  },\n});\n\nexport default OrganizationTeamsContainer;\n"],"sourceRoot":""}