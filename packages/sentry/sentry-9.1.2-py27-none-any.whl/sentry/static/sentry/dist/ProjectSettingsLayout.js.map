{"version":3,"sources":["webpack:///./app/views/settings/components/settingsNavItem.jsx","webpack:///./app/views/settings/components/settingsNavigationGroup.jsx","webpack:///./app/views/settings/components/settingsNavigation.jsx","webpack:///./app/views/settings/project/projectSettingsNavigation.jsx","webpack:///./app/views/settings/project/projectSettingsLayout.jsx"],"names":["SettingsNavItem","_this$props","this","props","badge","label","index","id","objectWithoutProperties_default","LabelHook","HookOrDefault","hookName","defaultComponent","_ref","children","react_default","a","createElement","Fragment","renderedBadge","StyledTag","priority","size","border","components_badge","text","StyledNavItem","extends_default","onlyActiveOnIndex","activeClassName","React","Component","propTypes","PropTypes","node","isRequired","bool","string","styled","Tag","target","Link","p","theme","gray2","gray5","purple","NavSection","SettingsHeading","gray3","NavigationGroup","_this","organization","project","name","items","data-test-id","map","path","title","show","badgeResult","to","replaceRouterParams","orgId","slug","projectId","settingsNavItem","key","SentryTypes","Organization","Project","access","object","features","contextTypes","router","location","SettingsNavigation","navigationObjects","hooks","hookConfigs","otherProps","navWithHooks","concat","index_es","config","settingsNavigationGroup_NavigationGroup","Hook","i","cloneElement","array","arrayOf","NavigationObject","defaultProps","ProjectSettingsNavigation","createReactClass","displayName","mixins","ProjectState","getInitialState","org","getOrganization","HookStore","get","forEach","cb","push","render","getAccess","getFeatures","getProject","settingsNavigation","getConfiguration","state","ProjectSettingsLayout","_this$props$params","params","projectContext","skipReload","settingsLayout","renderNavigation","projectSettingsNavigation","context","setProjectNavSection"],"mappings":"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","file":"ProjectSettingsLayout.js","sourcesContent":["import {Link} from 'react-router';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport Badge from 'app/components/badge';\nimport HookOrDefault from 'app/components/hookOrDefault';\nimport Tag from 'app/views/settings/components/tag';\n\nclass SettingsNavItem extends React.Component {\n  static propTypes = {\n    label: PropTypes.node.isRequired,\n    badge: PropTypes.node,\n    index: PropTypes.bool,\n    id: PropTypes.string,\n  };\n\n  render() {\n    const {badge, label, index, id, ...props} = this.props;\n\n    const LabelHook = HookOrDefault({\n      hookName: 'sidebar:item-label',\n      defaultComponent: ({children}) => {\n        return <React.Fragment>{children}</React.Fragment>;\n      },\n    });\n\n    let renderedBadge = '';\n\n    if (badge === 'new') {\n      renderedBadge = (\n        <StyledTag priority=\"warning\" size=\"small\" border={true}>\n          {badge}\n        </StyledTag>\n      );\n    } else {\n      renderedBadge = <Badge text={badge} />;\n    }\n\n    return (\n      <StyledNavItem onlyActiveOnIndex={index} activeClassName=\"active\" {...props}>\n        <LabelHook id={id}>{label}</LabelHook>\n\n        {badge ? renderedBadge : null}\n      </StyledNavItem>\n    );\n  }\n}\n\nconst StyledTag = styled(Tag)`\n  margin-left: 0.25em;\n`;\n\nconst StyledNavItem = styled(Link)`\n  display: block;\n  color: ${p => p.theme.gray2};\n  font-size: 14px;\n  line-height: 30px;\n  position: relative;\n\n  &.active {\n    color: ${p => p.theme.gray5};\n\n    &:before {\n      background: ${p => p.theme.purple};\n    }\n  }\n\n  &:hover,\n  &:focus,\n  &:active {\n    color: ${p => p.theme.gray5};\n  }\n\n  &:before {\n    position: absolute;\n    content: '';\n    display: block;\n    top: 4px;\n    left: -30px;\n    height: 20px;\n    width: 4px;\n    background: transparent;\n    border-radius: 0 2px 2px 0;\n  }\n`;\n\nexport default SettingsNavItem;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport SentryTypes from 'app/sentryTypes';\nimport SettingsNavItem from 'app/views/settings/components/settingsNavItem';\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\n\nconst NavSection = styled.div`\n  margin-bottom: 20px;\n`;\n\nconst SettingsHeading = styled.div`\n  color: ${p => p.theme.gray3};\n  font-size: 12px;\n  font-weight: 600;\n  text-transform: uppercase;\n  margin-bottom: 20px;\n`;\n\nexport default class NavigationGroup extends React.Component {\n  static propTypes = {\n    ...SentryTypes.NavigationGroup,\n    organization: SentryTypes.Organization,\n    project: SentryTypes.Project,\n\n    // Used in the `show` and `badge` function\n    access: PropTypes.object, // eslint-disable-line react/no-unused-prop-types\n    features: PropTypes.object, // eslint-disable-line react/no-unused-prop-types\n    id: PropTypes.string, // eslint-disable-line react/no-unused-prop-types\n  };\n\n  static contextTypes = {\n    router: PropTypes.object,\n    location: PropTypes.object,\n  };\n\n  render() {\n    const {organization, project, name, items} = this.props;\n\n    return (\n      <NavSection data-test-id={name}>\n        <SettingsHeading>{name}</SettingsHeading>\n        {items.map(({path, title, index, show, badge, id}) => {\n          if (typeof show === 'function' && !show(this.props)) {\n            return null;\n          }\n          if (typeof show !== 'undefined' && !show) {\n            return null;\n          }\n          const badgeResult = typeof badge === 'function' ? badge(this.props) : null;\n          const to = replaceRouterParams(path, {\n            orgId: organization && organization.slug,\n            projectId: project && project.slug,\n          });\n\n          return (\n            <SettingsNavItem\n              key={title}\n              to={to}\n              label={title}\n              index={index}\n              badge={badgeResult}\n              id={id}\n            />\n          );\n        })}\n      </NavSection>\n    );\n  }\n}\n","import {Box} from 'grid-emotion';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport SettingsNavigationGroup from 'app/views/settings/components/settingsNavigationGroup';\nimport SentryTypes from 'app/sentryTypes';\n\nclass SettingsNavigation extends React.Component {\n  static propTypes = {\n    hooks: PropTypes.array,\n    hookConfigs: PropTypes.array,\n    navigationObjects: PropTypes.arrayOf(SentryTypes.NavigationObject).isRequired,\n  };\n\n  static defaultProps = {\n    hooks: [],\n    hookConfigs: [],\n  };\n\n  render() {\n    const {navigationObjects, hooks, hookConfigs, ...otherProps} = this.props;\n    const navWithHooks = navigationObjects.concat(hookConfigs);\n\n    return (\n      <Box>\n        {navWithHooks.map(config => (\n          <SettingsNavigationGroup key={config.name} {...otherProps} {...config} />\n        ))}\n        {hooks.map((Hook, i) =>\n          React.cloneElement(Hook, {\n            key: `hook-${i}`,\n          })\n        )}\n      </Box>\n    );\n  }\n}\n\nexport default SettingsNavigation;\n","import React from 'react';\n\nimport createReactClass from 'create-react-class';\n\nimport HookStore from 'app/stores/hookStore';\nimport ProjectState from 'app/mixins/projectState';\nimport SettingsNavigation from 'app/views/settings/components/settingsNavigation';\nimport getConfiguration from 'app/views/settings/project/navigationConfiguration';\n\nconst ProjectSettingsNavigation = createReactClass({\n  displayName: 'ProjectSettingsNavigation',\n  mixins: [ProjectState],\n\n  getInitialState() {\n    // Allow injection via getsentry et all\n    const org = this.getOrganization();\n    const hooks = [];\n    HookStore.get('project:settings-sidebar').forEach(cb => {\n      hooks.push(cb(org));\n    });\n\n    return {\n      hooks,\n    };\n  },\n\n  render() {\n    const access = this.getAccess();\n    const features = this.getFeatures();\n    const org = this.getOrganization();\n    const project = this.getProject();\n\n    return (\n      <SettingsNavigation\n        navigationObjects={getConfiguration({project, organization: org})}\n        access={access}\n        features={features}\n        organization={org}\n        project={project}\n        hooks={this.state.hooks}\n      />\n    );\n  },\n});\n\nexport default ProjectSettingsNavigation;\n","import React from 'react';\n\nimport ProjectContext from 'app/views/projects/projectContext';\nimport ProjectSettingsNavigation from 'app/views/settings/project/projectSettingsNavigation';\nimport SettingsLayout from 'app/views/settings/components/settingsLayout';\nimport SentryTypes from 'app/sentryTypes';\n\nclass ProjectSettingsLayout extends React.Component {\n  static contextTypes = {\n    organization: SentryTypes.Organization,\n  };\n\n  render() {\n    const {orgId, projectId} = this.props.params;\n\n    return (\n      <ProjectContext\n        {...this.props.params}\n        skipReload\n        orgId={orgId}\n        projectId={projectId}\n      >\n        <SettingsLayout\n          {...this.props}\n          renderNavigation={() => <ProjectSettingsNavigation {...this.props} />}\n        >\n          {this.props.children &&\n            React.cloneElement(this.props.children, {\n              organization: this.context.organization,\n              setProjectNavSection: () => {},\n            })}\n        </SettingsLayout>\n      </ProjectContext>\n    );\n  }\n}\n\nexport default ProjectSettingsLayout;\n"],"sourceRoot":""}