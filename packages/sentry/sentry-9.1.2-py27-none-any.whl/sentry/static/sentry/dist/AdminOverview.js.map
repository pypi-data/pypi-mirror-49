{"version":3,"sources":["webpack:///./app/views/admin/adminOverview/apiChart.jsx","webpack:///./app/views/admin/adminOverview/eventChart.jsx","webpack:///./app/views/admin/adminOverview/index.jsx"],"names":["createReactClass","displayName","propTypes","since","PropTypes","number","isRequired","resolution","string","mixins","ApiMixin","getInitialState","error","loading","rawData","client-api.all-versions.responses.2xx","client-api.all-versions.responses.4xx","client-api.all-versions.responses.5xx","componentWillMount","this","fetchData","componentWillReceiveProps","nextProps","props","setState","_this","forEach","statName","api","request","method","data","key","success","prevState","requestFinished","state","processOrgData","processRawSeries","series","map","item","x","y","getChartSeries","color","shadowSize","label","render","react_default","a","createElement","loadingIndicator","loadingError","onRetry","stackedBarChart","height","className","events.total","events.dropped","stats","received","rejected","systemTotal","accepted","oReceived","oRejected","sReceived","sRejected","aReceived","point","idx","dReceived","dRejected","ts","undefined","avgRate","parseInt","Object","keys","AdminOverview","Date","getTime","t","id","eventChart","apiChart","AsyncView"],"mappings":"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","file":"AdminOverview.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport createReactClass from 'create-react-class';\n\nimport ApiMixin from 'app/mixins/apiMixin';\nimport StackedBarChart from 'app/components/stackedBarChart';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\n\nexport default createReactClass({\n  displayName: 'apiChart',\n\n  propTypes: {\n    since: PropTypes.number.isRequired,\n    resolution: PropTypes.string.isRequired,\n  },\n\n  mixins: [ApiMixin],\n\n  getInitialState() {\n    return {\n      error: false,\n      loading: true,\n      rawData: {\n        'client-api.all-versions.responses.2xx': null,\n        'client-api.all-versions.responses.4xx': null,\n        'client-api.all-versions.responses.5xx': null,\n      },\n    };\n  },\n\n  componentWillMount() {\n    this.fetchData();\n  },\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.since !== nextProps.since) {\n      this.setState(this.getInitialState(), this.fetchData);\n    }\n  },\n\n  fetchData() {\n    const statNameList = [\n      'client-api.all-versions.responses.2xx',\n      'client-api.all-versions.responses.4xx',\n      'client-api.all-versions.responses.5xx',\n    ];\n\n    statNameList.forEach(statName => {\n      this.api.request('/internal/stats/', {\n        method: 'GET',\n        data: {\n          since: this.props.since,\n          resolution: this.props.resolution,\n          key: statName,\n        },\n        success: data => {\n          this.setState(prevState => {\n            const rawData = prevState.rawData;\n            rawData[statName] = data;\n            return {\n              rawData,\n            };\n          }, this.requestFinished);\n        },\n        error: data => {\n          this.setState({\n            error: true,\n          });\n        },\n      });\n    });\n  },\n\n  requestFinished() {\n    const {rawData} = this.state;\n    if (rawData['events.total'] && rawData['events.dropped']) {\n      this.processOrgData();\n    }\n    if (\n      rawData['client-api.all-versions.responses.2xx'] &&\n      rawData['client-api.all-versions.responses.4xx'] &&\n      rawData['client-api.all-versions.responses.5xx']\n    ) {\n      this.setState({\n        loading: false,\n      });\n    }\n  },\n\n  processRawSeries(series) {\n    return series.map(item => {\n      return {x: item[0], y: item[1]};\n    });\n  },\n\n  getChartSeries() {\n    const {rawData} = this.state;\n    return [\n      {\n        data: this.processRawSeries(rawData['client-api.all-versions.responses.4xx']),\n        color: 'rgb(86, 175, 232)',\n        shadowSize: 0,\n        label: '4xx',\n      },\n      {\n        data: this.processRawSeries(rawData['client-api.all-versions.responses.5xx']),\n        color: 'rgb(244, 63, 32)',\n        label: '5xx',\n      },\n      {\n        data: this.processRawSeries(rawData['client-api.all-versions.responses.2xx']),\n        color: 'rgb(78, 222, 73)',\n        label: '2xx',\n      },\n    ];\n  },\n\n  render() {\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    } else if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n    return (\n      <StackedBarChart\n        series={this.getChartSeries()}\n        height={150}\n        className=\"standard-barchart\"\n      />\n    );\n  },\n});\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport createReactClass from 'create-react-class';\n\nimport ApiMixin from 'app/mixins/apiMixin';\nimport StackedBarChart from 'app/components/stackedBarChart';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\n\nexport default createReactClass({\n  displayName: 'eventChart',\n\n  propTypes: {\n    since: PropTypes.number.isRequired,\n    resolution: PropTypes.string.isRequired,\n  },\n\n  mixins: [ApiMixin],\n\n  getInitialState() {\n    return {\n      error: false,\n      loading: true,\n      rawData: {\n        'events.total': null,\n        'events.dropped': null,\n      },\n      stats: {received: [], rejected: []},\n      systemTotal: {received: 0, rejected: 0, accepted: 0},\n    };\n  },\n\n  componentWillMount() {\n    this.fetchData();\n  },\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.since !== nextProps.since) {\n      this.setState(this.getInitialState(), this.fetchData);\n    }\n  },\n\n  fetchData() {\n    const statNameList = ['events.total', 'events.dropped'];\n\n    statNameList.forEach(statName => {\n      // query the organization stats via a separate call as its possible the project stats\n      // are too heavy\n      this.api.request('/internal/stats/', {\n        method: 'GET',\n        data: {\n          since: this.props.since,\n          resolution: this.props.resolution,\n          key: statName,\n        },\n        success: data => {\n          this.setState(prevState => {\n            const rawData = prevState.rawData;\n            rawData[statName] = data;\n            return {\n              rawData,\n            };\n          }, this.requestFinished);\n        },\n        error: data => {\n          this.setState({\n            error: true,\n          });\n        },\n      });\n    });\n  },\n\n  requestFinished() {\n    const {rawData} = this.state;\n    if (rawData['events.total'] && rawData['events.dropped']) {\n      this.processOrgData();\n    }\n  },\n\n  processOrgData() {\n    const {rawData} = this.state;\n    let oReceived = 0;\n    let oRejected = 0;\n    const sReceived = {};\n    const sRejected = {};\n    const aReceived = [0, 0]; // received, points\n    rawData['events.total'].forEach((point, idx) => {\n      const dReceived = point[1];\n      const dRejected = rawData['events.dropped'][idx][1];\n      const ts = point[0];\n      if (sReceived[ts] === undefined) {\n        sReceived[ts] = dReceived;\n        sRejected[ts] = dRejected;\n      } else {\n        sReceived[ts] += dReceived;\n        sRejected[ts] += dRejected;\n      }\n      oReceived += dReceived;\n      oRejected += dRejected;\n      if (dReceived > 0) {\n        aReceived[0] += dReceived;\n        aReceived[1] += 1;\n      }\n    });\n    this.setState({\n      systemTotal: {\n        received: oReceived,\n        rejected: oRejected,\n        accepted: oReceived - oRejected,\n        avgRate: parseInt(aReceived[0] / aReceived[1] / 60, 10),\n      },\n      stats: {\n        rejected: Object.keys(sRejected).map(ts => {\n          return {x: ts, y: sRejected[ts] || null};\n        }),\n        accepted: Object.keys(sReceived).map(ts => {\n          // total number of events accepted (received - rejected)\n          return {x: ts, y: sReceived[ts] - sRejected[ts]};\n        }),\n      },\n      loading: false,\n    });\n  },\n\n  getChartSeries() {\n    const {stats} = this.state;\n\n    return [\n      {\n        data: stats.accepted,\n        label: 'Accepted',\n        color: 'rgba(86, 175, 232, 1)',\n      },\n      {\n        data: stats.rejected,\n        color: 'rgba(244, 63, 32, 1)',\n        label: 'Dropped',\n      },\n    ];\n  },\n\n  render() {\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    } else if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n    return (\n      <StackedBarChart\n        series={this.getChartSeries()}\n        height={150}\n        className=\"standard-barchart\"\n      />\n    );\n  },\n});\n","/*eslint getsentry/jsx-needs-il8n:0*/\nimport React from 'react';\n\nimport {t} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\n\nimport ApiChart from './apiChart';\nimport EventChart from './eventChart';\n\nexport default class AdminOverview extends AsyncView {\n  getTitle() {\n    return 'Admin Overview';\n  }\n\n  getEndpoints() {\n    return [];\n  }\n\n  renderBody() {\n    const resolution = '1h';\n    const since = new Date().getTime() / 1000 - 3600 * 24 * 7;\n    return (\n      <div>\n        <h3>{t('System Overview')}</h3>\n\n        <div className=\"box\">\n          <div className=\"box-header\">\n            <h4>\n              {t('Event Throughput')}\n              <span id=\"rate\" className=\"pull-right\" />\n            </h4>\n          </div>\n          <EventChart since={since} resolution={resolution} />\n        </div>\n\n        <div className=\"box\">\n          <div className=\"box-header\">\n            <h4>{t('API Responses')}</h4>\n          </div>\n          <ApiChart since={since} resolution={resolution} />\n        </div>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}