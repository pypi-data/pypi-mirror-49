# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ChartSetParams(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, charts=None, default_charts_enabled=None, is_editable=None):
        """
        ChartSetParams - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'charts': 'list[ChartDefinition]',
            'default_charts_enabled': 'bool',
            'is_editable': 'bool'
        }

        self.attribute_map = {
            'name': 'name',
            'charts': 'charts',
            'default_charts_enabled': 'defaultChartsEnabled',
            'is_editable': 'isEditable'
        }

        self._name = name
        self._charts = charts
        self._default_charts_enabled = default_charts_enabled
        self._is_editable = is_editable

    @property
    def name(self):
        """
        Gets the name of this ChartSetParams.


        :return: The name of this ChartSetParams.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ChartSetParams.


        :param name: The name of this ChartSetParams.
        :type: str
        """
        
        self._name = name

    @property
    def charts(self):
        """
        Gets the charts of this ChartSetParams.


        :return: The charts of this ChartSetParams.
        :rtype: list[ChartDefinition]
        """
        return self._charts

    @charts.setter
    def charts(self, charts):
        """
        Sets the charts of this ChartSetParams.


        :param charts: The charts of this ChartSetParams.
        :type: list[ChartDefinition]
        """
        
        self._charts = charts

    @property
    def default_charts_enabled(self):
        """
        Gets the default_charts_enabled of this ChartSetParams.


        :return: The default_charts_enabled of this ChartSetParams.
        :rtype: bool
        """
        return self._default_charts_enabled

    @default_charts_enabled.setter
    def default_charts_enabled(self, default_charts_enabled):
        """
        Sets the default_charts_enabled of this ChartSetParams.


        :param default_charts_enabled: The default_charts_enabled of this ChartSetParams.
        :type: bool
        """
        
        self._default_charts_enabled = default_charts_enabled

    @property
    def is_editable(self):
        """
        Gets the is_editable of this ChartSetParams.


        :return: The is_editable of this ChartSetParams.
        :rtype: bool
        """
        return self._is_editable

    @is_editable.setter
    def is_editable(self, is_editable):
        """
        Sets the is_editable of this ChartSetParams.


        :param is_editable: The is_editable of this ChartSetParams.
        :type: bool
        """
        
        self._is_editable = is_editable

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




