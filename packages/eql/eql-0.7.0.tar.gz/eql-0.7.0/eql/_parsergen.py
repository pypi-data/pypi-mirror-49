#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {
    'and',
    'by',
    'const',
    'in',
    'join',
    'macro',
    'not',
    'of',
    'or',
    'sequence',
    'until',
    'where',
    'with',
}  # type: ignore


class EQLBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re='\\/\\*(?:.|\\n)*?\\*\\/',
        eol_comments_re='\\/\\/(?:.|\\n)*?$',
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(EQLBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class EQLParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re='\\/\\*(?:.|\\n)*?\\*\\/',
        eol_comments_re='\\/\\/(?:.|\\n)*?$',
        ignorecase=None,
        left_recursion=False,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=EQLBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(EQLParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @tatsumasu()
    def _start_(self):  # noqa
        self._single_query_()

    @tatsumasu()
    def _cli_query_(self):  # noqa
        self._piped_query_()
        self.name_last_node('@')
        with self._optional():
            self._token(';')
        self._check_eof()

    @tatsumasu('PipedQuery')
    def _piped_query_(self):  # noqa
        with self._choice():
            with self._option():
                self._base_query_()
                self.name_last_node('query')
                with self._optional():
                    self._pipe_chain_()
                self.name_last_node('pipes')
            with self._option():
                self._void()
                self.name_last_node('query')
                self._pipe_chain_()
                self.name_last_node('pipes')
            self._error('no available options')
        self.ast._define(
            ['pipes', 'query'],
            []
        )

    @tatsumasu()
    def _pipe_chain_(self):  # noqa

        def block0():
            self._token('|')
            self._cut()
            self._pipe_command_()
            self.add_last_node_to_name('@')
        self._positive_closure(block0)

    @tatsumasu('Pipe')
    def _pipe_command_(self):  # noqa
        self._ident_()
        self.name_last_node('name')
        self._pipe_arguments_()
        self.name_last_node('args')
        self.ast._define(
            ['args', 'name'],
            []
        )

    @tatsumasu()
    def _pipe_arguments_(self):  # noqa
        with self._choice():
            with self._option():
                with self._if():
                    with self._group():
                        self._atom_()
                        self._atom_()

                def block0():
                    self._atom_()
                self._closure(block0)
            with self._option():
                self._expressions_()
            with self._option():
                self._empty_closure()
            self._error('no available options')

    @tatsumasu()
    def _base_query_(self):  # noqa
        with self._choice():
            with self._option():
                self._sequence_()
            with self._option():
                self._join_()
            with self._option():
                self._event_query_()
            self._error('no available options')

    @tatsumasu('Join')
    def _join_(self):  # noqa
        self._token('join')
        self._cut()
        self._by_values_()
        self.name_last_node('shared_by')
        self._subquery_by_()
        self.add_last_node_to_name('queries')

        def block2():
            self._subquery_by_()
            self.name_last_node('queries')
        self._positive_closure(block2)
        with self._optional():
            self._until_clause_()
            self.name_last_node('until')
        self.ast._define(
            ['shared_by', 'until'],
            ['queries']
        )

    @tatsumasu('Sequence')
    def _sequence_(self):  # noqa
        self._token('sequence')
        self._cut()
        with self._group():
            with self._choice():
                with self._option():
                    self._by_values_()
                    self.name_last_node('shared_by')
                    with self._optional():
                        self._token('with')
                        self._named_params_()
                        self.name_last_node('params')
                with self._option():
                    with self._optional():
                        self._token('with')
                        self._named_params_()
                        self.name_last_node('params')
                    self._by_values_()
                    self.name_last_node('shared_by')
                self._error('no available options')
        self._subquery_by_()
        self.name_last_node('queries')

        def block6():
            self._subquery_by_()
            self.name_last_node('queries')
        self._positive_closure(block6)
        with self._optional():
            self._until_clause_()
            self.name_last_node('until')
        self.ast._define(
            ['params', 'queries', 'shared_by', 'until'],
            []
        )

    @tatsumasu()
    def _until_clause_(self):  # noqa
        self._token('until')
        self._cut()
        self._subquery_by_()
        self.name_last_node('@')

    @tatsumasu('SubqueryBy')
    def _subquery_by_(self):  # noqa
        self._subquery_()
        self.name_last_node('query')
        with self._optional():
            self._named_params_()
        self.name_last_node('params')
        with self._optional():
            self._by_values_()
        self.name_last_node('join_values')
        self.ast._define(
            ['join_values', 'params', 'query'],
            []
        )

    @tatsumasu()
    def _subquery_(self):  # noqa
        self._token('[')
        self._cut()
        self._event_query_()
        self.name_last_node('@')
        self._token(']')

    @tatsumasu()
    def _by_values_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('by')
                self._cut()
                self._expressions_()
                self.name_last_node('@')
            with self._option():
                self._empty_closure()
            self._error('no available options')

    @tatsumasu('EventQuery')
    def _event_query_(self):  # noqa
        with self._optional():
            self._ident_()
            self.name_last_node('event_type')
            self._token('where')
            self._cut()
        self._root_expression_()
        self.name_last_node('cond')
        self.ast._define(
            ['cond', 'event_type'],
            []
        )

    @tatsumasu('Macro')
    def _macro_(self):  # noqa
        self._token('macro')
        self._cut()
        self._ident_()
        self.name_last_node('name')
        self._token('(')
        self._params_()
        self.name_last_node('params')
        self._token(')')
        self._root_expression_()
        self.name_last_node('body')
        self.ast._define(
            ['body', 'name', 'params'],
            []
        )

    @tatsumasu('Constant')
    def _const_(self):  # noqa
        self._token('const')
        self._cut()
        self._ident_()
        self.name_last_node('name')
        self._equals_()
        self._literal_()
        self.name_last_node('value')
        self.ast._define(
            ['name', 'value'],
            []
        )

    @tatsumasu()
    def _definition_(self):  # noqa
        with self._choice():
            with self._option():
                self._macro_()
            with self._option():
                self._const_()
            self._error('no available options')

    @tatsumasu()
    def _definitions_(self):  # noqa

        def block0():
            self._definition_()
        self._closure(block0)
        self._check_eof()

    @tatsumasu()
    def _single_definition_(self):  # noqa
        self._definition_()
        self._check_eof()

    @tatsumasu()
    def _single_query_(self):  # noqa
        self._piped_query_()
        self._check_eof()

    @tatsumasu()
    def _single_expression_(self):  # noqa
        self._root_expression_()
        self._check_eof()

    @tatsumasu()
    def _single_atom_(self):  # noqa
        self._atom_()
        self._check_eof()

    @tatsumasu('RootExpression')
    def _root_expression_(self):  # noqa
        self._expression_()
        self.name_last_node('expr')
        self.ast._define(
            ['expr'],
            []
        )

    @tatsumasu()
    def _expression_(self):  # noqa
        with self._choice():
            with self._option():
                self._or_expr_()
            with self._option():
                self._subexpression_()
            self._error('no available options')

    @tatsumasu('CheckParentheses')
    def _check_paren_(self):  # noqa
        self._token('(')
        self._cut()
        self._expression_()
        self.name_last_node('expr')
        self._token(')')
        self.ast._define(
            ['expr'],
            []
        )

    @tatsumasu('OrTerms')
    def _or_expr_(self):  # noqa
        self._subexpression_()
        self.add_last_node_to_name('terms')

        def block1():
            self._token('or')
            self._cut()
            self._subexpression_()
            self.add_last_node_to_name('terms')
        self._positive_closure(block1)
        self.ast._define(
            [],
            ['terms']
        )

    @tatsumasu()
    def _subexpression_(self):  # noqa
        with self._choice():
            with self._option():
                self._and_expr_()
            with self._option():
                self._term_()
            self._error('no available options')

    @tatsumasu('AndTerms')
    def _and_expr_(self):  # noqa
        self._term_()
        self.add_last_node_to_name('terms')

        def block1():
            self._token('and')
            self._cut()
            self._term_()
            self.add_last_node_to_name('terms')
        self._positive_closure(block1)
        self.ast._define(
            [],
            ['terms']
        )

    @tatsumasu()
    def _term_(self):  # noqa
        with self._choice():
            with self._option():
                self._not_term_()
            with self._option():
                self._sub_term_()
            self._error('no available options')

    @tatsumasu('NotTerm')
    def _not_term_(self):  # noqa
        self._token('not')
        self._cut()
        self._term_()
        self.name_last_node('t')
        self.ast._define(
            ['t'],
            []
        )

    @tatsumasu()
    def _sub_term_(self):  # noqa
        with self._choice():
            with self._option():
                self._comparison_()
            with self._option():
                self._in_set_()
            with self._option():
                self._value_()
            self._error('no available options')

    @tatsumasu('Comparison')
    def _comparison_(self):  # noqa
        self._value_()
        self.name_last_node('left')
        self._comparator_()
        self.name_last_node('op')
        self._cut()
        self._value_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'op', 'right'],
            []
        )

    @tatsumasu('InSet')
    def _in_set_(self):  # noqa
        self._value_()
        self.name_last_node('expr')
        self._token('in')
        self._cut()
        self._token('(')
        self._expressions_()
        self.name_last_node('container')
        self._token(')')
        self.ast._define(
            ['container', 'expr'],
            []
        )

    @tatsumasu('Equals')
    def _equals_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('==')
            with self._option():
                self._token('=')
            self._error('no available options')

    @tatsumasu('Comparator')
    def _comparator_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('<=')
                with self._option():
                    self._token('<')
                with self._option():
                    self._equals_()
                with self._option():
                    self._token('!=')
                with self._option():
                    self._token('>=')
                with self._option():
                    self._token('>')
                self._error('no available options')
        self.name_last_node('comp')
        self.ast._define(
            ['comp'],
            []
        )

    @tatsumasu()
    def _value_(self):  # noqa
        with self._choice():
            with self._option():
                self._function_call_()
            with self._option():
                self._named_subquery_()
            with self._option():
                self._check_paren_()
            with self._option():
                self._atom_()
            self._error('no available options')

    @tatsumasu('FunctionCall')
    def _function_call_(self):  # noqa
        self._ident_()
        self.name_last_node('name')
        self._token('(')
        self._cut()
        with self._optional():
            self._expressions_()
        self.name_last_node('args')
        self._token(')')
        self.ast._define(
            ['args', 'name'],
            []
        )

    @tatsumasu()
    def _atom_(self):  # noqa
        with self._choice():
            with self._option():
                self._literal_()
            with self._option():
                self._field_()
            self._error('no available options')

    @tatsumasu()
    def _expressions_(self):  # noqa
        self._argument_()
        self.add_last_node_to_name('@')

        def block1():
            self._token(',')
            self._argument_()
            self.add_last_node_to_name('@')
        self._closure(block1)
        with self._optional():
            self._token(',')

    @tatsumasu()
    def _argument_(self):  # noqa
        self._expression_()

    @tatsumasu('SubqueryType')
    def _subquery_type_(self):  # noqa
        self._ident_()
        self.name_last_node('name')
        self._token('of')
        self._cut()
        self.ast._define(
            ['name'],
            []
        )

    @tatsumasu('NamedQuery')
    def _named_subquery_(self):  # noqa
        self._subquery_type_()
        self.name_last_node('stype')
        self._subquery_()
        self.name_last_node('query')
        self.ast._define(
            ['query', 'stype'],
            []
        )

    @tatsumasu('Field')
    def _field_(self):  # noqa
        self._ident_()
        self.name_last_node('base')

        def block2():
            with self._choice():
                with self._option():
                    self._attribute_()
                with self._option():
                    self._array_index_()
                self._error('no available options')
        self._closure(block2)
        self.name_last_node('sub_fields')
        self.ast._define(
            ['base', 'sub_fields'],
            []
        )

    @tatsumasu('Attribute')
    def _attribute_(self):  # noqa
        self._token('.')
        self._ident_()
        self.name_last_node('attr')
        self.ast._define(
            ['attr'],
            []
        )

    @tatsumasu('ArrayIndex')
    def _array_index_(self):  # noqa
        self._token('[')
        self._unsigned_integer_()
        self.name_last_node('value')
        self._token(']')
        self.ast._define(
            ['value'],
            []
        )

    @tatsumasu('NamedParams')
    def _named_params_(self):  # noqa

        def block1():
            self._named_param_()
        self._closure(block1)
        self.name_last_node('params')
        self.ast._define(
            ['params'],
            []
        )

    @tatsumasu('NamedParam')
    def _named_param_(self):  # noqa
        self._ident_()
        self.name_last_node('k')
        with self._optional():
            self._equals_()
            with self._group():
                with self._choice():
                    with self._option():
                        self._time_unit_()
                    with self._option():
                        self._atom_()
                    self._error('no available options')
            self.name_last_node('v')
        self.ast._define(
            ['k', 'v'],
            []
        )

    @tatsumasu()
    def _params_(self):  # noqa
        with self._choice():
            with self._option():
                self._ident_()
                self.add_last_node_to_name('@')

                def block1():
                    self._token(',')
                    self._ident_()
                    self.add_last_node_to_name('@')
                self._closure(block1)
            with self._option():
                self._empty_closure()
            self._error('no available options')

    @tatsumasu()
    def _ident_(self):  # noqa
        self._pattern(r'[a-zA-Z][a-zA-Z0-9_]*')
        self._check_name()

    @tatsumasu('Literal')
    def _literal_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._decimal_()
                with self._option():
                    self._integer_()
                with self._option():
                    self._string_()
                with self._option():
                    self._raw_string_()
                self._error('no available options')
        self.name_last_node('value')
        self.ast._define(
            ['value'],
            []
        )

    @tatsumasu('TimeRange')
    def _time_unit_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._decimal_()
                with self._option():
                    self._integer_()
                self._error('no available options')
        self.name_last_node('val')
        self._ident_()
        self.name_last_node('unit')
        self.ast._define(
            ['unit', 'val'],
            []
        )

    @tatsumasu('int')
    def _unsigned_integer_(self):  # noqa
        self._pattern(r'[0-9]+')

    @tatsumasu('int')
    def _integer_(self):  # noqa
        self._pattern(r'[-+]?[0-9]+')

    @tatsumasu('float')
    def _decimal_(self):  # noqa
        self._pattern(r'[-+]?(?:\d+\.\d*|\d*\.\d+)(?:[Ee][-+]?\d+)?')

    @tatsumasu()
    def _string_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('"')
                self._cut()
                self._pattern(r'(\\[btnfr"\'\\]|[^\r\n"\\])*')
                self.name_last_node('@')
                self._token('"')
            with self._option():
                self._token("'")
                self._cut()
                self._pattern(r'(\\[btnfr"\'\\]|[^\r\n\'\\])*')
                self.name_last_node('@')
                self._token("'")
            self._error('no available options')

    @tatsumasu()
    def _raw_string_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('?"')
                self._cut()
                self._pattern(r'(\\"|[^"])*')
                self.name_last_node('@')
                self._token('"')
            with self._option():
                self._token("?'")
                self._cut()
                self._pattern(r"(\\'|[^'])*")
                self.name_last_node('@')
                self._token("'")
            self._error('no available options')


class EQLSemantics(object):
    def start(self, ast):  # noqa
        return ast

    def cli_query(self, ast):  # noqa
        return ast

    def piped_query(self, ast):  # noqa
        return ast

    def pipe_chain(self, ast):  # noqa
        return ast

    def pipe_command(self, ast):  # noqa
        return ast

    def pipe_arguments(self, ast):  # noqa
        return ast

    def base_query(self, ast):  # noqa
        return ast

    def join(self, ast):  # noqa
        return ast

    def sequence(self, ast):  # noqa
        return ast

    def until_clause(self, ast):  # noqa
        return ast

    def subquery_by(self, ast):  # noqa
        return ast

    def subquery(self, ast):  # noqa
        return ast

    def by_values(self, ast):  # noqa
        return ast

    def event_query(self, ast):  # noqa
        return ast

    def macro(self, ast):  # noqa
        return ast

    def const(self, ast):  # noqa
        return ast

    def definition(self, ast):  # noqa
        return ast

    def definitions(self, ast):  # noqa
        return ast

    def single_definition(self, ast):  # noqa
        return ast

    def single_query(self, ast):  # noqa
        return ast

    def single_expression(self, ast):  # noqa
        return ast

    def single_atom(self, ast):  # noqa
        return ast

    def root_expression(self, ast):  # noqa
        return ast

    def expression(self, ast):  # noqa
        return ast

    def check_paren(self, ast):  # noqa
        return ast

    def or_expr(self, ast):  # noqa
        return ast

    def subexpression(self, ast):  # noqa
        return ast

    def and_expr(self, ast):  # noqa
        return ast

    def term(self, ast):  # noqa
        return ast

    def not_term(self, ast):  # noqa
        return ast

    def sub_term(self, ast):  # noqa
        return ast

    def comparison(self, ast):  # noqa
        return ast

    def in_set(self, ast):  # noqa
        return ast

    def equals(self, ast):  # noqa
        return ast

    def comparator(self, ast):  # noqa
        return ast

    def value(self, ast):  # noqa
        return ast

    def function_call(self, ast):  # noqa
        return ast

    def atom(self, ast):  # noqa
        return ast

    def expressions(self, ast):  # noqa
        return ast

    def argument(self, ast):  # noqa
        return ast

    def subquery_type(self, ast):  # noqa
        return ast

    def named_subquery(self, ast):  # noqa
        return ast

    def field(self, ast):  # noqa
        return ast

    def attribute(self, ast):  # noqa
        return ast

    def array_index(self, ast):  # noqa
        return ast

    def named_params(self, ast):  # noqa
        return ast

    def named_param(self, ast):  # noqa
        return ast

    def params(self, ast):  # noqa
        return ast

    def ident(self, ast):  # noqa
        return ast

    def literal(self, ast):  # noqa
        return ast

    def time_unit(self, ast):  # noqa
        return ast

    def unsigned_integer(self, ast):  # noqa
        return ast

    def integer(self, ast):  # noqa
        return ast

    def decimal(self, ast):  # noqa
        return ast

    def string(self, ast):  # noqa
        return ast

    def raw_string(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'start'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = EQLParser()
    return parser.parse(text, rule_name=start, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, EQLParser, name='EQL')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
