# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ProjectCreationParams(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, description=None, project_key=None, organization_id=None, visibility=None, display_class=None):
        """
        ProjectCreationParams - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'description': 'str',
            'project_key': 'str',
            'organization_id': 'str',
            'visibility': 'VisibilityEnum',
            'display_class': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'project_key': 'projectKey',
            'organization_id': 'organizationId',
            'visibility': 'visibility',
            'display_class': 'displayClass'
        }

        self._name = name
        self._description = description
        self._project_key = project_key
        self._organization_id = organization_id
        self._visibility = visibility
        self._display_class = display_class

    @property
    def name(self):
        """
        Gets the name of this ProjectCreationParams.


        :return: The name of this ProjectCreationParams.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ProjectCreationParams.


        :param name: The name of this ProjectCreationParams.
        :type: str
        """
        
        self._name = name

    @property
    def description(self):
        """
        Gets the description of this ProjectCreationParams.


        :return: The description of this ProjectCreationParams.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ProjectCreationParams.


        :param description: The description of this ProjectCreationParams.
        :type: str
        """
        
        self._description = description

    @property
    def project_key(self):
        """
        Gets the project_key of this ProjectCreationParams.


        :return: The project_key of this ProjectCreationParams.
        :rtype: str
        """
        return self._project_key

    @project_key.setter
    def project_key(self, project_key):
        """
        Sets the project_key of this ProjectCreationParams.


        :param project_key: The project_key of this ProjectCreationParams.
        :type: str
        """
        
        self._project_key = project_key

    @property
    def organization_id(self):
        """
        Gets the organization_id of this ProjectCreationParams.


        :return: The organization_id of this ProjectCreationParams.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this ProjectCreationParams.


        :param organization_id: The organization_id of this ProjectCreationParams.
        :type: str
        """
        
        self._organization_id = organization_id

    @property
    def visibility(self):
        """
        Gets the visibility of this ProjectCreationParams.


        :return: The visibility of this ProjectCreationParams.
        :rtype: VisibilityEnum
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """
        Sets the visibility of this ProjectCreationParams.


        :param visibility: The visibility of this ProjectCreationParams.
        :type: VisibilityEnum
        """
        
        self._visibility = visibility

    @property
    def display_class(self):
        """
        Gets the display_class of this ProjectCreationParams.


        :return: The display_class of this ProjectCreationParams.
        :rtype: str
        """
        return self._display_class

    @display_class.setter
    def display_class(self, display_class):
        """
        Sets the display_class of this ProjectCreationParams.


        :param display_class: The display_class of this ProjectCreationParams.
        :type: str
        """
        
        self._display_class = display_class

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




