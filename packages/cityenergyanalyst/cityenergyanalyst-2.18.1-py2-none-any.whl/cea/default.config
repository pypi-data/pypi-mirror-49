[general]
project = C:/reference-case-open
project.type = PathParameter
project.help = Select the path of the project you're working on

scenario-name = baseline
scenario-name.type = ScenarioNameParameter
scenario-name.help = Select the name of the scenario of the project you're working on

scenario = {general:project}/{general:scenario-name}
scenario.type = ScenarioParameter
scenario.help = Select the scenario you're working on

weather = Zug
weather.type = WeatherPathParameter
weather.help = Either a full path to a weather file or the name of one of the weather files shipped with the CEA

multiprocessing = true
multiprocessing.type = BooleanParameter
multiprocessing.help = Multiprocessing for quicker calculation, if available.

number-of-cpus-to-keep-free = 1
number-of-cpus-to-keep-free.type = IntegerParameter
number-of-cpus-to-keep-free.help = Limits the maximum number of processors to use for multiprocessing. Default keeps one CPU free.
number-of-cpus-to-keep-free.category = Advanced

debug = false
debug.type = BooleanParameter
debug.help = Enable debugging-specific behaviors.
degub.category = Advanced

district-heating-network = false
district-heating-network.type = BooleanParameter
district-heating-network.help = if centralized heating is used in the neighborhood.

district-cooling-network = false
district-cooling-network.type = BooleanParameter
district-cooling-network.help = if centralized cooling is used in the neighborhood.

detailed-electricity-pricing = false
detailed-electricity-pricing.type = BooleanParameter
detailed-electricity-pricing.help = using hourly electricity costs to perform cost calculations

[data-helper]
region = CH
region.type = ChoiceParameter
region.choices = CH, SG
region.help = Region to use for the databases (either CH or SG)

databases = comfort, architecture, HVAC, internal-loads, supply, restrictions, technology
databases.type = MultiChoiceParameter
databases.choices = comfort, architecture, HVAC, internal-loads, supply, restrictions, technology
databases.help = List of input databases to create.


[streets-helper]
bbox =
bbox.type = ListParameter
bbox.help = If empty, it uses the district shapefile as bounding box. Otherwise indicate Bounding box coordinates. bbox = min Longitude , min Latitude , max Longitude , max Latitude.

streets = all_private
streets.type = ChoiceParameter
streets.choices = all_private, walk, bike, drive, drive_service, all
streets.help = The type of streets to gather.

[terrain-helper]
grid-size = 30
grid-size.type = IntegerParameter
grid-size.nullable = false
grid-size.help = Grid size for the terrain file. Do not use less than 10 m.

elevation = 1
elevation.type = IntegerParameter
elevation.nullable = false
elevation.help = Fixed elevation of the terrain.

[district-helper]
buffer = 50
buffer.type = RealParameter
buffer.help = Buffer length in m to the surrounding area

height-ag =
height-ag.type = RealParameter
height-ag.nullable = true
height-ag.help = It is the average height of buildings. Leave it blank to get this from Open Street Maps (not accurate)

floors-ag =
floors-ag.type = IntegerParameter
floors-ag.nullable = true
floors-ag.help = It is the average number of floors above ground of all buildings. Leave it blank to get this from Open Street Maps (not accurate)

[zone-helper]
height-ag =
height-ag.type = RealParameter
height-ag.nullable = true
height-ag.help = It is the average height of buildings. Leave it blank to get this from Open Street Maps (not accurate)

floors-ag =
floors-ag.type = IntegerParameter
floors-ag.nullable = true
floors-ag.help = It is the average number of floors above ground of all buildings. Leave it blank to get this from Open Street Maps (not accurate)

year-construction =
year-construction.nullable = true
year-construction.type = IntegerParameter
year-construction.help = It is the average year of construction of buildings. Leave it blank to get this from Open Street Maps (not accurate)

height-bg = 3
height-bg.type = RealParameter
height-bg.help = It is the average height of buildings below ground in m.

floors-bg = 1
floors-bg.type = IntegerParameter
floors-bg.help = It is the average number of floors below ground of all buildings.

occupancy-type = Get it from open street maps
occupancy-type.choices = Get it from open street maps, MULTI_RES, OFFICE, RETAIL, SCHOOL, HOTEL, GYM, HOSPITAL, INDUSTRIAL, RESTAURANT, SINGLE_RES, SERVERROOM, SWIMMING, FOODSTORE, LIBRARY, COOLROOM, PARKING
occupancy-type.type = ChoiceParameter
occupancy-type.help = Predominant occupancy type of all buildings. Select "Get it from open street maps" to get it from Open Street Maps (not accurate)

[radiation-daysim]
buildings =
buildings.type = BuildingsParameter
buildings.help = List of buildings to run the simulation for. Leave it blank to simulate all buildings

n-buildings-in-chunk = 100
n-buildings-in-chunk.type = IntegerParameter
n-buildings-in-chunk.help =  Min number of groups of buildings sent for multiprocessing

roof-grid = 10
roof-grid.type = IntegerParameter
roof-grid.help =  use 200 (maximum) if you want only one point per surface
roof-grid.category = Resolution

walls-grid = 200
walls-grid.type = IntegerParameter
walls-grid.help = use 200 (maximum) if you want only one point per surface
walls-grid.category = Resolution

zone-geometry = 2
zone-geometry.type = IntegerParameter
zone-geometry.help = Level of simplification of the zone geometry (1 is the lowest)
zone-geometry.category = Geometry simplification

surrounding-geometry = 5
surrounding-geometry.type = IntegerParameter
surrounding-geometry.help = Level of simplification of the district geometry (1 is the lowest)
surrounding-geometry.category = Geometry simplification

consider-floors = true
consider-floors.type = BooleanParameter
consider-floors.help = Consider floors in the geometry
consider-floors.category = Resolution

rad-ab = 4
rad-ab.type = IntegerParameter
rad-ab.help = Number of ambient bounces
rad-ab.category = Daysim simulation parameters

rad-ad = 512
rad-ad.type = IntegerParameter
rad-ad.help = Number of ambient divisions
rad-ad.category = Daysim simulation parameters

rad-as = 32
rad-as.type = IntegerParameter
rad-as.help = Number of ambient super-samples
rad-as.category = Daysim simulation parameters

rad-ar = 20
rad-ar.type = IntegerParameter
rad-ar.help = Ambient resolution
rad-ar.category = Daysim simulation parameters

rad-aa = 0.15
rad-aa.type = RealParameter
rad-aa.help = Ambient accurracy
rad-aa.category = Daysim simulation parameters

rad-lr = 8
rad-lr.type = IntegerParameter
rad-lr.help = Maximum number of reflections
rad-lr.category = Daysim simulation parameters

rad-st = 0.5
rad-st.type = RealParameter
rad-st.help = Specular sampling threshold
rad-st.category = Daysim simulation parameters

rad-sj = 0.7
rad-sj.type = RealParameter
rad-sj.help = Specular sampling jitter
rad-sj.category = Daysim simulation parameters

rad-lw = 0.05
rad-lw.type = RealParameter
rad-lw.help = Minimum weight of each ray
rad-lw.category = Daysim simulation parameters

rad-dj = 0.7
rad-dj.type = RealParameter
rad-dj.help = Direct jitter
rad-dj.category = Daysim simulation parameters

rad-ds = 0
rad-ds.type = RealParameter
rad-ds.help = Direct sampling ration
rad-ds.category = Daysim simulation parameters

rad-dr = 0
rad-dr.type = IntegerParameter
rad-dr.help = Number of relays from secondary sources
rad-dr.category = Daysim simulation parameters

rad-dp = 32
rad-dp.type = IntegerParameter
rad-dp.help = Secondary source presampling density
rad-dp.category = Daysim simulation parameters

albedo = 0.2
albedo.type = RealParameter
albedo.help = Reflection for the terrain
albedo.category = Daysim simulation parameters

daysim-bin-directory = C:\Daysim\bin
daysim-bin-directory.type = PathParameter
daysim-bin-directory.help = Path to the Daysim binaries


[demand]
buildings =
buildings.type = BuildingsParameter
buildings.help = a list of buildings to run the simulation for - leave blank to simulate all buildings
buildings.category = Advanced

loads-output =
loads-output.type = MultiChoiceParameter
loads-output.choices = PV, GRID, E_sys, Eal, Edata, Epro, Eaux,E_ww, E_hs, E_cs, E_cre, E_cdata,Qhs_sen_shu, Qhs_sen_ahu, Qhs_lat_ahu,Qhs_sen_aru, Qhs_lat_aru, Qhs_sen_sys,Qhs_lat_sys, Qhs_em_ls, Qhs_dis_ls,Qhs_sys_shu, Qhs_sys_ahu, Qhs_sys_aru,Qcs_sys_scu, Qcs_sys_ahu, Qcs_sys_aru,DH_hs, Qhs_sys, Qhs,DH_ww, Qww_sys, Qww,DC_cs, Qcs_sys, Qcs,DC_cre, Qcre_sys, Qcre,DC_cdata, Qcdata_sys, Qcdata,NG_hs,COAL_hs,OIL_hs,WOOD_hs,SOLAR_hs,NG_ww,COAL_ww,OIL_ww,WOOD_ww,SOLAR_ww,Qcs_sen_scu, Qcs_sen_ahu,Qcs_lat_ahu, Qcs_sen_aru, Qcs_lat_aru,Qcs_sen_sys, Qcs_lat_sys, Qcs_em_ls,Qcs_dis_ls, Qhpro_sys,QH_sys, QC_sys
loads-output.help = a list of loads to run the simulation for - leave blank to simulate all loads in demand_writers
loads-output.category = Advanced

massflows-output =
massflows-output.type = MultiChoiceParameter
massflows-output.choices = mcpww_sys,mcptw,mcpcs_sys,mcphs_sys,mcpcs_sys_ahu,mcpcs_sys_aru,mcpcs_sys_scu,mcphs_sys_ahu,mcphs_sys_aru,mcphs_sys_shu,mcpcre_sys,mcpcdata_sys
massflows-output.help = a list of massflowrates to run the simulation for - leave blank to simulate all massflows in demand_writers
massflows-output.category = Advanced

temperatures-output =
temperatures-output.type = MultiChoiceParameter
temperatures-output.choices =  T_int, T_ext, theta_o, Tww_sys_sup, Tww_sys_re, Tcre_sys_re, Tcre_sys_sup,Tcdata_sys_re, Tcdata_sys_sup,Ths_sys_sup_aru, Ths_sys_sup_ahu, Ths_sys_sup_shu,Ths_sys_re_aru, Ths_sys_re_ahu, Ths_sys_re_shu, Tcs_sys_sup_aru, Tcs_sys_sup_ahu, Tcs_sys_sup_scu, Tcs_sys_re_aru, Tcs_sys_re_ahu, Tcs_sys_re_scu, Ths_sys_sup, Ths_sys_re, Tcs_sys_sup, Tcs_sys_re
temperatures-output.help = a list of temperatures to run the simulation for - leave blank to simulate all temperatures in demand_writers
temperatures-output.category = Advanced

resolution-output = hourly
resolution-output.type = ChoiceParameter
resolution-output.choices = hourly, monthly
resolution-output.help = resolution of output demand.
resolution-output.category = Advanced

format-output = csv
format-output.type = ChoiceParameter
format-output.choices = csv, hdf5
format-output.help = format of output files. csv is the default, HDF5 is used when data needs to be compressed.
format-output.category = Advanced

use-dynamic-infiltration-calculation = false
use-dynamic-infiltration-calculation.type = BooleanParameter
use-dynamic-infiltration-calculation.help = Use the dynamic infiltration calculation (slower!)
use-dynamic-infiltration-calculation.category = Advanced

use-stochastic-occupancy = false
use-stochastic-occupancy.type = BooleanParameter
use-stochastic-occupancy.help = set to true to use stochastic occupancy schedules, default is false
use-stochastic-occupancy.category = Advanced

override-variables = false
override-variables.type = BooleanParameter
override-variables.help = set to true to use overrides file stored in override-files, used for sensitivity analysis
override-variables.category = Advanced

write-detailed-output = false
write-detailed-output.type = BooleanParameter
write-detailed-output.help = set to true to generate output files containing all calculated hourly demand variables
write-detailed-output.category = Advanced

predefined-hourly-setpoints = false
predefined-hourly-setpoints.type = BooleanParameter
predefined-hourly-setpoints.help = predefined setpoints for every hour of the year is provided, which is further used to calculate demand of the building

[emissions]
year-to-calculate = 2020
year-to-calculate.type = IntegerParameter
year-to-calculate.help = The year to base the calculations on for embodied emissions.

[scenario-plots]
project = {general:scenario}/..
project.type = PathParameter
project.help = Path to the folder containing the scenarios

scenarios = baseline, scenario1, scenario2
scenarios.type = SubfoldersParameter
scenarios.parent = {scenario-plots:project}
scenarios.help = List of scenarios to plot (subdirectories of the project)

output-file = {scenario-plots:project}/scenario-plots.pdf
output-file.type = FileParameter
output-file.extensions = pdf
output-file.direction = output
output-file.help = Path of the output pdf file to create

[benchmark-graphs]
project = {general:scenario}/..
project.type = PathParameter
project.help = Path to the folder containing the scenarios

scenarios = baseline, scenario1, scenario2
scenarios.type = SubfoldersParameter
scenarios.parent = {benchmark-graphs:project}
scenarios.help = List of scenarios to plot (subdirectories of the project)

output-file = {benchmark-graphs:project}/benchmark-graphs.pdf
output-file.type = FileParameter
output-file.extensions = pdf
output-file.direction = output
output-file.help = Path of the output pdf file to create

[extract-reference-case]
destination = {general:scenario}/../..
destination.type = PathParameter
destination.help = destination folder to extract the reference case to. Since the reference case has subfolders, the
                   resulting scenario for the default (``C:/``) will be: ``C:/reference-case-open/baseline``.

case = open
case.type = ChoiceParameter
case.choices = open, heating, cooling, WTP
case.help = The reference case to extract


[solar]
buildings =
buildings.type = BuildingsParameter
buildings.help = The list of buildings to consider

type-pvpanel = PV1
type-pvpanel.type = ChoiceParameter
type-pvpanel.choices = PV1, PV2, PV3
type-pvpanel.help = Type of PV panel

type-scpanel = FP
type-scpanel.type = ChoiceParameter
type-scpanel.choices = FP, ET
type-scpanel.help = Type of solar collector: Flate-plate (FP) or Evacuated-tubes (ET)

panel-on-roof = True
panel-on-roof.type = BooleanParameter
panel-on-roof.help = Install panels on roofs

panel-on-wall = True
panel-on-wall.type = BooleanParameter
panel-on-wall.help = Install panels on walls

annual-radiation-threshold = 800
annual-radiation-threshold.type = RealParameter
annual-radiation-threshold.help = Install panels on surfaces that receive radiation above this threshold [kWh/m2/yr].

t-in-sc =
t-in-sc.type = RealParameter
t-in-sc.help = Inlet temperature of solar collectors [C], if not specified, the default is 75C for Flat-plate and 100C for Evacuated-tube.
t-in-sc.nullable = true
t-in-sc.category = Advanced

t-in-pvt =
t-in-pvt.type = RealParameter
t-in-pvt.help = Inlet temperature of PVT panels [C], if not specified, the default is 35C.
t-in-pvt.nullable = true
t-in-pvt.category = Advanced


solar-window-solstice = 4
solar-window-solstice.type = IntegerParameter
solar-window-solstice.help = Desired hours of solar window on the solstice [hr]
solar-window-solstice.category = Advanced


[retrofit-potential]
keep-partial-matches = true
keep-partial-matches.type = BooleanParameter
keep-partial-matches.help = keep buildings that attained one or more of the criteria

retrofit-scenario-name = retrofit-HVAC
retrofit-scenario-name.type = StringParameter
retrofit-scenario-name.help = the name of the scenario to create (will be placed in same parent folder as the scenario

retrofit-target-year = 2020
retrofit-target-year.type = IntegerParameter
retrofit-target-year. help = Year to calculate for
retrofit-target-year.category = age

age-threshold = 15
age-threshold.type = IntegerParameter
age-threshold.nullable = true
age-threshold.help = Threshold age of HVAC (built / retrofitted)
age-threshold.category = age

eui-heating-threshold = 150
eui-heating-threshold.type = RealParameter
eui-heating-threshold.nullable = true
eui-heating-threshold.help = EUI heating loads threshold, leave blank to ignore these criteria
eui-heating-threshold.category = end use intensity

eui-hot-water-threshold = 50
eui-hot-water-threshold.type = RealParameter
eui-hot-water-threshold.nullable = true
eui-hot-water-threshold.help = EUI hot-water loads threshold, leave blank to ignore these criteria
eui-hot-water-threshold.category = end use intensity

eui-cooling-threshold = 4
eui-cooling-threshold.type = RealParameter
eui-cooling-threshold.nullable = true
eui-cooling-threshold.help = EUI cooling loads threshold, leave blank to ignore these criteria
eui-cooling-threshold.category = end use intensity

eui-electricity-threshold = 20
eui-electricity-threshold.type = RealParameter
eui-electricity-threshold.nullable = true
eui-electricity-threshold.help = EUI electricity consumption threshold, leave blank to ignore theseb criteria
eui-electricity-threshold.category = end use intensity

emissions-operation-threshold = 30
emissions-operation-threshold.type = RealParameter
emissions-operation-threshold.nullable = true
emissions-operation-threshold.help = Operations emissions threshold, leave blank to ignore these criteria
emissions-operation-threshold.category = emissions

heating-costs-threshold = 2
heating-costs-threshold.type = RealParameter
heating-costs-threshold.nullable = true
heating-costs-threshold.help = Heating costs threshold, leave blank to ignore these criteria
heating-costs-threshold.category = operation costs

hot-water-costs-threshold = 2
hot-water-costs-threshold.type = RealParameter
hot-water-costs-threshold.nullable = true
hot-water-costs-threshold.help = Hot-water costs threshold, leave blank to ignore these criteria
hot-water-costs-threshold.category = operation costs

cooling-costs-threshold = 2
cooling-costs-threshold.type = RealParameter
cooling-costs-threshold.nullable = true
cooling-costs-threshold.help = Cooling costs threshold, leave blank to ignore these criteria
cooling-costs-threshold.category = operation costs

electricity-costs-threshold = 2
electricity-costs-threshold.type = RealParameter
electricity-costs-threshold.nullable = true
electricity-costs-threshold.help = Electricity costs threshold, leave blank to ignore these criteria
electricity-costs-threshold.category = operation costs

heating-losses-threshold = 15
heating-losses-threshold.type = RealParameter
heating-losses-threshold.nullable = true
heating-losses-threshold.help = Heating losses threshold, leave blank to ignore these criteria
heating-losses-threshold.category = HVAC System losses

hot-water-losses-threshold = 15
hot-water-losses-threshold.type = RealParameter
hot-water-losses-threshold.nullable = true
hot-water-losses-threshold.help = Hot-water losses threshold, leave blank to ignore these criteria
hot-water-losses-threshold.category = HVAC System losses

cooling-losses-threshold = 15
cooling-losses-threshold.type = RealParameter
cooling-losses-threshold.nullable = true
cooling-losses-threshold.help = Cooling losses threshold, leave blank to ignore these criteria
cooling-losses-threshold.category = HVAC System losses

[sensitivity-demand]
method = sobol
method.type = ChoiceParameter
method.choices = morris, sobol
method.help = Method to use valid values: "morris", "sobol"

num-samples = 1000
num-samples.type = IntegerParameter
num-samples.help = number of samples (generally 1000 or until it converges)

calc-second-order = false
calc-second-order.type = BooleanParameter
calc-second-order.help = (sobol) calc_second_order parameter

num-levels = 4
num-levels.type = IntegerParameter
num-levels.help = (morris) num_levels parameter

samples-folder = {general:scenario}/../samples
samples-folder.type = PathParameter
samples-folder.direction = input
samples-folder.help = folder to place the output files (samples.npy, problem.pickle) in

variable-groups = ENVELOPE, INDOOR_COMFORT, INTERNAL_LOADS
variable-groups.type = MultiChoiceParameter
variable-groups.choices = ENVELOPE, INDOOR_COMFORT, INTERNAL_LOADS, SYSTEMS ECONOMIC
variable-groups.help = List of variable groups to sample (see uncertainty_distributions.xls file)

sample-index = 0
sample-index.help=Zero-based index into the samples list to simulate
sample-index.type=IntegerParameter

number-of-simulations =
number-of-simulations.type = IntegerParameter
number-of-simulations.nullable = true
number-of-simulations.help = number of simulations to perform, leave empty to simulate all

simulation-folder = {general:scenario}/../simulation
simulation-folder.type = PathParameter
simulation-folder.direction = output
simulation-folder.help = folder to copy the reference case to for simulation

output-parameters = Qcs_sys_MWhyr, Qhs_sys_MWhyr, E_sys_MWhyr, Qhs_sys0_kW, Qcs_sys0_kW, E_sys0_kW
output-parameters.type = MultiChoiceParameter
output-parameters.choices = Qcs_sys_MWhyr, Qhs_sys_MWhyr, E_sys_MWhyr, Qhs_sys0_kW, Qcs_sys0_kW, E_sys0_kW
output-parameters.help = output parameters to use

temporal-scale = yearly
temporal-scale.type = ChoiceParameter
temporal-scale.choices = yearly, monthly
temporal-scale.help = temporal scale of analysis (monthly or yearly)

[dbf-tools]
#converter of dbf to xls and viceversa
input-file = {general:scenario}/inputs/technology/archetypes/construction_properties.xlsx
input-file.type = FileParameter
input-file.extensions = xls xlsx dbf
input-file.help = Path to the DBF or Excel file

output-file-name = converted_file
output-file-name.type = StringParameter
output-file-name.help = Name of the output file (without extension)

output-path = {general:scenario}
output-path.type = PathParameter
output-path.help = Path to save the results

[shapefile-tools]
# configuration for tools like excel-to-shp and shp-to-excel
excel-file = {general:scenario}/inputs/building-geometry/zone.xls
excel-file.type = FileParameter
excel-file.extensions = xls xlsx
excel-file.help = Path to the Excel file

shapefile = {general:scenario}/inputs/building-geometry/zone.shp
shapefile.type = FileParameter
shapefile.extensions = shp
shapefile.help = Path to the ESRI Shapefile

crs = {"lon_0": 7.439583333333333, "k_0": 1, "ellps": "bessel", "y_0": 200000, "no_defs": true, "proj": "somerc", "x_0": 600000, "units": "m", "lat_0": 46.95240555555556}
crs.type = JsonParameter
crs.help = contains the value to use for the crs parameter of the shapefile

index = Name
index.type = StringParameter
index.help = Use this column as the index column of the DataFrame

polygon = True
polygon.type = BooleanParameter
polygon.help = Interpret geometry column as polygon coordinates - set to False to interpret as polyline

[test]
reference-cases = open
reference-cases.type = MultiChoiceParameter
reference-cases.choices = open, zug/baseline, zurich/baseline, zurich/masterplan, all
reference-cases.help = List of reference cases to run - check cea/tests/dodo.py@REFERENCE_CASES for the full list

tasks = all
tasks.type = MultiChoiceParameter
tasks.choices = all, download_radiation, download_reference_cases, run_calibration, run_data_helper, run_demand,
                run_embodied_energy, run_emissions_mobility, run_emissions_operation, run_scenario_plots,
                run_sensitivity, run_thermal_network_matrix, run_unit_tests
tasks.help = list of tasks to run - use "all" to run all tasks
tasks.category = Advanced

verbosity = 1
verbosity.type = IntegerParameter
verbosity.help = verbosity parameter to pass to pydoit
verbosity.category = Advanced

[trace-inputlocator]
scripts = data-helper, demand, emissions
scripts.type = MultiChoiceParameter
scripts.choices = benchmark-graphs,
    compile,
    copy-default-databases,
    create-new-project,
    dashboard,
    data-helper,
    dbf-to-excel-to-dbf,
    decentralized,
    demand,
    emissions,
    excel-to-shapefile,
    extract-reference-case,
    install-arcgis,
    install-grasshopper,
    lake-potential,
    list-demand-graphs-fields,
    multi-criteria-analysis,
    network-layout,
    operation-costs,
    optimization,
    photovoltaic,
    photovoltaic-thermal,
    plots,
    plots-optimization,
    plots-scenario-comparisons,
    plots-supply-system,
    radiation-daysim,
    scenario-plots,
    sensitivity-demand-analyze,
    sensitivity-demand-samples,
    sensitivity-demand-simulate,
    sewage-potential,
    shapefile-to-excel,
    solar-collector,
    supply-system-simulation,
    test,
    thermal-network,
    thermal-network-optimization
scripts.help = sequential list of scripts to run

graphviz-output-file = {general:scenario}/outputs/trace_inputlocator.output.gv
graphviz-output-file.type = FileParameter
graphviz-output-file.extensions = gv
graphviz-output-file.help = Path to the filename of the GraphViz output file

meta-output-file = {general:scenario}/outputs/trace_inputlocator.output.yml
meta-output-file.type = FileParameter
meta-output-file.extensions = yml
meta-output-file.help = Path to the filename of the yml output file


[neural-network]

year = 2015
year.type = IntegerParameter
year.help = The year to base the calculations on. WARNING!, make sure you are using a compatible weather file

warmup-period = 759
warmup-period.type = IntegerParameter
warmup-period.help = Burn-inperiod for estimation of cea demand calcualtion. In hours taken from the end of the year.

nn-delay = 1
nn-delay.type = IntegerParameter
nn-delay.help = number of delays. the recommended value is 1

nn-passes = 3
nn-passes.type = IntegerParameter
nn-passes.help = number of recommended pases is 20

number-samples-scaler = 3
number-samples-scaler.type = IntegerParameter
number-samples-scaler.help = Number of generations of the city. The recommended is 200 but it is a function of the number of features.

number-samples = 3
number-samples.type = IntegerParameter
number-samples.help = 3 The recomended is 10, it is a function of the ram we have, in this case each sample requires 1GB of ram.

number-sweeps=3
number-sweeps.type = IntegerParameter
number-sweeps.help = the recommended is 10

autoencoder = false
autoencoder.type = BooleanParameter
autoencoder.help = only true if you have more than 70 features and enough ram.

boolean-vars = ECONOMIZER, WIN_VENT, MECH_VENT, HEAT_REC, NIGHT_FLSH
boolean-vars.type = ListParameter
boolean-vars.help = Name of features that are not float numbers (instead are classes) and should have Boolean properties

climatic-variables = drybulb_C, wetbulb_C, relhum_percent, glohorrad_Whm2, dirnorrad_Whm2, difhorrad_Whm2, skytemp_C, windspd_ms
climatic-variables.type = ListParameter
climatic-variables.help = features selected from the weather data file

random-variables = win_wall, Cm_Af, n50, U_roof, a_roof, U_wall, a_wall, U_base, U_win, G_win, rf_sh,
                   Ths_set_C, Tcs_set_C, Ths_setb_C, Tcs_setb_C, Ve_lps, Qs_Wp, X_ghp, Ea_Wm2, El_Wm2,
                   Vww_lpd, Vw_lpd, dThs_C, dTcs_C, ECONOMIZER, WIN_VENT, MECH_VENT, HEAT_REC, NIGHT_FLSH, dT_Qhs,
                   dT_Qcs
random-variables.type = ListParameter
random-variables.help = Features that are subject to uncertainty, and therefore, random sampling

target-parameters = Qhs_sys_kWh, Qcs_sys_kWh, Qww_sys_kWh, E_sys_kWh, T_int_C
target-parameters.type = ListParameter
target-parameters.help = parameters intended for estimation by the neural network

[single-calibration]
variables = U_win, U_wall, U_roof, n50, Tcs_set_C, Hs
variables.type = MultiChoiceParameter
variables.choices = U_win, U_wall, U_base, U_roof, Tcs_setb_C, Ths_setb_C, G_win, n50, Hs, Cm_Af, Ths_set_C, win_wall, Tcs_set_C, Ea_Wm2, El_Wm2, Vww_lpd, Vw_lpd
variables.help = a list of input variables to calibrate to (they refer to the variable names included in the distributions database of CEA)
variables.category = Advanced

building = B01
building.type = StringParameter
building.help = Building to calbratebuilding.choices =
building.category = Advanced

load = E_sys
load.type = ChoiceParameter
load.choices = PV, GRID, E_sys, Eal, Edata, Epro, Eaux,E_ww, E_hs, E_cs, E_cre, E_cdata,Qhs_sen_shu, Qhs_sen_ahu, Qhs_lat_ahu,Qhs_sen_aru, Qhs_lat_aru, Qhs_sen_sys,Qhs_lat_sys, Qhs_em_ls, Qhs_dis_ls,Qhs_sys_shu, Qhs_sys_ahu, Qhs_sys_aru,Qcs_sys_scu, Qcs_sys_ahu, Qcs_sys_aru,DH_hs, Qhs_sys, Qhs,DH_ww, Qww_sys, Qww,DC_cs, Qcs_sys, Qcs,DC_cre, Qcre_sys, Qcre,DC_cdata, Qcdata_sys, Qcdata,NG_hs,COAL_hs,OIL_hs,WOOD_hs,SOLAR_hs,NG_ww,COAL_ww,OIL_ww,WOOD_ww,SOLAR_ww,Qcs_sen_scu, Qcs_sen_ahu,Qcs_lat_ahu, Qcs_sen_aru, Qcs_lat_aru,Qcs_sen_sys, Qcs_lat_sys, Qcs_em_ls,Qcs_dis_ls, Qhpro_sys,QH_sys, QC_sys
load.help = The load to calibrate to.
load.category = Advanced

samples = 1000
samples.type = IntegerParameter
samples.help =  number of samples to do to use cea.
samples.category = Grid for the sensors in the roof

iterations = 10000
iterations.type = IntegerParameter
iterations.help =  number of samples to do to use cea.
iterations.category = MCMC iterations for calibration. >10000 recommended

show-plots = true
show-plots.type = BooleanParameter
show-plots.help = Set to false to disable showing the plots

[thermal-network]
network-type = DH
network-type.type = ChoiceParameter
network-type.choices = DH, DC
network-type.help = Type of network to be simulated, either DH (district heating) or DC (district cooling)

network-names =
network-names.type = ListParameter
network-names.help = a list of networks of a network type
network-names.category = Advanced

file-type = shp
file-type.type = ChoiceParameter
file-type.choices = csv, shp
file-type.help = format of the input files, it can be either csv file or a shape file

set-diameter = true
set-diameter.type = BooleanParameter
set-diameter.help = this does a rule of max and min flow to set a diameter. if false it takes the input diameters

load-max-edge-flowrate-from-previous-run = false
load-max-edge-flowrate-from-previous-run.type = BooleanParameter
load-max-edge-flowrate-from-previous-run.help = set to true to bypass the calc_max_edge_flowrate function and just load
                                                the results from the previous run. (useful for debugging)
load-max-edge-flowrate-from-previous-run.category = Advanced

start-t = 0
start-t.type = IntegerParameter
start-t.help = starting hour for calculations (0-based)
start-t.category = Advanced

stop-t = 8760
stop-t.type = IntegerParameter
stop-t.help = stopping hour for calculations (0-based, upper bound)
stop-t.category = Advanced

use-representative-week-per-month = false
use-representative-week-per-month.type = BooleanParameter
use-representative-week-per-month.help = activing this function will run the thermal network with data of the first
                                      week of each month instead of the full month data
use-representative-week-per-month.category = Advanced

minimum-mass-flow-iteration-limit = 30
minimum-mass-flow-iteration-limit.type = IntegerParameter
minimum-mass-flow-iteration-limit.help = maximum amount of iterations allowed for the increase of minimum mass flows in the network
minimum-mass-flow-iteration-limit.category = Advanced

minimum-edge-mass-flow = 0.1
minimum-edge-mass-flow.type = RealParameter
minimum-edge-mass-flow.help = minimum network allowed in network without mass flow iteration attempting to raise values in kg per s
minimum-edge-mass-flow.category = Advanced

diameter-iteration-limit = 10
diameter-iteration-limit.type = IntegerParameter
diameter-iteration-limit.help = maximum amount of iterations allowed for the network diameter iteration. relevant for looped network result convergence.
diameter-iteration-limit.category = Advanced

substation-cooling-systems = ahu, aru, scu
substation-cooling-systems.type = MultiChoiceParameter
substation-cooling-systems.choices = ahu, aru, scu, re, data
substation-cooling-systems.help = List of cooling loads to be supplied if we are in DC mode
substation-cooling-systems.category = Advanced

substation-heating-systems = ahu, aru, shu, ww
substation-heating-systems.type = MultiChoiceParameter
substation-heating-systems.choices = ahu, aru, shu, ww
substation-heating-systems.help = List of cooling loads to be supplied if we are in DH mode
substation-heating-systems.category = Advanced

temperature-control = VT
temperature-control.type = ChoiceParameter
temperature-control.choices = VT, CT
temperature-control.help = Type of control strategy for plant operation, either VT (Variable temperature, variable flow) or CT (Constant Temperature, variable flow)
temperature-control.category = Advanced


plant-supply-temperature = 80
plant-supply-temperature.type = RealParameter
plant-supply-temperature.help = Supply temperature [C] at plants if temperature-control is set to 'CT'
plant-supply-temperature.category = Advanced


[thermal-network-optimization]
network-type = DH
network-type.type = ChoiceParameter
network-type.choices = DH, DC
network-type.help = Type of network to be optimized, either DH (district heating) or DC (district cooling)

network-names =
network-names.type = ListParameter
network-names.help = a list of networks of a network type
network-names.category = Advanced

file-type = shp
file-type.type = ChoiceParameter
file-type.choices = csv, shp
file-type.help = format of the input files, it can be either csv file or a shape file

set-diameter = true
set-diameter.type = BooleanParameter
set-diameter.help = this does a rule of max and min flow to set a diameter. if false it takes the input diameters

load-max-edge-flowrate-from-previous-run = false
load-max-edge-flowrate-from-previous-run.type = BooleanParameter
load-max-edge-flowrate-from-previous-run.help = set to true to bypass the calc_max_edge_flowrate function and just load
                                                the results from the previous run. (useful for debugging)
load-max-edge-flowrate-from-previous-run.category = Advanced

start-t = 0
start-t.type = IntegerParameter
start-t.help = starting hour for calculations (0-based)
start-t.category = Advanced

stop-t = 8760
stop-t.type = IntegerParameter
stop-t.help = stopping hour for calculations (0-based, upper bound)
stop-t.category = Advanced

network-name =
network-name.type = StringParameter
network-name.help = Name of network for which to run the nework optimization
network-name.category = Advanced

possible-plant-sites =
possible-plant-sites.type = ListParameter
possible-plant-sites.help = List of possible plant locations, specified by the building names at which the plant(s) can be placed. Default sets all buildings as available
possible-plant-sites.category = Advanced

min-number-of-plants = 1
min-number-of-plants.type = IntegerParameter
min-number-of-plants.help = minimum number of plants used for thermal network optimization, minimum value is 1
min-number-of-plants.category = Advanced

max-number-of-plants = 1
max-number-of-plants.type = IntegerParameter
max-number-of-plants.help = maximum number of plants used for thermal network optimization
max-number-of-plants.category = Advanced

number-of-individuals = 6
number-of-individuals.type = IntegerParameter
number-of-individuals.help = this denotes the number of individuals at the start of the optimization (parameter for genetic algorithm)
number-of-individuals.category = Advanced

chance-of-mutation = 20
chance-of-mutation.type = RealParameter
chance-of-mutation.help = this denotes the percentage chance of mutation in the evolutionary algorithm
chance-of-mutation.category = Advanced

number-of-generations = 20
number-of-generations.type = IntegerParameter
number-of-generations.help = number of generations used for thermal network optimization
number-of-generations.category = Advanced

lucky-few = 1
lucky-few.type = IntegerParameter
lucky-few.help = number of individuals which is randomly picked despite not being optimal. Must be smaller than the number of individuals minus one.
lucky-few.category = Advanced

optimize-loop-branch = false
optimize-loop-branch.type = BooleanParameter
optimize-loop-branch.help = If activated, the thermal network optimization will optimize the choice of using a purely branched layout or mixed layout
optimize-loop-branch.category = Advanced

optimize-network-loads = false
optimize-network-loads.type = BooleanParameter
optimize-network-loads.help = If activated, the thermal network optimization will optimize the choice of which heat loads (e.g. ahu, aru, etc.) are provided by the network
optimize-network-loads.category = Advanced

optimize-building-connections = false
optimize-building-connections.type = BooleanParameter
optimize-building-connections.help = If activated, the thermal network optimization will chose which buildings to connect to the district heat or cooling system
optimize-building-connections.category = Advanced

use-rule-based-approximation = false
use-rule-based-approximation.type = BooleanParameter
use-rule-based-approximation.help = If activated, the thermal network optimization will use a rule based approach to narrow the solution space. E.g. by limiting the amount of possible plant locations
use-rule-based-approximation.category = Advanced


use-representative-week-per-month = false
use-representative-week-per-month.type = BooleanParameter
use-representative-week-per-month.help = activing this function will run the thermal network with data of the first
                                      week of each month instead of the full month data
use-representative-week-per-month.category = Advanced

minimum-mass-flow-iteration-limit = 30
minimum-mass-flow-iteration-limit.type = IntegerParameter
minimum-mass-flow-iteration-limit.help = maximum amount of iterations allowed for the increase of minimum mass flows in the network
minimum-mass-flow-iteration-limit.category = Advanced

minimum-edge-mass-flow = 0.1
minimum-edge-mass-flow.type = RealParameter
minimum-edge-mass-flow.help = minimum network allowed in network without mass flow iteration attempting to raise values in kg per s
minimum-edge-mass-flow.category = Advanced

diameter-iteration-limit = 10
diameter-iteration-limit.type = IntegerParameter
diameter-iteration-limit.help = maximum amount of iterations allowed for the network diameter iteration. relevant for looped network result convergence.
diameter-iteration-limit.category = Advanced

substation-cooling-systems = ahu, aru, scu
substation-cooling-systems.type = ListParameter
substation-cooling-systems.help = List of cooling loads to be supplied if we are in DC mode
substation-cooling-systems.category = Advanced

substation-heating-systems = ahu, aru, shu, ww
substation-heating-systems.type = ListParameter
substation-heating-systems.help = List of cooling loads to be supplied if we are in DC mode
substation-heating-systems.category = Advanced

disconnected-buildings =
disconnected-buildings.type = ListParameter
disconnected-buildings.help = List of buildings which are disconnected from the network
disconnected-buildings.category = Advanced

yearly-cost-calculations = false
yearly-cost-calculations.type = BooleanParameter
yearly-cost-calculations.help = activating this function will run the cost calculations of CT opex and heat/cooling production at a yearly instead of hourly basis
yearly-cost-calculations.category = Advanced

[optimization]
initialind = 3
initialind.type = IntegerParameter
initialind.help = this denotes the number of individuals at the start of the optimization (parameter for genetic algorithm)

halloffame = 20
halloffame.type = IntegerParameter
halloffame.help = this denotes the number of individuals to be stored in hall of fame

ngen = 3
ngen.type = IntegerParameter
ngen.help = number of generations in the optimization (parameter for genetic algorithm)

fcheckpoint = 1
fcheckpoint.type = IntegerParameter
fcheckpoint.help = frequency for the saving of checkpoints

maxtime = 604800
maxtime.type = IntegerParameter
maxtime.help = maximum allowed time in seconds, 604800 is equivalent of 7 days

recoverycheckpoint = 0
recoverycheckpoint.type = IntegerParameter
recoverycheckpoint.help = in case the optimization stops, it can be resumed from this checkpoint.

random-seed =
random-seed.type = IntegerParameter
random-seed.nullable = true
random-seed.help = Random seed to make it easy to replicate the results of the scenarios.

[plots]
buildings =
buildings.type = BuildingsParameter
buildings.help = a list of buildings to run graphs or leave blank to simulate district

building =
building.type = SingleBuildingParameter
building.help = The building ID for the Energy Demand, Comfort Plot and Heating Reset-schedule plot. Used only for the
                dashboard plots. For the plots tool, use a single building in the "buildings" variable.


categories = demand, solar_potentials, solar_technology, life_cycle_analysis, thermal_network
categories.type = MultiChoiceParameter
categories.choices = demand, solar_potentials, solar_technology, life_cycle_analysis, thermal_network
categories.help = a list of categories of plots to create

network-type = DC
network-type.type = ChoiceParameter
network-type.choices = DC, DH
network-type.help = a string indication DC or DH for District Cooling or Heating

network-name =
network-name.type = StringParameter
network-name.help = the name of the network to plot - defaults to an empty string

plant-node =
plant-node.type = PlantNodeParameter
plant-node.network-type = plots:network-type
plant-node.network-name = plots:network-name
plant-node.help = the plant node to plot

[plots-optimization]
generation = 3
generation.type = IntegerParameter
generation.help = The number of the generation to run the optimization graphs for.

network-type = DC
network-type.type = ChoiceParameter
network-type.choices = DC, DH
network-type.help = a string indication DC or DH for District Cooling or Heating

multicriteria = true
multicriteria.type = BooleanParameter
multicriteria.help = select whether to include the results of multicriteria assessment on the plots.

categories = pareto_curve, system_sizes, costs_analysis
categories.type = MultiChoiceParameter
categories.choices = pareto_curve, system_sizes, costs_analysis
categories.help = a list of categories of plots to create

[plots-supply-system]
generation = 3
generation.type = IntegerParameter
generation.help = Select one generation of the optimization routine where the supply system is going to be studied

individual = ind1
individual.type = StringParameter
individual.help = select one individual configuration of the supply system to visualize

network-type = DC
network-type.type = ChoiceParameter
network-type.choices = DC, DH
network-type.help = a string indication DC or DH for District Cooling or Heating

categories = system_sizes, costs_analysis, supply_mix, imports_exports, thermal_dispatch_curves, electrical_dispatch_curves
categories.type = MultiChoiceParameter
categories.choices = system_sizes, costs_analysis, supply_mix, imports_exports, thermal_dispatch_curves, electrical_dispatch_curves, thermal_network
categories.help = a list of categories of plots to create

[plots-scenario-comparisons]
project = {general:scenario}/..
project.type = PathParameter
project.help = Path to the folder containing the scenarios to compare

base-scenario = {general:scenario}
base-scenario.type = OptimizationIndividualParameter
base-scenario.project = {plots-scenario-comparisons:project}
base-scenario.help = Baseline scenario to use for comparisons

scenarios = {general:scenario}/1/ind2
scenarios.type = OptimizationIndividualListParameter
scenarios.project = {plots-scenario-comparisons:project}
scenarios.help = List of scenarios to compare

categories = demand, supply_mix, costs_analysis, life_cycle_analysis, land_use
categories.type = MultiChoiceParameter
categories.choices = demand, supply_mix, costs_analysis, life_cycle_analysis, land_use
categories.help = a list of categories of plots to create

network-type = DC
network-type.type = ChoiceParameter
network-type.choices = DC, DH
network-type.help = a string indication DC or DH for District Cooling or Heating

[sewage]
heat-exchanger-length = 120
heat-exchanger-length.type = IntegerParameter
heat-exchanger-length.help = length of pipeline available for a heat exchanger in the sewage in meters. You need at least 100 meters.

sewage-water-ratio = 0.95
sewage-water-ratio.type = RealParameter
sewage-water-ratio.nullable = true
sewage-water-ratio.help = ratio of decrease/increase in sewage water due to solids and also water intakes.

[lake]
available = false
available.type = BooleanParameter
available.help = A lake is available to use as a heat sink.

size = 0
size.type = IntegerParameter
size.help = Size of the lake.

[create-new-project]
project = cea-new-project
project.type = StringParameter
project.help = name of the new project

scenario = baseline
scenario.type = StringParameter
scenario.help = name of the baseline scenario

output-path = {general:scenario}/../..
output-path.type = PathParameter
output-path.help = Path to new project location

zone = {general:scenario}/inputs/building-geometry/zone.shp
zone.type = FileParameter
zone.extensions = shp
zone.help = Path to geometry of the zone

terrain = {general:scenario}/inputs/topography/terrain.tif
terrain.type = FileParameter
terrain.extensions = tif tiff
terrain.help = Path to the digital elevation model

streets = {general:scenario}/inputs/networks/streets.shp
streets.type = FileParameter
streets.extensions = shp
streets.help = Path to street geometry.

district =
district.type = FileParameter
district.extensions = shp
district.nullable = true
district.help = Path to geometry of zone and surroundings. Leave empty if you do not want to consider shading effects.
district.category = Optional

occupancy =
occupancy.type = FileParameter
occupancy.extensions = dbf
occupancy.nullable = true
occupancy.help = Path to occupancy database. Leave empty for CEA to create one for you.
occupancy.category = Optional

age =
age.type = FileParameter
age.extensions = dbf
age.nullable = true
age.help = Path to age database. Leave empty for CEA to create one for you.
age.category = Optional

[decentralized]
ahuflag = false
ahuflag.type = BooleanParameter
ahuflag.help = Flag for decentralized building calculations satisfying demand from only Air Handling

aruflag = false
aruflag.type = BooleanParameter
aruflag.help = Flag for decentralized building calculations satisfying demand from only Air Recirculation

scuflag = false
scuflag.type = BooleanParameter
scuflag.help = Flag for decentralized building calculations satisfying demand from only Sensible Cooling

ahuaruflag = false
ahuaruflag.type = BooleanParameter
ahuaruflag.help = Flag for decentralized building calculations satisfying demand from Air Handling and Recirculation

ahuscuflag = false
ahuscuflag.type = BooleanParameter
ahuscuflag.help = Flag for decentralized building calculations satisfying demand from Air Handling and Sensible Cooling

aruscuflag = false
aruscuflag.type = BooleanParameter
aruscuflag.help = Flag for decentralized building calculations satisfying demand from Air Recirculation and Sensible Cooling

[network-layout]
network-type = DC
network-type.type = ChoiceParameter
network-type.choices = DC, DH, custom, EL
network-type.help = a string indication DC or DH for District Cooling or Heating and EL for electrical grid

connected-buildings =
connected-buildings.type = BuildingsParameter
connected-buildings.help = a list of buildings/customers to connect. leave blank to connect all buildings
connected-buildings.category = Advanced

disconnected-buildings =
disconnected-buildings.type = ListParameter
disconnected-buildings.help = List of buildings which are disconnected from the network
disconnected-buildings.category = Advanced

pipe-diameter = 150
pipe-diameter.type = IntegerParameter
pipe-diameter.help = nominal diameter of pipe in mm.
pipe-diameter.category = Advanced

type-mat = T1
type-mat.type = ChoiceParameter
type-mat.choices = T1, T2, T3
type-mat.help = type of default material for piping
type-mat.category = Advanced

create-plant = true
create-plant.type = BooleanParameter
create-plant.help = whether creating a plant close to the highest energy consumer or not. default is True
create-plant.category = Advanced

allow-looped-networks = false
allow-looped-networks.type = BooleanParameter
allow-looped-networks.help = whether when creating networks loops should be created. default is False
create-plant.category = Advanced

consider-only-buildings-with-demand = false
consider-only-buildings-with-demand.type = BooleanParameter
consider-only-buildings-with-demand.help = whether when creating networks ONLY buildings with energy demand should be considered or not. default is False
consider-only-buildings-with-demand.category = Advanced

[supply-system-simulation]
centralized-vcc = 0.5
centralized-vcc.type = RealParameter
centralized-vcc.help = Centralized vapor compression chiller sizing. Input a ratio of the peak cooling demand.

centralized-ach = 0.4
centralized-ach.type = RealParameter
centralized-ach.help = Centralized absorption chiller sizing. Input a ratio of the peak cooling demand.

centralized-storage = 0.1
centralized-storage.type = RealParameter
centralized-storage.help = Centralized cold water storage sizing. Input a ratio of the peak cooling demand.

reduced-timesteps = true
reduced-timesteps.type = BooleanParameter
reduced-timesteps.help = whether to run simulation with reduced timesteps (a month) instead of a year.

decentralized-systems = Vapor Compression Chiller
decentralized-systems.type = ChoiceParameter
decentralized-systems.choices = Vapor Compression Chiller, Single-effect Absorption Chiller, Mini-split Unit
decentralized-systems.help = Cooling supply technology used at buildings that are not connected to a district cooling network.
decentralized-systems.category = Advanced

dc-connected-buildings =
dc-connected-buildings.type = BuildingsParameter
dc-connected-buildings.help = a list of buildings connected to district cooling or leave blank to simulate district
dc-connected-buildings.category = Advanced


[multi-criteria]
generations = 3
generations.type = IntegerParameter
generations.help = One generation on which the multi-criteria analysis should be performed.

network-type = DC
network-type.type = ChoiceParameter
network-type.choices = DC, DH, custom
network-type.help = a string indication DC or DH for District Cooling or Heating

economicsustainability = 0.8
economicsustainability.type = RealParameter
economicsustainability.help = weight for economic sustainability

environmentalsustainability = 0.1
environmentalsustainability.type = RealParameter
environmentalsustainability.help = weight for environmental sustainability

socialsustainability = 0.1
socialsustainability.type = RealParameter
socialsustainability.help = weight for social sustainability

annualizedcosts = 0.8
annualizedcosts.type = RealParameter
annualizedcosts.help = weight for total annualized costs (as part of economic sustainability)
annualizedcosts.category = Advanced economic sustainability

capextotal = 0.1
capextotal.type = RealParameter
capextotal.help = weight for total investment costs (as part of economic sustainability)
capextotal.category = Advanced economic sustainability

opex = 0.1
opex.type = RealParameter
opex.help = weight for operation costs (as part of economic sustainability)
opex.category = Advanced economic sustainability

emissions = 0.5
emissions.type = RealParameter
emissions.help = weight for emissions (as part of environmental sustainability)
emissions.category = Advanced environmental sustainability

primaryenergy = 0.5
primaryenergy.type = RealParameter
primaryenergy.help = weight for primary energy (as part of environmental sustainability)
primaryenergy.category = Advanced environmental sustainability

renewableshare = 1
renewableshare.type = RealParameter
renewableshare.help = weight for renewable energy share (as part of social sustainability)
renewableshare.category = Advanced social sustainability

[mpc-building]
time-start = 2005-01-01 00:00:00
time-start.type = StringParameter
time-start.help = tbd

time-end = 2005-01-01 23:30:00
time-end.type = StringParameter
time-end.help = tbd

set-temperature-goal = constant_temperature
set-temperature-goal.type = ChoiceParameter
set-temperature-goal.choices = constant_temperature, follow_cea, set_setback_temperature
set-temperature-goal.help = tbd

constant-temperature = 25.0
constant-temperature.type = RealParameter
constant-temperature.help = For 'constant_temperature'

pricing-scheme = constant_prices
pricing-scheme.type = ChoiceParameter
pricing-scheme.choices = constant_prices, dynamic_prices
pricing-scheme.help = tbd

constant-price = 255.2
constant-price.type = RealParameter
constant-price.help = SGD/MWh from https://www.spgroup.com.sg/what-we-do/billing

min-max-source = constants
min-max-source.type = ChoiceParameter
min-max-source.choices = constants, from occupancy, from building.py
min-max-source.help = tbd

min-constant-temperature = 20.0
min-constant-temperature.type = RealParameter
min-constant-temperature.help = tbd

max-constant-temperature = 25.0
max-constant-temperature.type = RealParameter
max-constant-temperature.help = tbd

delta-set = 3.0
delta-set.type =  RealParameter
delta-set.help = For 'from occupancy variations'

delta-setback = 5.0
delta-setback.type = RealParameter
delta-setback.help = For 'from occupancy variations'


[mpc-district]
time-start = 2005-01-01 00:00:00
time-start.type = StringParameter
time-start.help = tbd

time-end = 2005-01-01 23:30:00
time-end.type = StringParameter
time-end.help = tbd

set-temperature-goal = constant_temperature
set-temperature-goal.type = ChoiceParameter
set-temperature-goal.choices = constant_temperature, follow_cea, set_setback_temperature
set-temperature-goal.help = tbd

constant-temperature = 25.0
constant-temperature.type = RealParameter
constant-temperature.help = For 'constant_temperature'

pricing-scheme = constant_prices
pricing-scheme.type = ChoiceParameter
pricing-scheme.choices = constant_prices, dynamic_prices
pricing-scheme.help = tbd

constant-price = 255.2
constant-price.type = RealParameter
constant-price.help = SGD/MWh from https://www.spgroup.com.sg/what-we-do/billing

min-max-source = constants
min-max-source.type = ChoiceParameter
min-max-source.choices = constants, from occupancy, from building.py
min-max-source.help = tbd

min-constant-temperature = 20.0
min-constant-temperature.type = RealParameter
min-constant-temperature.help = tbd

max-constant-temperature = 25.0
max-constant-temperature.type = RealParameter
max-constant-temperature.help = tbd

delta-set = 3.0
delta-set.type =  RealParameter
delta-set.help = For 'from occupancy variations'

delta-setback = 5.0
delta-setback.type = RealParameter
delta-setback.help = For 'from occupancy variations'

[electrical-thermal-optimization]
network-type = DC
network-type.type = ChoiceParameter
network-type.choices = DC, DH, custom
network-type.help = a string indication DC or DH for District Cooling or Heating

initialind = 2
initialind.type = IntegerParameter
initialind.help = this denotes the number of individuals at the start of the optimization (parameter for genetic algorithm)

halloffame = 20
halloffame.type = IntegerParameter
halloffame.help = this denotes the number of individuals to be stored in hall of fame

ngen = 2
ngen.type = IntegerParameter
ngen.help = number of generations in the optimization (parameter for genetic algorithm)

fcheckpoint = 1
fcheckpoint.type = IntegerParameter
fcheckpoint.help = frequency for the saving of checkpoints

maxtime = 604800
maxtime.type = IntegerParameter
maxtime.help = maximum allowed time in seconds, 604800 is equivalent of 7 days

recoverycheckpoint = 0
recoverycheckpoint.type = IntegerParameter
recoverycheckpoint.help = in case the optimization stops, it can be resumed from this checkpoint.

random-seed =
random-seed.type = IntegerParameter
random-seed.nullable = true
random-seed.help = Random seed to make it easy to replicate the results of the scenarios.

crossoverprobability = 0.5
crossoverprobability.type = RealParameter
crossoverprobability.help = For optimization crossover

mutationprobability = 0.2
mutationprobability.type = RealParameter
mutationprobability.help = For optimization mutation

[cooling-case-workflow]
scenario =
scenario.type = StringParameter
scenario.help = Set this to an existing scenario created by cooling-case-workflow to continue an interrupted simulation

last = 0
last.type = IntegerParameter
last.help = last attempted step in workflow - index of the first step to run
