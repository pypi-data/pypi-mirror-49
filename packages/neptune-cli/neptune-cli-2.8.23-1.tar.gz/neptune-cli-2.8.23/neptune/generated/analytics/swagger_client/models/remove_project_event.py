# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class RemoveProjectEvent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, active=None, experiments=None, name=None, project_type=None):
        """
        RemoveProjectEvent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'active': 'int',
            'experiments': 'int',
            'name': 'str',
            'project_type': 'str'
        }

        self.attribute_map = {
            'active': 'active',
            'experiments': 'experiments',
            'name': 'name',
            'project_type': 'projectType'
        }

        self._active = active
        self._experiments = experiments
        self._name = name
        self._project_type = project_type

    @property
    def active(self):
        """
        Gets the active of this RemoveProjectEvent.


        :return: The active of this RemoveProjectEvent.
        :rtype: int
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this RemoveProjectEvent.


        :param active: The active of this RemoveProjectEvent.
        :type: int
        """
        
        self._active = active

    @property
    def experiments(self):
        """
        Gets the experiments of this RemoveProjectEvent.


        :return: The experiments of this RemoveProjectEvent.
        :rtype: int
        """
        return self._experiments

    @experiments.setter
    def experiments(self, experiments):
        """
        Sets the experiments of this RemoveProjectEvent.


        :param experiments: The experiments of this RemoveProjectEvent.
        :type: int
        """
        
        self._experiments = experiments

    @property
    def name(self):
        """
        Gets the name of this RemoveProjectEvent.


        :return: The name of this RemoveProjectEvent.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RemoveProjectEvent.


        :param name: The name of this RemoveProjectEvent.
        :type: str
        """
        
        self._name = name

    @property
    def project_type(self):
        """
        Gets the project_type of this RemoveProjectEvent.


        :return: The project_type of this RemoveProjectEvent.
        :rtype: str
        """
        return self._project_type

    @project_type.setter
    def project_type(self, project_type):
        """
        Sets the project_type of this RemoveProjectEvent.


        :param project_type: The project_type of this RemoveProjectEvent.
        :type: str
        """
        
        self._project_type = project_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




