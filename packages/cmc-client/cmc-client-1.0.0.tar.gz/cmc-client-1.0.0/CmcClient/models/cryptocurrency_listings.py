# coding: utf-8

"""
    Coinmarketcap API Swagger Implementation

    Define coinmarketcap's api in swagger 2.0 openapi standard  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CmcClient.models.platform import Platform  # noqa: F401,E501
from CmcClient.models.quote import Quote  # noqa: F401,E501


class CryptocurrencyListings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'symbol': 'str',
        'slug': 'str',
        'cmc_rank': 'int',
        'num_market_pairs': 'int',
        'circulating_supply': 'int',
        'total_supply': 'int',
        'max_supply': 'int',
        'last_updated': 'datetime',
        'date_added': 'datetime',
        'tags': 'list[str]',
        'platform': 'Platform',
        'quote': 'dict(str, Quote)'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'symbol': 'symbol',
        'slug': 'slug',
        'cmc_rank': 'cmc_rank',
        'num_market_pairs': 'num_market_pairs',
        'circulating_supply': 'circulating_supply',
        'total_supply': 'total_supply',
        'max_supply': 'max_supply',
        'last_updated': 'last_updated',
        'date_added': 'date_added',
        'tags': 'tags',
        'platform': 'platform',
        'quote': 'quote'
    }

    def __init__(self, id=None, name=None, symbol=None, slug=None, cmc_rank=None, num_market_pairs=None, circulating_supply=None, total_supply=None, max_supply=None, last_updated=None, date_added=None, tags=None, platform=None, quote=None):  # noqa: E501
        """CryptocurrencyListings - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._symbol = None
        self._slug = None
        self._cmc_rank = None
        self._num_market_pairs = None
        self._circulating_supply = None
        self._total_supply = None
        self._max_supply = None
        self._last_updated = None
        self._date_added = None
        self._tags = None
        self._platform = None
        self._quote = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if symbol is not None:
            self.symbol = symbol
        if slug is not None:
            self.slug = slug
        if cmc_rank is not None:
            self.cmc_rank = cmc_rank
        if num_market_pairs is not None:
            self.num_market_pairs = num_market_pairs
        if circulating_supply is not None:
            self.circulating_supply = circulating_supply
        if total_supply is not None:
            self.total_supply = total_supply
        if max_supply is not None:
            self.max_supply = max_supply
        if last_updated is not None:
            self.last_updated = last_updated
        if date_added is not None:
            self.date_added = date_added
        if tags is not None:
            self.tags = tags
        if platform is not None:
            self.platform = platform
        if quote is not None:
            self.quote = quote

    @property
    def id(self):
        """Gets the id of this CryptocurrencyListings.  # noqa: E501


        :return: The id of this CryptocurrencyListings.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CryptocurrencyListings.


        :param id: The id of this CryptocurrencyListings.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CryptocurrencyListings.  # noqa: E501


        :return: The name of this CryptocurrencyListings.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CryptocurrencyListings.


        :param name: The name of this CryptocurrencyListings.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def symbol(self):
        """Gets the symbol of this CryptocurrencyListings.  # noqa: E501


        :return: The symbol of this CryptocurrencyListings.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this CryptocurrencyListings.


        :param symbol: The symbol of this CryptocurrencyListings.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def slug(self):
        """Gets the slug of this CryptocurrencyListings.  # noqa: E501


        :return: The slug of this CryptocurrencyListings.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this CryptocurrencyListings.


        :param slug: The slug of this CryptocurrencyListings.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def cmc_rank(self):
        """Gets the cmc_rank of this CryptocurrencyListings.  # noqa: E501


        :return: The cmc_rank of this CryptocurrencyListings.  # noqa: E501
        :rtype: int
        """
        return self._cmc_rank

    @cmc_rank.setter
    def cmc_rank(self, cmc_rank):
        """Sets the cmc_rank of this CryptocurrencyListings.


        :param cmc_rank: The cmc_rank of this CryptocurrencyListings.  # noqa: E501
        :type: int
        """

        self._cmc_rank = cmc_rank

    @property
    def num_market_pairs(self):
        """Gets the num_market_pairs of this CryptocurrencyListings.  # noqa: E501


        :return: The num_market_pairs of this CryptocurrencyListings.  # noqa: E501
        :rtype: int
        """
        return self._num_market_pairs

    @num_market_pairs.setter
    def num_market_pairs(self, num_market_pairs):
        """Sets the num_market_pairs of this CryptocurrencyListings.


        :param num_market_pairs: The num_market_pairs of this CryptocurrencyListings.  # noqa: E501
        :type: int
        """

        self._num_market_pairs = num_market_pairs

    @property
    def circulating_supply(self):
        """Gets the circulating_supply of this CryptocurrencyListings.  # noqa: E501


        :return: The circulating_supply of this CryptocurrencyListings.  # noqa: E501
        :rtype: int
        """
        return self._circulating_supply

    @circulating_supply.setter
    def circulating_supply(self, circulating_supply):
        """Sets the circulating_supply of this CryptocurrencyListings.


        :param circulating_supply: The circulating_supply of this CryptocurrencyListings.  # noqa: E501
        :type: int
        """

        self._circulating_supply = circulating_supply

    @property
    def total_supply(self):
        """Gets the total_supply of this CryptocurrencyListings.  # noqa: E501


        :return: The total_supply of this CryptocurrencyListings.  # noqa: E501
        :rtype: int
        """
        return self._total_supply

    @total_supply.setter
    def total_supply(self, total_supply):
        """Sets the total_supply of this CryptocurrencyListings.


        :param total_supply: The total_supply of this CryptocurrencyListings.  # noqa: E501
        :type: int
        """

        self._total_supply = total_supply

    @property
    def max_supply(self):
        """Gets the max_supply of this CryptocurrencyListings.  # noqa: E501


        :return: The max_supply of this CryptocurrencyListings.  # noqa: E501
        :rtype: int
        """
        return self._max_supply

    @max_supply.setter
    def max_supply(self, max_supply):
        """Sets the max_supply of this CryptocurrencyListings.


        :param max_supply: The max_supply of this CryptocurrencyListings.  # noqa: E501
        :type: int
        """

        self._max_supply = max_supply

    @property
    def last_updated(self):
        """Gets the last_updated of this CryptocurrencyListings.  # noqa: E501


        :return: The last_updated of this CryptocurrencyListings.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this CryptocurrencyListings.


        :param last_updated: The last_updated of this CryptocurrencyListings.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def date_added(self):
        """Gets the date_added of this CryptocurrencyListings.  # noqa: E501


        :return: The date_added of this CryptocurrencyListings.  # noqa: E501
        :rtype: datetime
        """
        return self._date_added

    @date_added.setter
    def date_added(self, date_added):
        """Sets the date_added of this CryptocurrencyListings.


        :param date_added: The date_added of this CryptocurrencyListings.  # noqa: E501
        :type: datetime
        """

        self._date_added = date_added

    @property
    def tags(self):
        """Gets the tags of this CryptocurrencyListings.  # noqa: E501


        :return: The tags of this CryptocurrencyListings.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CryptocurrencyListings.


        :param tags: The tags of this CryptocurrencyListings.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def platform(self):
        """Gets the platform of this CryptocurrencyListings.  # noqa: E501


        :return: The platform of this CryptocurrencyListings.  # noqa: E501
        :rtype: Platform
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this CryptocurrencyListings.


        :param platform: The platform of this CryptocurrencyListings.  # noqa: E501
        :type: Platform
        """

        self._platform = platform

    @property
    def quote(self):
        """Gets the quote of this CryptocurrencyListings.  # noqa: E501


        :return: The quote of this CryptocurrencyListings.  # noqa: E501
        :rtype: dict(str, Quote)
        """
        return self._quote

    @quote.setter
    def quote(self, quote):
        """Sets the quote of this CryptocurrencyListings.


        :param quote: The quote of this CryptocurrencyListings.  # noqa: E501
        :type: dict(str, Quote)
        """

        self._quote = quote

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CryptocurrencyListings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CryptocurrencyListings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
