{"version":3,"sources":["webpack:///./app/views/settings/components/forms/textCopyInput.jsx","webpack:///./app/views/organizationMonitors/monitorModel.jsx","webpack:///./app/views/organizationMonitors/monitorForm.jsx","webpack:///./app/views/organizationMonitors/create.jsx"],"names":["StyledInput","styled","props","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","target","inputStyles","p","theme","offWhite","OverflowContainer","StyledCopyButton","Button","TextCopyInput","_this","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default","this","_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3___default","call","handleCopyClick","e","textRef","current","onCopy","handleSelectText","children","stopPropagation","selectText","ReactDOM","findDOMNode","React","createRef","_this$props","style","grid_emotion__WEBPACK_IMPORTED_MODULE_5__","readOnly","ref","value","onClick","app_components_clipboard__WEBPACK_IMPORTED_MODULE_13__","hideUnsupported","type","size","app_components_inlineSvg__WEBPACK_IMPORTED_MODULE_14__","src","Component","propTypes","PropTypes","string","isRequired","object","func","defaultProps","MonitorModel","Object","entries","fields","toJSON","reduce","data","_ref","_ref2","slicedToArray_default","k","v","indexOf","config","Array","isArray","schedule","parseInt","substr","id","getValue","get_default","getPrototypeOf_default","prototype","FormModel","SCHEDULE_TYPES","MONITOR_TYPES","INTERVALS","MonitorForm","_getPrototypeOf2","classCallCheck_default","_len","arguments","length","args","_key","possibleConstructorReturn_default","apply","concat","form","rv","schedule_type","checkin_margin","max_runtime","_this2","monitor","selectedProjectId","selection","projects","selectedProject","organization","find","react_default","access","hasAccess","forms_form","allowUndo","requireChanges","apiEndpoint","apiMethod","model","initialData","objectSpread_default","name","project","slug","formDataFromConfig","onSubmitSuccess","panels","t","field","label","className","textCopyInput","selectField","disabled","choices","filter","isMember","map","required","textField","placeholder","index_module","Fragment","numberField","help","tct","link","href","SentryTypes","Monitor","Organization","GlobalSelection","withGlobalSelection","withOrganization","CreateMonitor","browserHistory","push","params","orgId","react__WEBPACK_IMPORTED_MODULE_5___default","_monitorForm__WEBPACK_IMPORTED_MODULE_8__","AsyncView"],"mappings":"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","file":"OrganizationMonitorCreate.js","sourcesContent":["import {Flex} from 'grid-emotion';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from 'react-emotion';\n\nimport {inputStyles} from 'app/styles/input';\nimport {selectText} from 'app/utils/selectText';\nimport Button from 'app/components/button';\nimport Clipboard from 'app/components/clipboard';\nimport InlineSvg from 'app/components/inlineSvg';\n\nconst StyledInput = styled(props => {\n  return <input {...props} />;\n})`\n  ${inputStyles};\n  background-color: ${p => p.theme.offWhite};\n  border-right-width: 0;\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n\n  &:hover,\n  &:focus {\n    background-color: ${p => p.theme.offWhite};\n    border-right-width: 0;\n  }\n`;\n\nconst OverflowContainer = styled('div')`\n  flex-grow: 1;\n  border: none;\n`;\n\nconst StyledCopyButton = styled(Button)`\n  flex-shrink: 1;\n  border-radius: 0 0.25em 0.25em 0;\n  box-shadow: none;\n`;\n\nclass TextCopyInput extends React.Component {\n  static propTypes = {\n    /**\n     * Text to copy\n     */\n    children: PropTypes.string.isRequired,\n    /**\n     * CSS style object\n     */\n    style: PropTypes.object,\n    onCopy: PropTypes.func,\n  };\n\n  static defaultProps = {\n    onCopy: () => {},\n  };\n\n  constructor(props) {\n    super(props);\n    this.textRef = React.createRef();\n  }\n\n  // Select text when copy button is clicked\n  handleCopyClick = e => {\n    if (!this.textRef.current) {\n      return;\n    }\n\n    const {onCopy} = this.props;\n\n    this.handleSelectText();\n\n    onCopy(this.props.children, e);\n\n    e.stopPropagation();\n  };\n\n  handleSelectText = () => {\n    if (!this.textRef.current) {\n      return;\n    }\n\n    // We use findDOMNode here because `this.textRef` is not a dom node,\n    // it's a ref to AutoSelectText\n    selectText(ReactDOM.findDOMNode(this.textRef.current));\n  };\n\n  render() {\n    const {style, children} = this.props;\n\n    return (\n      <Flex>\n        <OverflowContainer>\n          <StyledInput\n            readOnly\n            ref={this.textRef}\n            style={style}\n            value={children}\n            onClick={this.handleSelectText}\n          />\n        </OverflowContainer>\n        <Clipboard hideUnsupported onClick={this.handleCopyClick} value={children}>\n          <StyledCopyButton type=\"button\" size=\"xsmall\" onClick={this.handleCopyClick}>\n            <InlineSvg src=\"icon-clipboard\" size=\"1.25em\" />\n          </StyledCopyButton>\n        </Clipboard>\n      </Flex>\n    );\n  }\n}\n\nexport default TextCopyInput;\n","import FormModel from 'app/views/settings/components/forms/model';\n\nexport default class MonitorModel extends FormModel {\n  getTransformedData() {\n    return Object.entries(this.fields.toJSON()).reduce((data, [k, v]) => {\n      if (k.indexOf('config.') === 0) {\n        if (!data.config) {\n          data.config = {};\n        }\n        if (k === 'config.schedule.frequency' || k === 'config.schedule.interval') {\n          if (!Array.isArray(data.config.schedule)) {\n            data.config.schedule = [null, null];\n          }\n        }\n\n        if (k === 'config.schedule.frequency') {\n          data.config.schedule[0] = parseInt(v, 10);\n        } else if (k === 'config.schedule.interval') {\n          data.config.schedule[1] = v;\n        } else {\n          data.config[k.substr(7)] = v;\n        }\n      } else {\n        data[k] = v;\n      }\n      return data;\n    }, {});\n  }\n\n  getTransformedValue(id) {\n    if (id.indexOf('config') === 0) {\n      return this.getValue(id);\n    }\n    return super.getTransformedValue(id);\n  }\n}\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {Observer} from 'mobx-react';\n\nimport Access from 'app/components/acl/access';\nimport Field from 'app/views/settings/components/forms/field';\nimport Form from 'app/views/settings/components/forms/form';\nimport NumberField from 'app/views/settings/components/forms/numberField';\nimport SelectField from 'app/views/settings/components/forms/selectField';\nimport TextCopyInput from 'app/views/settings/components/forms/textCopyInput';\nimport TextField from 'app/views/settings/components/forms/textField';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport SentryTypes from 'app/sentryTypes';\nimport {t, tct} from 'app/locale';\nimport withGlobalSelection from 'app/utils/withGlobalSelection';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport MonitorModel from './monitorModel';\n\nconst SCHEDULE_TYPES = [['crontab', 'Crontab'], ['interval', 'Interval']];\n\nconst MONITOR_TYPES = [['cron_job', 'Cron Job']];\n\nconst INTERVALS = [\n  ['minute', 'minute(s)'],\n  ['hour', 'hour(s)'],\n  ['day', 'day(s)'],\n  ['week', 'week(s)'],\n  ['month', 'month(s)'],\n  ['year', 'year(s)'],\n];\n\nclass MonitorForm extends Component {\n  static propTypes = {\n    monitor: SentryTypes.Monitor,\n    organization: SentryTypes.Organization.isRequired,\n    selection: SentryTypes.GlobalSelection,\n    apiEndpoint: PropTypes.string.isRequired,\n    apiMethod: PropTypes.string.isRequired,\n    onSubmitSuccess: PropTypes.func.isRequired,\n  };\n\n  constructor(...args) {\n    super(...args);\n    this.form = new MonitorModel();\n  }\n\n  formDataFromConfig(type, config) {\n    const rv = {};\n    switch (type) {\n      case 'cron_job':\n        rv['config.schedule_type'] = config.schedule_type;\n        rv['config.checkin_margin'] = config.checkin_margin;\n        rv['config.max_runtime'] = config.max_runtime;\n\n        switch (config.schedule_type) {\n          case 'interval':\n            rv['config.schedule.frequency'] = config.schedule[0];\n            rv['config.schedule.interval'] = config.schedule[1];\n            break;\n          case 'crontab':\n          default:\n            rv['config.schedule'] = config.schedule;\n        }\n        break;\n      default:\n    }\n    return rv;\n  }\n\n  render() {\n    const {monitor} = this.props;\n    const selectedProjectId = this.props.selection.projects[0];\n    const selectedProject = selectedProjectId\n      ? this.props.organization.projects.find(p => p.id === selectedProjectId + '')\n      : null;\n    return (\n      <Access access={['project:write']}>\n        {({hasAccess}) => (\n          <Form\n            allowUndo\n            requireChanges\n            apiEndpoint={this.props.apiEndpoint}\n            apiMethod={this.props.apiMethod}\n            model={this.form}\n            initialData={\n              monitor\n                ? {\n                    name: monitor.name,\n                    type: monitor.type,\n                    project: monitor.project.slug,\n                    ...this.formDataFromConfig(monitor.type, monitor.config),\n                  }\n                : {\n                    project: selectedProject ? selectedProject.slug : null,\n                  }\n            }\n            onSubmitSuccess={this.props.onSubmitSuccess}\n          >\n            <Panel>\n              <PanelHeader>{t('Details')}</PanelHeader>\n\n              <PanelBody>\n                {monitor && (\n                  <Field label={t('ID')}>\n                    <div className=\"controls\">\n                      <TextCopyInput>{monitor.id}</TextCopyInput>\n                    </div>\n                  </Field>\n                )}\n                <SelectField\n                  name=\"project\"\n                  label={t('Project')}\n                  disabled={!hasAccess}\n                  choices={this.props.organization.projects\n                    .filter(p => p.isMember)\n                    .map(p => {\n                      return [p.slug, p.slug];\n                    })}\n                  required\n                />\n                <TextField\n                  name=\"name\"\n                  placeholder={t('My Cron Job')}\n                  label={t('Name')}\n                  disabled={!hasAccess}\n                  required\n                />\n              </PanelBody>\n            </Panel>\n            <Panel>\n              <PanelHeader>{t('Config')}</PanelHeader>\n\n              <PanelBody>\n                <SelectField\n                  name=\"type\"\n                  label={t('Type')}\n                  disabled={!hasAccess}\n                  choices={MONITOR_TYPES}\n                  required\n                />\n                <Observer>\n                  {() => {\n                    switch (this.form.getValue('type')) {\n                      case 'cron_job':\n                        return (\n                          <React.Fragment>\n                            <NumberField\n                              name=\"config.max_runtime\"\n                              label={t('Max Runtime')}\n                              disabled={!hasAccess}\n                              help={t(\n                                \"The maximum runtime (in minutes) a check-in is allowed before it's marked as a failure.\"\n                              )}\n                              placeholder=\"e.g. 30\"\n                            />\n                            <SelectField\n                              name=\"config.schedule_type\"\n                              label={t('Schedule Type')}\n                              disabled={!hasAccess}\n                              choices={SCHEDULE_TYPES}\n                              required\n                            />\n                          </React.Fragment>\n                        );\n                      default:\n                        return null;\n                    }\n                  }}\n                </Observer>\n                <Observer>\n                  {() => {\n                    switch (this.form.getValue('config.schedule_type')) {\n                      case 'crontab':\n                        return (\n                          <React.Fragment>\n                            <TextField\n                              name=\"config.schedule\"\n                              label={t('Schedule')}\n                              disabled={!hasAccess}\n                              placeholder=\"*/5 * * *\"\n                              required\n                              help={tct(\n                                'Changes to the schedule will apply on the next check-in. See [link:Wikipedia] for crontab syntax.',\n                                {\n                                  link: <a href=\"https://en.wikipedia.org/wiki/Cron\" />,\n                                }\n                              )}\n                            />\n                            <NumberField\n                              name=\"config.checkin_margin\"\n                              label={t('Check-in Margin')}\n                              disabled={!hasAccess}\n                              help={t(\n                                \"The margin (in minutes) a check-in is allowed to exceed it's scheduled window before being treated as missed.\"\n                              )}\n                              placeholder=\"e.g. 30\"\n                            />\n                          </React.Fragment>\n                        );\n                      case 'interval':\n                        return (\n                          <React.Fragment>\n                            <NumberField\n                              name=\"config.schedule.frequency\"\n                              label={t('Frequency')}\n                              disabled={!hasAccess}\n                              placeholder=\"e.g. 1\"\n                              required\n                            />\n                            <SelectField\n                              name=\"config.schedule.interval\"\n                              label={t('Interval')}\n                              disabled={!hasAccess}\n                              choices={INTERVALS}\n                              required\n                            />\n                            <NumberField\n                              name=\"config.checkin_margin\"\n                              label={t('Check-in Margin')}\n                              disabled={!hasAccess}\n                              help={t(\n                                \"The margin (in minutes) a check-in is allowed to exceed it's scheduled window before being treated as missed.\"\n                              )}\n                              placeholder=\"e.g. 30\"\n                            />\n                          </React.Fragment>\n                        );\n                      default:\n                        return null;\n                    }\n                  }}\n                </Observer>\n              </PanelBody>\n            </Panel>\n          </Form>\n        )}\n      </Access>\n    );\n  }\n}\n\nexport default withGlobalSelection(withOrganization(MonitorForm));\n","import React from 'react';\nimport {browserHistory} from 'react-router';\n\nimport AsyncView from 'app/views/asyncView';\n\nimport MonitorForm from './monitorForm';\n\nexport default class CreateMonitor extends AsyncView {\n  getTitle() {\n    return `Monitors - ${this.props.params.orgId}`;\n  }\n\n  onSubmitSuccess = data => {\n    browserHistory.push(`/organizations/${this.props.params.orgId}/monitors/${data.id}/`);\n  };\n\n  renderBody() {\n    return (\n      <React.Fragment>\n        <h1>New Monitor</h1>\n        <MonitorForm\n          apiMethod=\"POST\"\n          apiEndpoint={`/organizations/${this.props.params.orgId}/monitors/`}\n          onSubmitSuccess={this.onSubmitSuccess}\n        />\n      </React.Fragment>\n    );\n  }\n}\n"],"sourceRoot":""}