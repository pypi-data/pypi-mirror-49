{"version":3,"sources":["webpack:///./app/views/userFeedback/container.jsx","webpack:///./app/views/userFeedback/projectUserFeedback.jsx"],"names":["UserFeedbackContainer","_this$props","this","props","_this$props$location","location","pathname","query","pageLinks","children","status","unresolvedQuery","lodash_omit__WEBPACK_IMPORTED_MODULE_6___default","allIssuesQuery","_babel_runtime_helpers_objectSpread__WEBPACK_IMPORTED_MODULE_0___default","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","className","style","marginBottom","app_components_pageHeading__WEBPACK_IMPORTED_MODULE_13__","withMargins","t","textAlign","marginTop","react_router__WEBPACK_IMPORTED_MODULE_8__","to","app_components_panels__WEBPACK_IMPORTED_MODULE_12__","app_components_pagination__WEBPACK_IMPORTED_MODULE_11__","React","Component","propTypes","PropTypes","object","isRequired","string","ProjectUserFeedback","createReactClass","displayName","organization","SentryTypes","Organization","defaultQuery","defaultStatus","setProjectNavSection","func","environment","Environment","contextTypes","project","Project","mixins","ApiMixin","ProjectState","getDefaultProps","getInitialState","reportList","loading","error","getQueryStringState","componentWillMount","orgId","params","Set","features","has","projectId","context","id","browserHistory","replace","concat","fetchData","componentWillReceiveProps","nextProps","nextSearchTerm","lodash_omit__WEBPACK_IMPORTED_MODULE_2___default","qs","parse","search","thisSearchTerm","lodash_isEqual__WEBPACK_IMPORTED_MODULE_1___default","setState","q","_this","per_page","state","name","api","request","success","data","_","jqXHR","issues","map","r","issue","GroupStore","add","getResponseHeader","getUserFeedbackUrl","renderStreamBody","react__WEBPACK_IMPORTED_MODULE_4___default","app_components_loadingIndicator__WEBPACK_IMPORTED_MODULE_14__","app_components_loadingError__WEBPACK_IMPORTED_MODULE_13__","onRetry","length","renderResults","renderNoQueryResults","renderEmpty","app_components_emptyStateWarning__WEBPACK_IMPORTED_MODULE_17__","message","tct","env","react_router__WEBPACK_IMPORTED_MODULE_6__","_this$props$params","item","app_components_compactIssue__WEBPACK_IMPORTED_MODULE_15__","key","app_components_events_userFeedback__WEBPACK_IMPORTED_MODULE_16__","report","issueId","render","_this$context","projectSlug","slug","orgName","react_document_title__WEBPACK_IMPORTED_MODULE_7___default","title","_container__WEBPACK_IMPORTED_MODULE_21__","withOrganization","withEnvironmentInQueryString"],"mappings":"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","file":"ProjectUserFeedback.js","sourcesContent":["import React from 'react';\nimport {Link} from 'react-router';\nimport PropTypes from 'prop-types';\nimport {omit} from 'lodash';\nimport {t} from 'app/locale';\nimport Pagination from 'app/components/pagination';\nimport {Panel, PanelBody} from 'app/components/panels';\nimport PageHeading from 'app/components/pageHeading';\n\nexport default class UserFeedbackContainer extends React.Component {\n  static propTypes = {\n    location: PropTypes.object.isRequired,\n    pageLinks: PropTypes.string,\n    status: PropTypes.string.isRequired,\n  };\n\n  render() {\n    const {location: {pathname, query}, pageLinks, children, status} = this.props;\n\n    const unresolvedQuery = omit(query, 'status');\n    const allIssuesQuery = {...query, status: ''};\n\n    return (\n      <div>\n        <div className=\"row\">\n          <div className=\"col-sm-9\" style={{marginBottom: '5px'}}>\n            <PageHeading withMargins>{t('User Feedback')}</PageHeading>\n          </div>\n          <div className=\"col-sm-3\" style={{textAlign: 'right', marginTop: '4px'}}>\n            <div className=\"btn-group\">\n              <Link\n                to={{pathname, query: unresolvedQuery}}\n                className={\n                  'btn btn-sm btn-default' + (status === 'unresolved' ? ' active' : '')\n                }\n              >\n                {t('Unresolved')}\n              </Link>\n              <Link\n                to={{pathname, query: allIssuesQuery}}\n                className={'btn btn-sm btn-default' + (status === '' ? ' active' : '')}\n              >\n                {t('All Issues')}\n              </Link>\n            </div>\n          </div>\n        </div>\n        <Panel>\n          <PanelBody className=\"issue-list\">{children}</PanelBody>\n        </Panel>\n        <Pagination pageLinks={pageLinks} />\n      </div>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport createReactClass from 'create-react-class';\nimport {Link, browserHistory} from 'react-router';\nimport DocumentTitle from 'react-document-title';\nimport qs from 'query-string';\nimport {omit, isEqual} from 'lodash';\n\nimport SentryTypes from 'app/sentryTypes';\nimport ApiMixin from 'app/mixins/apiMixin';\nimport ProjectState from 'app/mixins/projectState';\nimport GroupStore from 'app/stores/groupStore';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport CompactIssue from 'app/components/compactIssue';\nimport EventUserFeedback from 'app/components/events/userFeedback';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport {t, tct} from 'app/locale';\nimport withEnvironmentInQueryString from 'app/utils/withEnvironmentInQueryString';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport UserFeedbackContainer from './container';\n\nconst ProjectUserFeedback = createReactClass({\n  displayName: 'ProjectUserFeedback',\n\n  propTypes: {\n    organization: SentryTypes.Organization.isRequired,\n    defaultQuery: PropTypes.string,\n    defaultStatus: PropTypes.string,\n    setProjectNavSection: PropTypes.func,\n    environment: SentryTypes.Environment,\n  },\n\n  contextTypes: {\n    project: SentryTypes.Project,\n  },\n\n  mixins: [ApiMixin, ProjectState],\n\n  getDefaultProps() {\n    return {\n      defaultQuery: '',\n      defaultStatus: 'unresolved',\n    };\n  },\n\n  getInitialState() {\n    return {\n      reportList: [],\n      loading: true,\n      error: false,\n      pageLinks: '',\n      query: this.props.defaultQuery,\n      status: this.props.defaultStatus,\n      environment: this.props.environment,\n      ...this.getQueryStringState(this.props),\n    };\n  },\n\n  componentWillMount() {\n    // Redirect any Sentry 10 user that has followed an old link and ended up here\n    const {organization, params: {orgId}} = this.props;\n    const hasSentry10 = new Set(organization.features).has('sentry10');\n    if (hasSentry10) {\n      const projectId = this.context.project.id;\n      browserHistory.replace(\n        `/organizations/${orgId}/user-feedback/?project=${projectId}`\n      );\n    }\n\n    this.props.setProjectNavSection('user-feedback');\n    this.fetchData();\n  },\n\n  componentWillReceiveProps(nextProps) {\n    // Ignore changes to environment term since this is handled separately\n    const nextSearchTerm = omit(qs.parse(nextProps.location.search), 'environment');\n    const thisSearchTerm = omit(qs.parse(this.props.location.search), 'environment');\n\n    if (!isEqual(nextSearchTerm, thisSearchTerm)) {\n      this.setState(this.getQueryStringState(nextProps), this.fetchData);\n    }\n\n    if (nextProps.environment !== this.props.environment) {\n      this.setState(\n        {\n          environment: nextProps.environment,\n        },\n        this.fetchData\n      );\n    }\n  },\n\n  getQueryStringState(props) {\n    const q = props.location.query;\n    const status = 'status' in q ? q.status : this.props.defaultStatus;\n    const query = 'query' in q ? q.query : this.props.defaultQuery;\n\n    return {\n      query,\n      status,\n    };\n  },\n\n  fetchData() {\n    this.setState({\n      loading: true,\n      error: false,\n    });\n\n    const params = this.props.params;\n\n    const query = {\n      ...this.props.location.query,\n      per_page: 50,\n      query: this.state.query,\n      status: this.state.status,\n    };\n\n    if (this.state.environment) {\n      query.environment = this.state.environment.name;\n    } else {\n      delete query.environment;\n    }\n\n    this.api.request(`/projects/${params.orgId}/${params.projectId}/user-reports/`, {\n      query,\n      success: (data, _, jqXHR) => {\n        const issues = data.map(r => r.issue);\n        GroupStore.add(issues);\n        this.setState({\n          error: false,\n          loading: false,\n          reportList: data,\n          pageLinks: jqXHR.getResponseHeader('Link'),\n        });\n      },\n      error: () => {\n        this.setState({\n          error: true,\n          loading: false,\n        });\n      },\n    });\n  },\n\n  getUserFeedbackUrl() {\n    const params = this.props.params;\n\n    return `/${params.orgId}/${params.projectId}/settings/user-feedback/`;\n  },\n\n  renderStreamBody() {\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    } else if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    } else if (this.state.reportList.length > 0) {\n      return this.renderResults();\n    } else if (this.state.query && this.state.query !== this.props.defaultQuery) {\n      return this.renderNoQueryResults();\n    } else {\n      return this.renderEmpty();\n    }\n  },\n\n  renderNoQueryResults() {\n    return (\n      <EmptyStateWarning>\n        <p>{t('Sorry, no results match your search query.')}</p>\n      </EmptyStateWarning>\n    );\n  },\n\n  renderEmpty() {\n    const {environment} = this.state;\n    const message = environment\n      ? tct('No user reports have been collected from your [env] environment.', {\n          env: environment.displayName,\n        })\n      : t('No user reports have been collected.');\n    return (\n      <EmptyStateWarning>\n        <p>{message}</p>\n        <p>\n          <Link to={this.getUserFeedbackUrl()}>\n            {t('Learn how to integrate User Feedback')}\n          </Link>\n        </p>\n      </EmptyStateWarning>\n    );\n  },\n\n  renderResults() {\n    const {orgId, projectId} = this.props.params;\n\n    const children = this.state.reportList.map(item => {\n      const issue = item.issue;\n\n      return (\n        <CompactIssue key={item.id} id={issue.id} data={issue}>\n          <EventUserFeedback\n            report={item}\n            orgId={orgId}\n            projectId={projectId}\n            issueId={issue.id}\n          />\n        </CompactIssue>\n      );\n    });\n\n    return children;\n  },\n\n  render() {\n    const {location} = this.props;\n    const {project: {slug: projectSlug}, organization: {name: orgName}} = this.context;\n\n    return (\n      <DocumentTitle title={`User Feedback - ${projectSlug} - ${orgName} - Sentry`}>\n        <UserFeedbackContainer\n          pageLinks={this.state.pageLinks}\n          status={this.state.status}\n          location={location}\n        >\n          {this.renderStreamBody()}\n        </UserFeedbackContainer>\n      </DocumentTitle>\n    );\n  },\n});\n\nexport {ProjectUserFeedback};\nexport default withOrganization(withEnvironmentInQueryString(ProjectUserFeedback));\n"],"sourceRoot":""}