# -*- coding: utf-8 -*-

"""
    api_tester_upload_test

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from api_tester_upload_test.api_helper import APIHelper
from api_tester_upload_test.configuration import Configuration
from api_tester_upload_test.controllers.base_controller import BaseController
from api_tester_upload_test.http.auth.o_auth_2 import OAuth2
from api_tester_upload_test.models.delete_file_response import DeleteFileResponse
from api_tester_upload_test.models.list_folder_response import ListFolderResponse
from api_tester_upload_test.models.list_single_file_version_response import ListSingleFileVersionResponse
from api_tester_upload_test.models.create_folder_response import CreateFolderResponse

class FoldersOperationsController(BaseController):

    """A Controller to access Endpoints in the api_tester_upload_test API."""


    def delete_folder(self,
                      path,
                      commit=None,
                      force=None):
        """Does a DELETE request to /v2/folders/{path}.

        TODO: type endpoint description here.

        Args:
            path (string): TODO: type description here. Example: 
            commit (string, optional): TODO: type description here. Example: 
            force (string, optional): TODO: type description here. Example: 

        Returns:
            DeleteFileResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v2/folders/{path}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'path': path
        })
        _query_builder = Configuration.base_uri.format(Configuration.account_id)
        _query_builder += _url_path
        _query_parameters = {
            'commit': commit,
            'force': force
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.delete(_query_url, headers=_headers)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, DeleteFileResponse.from_dictionary)

    def list_folder(self,
                    path=None,
                    depth=None,
                    filter=None,
                    strict_traverse=None):
        """Does a GET request to /v2/folders/{path}.

        TODO: type endpoint description here.

        Args:
            path (string, optional): TODO: type description here. Example: 
            depth (string, optional): TODO: type description here. Example: 
            filter (string, optional): TODO: type description here. Example: 
            strict_traverse (string, optional): TODO: type description here.
                Example: 

        Returns:
            ListFolderResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v2/folders/{path}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'path': path
        })
        _query_builder = Configuration.base_uri.format(Configuration.account_id)
        _query_builder += _url_path
        _query_parameters = {
            'depth': depth,
            'filter': filter,
            'strict-traverse': strict_traverse
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ListFolderResponse.from_dictionary)

    def create_move_folder(self,
                           path,
                           to,
                           name,
                           exists=None):
        """Does a POST request to /v2/folders/{path}?operation=move.

        TODO: type endpoint description here.

        Args:
            path (string): TODO: type description here. Example: 
            to (string): TODO: type description here. Example: 
            name (string): TODO: type description here. Example: 
            exists (ExistsEnum, optional): TODO: type description here.
                Example: 

        Returns:
            ListSingleFileVersionResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v2/folders/{path}?operation=move'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'path': path
        })
        _query_builder = Configuration.base_uri.format(Configuration.account_id)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'to': to,
            'name': name,
            'exists': exists
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ListSingleFileVersionResponse.from_dictionary)

    def create_copy_folder(self,
                           path,
                           to,
                           name,
                           exists=None):
        """Does a POST request to /v2/folders/{path}?operation=copy.

        TODO: type endpoint description here.

        Args:
            path (string): TODO: type description here. Example: 
            to (string): TODO: type description here. Example: 
            name (string): TODO: type description here. Example: 
            exists (ExistsEnum, optional): TODO: type description here.
                Example: 

        Returns:
            ListSingleFileVersionResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v2/folders/{path}?operation=copy'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'path': path
        })
        _query_builder = Configuration.base_uri.format(Configuration.account_id)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'to': to,
            'name': name,
            'exists': exists
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ListSingleFileVersionResponse.from_dictionary)

    def get_folder_meta(self,
                        path):
        """Does a GET request to /v2/folders/{path}/meta.

        TODO: type endpoint description here.

        Args:
            path (string): TODO: type description here. Example: 

        Returns:
            ListSingleFileVersionResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v2/folders/{path}/meta'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'path': path
        })
        _query_builder = Configuration.base_uri.format(Configuration.account_id)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ListSingleFileVersionResponse.from_dictionary)

    def create_folder(self,
                      path,
                      name,
                      exists=None):
        """Does a POST request to /v2/folders/{path}?operation=create.

        TODO: type endpoint description here.

        Args:
            path (string): TODO: type description here. Example: 
            name (string): TODO: type description here. Example: 
            exists (ExistsEnum, optional): TODO: type description here.
                Example: 

        Returns:
            CreateFolderResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v2/folders/{path}?operation=create'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'path': path
        })
        _query_builder = Configuration.base_uri.format(Configuration.account_id)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'name': name,
            'exists': exists
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CreateFolderResponse.from_dictionary)

    def alter_folder_meta(self,
                          operation,
                          name,
                          version,
                          version_conflict,
                          path=None,
                          date_created=None,
                          date_meta_last_modified=None,
                          date_content_last_modified=None,
                          application_data=None):
        """Does a POST request to /v2/folders/{path}/meta.

        TODO: type endpoint description here.

        Args:
            operation (string): TODO: type description here. Example: 
            name (string): TODO: type description here. Example: 
            version (int): TODO: type description here. Example: 
            version_conflict (string): TODO: type description here. Example: 
            path (string, optional): TODO: type description here. Example: 
            date_created (datetime, optional): TODO: type description here.
                Example: 
            date_meta_last_modified (datetime, optional): TODO: type
                description here. Example: 
            date_content_last_modified (datetime, optional): TODO: type
                description here. Example: 
            application_data (object, optional): TODO: type description here.
                Example: 

        Returns:
            ListSingleFileVersionResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v2/folders/{path}/meta'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'operation': operation,
            'path': path
        })
        _query_builder = Configuration.base_uri.format(Configuration.account_id)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'name': name,
            'version': version,
            'version-conflict': version_conflict,
            'date_created': APIHelper.when_defined(APIHelper.RFC3339DateTime, date_created),
            'date_meta_last_modified': APIHelper.when_defined(APIHelper.RFC3339DateTime, date_meta_last_modified),
            'date_content_last_modified': APIHelper.when_defined(APIHelper.RFC3339DateTime, date_content_last_modified),
            'application_data': application_data
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ListSingleFileVersionResponse.from_dictionary)
