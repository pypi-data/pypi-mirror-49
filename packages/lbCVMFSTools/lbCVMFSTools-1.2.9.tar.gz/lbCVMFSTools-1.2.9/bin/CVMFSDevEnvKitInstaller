#!/usr/bin/env python

###############################################################################
# (c) Copyright 2016 CERN                                                     #
#                                                                             #
# This software is distributed under the terms of the GNU General Public      #
# Licence version 3 (GPL Version 3), copied verbatim in the file "COPYING".   #
#                                                                             #
# In applying this licence, CERN does not waive the privileges and immunities #
# granted to it by virtue of its status as an Intergovernmental Organization  #
# or submit itself to any jurisdiction.                                       #
###############################################################################
'''
Command line client that interfaces to the Installer class

:author: Stefan-Gabriel CHITIC
'''
from __future__ import print_function

import sys

from lbCVMFSTools.TaskHandlers.EnvKitInstaller.EnvKitInstaller import \
    EnvKitInstaller
from lbCVMFSTools.TransactionHandlers.CVMFSTransactionHandler.\
    CVMFSTranscationHandler import CVMFSTransactionHandler
from lbCVMFSTools.TransactionHandlers.DefaultTransactionHandler.\
    DefaultTransactionHandler import DefaultTransactionHandler
from lbCVMFSTools.GenericClient import GenericClient, ClientException


class CVMFSEnvKitInstallerClient(GenericClient, object):
    """ Main class for the tool """

    def __init__(self, prog, help):
        """ Common setup for both clients """
        super(CVMFSEnvKitInstallerClient, self).__init__(prog=prog,
                                                         help=help)

    def defineTaskHandler(self, args, opts):
        return EnvKitInstaller(args[1], args[2], args[3], args[4],
                               dry_run=self.dry_run)

    def defineTransitionHandler(self, args, opts):
        return CVMFSTransactionHandler(args[0], dry_run=opts.dry_run)
        # return DefaultTransactionHandler()

    def configureClient(self, args, opts):
        if len(args) < 4:
            raise ClientException("Repo name, flavour, platform, version"
                                  "needs to be provided")


def CVMFSEnvKitInstaller(prog="CVMFSTarInstallerClient",
                         help="repo_name url root prefix - installs a tar on"
                              " CVMFS"):
    """
    Default caller for command line CVMFSDevChecker client
    :param configType: the configuration used
    :param prog: the name of the executable
    """
    sys.exit(CVMFSEnvKitInstallerClient(prog=prog, help=help).main())

# Main just chooses the client and starts it
if __name__ == "__main__":
    CVMFSEnvKitInstaller()
