# coding: utf-8

"""
    Coinmarketcap API Swagger Implementation

    Define coinmarketcap's api in swagger 2.0 openapi standard  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CmcClient.models.cryptocurrency_info_urls import CryptocurrencyInfoUrls  # noqa: F401,E501
from CmcClient.models.platform import Platform  # noqa: F401,E501


class CryptocurrencyInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'symbol': 'str',
        'category': 'str',
        'slug': 'str',
        'logo': 'str',
        'tags': 'list[str]',
        'description': 'str',
        'date_added': 'datetime',
        'platform': 'Platform',
        'urls': 'CryptocurrencyInfoUrls'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'symbol': 'symbol',
        'category': 'category',
        'slug': 'slug',
        'logo': 'logo',
        'tags': 'tags',
        'description': 'description',
        'date_added': 'date_added',
        'platform': 'platform',
        'urls': 'urls'
    }

    def __init__(self, id=None, name=None, symbol=None, category=None, slug=None, logo=None, tags=None, description=None, date_added=None, platform=None, urls=None):  # noqa: E501
        """CryptocurrencyInfo - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._symbol = None
        self._category = None
        self._slug = None
        self._logo = None
        self._tags = None
        self._description = None
        self._date_added = None
        self._platform = None
        self._urls = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if symbol is not None:
            self.symbol = symbol
        if category is not None:
            self.category = category
        if slug is not None:
            self.slug = slug
        if logo is not None:
            self.logo = logo
        if tags is not None:
            self.tags = tags
        if description is not None:
            self.description = description
        if date_added is not None:
            self.date_added = date_added
        if platform is not None:
            self.platform = platform
        if urls is not None:
            self.urls = urls

    @property
    def id(self):
        """Gets the id of this CryptocurrencyInfo.  # noqa: E501


        :return: The id of this CryptocurrencyInfo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CryptocurrencyInfo.


        :param id: The id of this CryptocurrencyInfo.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CryptocurrencyInfo.  # noqa: E501


        :return: The name of this CryptocurrencyInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CryptocurrencyInfo.


        :param name: The name of this CryptocurrencyInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def symbol(self):
        """Gets the symbol of this CryptocurrencyInfo.  # noqa: E501


        :return: The symbol of this CryptocurrencyInfo.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this CryptocurrencyInfo.


        :param symbol: The symbol of this CryptocurrencyInfo.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def category(self):
        """Gets the category of this CryptocurrencyInfo.  # noqa: E501


        :return: The category of this CryptocurrencyInfo.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CryptocurrencyInfo.


        :param category: The category of this CryptocurrencyInfo.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def slug(self):
        """Gets the slug of this CryptocurrencyInfo.  # noqa: E501


        :return: The slug of this CryptocurrencyInfo.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this CryptocurrencyInfo.


        :param slug: The slug of this CryptocurrencyInfo.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def logo(self):
        """Gets the logo of this CryptocurrencyInfo.  # noqa: E501


        :return: The logo of this CryptocurrencyInfo.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this CryptocurrencyInfo.


        :param logo: The logo of this CryptocurrencyInfo.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def tags(self):
        """Gets the tags of this CryptocurrencyInfo.  # noqa: E501

        coin tags  # noqa: E501

        :return: The tags of this CryptocurrencyInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CryptocurrencyInfo.

        coin tags  # noqa: E501

        :param tags: The tags of this CryptocurrencyInfo.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def description(self):
        """Gets the description of this CryptocurrencyInfo.  # noqa: E501


        :return: The description of this CryptocurrencyInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CryptocurrencyInfo.


        :param description: The description of this CryptocurrencyInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def date_added(self):
        """Gets the date_added of this CryptocurrencyInfo.  # noqa: E501


        :return: The date_added of this CryptocurrencyInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._date_added

    @date_added.setter
    def date_added(self, date_added):
        """Sets the date_added of this CryptocurrencyInfo.


        :param date_added: The date_added of this CryptocurrencyInfo.  # noqa: E501
        :type: datetime
        """

        self._date_added = date_added

    @property
    def platform(self):
        """Gets the platform of this CryptocurrencyInfo.  # noqa: E501


        :return: The platform of this CryptocurrencyInfo.  # noqa: E501
        :rtype: Platform
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this CryptocurrencyInfo.


        :param platform: The platform of this CryptocurrencyInfo.  # noqa: E501
        :type: Platform
        """

        self._platform = platform

    @property
    def urls(self):
        """Gets the urls of this CryptocurrencyInfo.  # noqa: E501


        :return: The urls of this CryptocurrencyInfo.  # noqa: E501
        :rtype: CryptocurrencyInfoUrls
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this CryptocurrencyInfo.


        :param urls: The urls of this CryptocurrencyInfo.  # noqa: E501
        :type: CryptocurrencyInfoUrls
        """

        self._urls = urls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CryptocurrencyInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CryptocurrencyInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
