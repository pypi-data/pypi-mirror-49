update
******


Description
===========

Updates the specified Autonomous Database with a new CPU core count
and size.


Usage
=====

   oci db autonomous-database update [OPTIONS]


Options
=======


--autonomous-database-id [text]
-------------------------------

The database OCID. [required]


--cpu-core-count [integer]
--------------------------

The number of CPU cores to be made available to the database.


--data-storage-size-in-tbs [integer]
------------------------------------

The size, in terabytes, of the data volume that will be attached to
the database.


--display-name [text]
---------------------

The user-friendly name for the Autonomous Database. The name does not
have to be unique.


--admin-password [text]
-----------------------

The password must be between 12 and 30 characters long, and must
contain at least 1 uppercase, 1 lowercase, and 1 numeric character. It
cannot contain the double quote symbol (") or the username "admin",
regardless of casing. It must be different from the last four
passwords and it must not be a password used within the last 24 hours.


--db-name [text]
----------------

New name for this Autonomous Database. It must begin with an
alphabetic character and can contain a maximum of eight alphanumeric
characters. Special characters are not permitted. This is valid only
for dedicated databases.


--freeform-tags [complex type]
------------------------------

Free-form tags for this resource. Each tag is a simple key-value pair
with no predefined name, type, or namespace. For more information, see
Resource Tags.

Example: *{"Department": "Finance"}* This is a complex type whose
value must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The --generate-param-json-input option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


--defined-tags [complex type]
-----------------------------

Defined tags for this resource. Each key is predefined and scoped to a
namespace. For more information, see Resource Tags.

Example: *{"Operations": {"CostCenter": "42"}}* This is a complex type
whose value must be valid JSON. The value can be provided as a string
on the command line or passed in as a file using the
file://path/to/file syntax.

The --generate-param-json-input option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


--license-model [LICENSE_INCLUDED|BRING_YOUR_OWN_LICENSE]
---------------------------------------------------------

The new Oracle license model that applies to the Oracle Autonomous
Transaction Processing database.


--whitelisted-ips [complex type]
--------------------------------

The client IP access control list (ACL). Only clients connecting from
an IP address included in the ACL may access the Autonomous Database
instance. This is an array of CIDR (Classless Inter-Domain Routing)
notations for a subnet. To delete all the existing white listed IPâ€™s,
use an array with a single empty string entry. This is a complex type
whose value must be valid JSON. The value can be provided as a string
on the command line or passed in as a file using the
file://path/to/file syntax.

The --generate-param-json-input option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


--is-auto-scaling-enabled [boolean]
-----------------------------------

Indicates if auto scaling is enabled for the Autonomous Database CPU
core count. The default value is false.


--if-match [text]
-----------------

For optimistic concurrency control. In the PUT or DELETE call for a
resource, set the *if-match* parameter to the value of the etag from a
previous GET or POST response for that resource.  The resource will be
updated or deleted only if the etag you provide matches the resource's
current etag value.


--force
-------

Perform update without prompting for confirmation.


--wait-for-state [PROVISIONING|AVAILABLE|STOPPING|STOPPED|STARTING|TERMINATING|TERMINATED|UNAVAILABLE|RESTORE_IN_PROGRESS|RESTORE_FAILED|BACKUP_IN_PROGRESS|SCALE_IN_PROGRESS|AVAILABLE_NEEDS_ATTENTION|UPDATING|MAINTENANCE_IN_PROGRESS]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

This operation creates, modifies or deletes a resource that has a
defined lifecycle state. Specify this option to perform the action and
then wait until the resource reaches a given lifecycle state. If
timeout is reached, a return code of 2 is returned. For any other
error, a return code of 1 is returned.


--max-wait-seconds [integer]
----------------------------

The maximum time to wait for the resource to reach the lifecycle state
defined by --wait-for-state. Defaults to 1200 seconds.


--wait-interval-seconds [integer]
---------------------------------

Check every --wait-interval-seconds to see whether the resource to see
if it has reached the lifecycle state defined by --wait-for-state.
Defaults to 30 seconds.


--from-json [text]
------------------

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The --generate-full-command-json-input option can be used to generate
a sample json file to be used with this command option. The key names
are pre-populated and match the command option names (converted to
camelCase format, e.g. compartment-id --> compartmentId), while the
values of the keys need to be populated by the user before using the
sample file as an input to this command. For any command option that
accepts multiple values, the value of the key can be a JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our "using CLI with
advanced JSON options" link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions


-?, -h, --help
--------------

For detailed help on any of these individual commands, enter <command>
--help.
