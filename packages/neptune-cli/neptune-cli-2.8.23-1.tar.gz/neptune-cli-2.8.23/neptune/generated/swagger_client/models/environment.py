# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class Environment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, display_name=None, name=None, repository=None, url=None, description=None, tag=None, python_version=None, is_gpu=None, is_default=None):
        """
        Environment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'display_name': 'str',
            'name': 'str',
            'repository': 'str',
            'url': 'str',
            'description': 'str',
            'tag': 'str',
            'python_version': 'PythonVersionEnum',
            'is_gpu': 'bool',
            'is_default': 'bool'
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'name': 'name',
            'repository': 'repository',
            'url': 'url',
            'description': 'description',
            'tag': 'tag',
            'python_version': 'pythonVersion',
            'is_gpu': 'isGPU',
            'is_default': 'isDefault'
        }

        self._display_name = display_name
        self._name = name
        self._repository = repository
        self._url = url
        self._description = description
        self._tag = tag
        self._python_version = python_version
        self._is_gpu = is_gpu
        self._is_default = is_default

    @property
    def display_name(self):
        """
        Gets the display_name of this Environment.


        :return: The display_name of this Environment.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this Environment.


        :param display_name: The display_name of this Environment.
        :type: str
        """
        
        self._display_name = display_name

    @property
    def name(self):
        """
        Gets the name of this Environment.


        :return: The name of this Environment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Environment.


        :param name: The name of this Environment.
        :type: str
        """
        
        self._name = name

    @property
    def repository(self):
        """
        Gets the repository of this Environment.


        :return: The repository of this Environment.
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """
        Sets the repository of this Environment.


        :param repository: The repository of this Environment.
        :type: str
        """
        
        self._repository = repository

    @property
    def url(self):
        """
        Gets the url of this Environment.


        :return: The url of this Environment.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this Environment.


        :param url: The url of this Environment.
        :type: str
        """
        
        self._url = url

    @property
    def description(self):
        """
        Gets the description of this Environment.


        :return: The description of this Environment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Environment.


        :param description: The description of this Environment.
        :type: str
        """
        
        self._description = description

    @property
    def tag(self):
        """
        Gets the tag of this Environment.


        :return: The tag of this Environment.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this Environment.


        :param tag: The tag of this Environment.
        :type: str
        """
        
        self._tag = tag

    @property
    def python_version(self):
        """
        Gets the python_version of this Environment.


        :return: The python_version of this Environment.
        :rtype: PythonVersionEnum
        """
        return self._python_version

    @python_version.setter
    def python_version(self, python_version):
        """
        Sets the python_version of this Environment.


        :param python_version: The python_version of this Environment.
        :type: PythonVersionEnum
        """
        
        self._python_version = python_version

    @property
    def is_gpu(self):
        """
        Gets the is_gpu of this Environment.


        :return: The is_gpu of this Environment.
        :rtype: bool
        """
        return self._is_gpu

    @is_gpu.setter
    def is_gpu(self, is_gpu):
        """
        Sets the is_gpu of this Environment.


        :param is_gpu: The is_gpu of this Environment.
        :type: bool
        """
        
        self._is_gpu = is_gpu

    @property
    def is_default(self):
        """
        Gets the is_default of this Environment.


        :return: The is_default of this Environment.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """
        Sets the is_default of this Environment.


        :param is_default: The is_default of this Environment.
        :type: bool
        """
        
        self._is_default = is_default

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




