# -*- coding: utf-8 -*-

"""
    api_tester_upload_test

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import api_tester_upload_test.models.result_share
import api_tester_upload_test.models.meta

class BrowseShareResult(object):

    """Implementation of the 'BrowseShareResult' model.

    TODO: type model description here.

    Attributes:
        share (ResultShare): TODO: type description here.
        meta (Meta): TODO: type description here.
        items (list of Meta): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "share":'share',
        "meta":'meta',
        "items":'items'
    }

    def __init__(self,
                 share=None,
                 meta=None,
                 items=None):
        """Constructor for the BrowseShareResult class"""

        # Initialize members of the class
        self.share = share
        self.meta = meta
        self.items = items


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        share = api_tester_upload_test.models.result_share.ResultShare.from_dictionary(dictionary.get('share')) if dictionary.get('share') else None
        meta = api_tester_upload_test.models.meta.Meta.from_dictionary(dictionary.get('meta')) if dictionary.get('meta') else None
        items = None
        if dictionary.get('items') != None:
            items = list()
            for structure in dictionary.get('items'):
                items.append(api_tester_upload_test.models.meta.Meta.from_dictionary(structure))

        # Return an object of this model
        return cls(share,
                   meta,
                   items)


