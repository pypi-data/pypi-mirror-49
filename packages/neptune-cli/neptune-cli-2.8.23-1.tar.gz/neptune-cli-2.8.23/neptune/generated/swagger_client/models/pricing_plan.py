# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class PricingPlan(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, private_project_transfer_quota=None, initial_bonus=None, name=None, free_storage=None, organization_transfer_quota=None, user_price=None, public_project_transfer_quota=None, storage_price=None, private_projects=None, max_concurrent_experiments_per_user=None, id=None, workers_pricing=None, available=None, transfer_price=None):
        """
        PricingPlan - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'private_project_transfer_quota': 'int',
            'initial_bonus': 'float',
            'name': 'str',
            'free_storage': 'int',
            'organization_transfer_quota': 'int',
            'user_price': 'float',
            'public_project_transfer_quota': 'int',
            'storage_price': 'float',
            'private_projects': 'bool',
            'max_concurrent_experiments_per_user': 'int',
            'id': 'str',
            'workers_pricing': 'list[WorkerPricing]',
            'available': 'bool',
            'transfer_price': 'float'
        }

        self.attribute_map = {
            'private_project_transfer_quota': 'privateProjectTransferQuota',
            'initial_bonus': 'initialBonus',
            'name': 'name',
            'free_storage': 'freeStorage',
            'organization_transfer_quota': 'organizationTransferQuota',
            'user_price': 'userPrice',
            'public_project_transfer_quota': 'publicProjectTransferQuota',
            'storage_price': 'storagePrice',
            'private_projects': 'privateProjects',
            'max_concurrent_experiments_per_user': 'maxConcurrentExperimentsPerUser',
            'id': 'id',
            'workers_pricing': 'workersPricing',
            'available': 'available',
            'transfer_price': 'transferPrice'
        }

        self._private_project_transfer_quota = private_project_transfer_quota
        self._initial_bonus = initial_bonus
        self._name = name
        self._free_storage = free_storage
        self._organization_transfer_quota = organization_transfer_quota
        self._user_price = user_price
        self._public_project_transfer_quota = public_project_transfer_quota
        self._storage_price = storage_price
        self._private_projects = private_projects
        self._max_concurrent_experiments_per_user = max_concurrent_experiments_per_user
        self._id = id
        self._workers_pricing = workers_pricing
        self._available = available
        self._transfer_price = transfer_price

    @property
    def private_project_transfer_quota(self):
        """
        Gets the private_project_transfer_quota of this PricingPlan.


        :return: The private_project_transfer_quota of this PricingPlan.
        :rtype: int
        """
        return self._private_project_transfer_quota

    @private_project_transfer_quota.setter
    def private_project_transfer_quota(self, private_project_transfer_quota):
        """
        Sets the private_project_transfer_quota of this PricingPlan.


        :param private_project_transfer_quota: The private_project_transfer_quota of this PricingPlan.
        :type: int
        """
        
        self._private_project_transfer_quota = private_project_transfer_quota

    @property
    def initial_bonus(self):
        """
        Gets the initial_bonus of this PricingPlan.


        :return: The initial_bonus of this PricingPlan.
        :rtype: float
        """
        return self._initial_bonus

    @initial_bonus.setter
    def initial_bonus(self, initial_bonus):
        """
        Sets the initial_bonus of this PricingPlan.


        :param initial_bonus: The initial_bonus of this PricingPlan.
        :type: float
        """
        
        self._initial_bonus = initial_bonus

    @property
    def name(self):
        """
        Gets the name of this PricingPlan.


        :return: The name of this PricingPlan.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PricingPlan.


        :param name: The name of this PricingPlan.
        :type: str
        """
        
        self._name = name

    @property
    def free_storage(self):
        """
        Gets the free_storage of this PricingPlan.


        :return: The free_storage of this PricingPlan.
        :rtype: int
        """
        return self._free_storage

    @free_storage.setter
    def free_storage(self, free_storage):
        """
        Sets the free_storage of this PricingPlan.


        :param free_storage: The free_storage of this PricingPlan.
        :type: int
        """
        
        self._free_storage = free_storage

    @property
    def organization_transfer_quota(self):
        """
        Gets the organization_transfer_quota of this PricingPlan.


        :return: The organization_transfer_quota of this PricingPlan.
        :rtype: int
        """
        return self._organization_transfer_quota

    @organization_transfer_quota.setter
    def organization_transfer_quota(self, organization_transfer_quota):
        """
        Sets the organization_transfer_quota of this PricingPlan.


        :param organization_transfer_quota: The organization_transfer_quota of this PricingPlan.
        :type: int
        """
        
        self._organization_transfer_quota = organization_transfer_quota

    @property
    def user_price(self):
        """
        Gets the user_price of this PricingPlan.


        :return: The user_price of this PricingPlan.
        :rtype: float
        """
        return self._user_price

    @user_price.setter
    def user_price(self, user_price):
        """
        Sets the user_price of this PricingPlan.


        :param user_price: The user_price of this PricingPlan.
        :type: float
        """
        
        self._user_price = user_price

    @property
    def public_project_transfer_quota(self):
        """
        Gets the public_project_transfer_quota of this PricingPlan.


        :return: The public_project_transfer_quota of this PricingPlan.
        :rtype: int
        """
        return self._public_project_transfer_quota

    @public_project_transfer_quota.setter
    def public_project_transfer_quota(self, public_project_transfer_quota):
        """
        Sets the public_project_transfer_quota of this PricingPlan.


        :param public_project_transfer_quota: The public_project_transfer_quota of this PricingPlan.
        :type: int
        """
        
        self._public_project_transfer_quota = public_project_transfer_quota

    @property
    def storage_price(self):
        """
        Gets the storage_price of this PricingPlan.


        :return: The storage_price of this PricingPlan.
        :rtype: float
        """
        return self._storage_price

    @storage_price.setter
    def storage_price(self, storage_price):
        """
        Sets the storage_price of this PricingPlan.


        :param storage_price: The storage_price of this PricingPlan.
        :type: float
        """
        
        self._storage_price = storage_price

    @property
    def private_projects(self):
        """
        Gets the private_projects of this PricingPlan.


        :return: The private_projects of this PricingPlan.
        :rtype: bool
        """
        return self._private_projects

    @private_projects.setter
    def private_projects(self, private_projects):
        """
        Sets the private_projects of this PricingPlan.


        :param private_projects: The private_projects of this PricingPlan.
        :type: bool
        """
        
        self._private_projects = private_projects

    @property
    def max_concurrent_experiments_per_user(self):
        """
        Gets the max_concurrent_experiments_per_user of this PricingPlan.


        :return: The max_concurrent_experiments_per_user of this PricingPlan.
        :rtype: int
        """
        return self._max_concurrent_experiments_per_user

    @max_concurrent_experiments_per_user.setter
    def max_concurrent_experiments_per_user(self, max_concurrent_experiments_per_user):
        """
        Sets the max_concurrent_experiments_per_user of this PricingPlan.


        :param max_concurrent_experiments_per_user: The max_concurrent_experiments_per_user of this PricingPlan.
        :type: int
        """
        
        self._max_concurrent_experiments_per_user = max_concurrent_experiments_per_user

    @property
    def id(self):
        """
        Gets the id of this PricingPlan.


        :return: The id of this PricingPlan.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PricingPlan.


        :param id: The id of this PricingPlan.
        :type: str
        """
        
        self._id = id

    @property
    def workers_pricing(self):
        """
        Gets the workers_pricing of this PricingPlan.


        :return: The workers_pricing of this PricingPlan.
        :rtype: list[WorkerPricing]
        """
        return self._workers_pricing

    @workers_pricing.setter
    def workers_pricing(self, workers_pricing):
        """
        Sets the workers_pricing of this PricingPlan.


        :param workers_pricing: The workers_pricing of this PricingPlan.
        :type: list[WorkerPricing]
        """
        
        self._workers_pricing = workers_pricing

    @property
    def available(self):
        """
        Gets the available of this PricingPlan.


        :return: The available of this PricingPlan.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """
        Sets the available of this PricingPlan.


        :param available: The available of this PricingPlan.
        :type: bool
        """
        
        self._available = available

    @property
    def transfer_price(self):
        """
        Gets the transfer_price of this PricingPlan.


        :return: The transfer_price of this PricingPlan.
        :rtype: float
        """
        return self._transfer_price

    @transfer_price.setter
    def transfer_price(self, transfer_price):
        """
        Sets the transfer_price of this PricingPlan.


        :param transfer_price: The transfer_price of this PricingPlan.
        :type: float
        """
        
        self._transfer_price = transfer_price

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




