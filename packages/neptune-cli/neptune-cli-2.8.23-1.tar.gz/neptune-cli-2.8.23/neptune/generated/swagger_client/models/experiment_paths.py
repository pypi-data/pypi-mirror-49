# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ExperimentPaths(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, source=None, backup=None, location=None, entry_point=None, stdout=None, stderr=None, config_path=None, output=None):
        """
        ExperimentPaths - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'source': 'str',
            'backup': 'str',
            'location': 'str',
            'entry_point': 'str',
            'stdout': 'str',
            'stderr': 'str',
            'config_path': 'str',
            'output': 'str'
        }

        self.attribute_map = {
            'source': 'source',
            'backup': 'backup',
            'location': 'location',
            'entry_point': 'entryPoint',
            'stdout': 'stdout',
            'stderr': 'stderr',
            'config_path': 'configPath',
            'output': 'output'
        }

        self._source = source
        self._backup = backup
        self._location = location
        self._entry_point = entry_point
        self._stdout = stdout
        self._stderr = stderr
        self._config_path = config_path
        self._output = output

    @property
    def source(self):
        """
        Gets the source of this ExperimentPaths.


        :return: The source of this ExperimentPaths.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this ExperimentPaths.


        :param source: The source of this ExperimentPaths.
        :type: str
        """
        
        self._source = source

    @property
    def backup(self):
        """
        Gets the backup of this ExperimentPaths.


        :return: The backup of this ExperimentPaths.
        :rtype: str
        """
        return self._backup

    @backup.setter
    def backup(self, backup):
        """
        Sets the backup of this ExperimentPaths.


        :param backup: The backup of this ExperimentPaths.
        :type: str
        """
        
        self._backup = backup

    @property
    def location(self):
        """
        Gets the location of this ExperimentPaths.


        :return: The location of this ExperimentPaths.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this ExperimentPaths.


        :param location: The location of this ExperimentPaths.
        :type: str
        """
        
        self._location = location

    @property
    def entry_point(self):
        """
        Gets the entry_point of this ExperimentPaths.


        :return: The entry_point of this ExperimentPaths.
        :rtype: str
        """
        return self._entry_point

    @entry_point.setter
    def entry_point(self, entry_point):
        """
        Sets the entry_point of this ExperimentPaths.


        :param entry_point: The entry_point of this ExperimentPaths.
        :type: str
        """
        
        self._entry_point = entry_point

    @property
    def stdout(self):
        """
        Gets the stdout of this ExperimentPaths.


        :return: The stdout of this ExperimentPaths.
        :rtype: str
        """
        return self._stdout

    @stdout.setter
    def stdout(self, stdout):
        """
        Sets the stdout of this ExperimentPaths.


        :param stdout: The stdout of this ExperimentPaths.
        :type: str
        """
        
        self._stdout = stdout

    @property
    def stderr(self):
        """
        Gets the stderr of this ExperimentPaths.


        :return: The stderr of this ExperimentPaths.
        :rtype: str
        """
        return self._stderr

    @stderr.setter
    def stderr(self, stderr):
        """
        Sets the stderr of this ExperimentPaths.


        :param stderr: The stderr of this ExperimentPaths.
        :type: str
        """
        
        self._stderr = stderr

    @property
    def config_path(self):
        """
        Gets the config_path of this ExperimentPaths.


        :return: The config_path of this ExperimentPaths.
        :rtype: str
        """
        return self._config_path

    @config_path.setter
    def config_path(self, config_path):
        """
        Sets the config_path of this ExperimentPaths.


        :param config_path: The config_path of this ExperimentPaths.
        :type: str
        """
        
        self._config_path = config_path

    @property
    def output(self):
        """
        Gets the output of this ExperimentPaths.


        :return: The output of this ExperimentPaths.
        :rtype: str
        """
        return self._output

    @output.setter
    def output(self, output):
        """
        Sets the output of this ExperimentPaths.


        :param output: The output of this ExperimentPaths.
        :type: str
        """
        
        self._output = output

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




