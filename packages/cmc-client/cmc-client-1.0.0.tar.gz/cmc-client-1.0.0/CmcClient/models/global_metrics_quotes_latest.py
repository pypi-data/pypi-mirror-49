# coding: utf-8

"""
    Coinmarketcap API Swagger Implementation

    Define coinmarketcap's api in swagger 2.0 openapi standard  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CmcClient.models.global_metrics_quote import GlobalMetricsQuote  # noqa: F401,E501


class GlobalMetricsQuotesLatest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'btc_dominance': 'float',
        'eth_dominance': 'float',
        'active_cryptocurrencies': 'int',
        'active_market_pairs': 'int',
        'active_exchanges': 'int',
        'last_updated': 'datetime',
        'quote': 'dict(str, GlobalMetricsQuote)'
    }

    attribute_map = {
        'btc_dominance': 'btc_dominance',
        'eth_dominance': 'eth_dominance',
        'active_cryptocurrencies': 'active_cryptocurrencies',
        'active_market_pairs': 'active_market_pairs',
        'active_exchanges': 'active_exchanges',
        'last_updated': 'last_updated',
        'quote': 'quote'
    }

    def __init__(self, btc_dominance=None, eth_dominance=None, active_cryptocurrencies=None, active_market_pairs=None, active_exchanges=None, last_updated=None, quote=None):  # noqa: E501
        """GlobalMetricsQuotesLatest - a model defined in Swagger"""  # noqa: E501

        self._btc_dominance = None
        self._eth_dominance = None
        self._active_cryptocurrencies = None
        self._active_market_pairs = None
        self._active_exchanges = None
        self._last_updated = None
        self._quote = None
        self.discriminator = None

        if btc_dominance is not None:
            self.btc_dominance = btc_dominance
        if eth_dominance is not None:
            self.eth_dominance = eth_dominance
        if active_cryptocurrencies is not None:
            self.active_cryptocurrencies = active_cryptocurrencies
        if active_market_pairs is not None:
            self.active_market_pairs = active_market_pairs
        if active_exchanges is not None:
            self.active_exchanges = active_exchanges
        if last_updated is not None:
            self.last_updated = last_updated
        if quote is not None:
            self.quote = quote

    @property
    def btc_dominance(self):
        """Gets the btc_dominance of this GlobalMetricsQuotesLatest.  # noqa: E501


        :return: The btc_dominance of this GlobalMetricsQuotesLatest.  # noqa: E501
        :rtype: float
        """
        return self._btc_dominance

    @btc_dominance.setter
    def btc_dominance(self, btc_dominance):
        """Sets the btc_dominance of this GlobalMetricsQuotesLatest.


        :param btc_dominance: The btc_dominance of this GlobalMetricsQuotesLatest.  # noqa: E501
        :type: float
        """

        self._btc_dominance = btc_dominance

    @property
    def eth_dominance(self):
        """Gets the eth_dominance of this GlobalMetricsQuotesLatest.  # noqa: E501


        :return: The eth_dominance of this GlobalMetricsQuotesLatest.  # noqa: E501
        :rtype: float
        """
        return self._eth_dominance

    @eth_dominance.setter
    def eth_dominance(self, eth_dominance):
        """Sets the eth_dominance of this GlobalMetricsQuotesLatest.


        :param eth_dominance: The eth_dominance of this GlobalMetricsQuotesLatest.  # noqa: E501
        :type: float
        """

        self._eth_dominance = eth_dominance

    @property
    def active_cryptocurrencies(self):
        """Gets the active_cryptocurrencies of this GlobalMetricsQuotesLatest.  # noqa: E501


        :return: The active_cryptocurrencies of this GlobalMetricsQuotesLatest.  # noqa: E501
        :rtype: int
        """
        return self._active_cryptocurrencies

    @active_cryptocurrencies.setter
    def active_cryptocurrencies(self, active_cryptocurrencies):
        """Sets the active_cryptocurrencies of this GlobalMetricsQuotesLatest.


        :param active_cryptocurrencies: The active_cryptocurrencies of this GlobalMetricsQuotesLatest.  # noqa: E501
        :type: int
        """

        self._active_cryptocurrencies = active_cryptocurrencies

    @property
    def active_market_pairs(self):
        """Gets the active_market_pairs of this GlobalMetricsQuotesLatest.  # noqa: E501


        :return: The active_market_pairs of this GlobalMetricsQuotesLatest.  # noqa: E501
        :rtype: int
        """
        return self._active_market_pairs

    @active_market_pairs.setter
    def active_market_pairs(self, active_market_pairs):
        """Sets the active_market_pairs of this GlobalMetricsQuotesLatest.


        :param active_market_pairs: The active_market_pairs of this GlobalMetricsQuotesLatest.  # noqa: E501
        :type: int
        """

        self._active_market_pairs = active_market_pairs

    @property
    def active_exchanges(self):
        """Gets the active_exchanges of this GlobalMetricsQuotesLatest.  # noqa: E501


        :return: The active_exchanges of this GlobalMetricsQuotesLatest.  # noqa: E501
        :rtype: int
        """
        return self._active_exchanges

    @active_exchanges.setter
    def active_exchanges(self, active_exchanges):
        """Sets the active_exchanges of this GlobalMetricsQuotesLatest.


        :param active_exchanges: The active_exchanges of this GlobalMetricsQuotesLatest.  # noqa: E501
        :type: int
        """

        self._active_exchanges = active_exchanges

    @property
    def last_updated(self):
        """Gets the last_updated of this GlobalMetricsQuotesLatest.  # noqa: E501


        :return: The last_updated of this GlobalMetricsQuotesLatest.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this GlobalMetricsQuotesLatest.


        :param last_updated: The last_updated of this GlobalMetricsQuotesLatest.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def quote(self):
        """Gets the quote of this GlobalMetricsQuotesLatest.  # noqa: E501


        :return: The quote of this GlobalMetricsQuotesLatest.  # noqa: E501
        :rtype: dict(str, GlobalMetricsQuote)
        """
        return self._quote

    @quote.setter
    def quote(self, quote):
        """Sets the quote of this GlobalMetricsQuotesLatest.


        :param quote: The quote of this GlobalMetricsQuotesLatest.  # noqa: E501
        :type: dict(str, GlobalMetricsQuote)
        """

        self._quote = quote

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GlobalMetricsQuotesLatest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GlobalMetricsQuotesLatest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
