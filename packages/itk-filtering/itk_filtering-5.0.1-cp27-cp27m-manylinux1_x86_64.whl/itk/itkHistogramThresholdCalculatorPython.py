# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkHistogramThresholdCalculatorPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkHistogramThresholdCalculatorPython', [dirname(__file__)])
        except ImportError:
            import _itkHistogramThresholdCalculatorPython
            return _itkHistogramThresholdCalculatorPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkHistogramThresholdCalculatorPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkHistogramThresholdCalculatorPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkHistogramThresholdCalculatorPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkSimpleDataObjectDecoratorPython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import stdcomplexPython
import pyBasePython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkArrayPython
import ITKCommonBasePython
import itkHistogramPython
import itkSamplePython

def itkHistogramThresholdCalculatorHFF_New():
  return itkHistogramThresholdCalculatorHFF.New()


def itkHistogramThresholdCalculatorHDF_New():
  return itkHistogramThresholdCalculatorHDF.New()


def itkHistogramThresholdCalculatorHFUS_New():
  return itkHistogramThresholdCalculatorHFUS.New()


def itkHistogramThresholdCalculatorHDUS_New():
  return itkHistogramThresholdCalculatorHDUS.New()


def itkHistogramThresholdCalculatorHFUC_New():
  return itkHistogramThresholdCalculatorHFUC.New()


def itkHistogramThresholdCalculatorHDUC_New():
  return itkHistogramThresholdCalculatorHDUC.New()


def itkHistogramThresholdCalculatorHFSS_New():
  return itkHistogramThresholdCalculatorHFSS.New()


def itkHistogramThresholdCalculatorHDSS_New():
  return itkHistogramThresholdCalculatorHDSS.New()

class itkHistogramThresholdCalculatorHDF(ITKCommonBasePython.itkProcessObject):
    """


    Base class to compute a threshold value based on the histogram of an
    image.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    C++ includes: itkHistogramThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkHistogramThresholdCalculatorHDF_Pointer"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkHistogramThresholdCalculatorHDF self) -> itkHistogramThresholdCalculatorHDF_Pointer"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDF_Clone(self)


    def SetInput(self, input):
        """SetInput(itkHistogramThresholdCalculatorHDF self, itkHistogramD input)"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDF_SetInput(self, input)


    def GetInput(self):
        """GetInput(itkHistogramThresholdCalculatorHDF self) -> itkHistogramD"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDF_GetInput(self)


    def GetOutput(self):
        """GetOutput(itkHistogramThresholdCalculatorHDF self) -> itkSimpleDataObjectDecoratorF"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDF_GetOutput(self)


    def GetThreshold(self):
        """GetThreshold(itkHistogramThresholdCalculatorHDF self) -> float const &"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDF_GetThreshold(self)

    __swig_destroy__ = _itkHistogramThresholdCalculatorPython.delete_itkHistogramThresholdCalculatorHDF

    def cast(obj):
        """cast(itkLightObject obj) -> itkHistogramThresholdCalculatorHDF"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramThresholdCalculatorHDF

        Create a new object of the class itkHistogramThresholdCalculatorHDF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramThresholdCalculatorHDF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramThresholdCalculatorHDF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramThresholdCalculatorHDF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramThresholdCalculatorHDF.Clone = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDF_Clone, None, itkHistogramThresholdCalculatorHDF)
itkHistogramThresholdCalculatorHDF.SetInput = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDF_SetInput, None, itkHistogramThresholdCalculatorHDF)
itkHistogramThresholdCalculatorHDF.GetInput = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDF_GetInput, None, itkHistogramThresholdCalculatorHDF)
itkHistogramThresholdCalculatorHDF.GetOutput = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDF_GetOutput, None, itkHistogramThresholdCalculatorHDF)
itkHistogramThresholdCalculatorHDF.GetThreshold = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDF_GetThreshold, None, itkHistogramThresholdCalculatorHDF)
itkHistogramThresholdCalculatorHDF_swigregister = _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDF_swigregister
itkHistogramThresholdCalculatorHDF_swigregister(itkHistogramThresholdCalculatorHDF)

def itkHistogramThresholdCalculatorHDF___New_orig__():
    """itkHistogramThresholdCalculatorHDF___New_orig__() -> itkHistogramThresholdCalculatorHDF_Pointer"""
    return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDF___New_orig__()

def itkHistogramThresholdCalculatorHDF_cast(obj):
    """itkHistogramThresholdCalculatorHDF_cast(itkLightObject obj) -> itkHistogramThresholdCalculatorHDF"""
    return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDF_cast(obj)

class itkHistogramThresholdCalculatorHDSS(ITKCommonBasePython.itkProcessObject):
    """


    Base class to compute a threshold value based on the histogram of an
    image.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    C++ includes: itkHistogramThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkHistogramThresholdCalculatorHDSS_Pointer"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDSS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkHistogramThresholdCalculatorHDSS self) -> itkHistogramThresholdCalculatorHDSS_Pointer"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDSS_Clone(self)


    def SetInput(self, input):
        """SetInput(itkHistogramThresholdCalculatorHDSS self, itkHistogramD input)"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDSS_SetInput(self, input)


    def GetInput(self):
        """GetInput(itkHistogramThresholdCalculatorHDSS self) -> itkHistogramD"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDSS_GetInput(self)


    def GetOutput(self):
        """GetOutput(itkHistogramThresholdCalculatorHDSS self) -> itkSimpleDataObjectDecoratorSS"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDSS_GetOutput(self)


    def GetThreshold(self):
        """GetThreshold(itkHistogramThresholdCalculatorHDSS self) -> short const &"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDSS_GetThreshold(self)

    __swig_destroy__ = _itkHistogramThresholdCalculatorPython.delete_itkHistogramThresholdCalculatorHDSS

    def cast(obj):
        """cast(itkLightObject obj) -> itkHistogramThresholdCalculatorHDSS"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDSS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramThresholdCalculatorHDSS

        Create a new object of the class itkHistogramThresholdCalculatorHDSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramThresholdCalculatorHDSS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramThresholdCalculatorHDSS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramThresholdCalculatorHDSS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramThresholdCalculatorHDSS.Clone = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDSS_Clone, None, itkHistogramThresholdCalculatorHDSS)
itkHistogramThresholdCalculatorHDSS.SetInput = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDSS_SetInput, None, itkHistogramThresholdCalculatorHDSS)
itkHistogramThresholdCalculatorHDSS.GetInput = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDSS_GetInput, None, itkHistogramThresholdCalculatorHDSS)
itkHistogramThresholdCalculatorHDSS.GetOutput = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDSS_GetOutput, None, itkHistogramThresholdCalculatorHDSS)
itkHistogramThresholdCalculatorHDSS.GetThreshold = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDSS_GetThreshold, None, itkHistogramThresholdCalculatorHDSS)
itkHistogramThresholdCalculatorHDSS_swigregister = _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDSS_swigregister
itkHistogramThresholdCalculatorHDSS_swigregister(itkHistogramThresholdCalculatorHDSS)

def itkHistogramThresholdCalculatorHDSS___New_orig__():
    """itkHistogramThresholdCalculatorHDSS___New_orig__() -> itkHistogramThresholdCalculatorHDSS_Pointer"""
    return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDSS___New_orig__()

def itkHistogramThresholdCalculatorHDSS_cast(obj):
    """itkHistogramThresholdCalculatorHDSS_cast(itkLightObject obj) -> itkHistogramThresholdCalculatorHDSS"""
    return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDSS_cast(obj)

class itkHistogramThresholdCalculatorHDUC(ITKCommonBasePython.itkProcessObject):
    """


    Base class to compute a threshold value based on the histogram of an
    image.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    C++ includes: itkHistogramThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkHistogramThresholdCalculatorHDUC_Pointer"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkHistogramThresholdCalculatorHDUC self) -> itkHistogramThresholdCalculatorHDUC_Pointer"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUC_Clone(self)


    def SetInput(self, input):
        """SetInput(itkHistogramThresholdCalculatorHDUC self, itkHistogramD input)"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUC_SetInput(self, input)


    def GetInput(self):
        """GetInput(itkHistogramThresholdCalculatorHDUC self) -> itkHistogramD"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUC_GetInput(self)


    def GetOutput(self):
        """GetOutput(itkHistogramThresholdCalculatorHDUC self) -> itkSimpleDataObjectDecoratorUC"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUC_GetOutput(self)


    def GetThreshold(self):
        """GetThreshold(itkHistogramThresholdCalculatorHDUC self) -> unsigned char const &"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUC_GetThreshold(self)

    __swig_destroy__ = _itkHistogramThresholdCalculatorPython.delete_itkHistogramThresholdCalculatorHDUC

    def cast(obj):
        """cast(itkLightObject obj) -> itkHistogramThresholdCalculatorHDUC"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUC_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramThresholdCalculatorHDUC

        Create a new object of the class itkHistogramThresholdCalculatorHDUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramThresholdCalculatorHDUC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramThresholdCalculatorHDUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramThresholdCalculatorHDUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramThresholdCalculatorHDUC.Clone = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUC_Clone, None, itkHistogramThresholdCalculatorHDUC)
itkHistogramThresholdCalculatorHDUC.SetInput = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUC_SetInput, None, itkHistogramThresholdCalculatorHDUC)
itkHistogramThresholdCalculatorHDUC.GetInput = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUC_GetInput, None, itkHistogramThresholdCalculatorHDUC)
itkHistogramThresholdCalculatorHDUC.GetOutput = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUC_GetOutput, None, itkHistogramThresholdCalculatorHDUC)
itkHistogramThresholdCalculatorHDUC.GetThreshold = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUC_GetThreshold, None, itkHistogramThresholdCalculatorHDUC)
itkHistogramThresholdCalculatorHDUC_swigregister = _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUC_swigregister
itkHistogramThresholdCalculatorHDUC_swigregister(itkHistogramThresholdCalculatorHDUC)

def itkHistogramThresholdCalculatorHDUC___New_orig__():
    """itkHistogramThresholdCalculatorHDUC___New_orig__() -> itkHistogramThresholdCalculatorHDUC_Pointer"""
    return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUC___New_orig__()

def itkHistogramThresholdCalculatorHDUC_cast(obj):
    """itkHistogramThresholdCalculatorHDUC_cast(itkLightObject obj) -> itkHistogramThresholdCalculatorHDUC"""
    return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUC_cast(obj)

class itkHistogramThresholdCalculatorHDUS(ITKCommonBasePython.itkProcessObject):
    """


    Base class to compute a threshold value based on the histogram of an
    image.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    C++ includes: itkHistogramThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkHistogramThresholdCalculatorHDUS_Pointer"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkHistogramThresholdCalculatorHDUS self) -> itkHistogramThresholdCalculatorHDUS_Pointer"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUS_Clone(self)


    def SetInput(self, input):
        """SetInput(itkHistogramThresholdCalculatorHDUS self, itkHistogramD input)"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUS_SetInput(self, input)


    def GetInput(self):
        """GetInput(itkHistogramThresholdCalculatorHDUS self) -> itkHistogramD"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUS_GetInput(self)


    def GetOutput(self):
        """GetOutput(itkHistogramThresholdCalculatorHDUS self) -> itkSimpleDataObjectDecoratorUS"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUS_GetOutput(self)


    def GetThreshold(self):
        """GetThreshold(itkHistogramThresholdCalculatorHDUS self) -> unsigned short const &"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUS_GetThreshold(self)

    __swig_destroy__ = _itkHistogramThresholdCalculatorPython.delete_itkHistogramThresholdCalculatorHDUS

    def cast(obj):
        """cast(itkLightObject obj) -> itkHistogramThresholdCalculatorHDUS"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramThresholdCalculatorHDUS

        Create a new object of the class itkHistogramThresholdCalculatorHDUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramThresholdCalculatorHDUS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramThresholdCalculatorHDUS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramThresholdCalculatorHDUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramThresholdCalculatorHDUS.Clone = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUS_Clone, None, itkHistogramThresholdCalculatorHDUS)
itkHistogramThresholdCalculatorHDUS.SetInput = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUS_SetInput, None, itkHistogramThresholdCalculatorHDUS)
itkHistogramThresholdCalculatorHDUS.GetInput = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUS_GetInput, None, itkHistogramThresholdCalculatorHDUS)
itkHistogramThresholdCalculatorHDUS.GetOutput = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUS_GetOutput, None, itkHistogramThresholdCalculatorHDUS)
itkHistogramThresholdCalculatorHDUS.GetThreshold = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUS_GetThreshold, None, itkHistogramThresholdCalculatorHDUS)
itkHistogramThresholdCalculatorHDUS_swigregister = _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUS_swigregister
itkHistogramThresholdCalculatorHDUS_swigregister(itkHistogramThresholdCalculatorHDUS)

def itkHistogramThresholdCalculatorHDUS___New_orig__():
    """itkHistogramThresholdCalculatorHDUS___New_orig__() -> itkHistogramThresholdCalculatorHDUS_Pointer"""
    return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUS___New_orig__()

def itkHistogramThresholdCalculatorHDUS_cast(obj):
    """itkHistogramThresholdCalculatorHDUS_cast(itkLightObject obj) -> itkHistogramThresholdCalculatorHDUS"""
    return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUS_cast(obj)

class itkHistogramThresholdCalculatorHFF(ITKCommonBasePython.itkProcessObject):
    """


    Base class to compute a threshold value based on the histogram of an
    image.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    C++ includes: itkHistogramThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkHistogramThresholdCalculatorHFF_Pointer"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkHistogramThresholdCalculatorHFF self) -> itkHistogramThresholdCalculatorHFF_Pointer"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFF_Clone(self)


    def SetInput(self, input):
        """SetInput(itkHistogramThresholdCalculatorHFF self, itkHistogramF input)"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFF_SetInput(self, input)


    def GetInput(self):
        """GetInput(itkHistogramThresholdCalculatorHFF self) -> itkHistogramF"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFF_GetInput(self)


    def GetOutput(self):
        """GetOutput(itkHistogramThresholdCalculatorHFF self) -> itkSimpleDataObjectDecoratorF"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFF_GetOutput(self)


    def GetThreshold(self):
        """GetThreshold(itkHistogramThresholdCalculatorHFF self) -> float const &"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFF_GetThreshold(self)

    __swig_destroy__ = _itkHistogramThresholdCalculatorPython.delete_itkHistogramThresholdCalculatorHFF

    def cast(obj):
        """cast(itkLightObject obj) -> itkHistogramThresholdCalculatorHFF"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramThresholdCalculatorHFF

        Create a new object of the class itkHistogramThresholdCalculatorHFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramThresholdCalculatorHFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramThresholdCalculatorHFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramThresholdCalculatorHFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramThresholdCalculatorHFF.Clone = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFF_Clone, None, itkHistogramThresholdCalculatorHFF)
itkHistogramThresholdCalculatorHFF.SetInput = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFF_SetInput, None, itkHistogramThresholdCalculatorHFF)
itkHistogramThresholdCalculatorHFF.GetInput = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFF_GetInput, None, itkHistogramThresholdCalculatorHFF)
itkHistogramThresholdCalculatorHFF.GetOutput = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFF_GetOutput, None, itkHistogramThresholdCalculatorHFF)
itkHistogramThresholdCalculatorHFF.GetThreshold = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFF_GetThreshold, None, itkHistogramThresholdCalculatorHFF)
itkHistogramThresholdCalculatorHFF_swigregister = _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFF_swigregister
itkHistogramThresholdCalculatorHFF_swigregister(itkHistogramThresholdCalculatorHFF)

def itkHistogramThresholdCalculatorHFF___New_orig__():
    """itkHistogramThresholdCalculatorHFF___New_orig__() -> itkHistogramThresholdCalculatorHFF_Pointer"""
    return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFF___New_orig__()

def itkHistogramThresholdCalculatorHFF_cast(obj):
    """itkHistogramThresholdCalculatorHFF_cast(itkLightObject obj) -> itkHistogramThresholdCalculatorHFF"""
    return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFF_cast(obj)

class itkHistogramThresholdCalculatorHFSS(ITKCommonBasePython.itkProcessObject):
    """


    Base class to compute a threshold value based on the histogram of an
    image.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    C++ includes: itkHistogramThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkHistogramThresholdCalculatorHFSS_Pointer"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFSS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkHistogramThresholdCalculatorHFSS self) -> itkHistogramThresholdCalculatorHFSS_Pointer"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFSS_Clone(self)


    def SetInput(self, input):
        """SetInput(itkHistogramThresholdCalculatorHFSS self, itkHistogramF input)"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFSS_SetInput(self, input)


    def GetInput(self):
        """GetInput(itkHistogramThresholdCalculatorHFSS self) -> itkHistogramF"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFSS_GetInput(self)


    def GetOutput(self):
        """GetOutput(itkHistogramThresholdCalculatorHFSS self) -> itkSimpleDataObjectDecoratorSS"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFSS_GetOutput(self)


    def GetThreshold(self):
        """GetThreshold(itkHistogramThresholdCalculatorHFSS self) -> short const &"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFSS_GetThreshold(self)

    __swig_destroy__ = _itkHistogramThresholdCalculatorPython.delete_itkHistogramThresholdCalculatorHFSS

    def cast(obj):
        """cast(itkLightObject obj) -> itkHistogramThresholdCalculatorHFSS"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFSS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramThresholdCalculatorHFSS

        Create a new object of the class itkHistogramThresholdCalculatorHFSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramThresholdCalculatorHFSS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramThresholdCalculatorHFSS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramThresholdCalculatorHFSS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramThresholdCalculatorHFSS.Clone = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFSS_Clone, None, itkHistogramThresholdCalculatorHFSS)
itkHistogramThresholdCalculatorHFSS.SetInput = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFSS_SetInput, None, itkHistogramThresholdCalculatorHFSS)
itkHistogramThresholdCalculatorHFSS.GetInput = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFSS_GetInput, None, itkHistogramThresholdCalculatorHFSS)
itkHistogramThresholdCalculatorHFSS.GetOutput = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFSS_GetOutput, None, itkHistogramThresholdCalculatorHFSS)
itkHistogramThresholdCalculatorHFSS.GetThreshold = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFSS_GetThreshold, None, itkHistogramThresholdCalculatorHFSS)
itkHistogramThresholdCalculatorHFSS_swigregister = _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFSS_swigregister
itkHistogramThresholdCalculatorHFSS_swigregister(itkHistogramThresholdCalculatorHFSS)

def itkHistogramThresholdCalculatorHFSS___New_orig__():
    """itkHistogramThresholdCalculatorHFSS___New_orig__() -> itkHistogramThresholdCalculatorHFSS_Pointer"""
    return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFSS___New_orig__()

def itkHistogramThresholdCalculatorHFSS_cast(obj):
    """itkHistogramThresholdCalculatorHFSS_cast(itkLightObject obj) -> itkHistogramThresholdCalculatorHFSS"""
    return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFSS_cast(obj)

class itkHistogramThresholdCalculatorHFUC(ITKCommonBasePython.itkProcessObject):
    """


    Base class to compute a threshold value based on the histogram of an
    image.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    C++ includes: itkHistogramThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkHistogramThresholdCalculatorHFUC_Pointer"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkHistogramThresholdCalculatorHFUC self) -> itkHistogramThresholdCalculatorHFUC_Pointer"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUC_Clone(self)


    def SetInput(self, input):
        """SetInput(itkHistogramThresholdCalculatorHFUC self, itkHistogramF input)"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUC_SetInput(self, input)


    def GetInput(self):
        """GetInput(itkHistogramThresholdCalculatorHFUC self) -> itkHistogramF"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUC_GetInput(self)


    def GetOutput(self):
        """GetOutput(itkHistogramThresholdCalculatorHFUC self) -> itkSimpleDataObjectDecoratorUC"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUC_GetOutput(self)


    def GetThreshold(self):
        """GetThreshold(itkHistogramThresholdCalculatorHFUC self) -> unsigned char const &"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUC_GetThreshold(self)

    __swig_destroy__ = _itkHistogramThresholdCalculatorPython.delete_itkHistogramThresholdCalculatorHFUC

    def cast(obj):
        """cast(itkLightObject obj) -> itkHistogramThresholdCalculatorHFUC"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUC_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramThresholdCalculatorHFUC

        Create a new object of the class itkHistogramThresholdCalculatorHFUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramThresholdCalculatorHFUC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramThresholdCalculatorHFUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramThresholdCalculatorHFUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramThresholdCalculatorHFUC.Clone = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUC_Clone, None, itkHistogramThresholdCalculatorHFUC)
itkHistogramThresholdCalculatorHFUC.SetInput = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUC_SetInput, None, itkHistogramThresholdCalculatorHFUC)
itkHistogramThresholdCalculatorHFUC.GetInput = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUC_GetInput, None, itkHistogramThresholdCalculatorHFUC)
itkHistogramThresholdCalculatorHFUC.GetOutput = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUC_GetOutput, None, itkHistogramThresholdCalculatorHFUC)
itkHistogramThresholdCalculatorHFUC.GetThreshold = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUC_GetThreshold, None, itkHistogramThresholdCalculatorHFUC)
itkHistogramThresholdCalculatorHFUC_swigregister = _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUC_swigregister
itkHistogramThresholdCalculatorHFUC_swigregister(itkHistogramThresholdCalculatorHFUC)

def itkHistogramThresholdCalculatorHFUC___New_orig__():
    """itkHistogramThresholdCalculatorHFUC___New_orig__() -> itkHistogramThresholdCalculatorHFUC_Pointer"""
    return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUC___New_orig__()

def itkHistogramThresholdCalculatorHFUC_cast(obj):
    """itkHistogramThresholdCalculatorHFUC_cast(itkLightObject obj) -> itkHistogramThresholdCalculatorHFUC"""
    return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUC_cast(obj)

class itkHistogramThresholdCalculatorHFUS(ITKCommonBasePython.itkProcessObject):
    """


    Base class to compute a threshold value based on the histogram of an
    image.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    C++ includes: itkHistogramThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkHistogramThresholdCalculatorHFUS_Pointer"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkHistogramThresholdCalculatorHFUS self) -> itkHistogramThresholdCalculatorHFUS_Pointer"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUS_Clone(self)


    def SetInput(self, input):
        """SetInput(itkHistogramThresholdCalculatorHFUS self, itkHistogramF input)"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUS_SetInput(self, input)


    def GetInput(self):
        """GetInput(itkHistogramThresholdCalculatorHFUS self) -> itkHistogramF"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUS_GetInput(self)


    def GetOutput(self):
        """GetOutput(itkHistogramThresholdCalculatorHFUS self) -> itkSimpleDataObjectDecoratorUS"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUS_GetOutput(self)


    def GetThreshold(self):
        """GetThreshold(itkHistogramThresholdCalculatorHFUS self) -> unsigned short const &"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUS_GetThreshold(self)

    __swig_destroy__ = _itkHistogramThresholdCalculatorPython.delete_itkHistogramThresholdCalculatorHFUS

    def cast(obj):
        """cast(itkLightObject obj) -> itkHistogramThresholdCalculatorHFUS"""
        return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramThresholdCalculatorHFUS

        Create a new object of the class itkHistogramThresholdCalculatorHFUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramThresholdCalculatorHFUS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramThresholdCalculatorHFUS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramThresholdCalculatorHFUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramThresholdCalculatorHFUS.Clone = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUS_Clone, None, itkHistogramThresholdCalculatorHFUS)
itkHistogramThresholdCalculatorHFUS.SetInput = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUS_SetInput, None, itkHistogramThresholdCalculatorHFUS)
itkHistogramThresholdCalculatorHFUS.GetInput = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUS_GetInput, None, itkHistogramThresholdCalculatorHFUS)
itkHistogramThresholdCalculatorHFUS.GetOutput = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUS_GetOutput, None, itkHistogramThresholdCalculatorHFUS)
itkHistogramThresholdCalculatorHFUS.GetThreshold = new_instancemethod(_itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUS_GetThreshold, None, itkHistogramThresholdCalculatorHFUS)
itkHistogramThresholdCalculatorHFUS_swigregister = _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUS_swigregister
itkHistogramThresholdCalculatorHFUS_swigregister(itkHistogramThresholdCalculatorHFUS)

def itkHistogramThresholdCalculatorHFUS___New_orig__():
    """itkHistogramThresholdCalculatorHFUS___New_orig__() -> itkHistogramThresholdCalculatorHFUS_Pointer"""
    return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUS___New_orig__()

def itkHistogramThresholdCalculatorHFUS_cast(obj):
    """itkHistogramThresholdCalculatorHFUS_cast(itkLightObject obj) -> itkHistogramThresholdCalculatorHFUS"""
    return _itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUS_cast(obj)


def histogram_threshold_calculator(*args, **kwargs):
    """Procedural interface for HistogramThresholdCalculator"""
    import itk
    instance = itk.HistogramThresholdCalculator.New(*args, **kwargs)
    return instance.__internal_call__()

def histogram_threshold_calculator_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.HistogramThresholdCalculator, itkTemplate.itkTemplate):
        histogram_threshold_calculator.__doc__ = itk.HistogramThresholdCalculator.values()[0].__doc__
    else:
        histogram_threshold_calculator.__doc__ = itk.HistogramThresholdCalculator.__doc__




