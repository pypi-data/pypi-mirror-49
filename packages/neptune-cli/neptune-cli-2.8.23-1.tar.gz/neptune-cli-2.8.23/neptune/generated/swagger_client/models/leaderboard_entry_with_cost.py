# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class LeaderboardEntryWithCost(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, leaderboard_entry=None, project_name=None, total_cost=None, notebook=None, organization_name=None, cost_per_second=None, running_time=None, responding=None, project_deleted=None):
        """
        LeaderboardEntryWithCost - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'leaderboard_entry': 'LeaderboardEntry',
            'project_name': 'str',
            'total_cost': 'float',
            'notebook': 'bool',
            'organization_name': 'str',
            'cost_per_second': 'float',
            'running_time': 'int',
            'responding': 'bool',
            'project_deleted': 'bool'
        }

        self.attribute_map = {
            'leaderboard_entry': 'leaderboardEntry',
            'project_name': 'projectName',
            'total_cost': 'totalCost',
            'notebook': 'notebook',
            'organization_name': 'organizationName',
            'cost_per_second': 'costPerSecond',
            'running_time': 'runningTime',
            'responding': 'responding',
            'project_deleted': 'projectDeleted'
        }

        self._leaderboard_entry = leaderboard_entry
        self._project_name = project_name
        self._total_cost = total_cost
        self._notebook = notebook
        self._organization_name = organization_name
        self._cost_per_second = cost_per_second
        self._running_time = running_time
        self._responding = responding
        self._project_deleted = project_deleted

    @property
    def leaderboard_entry(self):
        """
        Gets the leaderboard_entry of this LeaderboardEntryWithCost.


        :return: The leaderboard_entry of this LeaderboardEntryWithCost.
        :rtype: LeaderboardEntry
        """
        return self._leaderboard_entry

    @leaderboard_entry.setter
    def leaderboard_entry(self, leaderboard_entry):
        """
        Sets the leaderboard_entry of this LeaderboardEntryWithCost.


        :param leaderboard_entry: The leaderboard_entry of this LeaderboardEntryWithCost.
        :type: LeaderboardEntry
        """
        
        self._leaderboard_entry = leaderboard_entry

    @property
    def project_name(self):
        """
        Gets the project_name of this LeaderboardEntryWithCost.


        :return: The project_name of this LeaderboardEntryWithCost.
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """
        Sets the project_name of this LeaderboardEntryWithCost.


        :param project_name: The project_name of this LeaderboardEntryWithCost.
        :type: str
        """
        
        self._project_name = project_name

    @property
    def total_cost(self):
        """
        Gets the total_cost of this LeaderboardEntryWithCost.


        :return: The total_cost of this LeaderboardEntryWithCost.
        :rtype: float
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost):
        """
        Sets the total_cost of this LeaderboardEntryWithCost.


        :param total_cost: The total_cost of this LeaderboardEntryWithCost.
        :type: float
        """
        
        self._total_cost = total_cost

    @property
    def notebook(self):
        """
        Gets the notebook of this LeaderboardEntryWithCost.


        :return: The notebook of this LeaderboardEntryWithCost.
        :rtype: bool
        """
        return self._notebook

    @notebook.setter
    def notebook(self, notebook):
        """
        Sets the notebook of this LeaderboardEntryWithCost.


        :param notebook: The notebook of this LeaderboardEntryWithCost.
        :type: bool
        """
        
        self._notebook = notebook

    @property
    def organization_name(self):
        """
        Gets the organization_name of this LeaderboardEntryWithCost.


        :return: The organization_name of this LeaderboardEntryWithCost.
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """
        Sets the organization_name of this LeaderboardEntryWithCost.


        :param organization_name: The organization_name of this LeaderboardEntryWithCost.
        :type: str
        """
        
        self._organization_name = organization_name

    @property
    def cost_per_second(self):
        """
        Gets the cost_per_second of this LeaderboardEntryWithCost.


        :return: The cost_per_second of this LeaderboardEntryWithCost.
        :rtype: float
        """
        return self._cost_per_second

    @cost_per_second.setter
    def cost_per_second(self, cost_per_second):
        """
        Sets the cost_per_second of this LeaderboardEntryWithCost.


        :param cost_per_second: The cost_per_second of this LeaderboardEntryWithCost.
        :type: float
        """
        
        self._cost_per_second = cost_per_second

    @property
    def running_time(self):
        """
        Gets the running_time of this LeaderboardEntryWithCost.


        :return: The running_time of this LeaderboardEntryWithCost.
        :rtype: int
        """
        return self._running_time

    @running_time.setter
    def running_time(self, running_time):
        """
        Sets the running_time of this LeaderboardEntryWithCost.


        :param running_time: The running_time of this LeaderboardEntryWithCost.
        :type: int
        """
        
        self._running_time = running_time

    @property
    def responding(self):
        """
        Gets the responding of this LeaderboardEntryWithCost.


        :return: The responding of this LeaderboardEntryWithCost.
        :rtype: bool
        """
        return self._responding

    @responding.setter
    def responding(self, responding):
        """
        Sets the responding of this LeaderboardEntryWithCost.


        :param responding: The responding of this LeaderboardEntryWithCost.
        :type: bool
        """
        
        self._responding = responding

    @property
    def project_deleted(self):
        """
        Gets the project_deleted of this LeaderboardEntryWithCost.


        :return: The project_deleted of this LeaderboardEntryWithCost.
        :rtype: bool
        """
        return self._project_deleted

    @project_deleted.setter
    def project_deleted(self, project_deleted):
        """
        Sets the project_deleted of this LeaderboardEntryWithCost.


        :param project_deleted: The project_deleted of this LeaderboardEntryWithCost.
        :type: bool
        """
        
        self._project_deleted = project_deleted

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




