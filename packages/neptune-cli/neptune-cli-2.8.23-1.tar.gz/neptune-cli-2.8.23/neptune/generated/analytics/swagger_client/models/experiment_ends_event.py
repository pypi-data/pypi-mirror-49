# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ExperimentEndsEvent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, actions=None, backups=None, balance=None, channels=None, environment=None, experiment_created=None, experiment_name=None, experiment_started=None, experiment_type=None, free_quota=None, grid_search_size=None, inputs=None, new_state=None, outputs=None, parameters=None, previous_state=None, properties=None, time_in_previous_state=None, worker=None):
        """
        ExperimentEndsEvent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'actions': 'int',
            'backups': 'int',
            'balance': 'float',
            'channels': 'int',
            'environment': 'str',
            'experiment_created': 'datetime',
            'experiment_name': 'str',
            'experiment_started': 'datetime',
            'experiment_type': 'str',
            'free_quota': 'int',
            'grid_search_size': 'int',
            'inputs': 'int',
            'new_state': 'str',
            'outputs': 'int',
            'parameters': 'int',
            'previous_state': 'str',
            'properties': 'int',
            'time_in_previous_state': 'int',
            'worker': 'str'
        }

        self.attribute_map = {
            'actions': 'actions',
            'backups': 'backups',
            'balance': 'balance',
            'channels': 'channels',
            'environment': 'environment',
            'experiment_created': 'experimentCreated',
            'experiment_name': 'experimentName',
            'experiment_started': 'experimentStarted',
            'experiment_type': 'experimentType',
            'free_quota': 'freeQuota',
            'grid_search_size': 'gridSearchSize',
            'inputs': 'inputs',
            'new_state': 'newState',
            'outputs': 'outputs',
            'parameters': 'parameters',
            'previous_state': 'previousState',
            'properties': 'properties',
            'time_in_previous_state': 'timeInPreviousState',
            'worker': 'worker'
        }

        self._actions = actions
        self._backups = backups
        self._balance = balance
        self._channels = channels
        self._environment = environment
        self._experiment_created = experiment_created
        self._experiment_name = experiment_name
        self._experiment_started = experiment_started
        self._experiment_type = experiment_type
        self._free_quota = free_quota
        self._grid_search_size = grid_search_size
        self._inputs = inputs
        self._new_state = new_state
        self._outputs = outputs
        self._parameters = parameters
        self._previous_state = previous_state
        self._properties = properties
        self._time_in_previous_state = time_in_previous_state
        self._worker = worker

    @property
    def actions(self):
        """
        Gets the actions of this ExperimentEndsEvent.


        :return: The actions of this ExperimentEndsEvent.
        :rtype: int
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """
        Sets the actions of this ExperimentEndsEvent.


        :param actions: The actions of this ExperimentEndsEvent.
        :type: int
        """
        
        self._actions = actions

    @property
    def backups(self):
        """
        Gets the backups of this ExperimentEndsEvent.


        :return: The backups of this ExperimentEndsEvent.
        :rtype: int
        """
        return self._backups

    @backups.setter
    def backups(self, backups):
        """
        Sets the backups of this ExperimentEndsEvent.


        :param backups: The backups of this ExperimentEndsEvent.
        :type: int
        """
        
        self._backups = backups

    @property
    def balance(self):
        """
        Gets the balance of this ExperimentEndsEvent.


        :return: The balance of this ExperimentEndsEvent.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """
        Sets the balance of this ExperimentEndsEvent.


        :param balance: The balance of this ExperimentEndsEvent.
        :type: float
        """
        
        self._balance = balance

    @property
    def channels(self):
        """
        Gets the channels of this ExperimentEndsEvent.


        :return: The channels of this ExperimentEndsEvent.
        :rtype: int
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """
        Sets the channels of this ExperimentEndsEvent.


        :param channels: The channels of this ExperimentEndsEvent.
        :type: int
        """
        
        self._channels = channels

    @property
    def environment(self):
        """
        Gets the environment of this ExperimentEndsEvent.


        :return: The environment of this ExperimentEndsEvent.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """
        Sets the environment of this ExperimentEndsEvent.


        :param environment: The environment of this ExperimentEndsEvent.
        :type: str
        """
        
        self._environment = environment

    @property
    def experiment_created(self):
        """
        Gets the experiment_created of this ExperimentEndsEvent.


        :return: The experiment_created of this ExperimentEndsEvent.
        :rtype: datetime
        """
        return self._experiment_created

    @experiment_created.setter
    def experiment_created(self, experiment_created):
        """
        Sets the experiment_created of this ExperimentEndsEvent.


        :param experiment_created: The experiment_created of this ExperimentEndsEvent.
        :type: datetime
        """
        
        self._experiment_created = experiment_created

    @property
    def experiment_name(self):
        """
        Gets the experiment_name of this ExperimentEndsEvent.


        :return: The experiment_name of this ExperimentEndsEvent.
        :rtype: str
        """
        return self._experiment_name

    @experiment_name.setter
    def experiment_name(self, experiment_name):
        """
        Sets the experiment_name of this ExperimentEndsEvent.


        :param experiment_name: The experiment_name of this ExperimentEndsEvent.
        :type: str
        """
        
        self._experiment_name = experiment_name

    @property
    def experiment_started(self):
        """
        Gets the experiment_started of this ExperimentEndsEvent.


        :return: The experiment_started of this ExperimentEndsEvent.
        :rtype: datetime
        """
        return self._experiment_started

    @experiment_started.setter
    def experiment_started(self, experiment_started):
        """
        Sets the experiment_started of this ExperimentEndsEvent.


        :param experiment_started: The experiment_started of this ExperimentEndsEvent.
        :type: datetime
        """
        
        self._experiment_started = experiment_started

    @property
    def experiment_type(self):
        """
        Gets the experiment_type of this ExperimentEndsEvent.


        :return: The experiment_type of this ExperimentEndsEvent.
        :rtype: str
        """
        return self._experiment_type

    @experiment_type.setter
    def experiment_type(self, experiment_type):
        """
        Sets the experiment_type of this ExperimentEndsEvent.


        :param experiment_type: The experiment_type of this ExperimentEndsEvent.
        :type: str
        """
        
        self._experiment_type = experiment_type

    @property
    def free_quota(self):
        """
        Gets the free_quota of this ExperimentEndsEvent.


        :return: The free_quota of this ExperimentEndsEvent.
        :rtype: int
        """
        return self._free_quota

    @free_quota.setter
    def free_quota(self, free_quota):
        """
        Sets the free_quota of this ExperimentEndsEvent.


        :param free_quota: The free_quota of this ExperimentEndsEvent.
        :type: int
        """
        
        self._free_quota = free_quota

    @property
    def grid_search_size(self):
        """
        Gets the grid_search_size of this ExperimentEndsEvent.


        :return: The grid_search_size of this ExperimentEndsEvent.
        :rtype: int
        """
        return self._grid_search_size

    @grid_search_size.setter
    def grid_search_size(self, grid_search_size):
        """
        Sets the grid_search_size of this ExperimentEndsEvent.


        :param grid_search_size: The grid_search_size of this ExperimentEndsEvent.
        :type: int
        """
        
        self._grid_search_size = grid_search_size

    @property
    def inputs(self):
        """
        Gets the inputs of this ExperimentEndsEvent.


        :return: The inputs of this ExperimentEndsEvent.
        :rtype: int
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """
        Sets the inputs of this ExperimentEndsEvent.


        :param inputs: The inputs of this ExperimentEndsEvent.
        :type: int
        """
        
        self._inputs = inputs

    @property
    def new_state(self):
        """
        Gets the new_state of this ExperimentEndsEvent.


        :return: The new_state of this ExperimentEndsEvent.
        :rtype: str
        """
        return self._new_state

    @new_state.setter
    def new_state(self, new_state):
        """
        Sets the new_state of this ExperimentEndsEvent.


        :param new_state: The new_state of this ExperimentEndsEvent.
        :type: str
        """
        
        self._new_state = new_state

    @property
    def outputs(self):
        """
        Gets the outputs of this ExperimentEndsEvent.


        :return: The outputs of this ExperimentEndsEvent.
        :rtype: int
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """
        Sets the outputs of this ExperimentEndsEvent.


        :param outputs: The outputs of this ExperimentEndsEvent.
        :type: int
        """
        
        self._outputs = outputs

    @property
    def parameters(self):
        """
        Gets the parameters of this ExperimentEndsEvent.


        :return: The parameters of this ExperimentEndsEvent.
        :rtype: int
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this ExperimentEndsEvent.


        :param parameters: The parameters of this ExperimentEndsEvent.
        :type: int
        """
        
        self._parameters = parameters

    @property
    def previous_state(self):
        """
        Gets the previous_state of this ExperimentEndsEvent.


        :return: The previous_state of this ExperimentEndsEvent.
        :rtype: str
        """
        return self._previous_state

    @previous_state.setter
    def previous_state(self, previous_state):
        """
        Sets the previous_state of this ExperimentEndsEvent.


        :param previous_state: The previous_state of this ExperimentEndsEvent.
        :type: str
        """
        
        self._previous_state = previous_state

    @property
    def properties(self):
        """
        Gets the properties of this ExperimentEndsEvent.


        :return: The properties of this ExperimentEndsEvent.
        :rtype: int
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """
        Sets the properties of this ExperimentEndsEvent.


        :param properties: The properties of this ExperimentEndsEvent.
        :type: int
        """
        
        self._properties = properties

    @property
    def time_in_previous_state(self):
        """
        Gets the time_in_previous_state of this ExperimentEndsEvent.


        :return: The time_in_previous_state of this ExperimentEndsEvent.
        :rtype: int
        """
        return self._time_in_previous_state

    @time_in_previous_state.setter
    def time_in_previous_state(self, time_in_previous_state):
        """
        Sets the time_in_previous_state of this ExperimentEndsEvent.


        :param time_in_previous_state: The time_in_previous_state of this ExperimentEndsEvent.
        :type: int
        """
        
        self._time_in_previous_state = time_in_previous_state

    @property
    def worker(self):
        """
        Gets the worker of this ExperimentEndsEvent.


        :return: The worker of this ExperimentEndsEvent.
        :rtype: str
        """
        return self._worker

    @worker.setter
    def worker(self, worker):
        """
        Sets the worker of this ExperimentEndsEvent.


        :param worker: The worker of this ExperimentEndsEvent.
        :type: str
        """
        
        self._worker = worker

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




