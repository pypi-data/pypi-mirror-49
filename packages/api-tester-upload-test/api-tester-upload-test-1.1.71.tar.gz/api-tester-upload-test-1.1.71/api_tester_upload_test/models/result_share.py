# -*- coding: utf-8 -*-

"""
    api_tester_upload_test

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from api_tester_upload_test.api_helper import APIHelper

class ResultShare(object):

    """Implementation of the 'resultShare' model.

    TODO: type model description here.

    Attributes:
        share_key (string): TODO: type description here.
        url (string): TODO: type description here.
        short_url (string): TODO: type description here.
        size (int): TODO: type description here.
        date_created (datetime): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "share_key":'share_key',
        "url":'url',
        "short_url":'short_url',
        "size":'size',
        "date_created":'date_created'
    }

    def __init__(self,
                 share_key=None,
                 url=None,
                 short_url=None,
                 size=None,
                 date_created=None):
        """Constructor for the ResultShare class"""

        # Initialize members of the class
        self.share_key = share_key
        self.url = url
        self.short_url = short_url
        self.size = size
        self.date_created = APIHelper.RFC3339DateTime(date_created) if date_created else None


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        share_key = dictionary.get('share_key')
        url = dictionary.get('url')
        short_url = dictionary.get('short_url')
        size = dictionary.get('size')
        date_created = APIHelper.RFC3339DateTime.from_value(dictionary.get("date_created")).datetime if dictionary.get("date_created") else None

        # Return an object of this model
        return cls(share_key,
                   url,
                   short_url,
                   size,
                   date_created)


