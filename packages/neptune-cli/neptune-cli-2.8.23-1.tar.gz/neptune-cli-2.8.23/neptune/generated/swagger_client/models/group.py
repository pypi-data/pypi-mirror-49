# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class Group(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, experiment_ids=None, grid_search_parameters=None, name=None, project_name=None, size=None, trashed=None, state=None, description=None, tags=None, time_of_completion=None, time_of_creation=None, project_id=None, organization_name=None, best_experiment=None, running_time=None, id=None, short_id=None, experiment_states=None, metric=None, organization_id=None, owner=None, is_best_experiment_set_by_user=None):
        """
        Group - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'experiment_ids': 'list[str]',
            'grid_search_parameters': 'list[GridSearchParameter]',
            'name': 'str',
            'project_name': 'str',
            'size': 'int',
            'trashed': 'bool',
            'state': 'ExperimentState',
            'description': 'str',
            'tags': 'list[str]',
            'time_of_completion': 'datetime',
            'time_of_creation': 'datetime',
            'project_id': 'str',
            'organization_name': 'str',
            'best_experiment': 'Experiment',
            'running_time': 'int',
            'id': 'str',
            'short_id': 'str',
            'experiment_states': 'ExperimentStates',
            'metric': 'Metric',
            'organization_id': 'str',
            'owner': 'str',
            'is_best_experiment_set_by_user': 'bool'
        }

        self.attribute_map = {
            'experiment_ids': 'experimentIds',
            'grid_search_parameters': 'gridSearchParameters',
            'name': 'name',
            'project_name': 'projectName',
            'size': 'size',
            'trashed': 'trashed',
            'state': 'state',
            'description': 'description',
            'tags': 'tags',
            'time_of_completion': 'timeOfCompletion',
            'time_of_creation': 'timeOfCreation',
            'project_id': 'projectId',
            'organization_name': 'organizationName',
            'best_experiment': 'bestExperiment',
            'running_time': 'runningTime',
            'id': 'id',
            'short_id': 'shortId',
            'experiment_states': 'experimentStates',
            'metric': 'metric',
            'organization_id': 'organizationId',
            'owner': 'owner',
            'is_best_experiment_set_by_user': 'isBestExperimentSetByUser'
        }

        self._experiment_ids = experiment_ids
        self._grid_search_parameters = grid_search_parameters
        self._name = name
        self._project_name = project_name
        self._size = size
        self._trashed = trashed
        self._state = state
        self._description = description
        self._tags = tags
        self._time_of_completion = time_of_completion
        self._time_of_creation = time_of_creation
        self._project_id = project_id
        self._organization_name = organization_name
        self._best_experiment = best_experiment
        self._running_time = running_time
        self._id = id
        self._short_id = short_id
        self._experiment_states = experiment_states
        self._metric = metric
        self._organization_id = organization_id
        self._owner = owner
        self._is_best_experiment_set_by_user = is_best_experiment_set_by_user

    @property
    def experiment_ids(self):
        """
        Gets the experiment_ids of this Group.


        :return: The experiment_ids of this Group.
        :rtype: list[str]
        """
        return self._experiment_ids

    @experiment_ids.setter
    def experiment_ids(self, experiment_ids):
        """
        Sets the experiment_ids of this Group.


        :param experiment_ids: The experiment_ids of this Group.
        :type: list[str]
        """
        
        self._experiment_ids = experiment_ids

    @property
    def grid_search_parameters(self):
        """
        Gets the grid_search_parameters of this Group.


        :return: The grid_search_parameters of this Group.
        :rtype: list[GridSearchParameter]
        """
        return self._grid_search_parameters

    @grid_search_parameters.setter
    def grid_search_parameters(self, grid_search_parameters):
        """
        Sets the grid_search_parameters of this Group.


        :param grid_search_parameters: The grid_search_parameters of this Group.
        :type: list[GridSearchParameter]
        """
        
        self._grid_search_parameters = grid_search_parameters

    @property
    def name(self):
        """
        Gets the name of this Group.


        :return: The name of this Group.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Group.


        :param name: The name of this Group.
        :type: str
        """
        
        self._name = name

    @property
    def project_name(self):
        """
        Gets the project_name of this Group.


        :return: The project_name of this Group.
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """
        Sets the project_name of this Group.


        :param project_name: The project_name of this Group.
        :type: str
        """
        
        self._project_name = project_name

    @property
    def size(self):
        """
        Gets the size of this Group.


        :return: The size of this Group.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this Group.


        :param size: The size of this Group.
        :type: int
        """
        
        self._size = size

    @property
    def trashed(self):
        """
        Gets the trashed of this Group.


        :return: The trashed of this Group.
        :rtype: bool
        """
        return self._trashed

    @trashed.setter
    def trashed(self, trashed):
        """
        Sets the trashed of this Group.


        :param trashed: The trashed of this Group.
        :type: bool
        """
        
        self._trashed = trashed

    @property
    def state(self):
        """
        Gets the state of this Group.


        :return: The state of this Group.
        :rtype: ExperimentState
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this Group.


        :param state: The state of this Group.
        :type: ExperimentState
        """
        
        self._state = state

    @property
    def description(self):
        """
        Gets the description of this Group.


        :return: The description of this Group.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Group.


        :param description: The description of this Group.
        :type: str
        """
        
        self._description = description

    @property
    def tags(self):
        """
        Gets the tags of this Group.


        :return: The tags of this Group.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this Group.


        :param tags: The tags of this Group.
        :type: list[str]
        """
        
        self._tags = tags

    @property
    def time_of_completion(self):
        """
        Gets the time_of_completion of this Group.


        :return: The time_of_completion of this Group.
        :rtype: datetime
        """
        return self._time_of_completion

    @time_of_completion.setter
    def time_of_completion(self, time_of_completion):
        """
        Sets the time_of_completion of this Group.


        :param time_of_completion: The time_of_completion of this Group.
        :type: datetime
        """
        
        self._time_of_completion = time_of_completion

    @property
    def time_of_creation(self):
        """
        Gets the time_of_creation of this Group.


        :return: The time_of_creation of this Group.
        :rtype: datetime
        """
        return self._time_of_creation

    @time_of_creation.setter
    def time_of_creation(self, time_of_creation):
        """
        Sets the time_of_creation of this Group.


        :param time_of_creation: The time_of_creation of this Group.
        :type: datetime
        """
        
        self._time_of_creation = time_of_creation

    @property
    def project_id(self):
        """
        Gets the project_id of this Group.


        :return: The project_id of this Group.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """
        Sets the project_id of this Group.


        :param project_id: The project_id of this Group.
        :type: str
        """
        
        self._project_id = project_id

    @property
    def organization_name(self):
        """
        Gets the organization_name of this Group.


        :return: The organization_name of this Group.
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """
        Sets the organization_name of this Group.


        :param organization_name: The organization_name of this Group.
        :type: str
        """
        
        self._organization_name = organization_name

    @property
    def best_experiment(self):
        """
        Gets the best_experiment of this Group.


        :return: The best_experiment of this Group.
        :rtype: Experiment
        """
        return self._best_experiment

    @best_experiment.setter
    def best_experiment(self, best_experiment):
        """
        Sets the best_experiment of this Group.


        :param best_experiment: The best_experiment of this Group.
        :type: Experiment
        """
        
        self._best_experiment = best_experiment

    @property
    def running_time(self):
        """
        Gets the running_time of this Group.


        :return: The running_time of this Group.
        :rtype: int
        """
        return self._running_time

    @running_time.setter
    def running_time(self, running_time):
        """
        Sets the running_time of this Group.


        :param running_time: The running_time of this Group.
        :type: int
        """
        
        self._running_time = running_time

    @property
    def id(self):
        """
        Gets the id of this Group.


        :return: The id of this Group.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Group.


        :param id: The id of this Group.
        :type: str
        """
        
        self._id = id

    @property
    def short_id(self):
        """
        Gets the short_id of this Group.


        :return: The short_id of this Group.
        :rtype: str
        """
        return self._short_id

    @short_id.setter
    def short_id(self, short_id):
        """
        Sets the short_id of this Group.


        :param short_id: The short_id of this Group.
        :type: str
        """
        
        self._short_id = short_id

    @property
    def experiment_states(self):
        """
        Gets the experiment_states of this Group.


        :return: The experiment_states of this Group.
        :rtype: ExperimentStates
        """
        return self._experiment_states

    @experiment_states.setter
    def experiment_states(self, experiment_states):
        """
        Sets the experiment_states of this Group.


        :param experiment_states: The experiment_states of this Group.
        :type: ExperimentStates
        """
        
        self._experiment_states = experiment_states

    @property
    def metric(self):
        """
        Gets the metric of this Group.


        :return: The metric of this Group.
        :rtype: Metric
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """
        Sets the metric of this Group.


        :param metric: The metric of this Group.
        :type: Metric
        """
        
        self._metric = metric

    @property
    def organization_id(self):
        """
        Gets the organization_id of this Group.


        :return: The organization_id of this Group.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this Group.


        :param organization_id: The organization_id of this Group.
        :type: str
        """
        
        self._organization_id = organization_id

    @property
    def owner(self):
        """
        Gets the owner of this Group.


        :return: The owner of this Group.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this Group.


        :param owner: The owner of this Group.
        :type: str
        """
        
        self._owner = owner

    @property
    def is_best_experiment_set_by_user(self):
        """
        Gets the is_best_experiment_set_by_user of this Group.


        :return: The is_best_experiment_set_by_user of this Group.
        :rtype: bool
        """
        return self._is_best_experiment_set_by_user

    @is_best_experiment_set_by_user.setter
    def is_best_experiment_set_by_user(self, is_best_experiment_set_by_user):
        """
        Sets the is_best_experiment_set_by_user of this Group.


        :param is_best_experiment_set_by_user: The is_best_experiment_set_by_user of this Group.
        :type: bool
        """
        
        self._is_best_experiment_set_by_user = is_best_experiment_set_by_user

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




