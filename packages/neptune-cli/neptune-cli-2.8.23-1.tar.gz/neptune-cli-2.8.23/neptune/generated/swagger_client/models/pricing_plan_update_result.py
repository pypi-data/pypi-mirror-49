# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class PricingPlanUpdateResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, affected_private_projects=None, public_projects=None, private_projects=None):
        """
        PricingPlanUpdateResult - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'affected_private_projects': 'int',
            'public_projects': 'int',
            'private_projects': 'int'
        }

        self.attribute_map = {
            'affected_private_projects': 'affectedPrivateProjects',
            'public_projects': 'publicProjects',
            'private_projects': 'privateProjects'
        }

        self._affected_private_projects = affected_private_projects
        self._public_projects = public_projects
        self._private_projects = private_projects

    @property
    def affected_private_projects(self):
        """
        Gets the affected_private_projects of this PricingPlanUpdateResult.


        :return: The affected_private_projects of this PricingPlanUpdateResult.
        :rtype: int
        """
        return self._affected_private_projects

    @affected_private_projects.setter
    def affected_private_projects(self, affected_private_projects):
        """
        Sets the affected_private_projects of this PricingPlanUpdateResult.


        :param affected_private_projects: The affected_private_projects of this PricingPlanUpdateResult.
        :type: int
        """
        
        self._affected_private_projects = affected_private_projects

    @property
    def public_projects(self):
        """
        Gets the public_projects of this PricingPlanUpdateResult.


        :return: The public_projects of this PricingPlanUpdateResult.
        :rtype: int
        """
        return self._public_projects

    @public_projects.setter
    def public_projects(self, public_projects):
        """
        Sets the public_projects of this PricingPlanUpdateResult.


        :param public_projects: The public_projects of this PricingPlanUpdateResult.
        :type: int
        """
        
        self._public_projects = public_projects

    @property
    def private_projects(self):
        """
        Gets the private_projects of this PricingPlanUpdateResult.


        :return: The private_projects of this PricingPlanUpdateResult.
        :rtype: int
        """
        return self._private_projects

    @private_projects.setter
    def private_projects(self, private_projects):
        """
        Sets the private_projects of this PricingPlanUpdateResult.


        :param private_projects: The private_projects of this PricingPlanUpdateResult.
        :type: int
        """
        
        self._private_projects = private_projects

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




