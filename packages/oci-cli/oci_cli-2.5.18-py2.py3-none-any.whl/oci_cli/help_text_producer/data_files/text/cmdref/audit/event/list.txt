list
****


Description
===========

Returns all audit events for the specified compartment that were
processed within the specified time range.


Usage
=====

   oci audit event list [OPTIONS]


Options
=======


--compartment-id, -c [text]
---------------------------

The OCID of the compartment. [required]


--start-time [datetime]
-----------------------

Returns events that were processed at or after this start date and
time. For example, a start value of *2017-01-15T11:30:00Z* will
retrieve a list of all events processed since 30 minutes after the
11th hour of January 15, 2017, in Coordinated Universal Time (UTC).
You can specify a value with granularity to the minute. If seconds are
provided then this will be rounded to the nearest minute, with greater
than or equal to 30 seconds rounding up and less than 30 seconds
rounding down.

The following datetime formats are supported:


UTC with milliseconds
~~~~~~~~~~~~~~~~~~~~~

Format: YYYY-MM-DDTHH:mm:ss.sssTZD

Example: 2017-09-15T20:30:00.123Z


UTC without milliseconds
~~~~~~~~~~~~~~~~~~~~~~~~

Format: YYYY-MM-DDTHH:mm:ssTZD

Example: 2017-09-15T20:30:00Z


UTC with minute precision
~~~~~~~~~~~~~~~~~~~~~~~~~

Format: YYYY-MM-DDTHH:mmTZD

Example: 2017-09-15T20:30Z


Timezone with milliseconds
~~~~~~~~~~~~~~~~~~~~~~~~~~

Format: YYYY-MM-DDTHH:mm:ssTZD

Example: 2017-09-15T12:30:00.456-08:00, 2017-09-15T12:30:00.456-0800


Timezone without milliseconds
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Format: YYYY-MM-DDTHH:mm:ssTZD

Example: 2017-09-15T12:30:00-08:00, 2017-09-15T12:30:00-0800


Timezone with minute precision
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Format: YYYY-MM-DDTHH:mmTZD

Example: 2017-09-15T12:30-08:00, 2017-09-15T12:30-0800


Short date and time
~~~~~~~~~~~~~~~~~~~

The timezone for this date and time will be taken as UTC (Needs to be
surrounded by single or double quotes) Format: 'YYYY-MM-DD HH:mm' or
"YYYY-MM-DD HH:mm" Example: '2017-09-15 17:25'


Date Only
~~~~~~~~~

This date will be taken as midnight UTC of that day

Format: YYYY-MM-DD

Example: 2017-09-15


Epoch seconds
~~~~~~~~~~~~~

Example: 1412195400


--end-time [datetime]
---------------------

Returns events that were processed before this end date and time. For
example, a start value of *2017-01-01T00:00:00Z* and an end value of
*2017-01-02T00:00:00Z* will retrieve a list of all events processed on
January 1, 2017. Similarly, a start value of *2017-01-01T00:00:00Z*
and an end value of *2017-02-01T00:00:00Z* will result in a list of
all events processed between January 1, 2017 and January 31, 2017. You
can specify a value with granularity to the minute. If seconds are
provided then this will be rounded to the nearest minute, with greater
than or equal to 30 seconds rounding up and less than 30 seconds
rounding down.

The following datetime formats are supported:


UTC with milliseconds
~~~~~~~~~~~~~~~~~~~~~

Format: YYYY-MM-DDTHH:mm:ss.sssTZD

Example: 2017-09-15T20:30:00.123Z


UTC without milliseconds
~~~~~~~~~~~~~~~~~~~~~~~~

Format: YYYY-MM-DDTHH:mm:ssTZD

Example: 2017-09-15T20:30:00Z


UTC with minute precision
~~~~~~~~~~~~~~~~~~~~~~~~~

Format: YYYY-MM-DDTHH:mmTZD

Example: 2017-09-15T20:30Z


Timezone with milliseconds
~~~~~~~~~~~~~~~~~~~~~~~~~~

Format: YYYY-MM-DDTHH:mm:ssTZD

Example: 2017-09-15T12:30:00.456-08:00, 2017-09-15T12:30:00.456-0800


Timezone without milliseconds
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Format: YYYY-MM-DDTHH:mm:ssTZD

Example: 2017-09-15T12:30:00-08:00, 2017-09-15T12:30:00-0800


Timezone with minute precision
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Format: YYYY-MM-DDTHH:mmTZD

Example: 2017-09-15T12:30-08:00, 2017-09-15T12:30-0800


Short date and time
~~~~~~~~~~~~~~~~~~~

The timezone for this date and time will be taken as UTC (Needs to be
surrounded by single or double quotes) Format: 'YYYY-MM-DD HH:mm' or
"YYYY-MM-DD HH:mm" Example: '2017-09-15 17:25'


Date Only
~~~~~~~~~

This date will be taken as midnight UTC of that day

Format: YYYY-MM-DD

Example: 2017-09-15


Epoch seconds
~~~~~~~~~~~~~

Example: 1412195400


--page [text]
-------------

The value of the *opc-next-page* response header from the previous
list query.


--all
-----

Fetches all pages of results.


--skip-deserialization
----------------------

Skips deserializing service response into python sdk response models
and returns as plain JSON object.


--stream-output
---------------

Print output to stdout as it is fetched so the full response is not
stored in memory. This only works with --all.


--from-json [text]
------------------

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The --generate-full-command-json-input option can be used to generate
a sample json file to be used with this command option. The key names
are pre-populated and match the command option names (converted to
camelCase format, e.g. compartment-id --> compartmentId), while the
values of the keys need to be populated by the user before using the
sample file as an input to this command. For any command option that
accepts multiple values, the value of the key can be a JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our "using CLI with
advanced JSON options" link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions


-?, -h, --help
--------------

For detailed help on any of these individual commands, enter <command>
--help.
