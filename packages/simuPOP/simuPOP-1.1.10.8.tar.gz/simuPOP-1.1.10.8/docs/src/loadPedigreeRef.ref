
Function loadPedigree
---------------------


.. function:: loadPedigree(file, idField="ind_id", fatherField="father_id", motherField="mother_id", ploidy=2, loci=[], chromTypes=[], lociPos=[], chromNames=[], alleleNames=[], lociNames=[], subPopNames=[], infoFields=[])

   Load a pedigree from a file saved by operator
   :class:`PedigreeTagger` or function :meth:`Pedigree.save`. This
   file contains the ID of each offspring and their parent(s) and
   optionally sex ('M' or 'F'), affection status ('A' or 'U'), values
   of information fields and genotype at some loci. IDs of each
   individual and their parents are loaded to information fields
   *idField*, *fatherField* and *motherField*. Only numeric IDs are
   allowed, and individual IDs must be unique across all generations.

   Because this file does not contain generation information,
   generations to which offspring belong are determined by the parent-
   offspring relationships. Individuals without parents are assumed to
   be in the top-most ancestral generation. This is the case for
   individuals in the top-most ancestral generation if the file is
   saved by function ``Pedigree.save()``, and for individuals who only
   appear as another individual's parent, if the file is saved by
   operator :class:`PedigreeTagger`. The order at which offsprng is
   specified is not important because this function essentially
   creates a top-most ancestral generation using IDs without parents,
   and creates the next generation using offspring of these parents,
   and so on until all generations are recreated. That is to say, if
   you have a mixture of pedigrees with different generations, they
   will be lined up from the top most ancestral generation.

   If individual sex is not specified, sex of of parents are
   determined by their parental roles (father or mother) but the sex
   of individuals in the last generation can not be determined so they
   will all be males. If additional information fields are given,
   their names have to be specified using parameter *infoFields*. The
   rest of the columns are assued to be alleles, arranged *ploidy*
   consecutive columns for each locus. If paraemter *loci* is not
   specified, the number of loci is calculated by number of columns
   divided by *ploidy* (default to 2). All loci are assumed to be on
   one chromosome unless parameter *loci* is used to specified number
   of loci on each chromosome. Additional parameters such as *ploidy*,
   *chromTypes*, *lociPos*, *chromNames*, *alleleNames*, *lociNames*
   could be used to specified the genotype structured of the loaded
   pedigree. Please refer to class :class:`Population` for details
   about these parameters.
