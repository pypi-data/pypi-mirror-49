# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class Experiment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, channels_last_values=None, storage_size=None, channels=None, code_access=None, name=None, project_name=None, hostname=None, trashed=None, state=None, description=None, tags=None, time_of_completion=None, channels_size=None, time_of_creation=None, third_party_data=None, project_id=None, organization_name=None, is_code_accessible=None, group_id=None, running_time=None, id=None, properties=None, short_id=None, time_of_entered_running_state=None, worker_type=None, environment=None, responding=None, actions=None, organization_id=None, owner=None, state_transitions=None, notebook_data=None, parameters=None):
        """
        Experiment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'channels_last_values': 'list[ChannelWithValue]',
            'storage_size': 'int',
            'channels': 'list[Channel]',
            'code_access': 'ExperimentCodeAccess',
            'name': 'str',
            'project_name': 'str',
            'hostname': 'str',
            'trashed': 'bool',
            'state': 'ExperimentState',
            'description': 'str',
            'tags': 'list[str]',
            'time_of_completion': 'datetime',
            'channels_size': 'int',
            'time_of_creation': 'datetime',
            'third_party_data': 'ThirdPartyData',
            'project_id': 'str',
            'organization_name': 'str',
            'is_code_accessible': 'bool',
            'group_id': 'str',
            'running_time': 'int',
            'id': 'str',
            'properties': 'list[KeyValueProperty]',
            'short_id': 'str',
            'time_of_entered_running_state': 'datetime',
            'worker_type': 'str',
            'environment': 'str',
            'responding': 'bool',
            'actions': 'list[Action]',
            'organization_id': 'str',
            'owner': 'str',
            'state_transitions': 'StateTransitions',
            'notebook_data': 'NotebookData',
            'parameters': 'list[Parameter]'
        }

        self.attribute_map = {
            'channels_last_values': 'channelsLastValues',
            'storage_size': 'storageSize',
            'channels': 'channels',
            'code_access': 'codeAccess',
            'name': 'name',
            'project_name': 'projectName',
            'hostname': 'hostname',
            'trashed': 'trashed',
            'state': 'state',
            'description': 'description',
            'tags': 'tags',
            'time_of_completion': 'timeOfCompletion',
            'channels_size': 'channelsSize',
            'time_of_creation': 'timeOfCreation',
            'third_party_data': 'thirdPartyData',
            'project_id': 'projectId',
            'organization_name': 'organizationName',
            'is_code_accessible': 'isCodeAccessible',
            'group_id': 'groupId',
            'running_time': 'runningTime',
            'id': 'id',
            'properties': 'properties',
            'short_id': 'shortId',
            'time_of_entered_running_state': 'timeOfEnteredRunningState',
            'worker_type': 'workerType',
            'environment': 'environment',
            'responding': 'responding',
            'actions': 'actions',
            'organization_id': 'organizationId',
            'owner': 'owner',
            'state_transitions': 'stateTransitions',
            'notebook_data': 'notebookData',
            'parameters': 'parameters'
        }

        self._channels_last_values = channels_last_values
        self._storage_size = storage_size
        self._channels = channels
        self._code_access = code_access
        self._name = name
        self._project_name = project_name
        self._hostname = hostname
        self._trashed = trashed
        self._state = state
        self._description = description
        self._tags = tags
        self._time_of_completion = time_of_completion
        self._channels_size = channels_size
        self._time_of_creation = time_of_creation
        self._third_party_data = third_party_data
        self._project_id = project_id
        self._organization_name = organization_name
        self._is_code_accessible = is_code_accessible
        self._group_id = group_id
        self._running_time = running_time
        self._id = id
        self._properties = properties
        self._short_id = short_id
        self._time_of_entered_running_state = time_of_entered_running_state
        self._worker_type = worker_type
        self._environment = environment
        self._responding = responding
        self._actions = actions
        self._organization_id = organization_id
        self._owner = owner
        self._state_transitions = state_transitions
        self._notebook_data = notebook_data
        self._parameters = parameters

    @property
    def channels_last_values(self):
        """
        Gets the channels_last_values of this Experiment.


        :return: The channels_last_values of this Experiment.
        :rtype: list[ChannelWithValue]
        """
        return self._channels_last_values

    @channels_last_values.setter
    def channels_last_values(self, channels_last_values):
        """
        Sets the channels_last_values of this Experiment.


        :param channels_last_values: The channels_last_values of this Experiment.
        :type: list[ChannelWithValue]
        """
        
        self._channels_last_values = channels_last_values

    @property
    def storage_size(self):
        """
        Gets the storage_size of this Experiment.


        :return: The storage_size of this Experiment.
        :rtype: int
        """
        return self._storage_size

    @storage_size.setter
    def storage_size(self, storage_size):
        """
        Sets the storage_size of this Experiment.


        :param storage_size: The storage_size of this Experiment.
        :type: int
        """
        
        self._storage_size = storage_size

    @property
    def channels(self):
        """
        Gets the channels of this Experiment.


        :return: The channels of this Experiment.
        :rtype: list[Channel]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """
        Sets the channels of this Experiment.


        :param channels: The channels of this Experiment.
        :type: list[Channel]
        """
        
        self._channels = channels

    @property
    def code_access(self):
        """
        Gets the code_access of this Experiment.


        :return: The code_access of this Experiment.
        :rtype: ExperimentCodeAccess
        """
        return self._code_access

    @code_access.setter
    def code_access(self, code_access):
        """
        Sets the code_access of this Experiment.


        :param code_access: The code_access of this Experiment.
        :type: ExperimentCodeAccess
        """
        
        self._code_access = code_access

    @property
    def name(self):
        """
        Gets the name of this Experiment.


        :return: The name of this Experiment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Experiment.


        :param name: The name of this Experiment.
        :type: str
        """
        
        self._name = name

    @property
    def project_name(self):
        """
        Gets the project_name of this Experiment.


        :return: The project_name of this Experiment.
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """
        Sets the project_name of this Experiment.


        :param project_name: The project_name of this Experiment.
        :type: str
        """
        
        self._project_name = project_name

    @property
    def hostname(self):
        """
        Gets the hostname of this Experiment.


        :return: The hostname of this Experiment.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """
        Sets the hostname of this Experiment.


        :param hostname: The hostname of this Experiment.
        :type: str
        """
        
        self._hostname = hostname

    @property
    def trashed(self):
        """
        Gets the trashed of this Experiment.


        :return: The trashed of this Experiment.
        :rtype: bool
        """
        return self._trashed

    @trashed.setter
    def trashed(self, trashed):
        """
        Sets the trashed of this Experiment.


        :param trashed: The trashed of this Experiment.
        :type: bool
        """
        
        self._trashed = trashed

    @property
    def state(self):
        """
        Gets the state of this Experiment.


        :return: The state of this Experiment.
        :rtype: ExperimentState
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this Experiment.


        :param state: The state of this Experiment.
        :type: ExperimentState
        """
        
        self._state = state

    @property
    def description(self):
        """
        Gets the description of this Experiment.


        :return: The description of this Experiment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Experiment.


        :param description: The description of this Experiment.
        :type: str
        """
        
        self._description = description

    @property
    def tags(self):
        """
        Gets the tags of this Experiment.


        :return: The tags of this Experiment.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this Experiment.


        :param tags: The tags of this Experiment.
        :type: list[str]
        """
        
        self._tags = tags

    @property
    def time_of_completion(self):
        """
        Gets the time_of_completion of this Experiment.


        :return: The time_of_completion of this Experiment.
        :rtype: datetime
        """
        return self._time_of_completion

    @time_of_completion.setter
    def time_of_completion(self, time_of_completion):
        """
        Sets the time_of_completion of this Experiment.


        :param time_of_completion: The time_of_completion of this Experiment.
        :type: datetime
        """
        
        self._time_of_completion = time_of_completion

    @property
    def channels_size(self):
        """
        Gets the channels_size of this Experiment.


        :return: The channels_size of this Experiment.
        :rtype: int
        """
        return self._channels_size

    @channels_size.setter
    def channels_size(self, channels_size):
        """
        Sets the channels_size of this Experiment.


        :param channels_size: The channels_size of this Experiment.
        :type: int
        """
        
        self._channels_size = channels_size

    @property
    def time_of_creation(self):
        """
        Gets the time_of_creation of this Experiment.


        :return: The time_of_creation of this Experiment.
        :rtype: datetime
        """
        return self._time_of_creation

    @time_of_creation.setter
    def time_of_creation(self, time_of_creation):
        """
        Sets the time_of_creation of this Experiment.


        :param time_of_creation: The time_of_creation of this Experiment.
        :type: datetime
        """
        
        self._time_of_creation = time_of_creation

    @property
    def third_party_data(self):
        """
        Gets the third_party_data of this Experiment.


        :return: The third_party_data of this Experiment.
        :rtype: ThirdPartyData
        """
        return self._third_party_data

    @third_party_data.setter
    def third_party_data(self, third_party_data):
        """
        Sets the third_party_data of this Experiment.


        :param third_party_data: The third_party_data of this Experiment.
        :type: ThirdPartyData
        """
        
        self._third_party_data = third_party_data

    @property
    def project_id(self):
        """
        Gets the project_id of this Experiment.


        :return: The project_id of this Experiment.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """
        Sets the project_id of this Experiment.


        :param project_id: The project_id of this Experiment.
        :type: str
        """
        
        self._project_id = project_id

    @property
    def organization_name(self):
        """
        Gets the organization_name of this Experiment.


        :return: The organization_name of this Experiment.
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """
        Sets the organization_name of this Experiment.


        :param organization_name: The organization_name of this Experiment.
        :type: str
        """
        
        self._organization_name = organization_name

    @property
    def is_code_accessible(self):
        """
        Gets the is_code_accessible of this Experiment.


        :return: The is_code_accessible of this Experiment.
        :rtype: bool
        """
        return self._is_code_accessible

    @is_code_accessible.setter
    def is_code_accessible(self, is_code_accessible):
        """
        Sets the is_code_accessible of this Experiment.


        :param is_code_accessible: The is_code_accessible of this Experiment.
        :type: bool
        """
        
        self._is_code_accessible = is_code_accessible

    @property
    def group_id(self):
        """
        Gets the group_id of this Experiment.


        :return: The group_id of this Experiment.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """
        Sets the group_id of this Experiment.


        :param group_id: The group_id of this Experiment.
        :type: str
        """
        
        self._group_id = group_id

    @property
    def running_time(self):
        """
        Gets the running_time of this Experiment.


        :return: The running_time of this Experiment.
        :rtype: int
        """
        return self._running_time

    @running_time.setter
    def running_time(self, running_time):
        """
        Sets the running_time of this Experiment.


        :param running_time: The running_time of this Experiment.
        :type: int
        """
        
        self._running_time = running_time

    @property
    def id(self):
        """
        Gets the id of this Experiment.


        :return: The id of this Experiment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Experiment.


        :param id: The id of this Experiment.
        :type: str
        """
        
        self._id = id

    @property
    def properties(self):
        """
        Gets the properties of this Experiment.


        :return: The properties of this Experiment.
        :rtype: list[KeyValueProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """
        Sets the properties of this Experiment.


        :param properties: The properties of this Experiment.
        :type: list[KeyValueProperty]
        """
        
        self._properties = properties

    @property
    def short_id(self):
        """
        Gets the short_id of this Experiment.


        :return: The short_id of this Experiment.
        :rtype: str
        """
        return self._short_id

    @short_id.setter
    def short_id(self, short_id):
        """
        Sets the short_id of this Experiment.


        :param short_id: The short_id of this Experiment.
        :type: str
        """
        
        self._short_id = short_id

    @property
    def time_of_entered_running_state(self):
        """
        Gets the time_of_entered_running_state of this Experiment.


        :return: The time_of_entered_running_state of this Experiment.
        :rtype: datetime
        """
        return self._time_of_entered_running_state

    @time_of_entered_running_state.setter
    def time_of_entered_running_state(self, time_of_entered_running_state):
        """
        Sets the time_of_entered_running_state of this Experiment.


        :param time_of_entered_running_state: The time_of_entered_running_state of this Experiment.
        :type: datetime
        """
        
        self._time_of_entered_running_state = time_of_entered_running_state

    @property
    def worker_type(self):
        """
        Gets the worker_type of this Experiment.


        :return: The worker_type of this Experiment.
        :rtype: str
        """
        return self._worker_type

    @worker_type.setter
    def worker_type(self, worker_type):
        """
        Sets the worker_type of this Experiment.


        :param worker_type: The worker_type of this Experiment.
        :type: str
        """
        
        self._worker_type = worker_type

    @property
    def environment(self):
        """
        Gets the environment of this Experiment.


        :return: The environment of this Experiment.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """
        Sets the environment of this Experiment.


        :param environment: The environment of this Experiment.
        :type: str
        """
        
        self._environment = environment

    @property
    def responding(self):
        """
        Gets the responding of this Experiment.


        :return: The responding of this Experiment.
        :rtype: bool
        """
        return self._responding

    @responding.setter
    def responding(self, responding):
        """
        Sets the responding of this Experiment.


        :param responding: The responding of this Experiment.
        :type: bool
        """
        
        self._responding = responding

    @property
    def actions(self):
        """
        Gets the actions of this Experiment.


        :return: The actions of this Experiment.
        :rtype: list[Action]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """
        Sets the actions of this Experiment.


        :param actions: The actions of this Experiment.
        :type: list[Action]
        """
        
        self._actions = actions

    @property
    def organization_id(self):
        """
        Gets the organization_id of this Experiment.


        :return: The organization_id of this Experiment.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this Experiment.


        :param organization_id: The organization_id of this Experiment.
        :type: str
        """
        
        self._organization_id = organization_id

    @property
    def owner(self):
        """
        Gets the owner of this Experiment.


        :return: The owner of this Experiment.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this Experiment.


        :param owner: The owner of this Experiment.
        :type: str
        """
        
        self._owner = owner

    @property
    def state_transitions(self):
        """
        Gets the state_transitions of this Experiment.


        :return: The state_transitions of this Experiment.
        :rtype: StateTransitions
        """
        return self._state_transitions

    @state_transitions.setter
    def state_transitions(self, state_transitions):
        """
        Sets the state_transitions of this Experiment.


        :param state_transitions: The state_transitions of this Experiment.
        :type: StateTransitions
        """
        
        self._state_transitions = state_transitions

    @property
    def notebook_data(self):
        """
        Gets the notebook_data of this Experiment.


        :return: The notebook_data of this Experiment.
        :rtype: NotebookData
        """
        return self._notebook_data

    @notebook_data.setter
    def notebook_data(self, notebook_data):
        """
        Sets the notebook_data of this Experiment.


        :param notebook_data: The notebook_data of this Experiment.
        :type: NotebookData
        """
        
        self._notebook_data = notebook_data

    @property
    def parameters(self):
        """
        Gets the parameters of this Experiment.


        :return: The parameters of this Experiment.
        :rtype: list[Parameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this Experiment.


        :param parameters: The parameters of this Experiment.
        :type: list[Parameter]
        """
        
        self._parameters = parameters

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




