# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class BillingSummary(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, experiments=None, total=None, transfer=None, payments_fees=None, storage=None, seats=None):
        """
        BillingSummary - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'experiments': 'float',
            'total': 'float',
            'transfer': 'float',
            'payments_fees': 'float',
            'storage': 'float',
            'seats': 'float'
        }

        self.attribute_map = {
            'experiments': 'experiments',
            'total': 'total',
            'transfer': 'transfer',
            'payments_fees': 'paymentsFees',
            'storage': 'storage',
            'seats': 'seats'
        }

        self._experiments = experiments
        self._total = total
        self._transfer = transfer
        self._payments_fees = payments_fees
        self._storage = storage
        self._seats = seats

    @property
    def experiments(self):
        """
        Gets the experiments of this BillingSummary.


        :return: The experiments of this BillingSummary.
        :rtype: float
        """
        return self._experiments

    @experiments.setter
    def experiments(self, experiments):
        """
        Sets the experiments of this BillingSummary.


        :param experiments: The experiments of this BillingSummary.
        :type: float
        """
        
        self._experiments = experiments

    @property
    def total(self):
        """
        Gets the total of this BillingSummary.


        :return: The total of this BillingSummary.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """
        Sets the total of this BillingSummary.


        :param total: The total of this BillingSummary.
        :type: float
        """
        
        self._total = total

    @property
    def transfer(self):
        """
        Gets the transfer of this BillingSummary.


        :return: The transfer of this BillingSummary.
        :rtype: float
        """
        return self._transfer

    @transfer.setter
    def transfer(self, transfer):
        """
        Sets the transfer of this BillingSummary.


        :param transfer: The transfer of this BillingSummary.
        :type: float
        """
        
        self._transfer = transfer

    @property
    def payments_fees(self):
        """
        Gets the payments_fees of this BillingSummary.


        :return: The payments_fees of this BillingSummary.
        :rtype: float
        """
        return self._payments_fees

    @payments_fees.setter
    def payments_fees(self, payments_fees):
        """
        Sets the payments_fees of this BillingSummary.


        :param payments_fees: The payments_fees of this BillingSummary.
        :type: float
        """
        
        self._payments_fees = payments_fees

    @property
    def storage(self):
        """
        Gets the storage of this BillingSummary.


        :return: The storage of this BillingSummary.
        :rtype: float
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """
        Sets the storage of this BillingSummary.


        :param storage: The storage of this BillingSummary.
        :type: float
        """
        
        self._storage = storage

    @property
    def seats(self):
        """
        Gets the seats of this BillingSummary.


        :return: The seats of this BillingSummary.
        :rtype: float
        """
        return self._seats

    @seats.setter
    def seats(self, seats):
        """
        Sets the seats of this BillingSummary.


        :param seats: The seats of this BillingSummary.
        :type: float
        """
        
        self._seats = seats

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




