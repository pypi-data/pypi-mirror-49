{"version":3,"sources":["webpack:///./app/views/releases/list/organizationReleases/index.jsx","webpack:///./app/views/releases/list/shared/utils.jsx"],"names":["OrganizationReleasesContainer","react_default","a","createElement","styles_organization","components_alert","type","t","organization","this","props","feature","features","renderDisabled","renderNoAccess","globalSelectionHeader","organizationReleases_OrganizationReleases","React","Component","propTypes","SentryTypes","Organization","isRequired","selection","GlobalSelection","OrganizationReleases","onSearch","query","targetQueryParams","orgId","_this","params","browserHistory","push","pathname","concat","slug","validKeys","_this$props","location","toConsumableArray_default","Object","values","URL_PARAM","objectSpread_default","pick_default","per_page","_this$props2","projects","projectIds","Set","filter","project","has","parseInt","id","some","latestRelease","_this$state","state","loading","releaseList","loadingIndicator","length","hasAnyRelease","renderNoQueryResults","renderLanding","Fragment","renderReleaseProgress","shared_releaseList","_this$props3","allAccessibleProjects","hasAccess","releaseProject","find","releaseProgress","emptyStateWarning","releaseLanding","renderBody","_this$props4","noProjectMessage","pageHeading","searchBar","defaultQuery","placeholder","panels","releaseListHeader","renderStreamBody","pagination","pageLinks","releaseListPageLinks","AsyncView","withOrganization","withGlobalSelection"],"mappings":"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","file":"OrganizationReleases.js","sourcesContent":["import React from 'react';\nimport {browserHistory} from 'react-router';\n\nimport SentryTypes from 'app/sentryTypes';\nimport {t} from 'app/locale';\nimport SearchBar from 'app/components/searchBar';\nimport {Panel, PanelBody} from 'app/components/panels';\nimport Pagination from 'app/components/pagination';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport Alert from 'app/components/alert';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport Feature from 'app/components/acl/feature';\nimport GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';\nimport NoProjectMessage from 'app/components/noProjectMessage';\nimport AsyncView from 'app/views/asyncView';\nimport withOrganization from 'app/utils/withOrganization';\nimport withGlobalSelection from 'app/utils/withGlobalSelection';\nimport {PageContent, PageHeader} from 'app/styles/organization';\nimport PageHeading from 'app/components/pageHeading';\n\nimport ReleaseList from '../shared/releaseList';\nimport ReleaseListHeader from '../shared/releaseListHeader';\nimport ReleaseLanding from '../shared/releaseLanding';\nimport ReleaseProgress from '../shared/releaseProgress';\nimport {getQuery} from '../shared/utils';\n\nclass OrganizationReleasesContainer extends React.Component {\n  static propTypes = {\n    organization: SentryTypes.Organization.isRequired,\n    selection: SentryTypes.GlobalSelection.isRequired,\n  };\n\n  renderNoAccess() {\n    return (\n      <PageContent>\n        <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n      </PageContent>\n    );\n  }\n\n  render() {\n    const {organization} = this.props;\n    return (\n      <Feature\n        features={['organizations:sentry10']}\n        organization={organization}\n        renderDisabled={this.renderNoAccess}\n      >\n        <GlobalSelectionHeader organization={organization} />\n        <OrganizationReleases {...this.props} />\n      </Feature>\n    );\n  }\n}\n\nclass OrganizationReleases extends AsyncView {\n  static propTypes = {\n    organization: SentryTypes.Organization,\n  };\n\n  getTitle() {\n    return `${t('Releases')} - ${this.props.organization.slug}`;\n  }\n\n  getEndpoints() {\n    const {organization, location} = this.props;\n    return [\n      [\n        'releaseList',\n        `/organizations/${organization.slug}/releases/`,\n        {query: getQuery(location.query)},\n      ],\n    ];\n  }\n\n  onSearch = query => {\n    const targetQueryParams = {};\n    if (query !== '') {\n      targetQueryParams.query = query;\n    }\n\n    const {orgId} = this.props.params;\n    browserHistory.push({\n      pathname: `/organizations/${orgId}/releases/`,\n      query: targetQueryParams,\n    });\n  };\n\n  // Returns true if there has been a release in any selected project, otherwise false\n  hasAnyRelease() {\n    const {organization: {projects}, selection} = this.props;\n    const projectIds = new Set(selection.projects);\n    const activeProjects = projects.filter(project =>\n      projectIds.has(parseInt(project.id, 10))\n    );\n    return activeProjects.some(project => !!project.latestRelease);\n  }\n\n  renderStreamBody() {\n    const {organization} = this.props;\n    const {loading, releaseList} = this.state;\n\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n\n    if (releaseList.length === 0) {\n      return this.hasAnyRelease() ? this.renderNoQueryResults() : this.renderLanding();\n    }\n\n    return (\n      <React.Fragment>\n        {this.renderReleaseProgress()}\n        <ReleaseList releaseList={releaseList} orgId={organization.slug} />\n      </React.Fragment>\n    );\n  }\n\n  renderReleaseProgress() {\n    const {organization, selection} = this.props;\n    const allAccessibleProjects = organization.projects.filter(\n      project => project.hasAccess\n    );\n\n    const hasSingleProject =\n      selection.projects.length === 1 ||\n      (selection.projects.length === 0 && allAccessibleProjects.length === 1);\n\n    if (!hasSingleProject) {\n      return null;\n    }\n\n    const releaseProject = selection.projects.length\n      ? allAccessibleProjects.find(\n          project => parseInt(project.id, 10) === selection.projects[0]\n        )\n      : allAccessibleProjects[0];\n\n    return <ReleaseProgress project={releaseProject} />;\n  }\n\n  renderNoQueryResults() {\n    return (\n      <React.Fragment>\n        {this.renderReleaseProgress()}\n        <EmptyStateWarning>\n          <p>{t('Sorry, no releases match your filters.')}</p>\n        </EmptyStateWarning>\n      </React.Fragment>\n    );\n  }\n\n  renderLanding() {\n    return <ReleaseLanding />;\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {location, organization} = this.props;\n\n    return (\n      <PageContent>\n        <NoProjectMessage organization={organization}>\n          <PageHeader>\n            <PageHeading>{t('Releases')}</PageHeading>\n            <div>\n              <SearchBar\n                defaultQuery=\"\"\n                placeholder={t('Search for a release')}\n                query={location.query.query}\n                onSearch={this.onSearch}\n              />\n            </div>\n          </PageHeader>\n          <div>\n            <Panel>\n              <ReleaseListHeader />\n              <PanelBody>{this.renderStreamBody()}</PanelBody>\n            </Panel>\n            <Pagination pageLinks={this.state.releaseListPageLinks} />\n          </div>\n        </NoProjectMessage>\n      </PageContent>\n    );\n  }\n}\n\nexport default withOrganization(withGlobalSelection(OrganizationReleasesContainer));\n","import {pick} from 'lodash';\nimport {URL_PARAM} from 'app/components/organizations/globalSelectionHeader/constants';\n\n/**\n * Get query term for API given location.query\n *\n * @param {String} search\n * @returns {Object}\n */\nexport function getQuery(query) {\n  const validKeys = [...Object.values(URL_PARAM), 'cursor', 'query'];\n  return {\n    ...pick(query, validKeys),\n    per_page: 50,\n  };\n}\n"],"sourceRoot":""}