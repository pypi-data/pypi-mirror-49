{"version":3,"sources":["webpack:///./app/views/settings/projectAlerts/projectAlertRules.jsx"],"names":["TextColorLink","styled","Link","target","p","theme","gray3","RuleDescriptionRow","RuleDescriptionColumn","grid","Condition","RuleRow","withApi","_temp","_class","_React$Component","props","_this","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default","this","_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default","call","onDelete","state","loading","loadingIndicator","addLoadingMessage","_this$props","api","orgId","projectId","data","request","concat","id","method","success","removeIndicator","addSuccessMessage","tct","alert","name","error","setState","addErrorMessage","t","_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default","_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default","key","value","_this$props2","canEdit","editLink","recreateRoute","env","EnvironmentStore","getByName","environment","environmentName","displayName","react__WEBPACK_IMPORTED_MODULE_9___default","a","createElement","app_components_panels__WEBPACK_IMPORTED_MODULE_11__","align","justify","hasButtons","to","grid_emotion__WEBPACK_IMPORTED_MODULE_6__","app_components_tooltip__WEBPACK_IMPORTED_MODULE_26__","disabled","title","app_components_button__WEBPACK_IMPORTED_MODULE_16__","data-test-id","style","marginRight","size","app_components_confirm__WEBPACK_IMPORTED_MODULE_17__","message","onConfirm","icon","conditions","length","actionMatch","conditionalGuideAnchor","firstRule","className","map","condition","i","actions","app_components_duration__WEBPACK_IMPORTED_MODULE_18__","seconds","frequency","action","React","Component","propTypes","PropTypes","object","isRequired","string","func","bool","ProjectAlertRules","handleDeleteRule","rule","_this2","ruleList","filter","r","_this$props$params","params","app_components_emptyStateWarning__WEBPACK_IMPORTED_MODULE_19__","_this3","_this$props$params2","canEditRule","context","organization","access","includes","routes","bind","indexOf","Fragment","app_views_settings_components_settingsPageHeader__WEBPACK_IMPORTED_MODULE_25__","priority","tabs","app_components_navTabs__WEBPACK_IMPORTED_MODULE_22__","underlined","app_components_listLink__WEBPACK_IMPORTED_MODULE_21__","_babel_runtime_helpers_objectSpread__WEBPACK_IMPORTED_MODULE_0___default","stepBack","app_views_settings_project_permissionAlert__WEBPACK_IMPORTED_MODULE_23__","renderResults","renderEmpty","AsyncView","array","contextTypes","SentryTypes","Organization"],"mappings":"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","file":"ProjectAlertRules.js","sourcesContent":["import {Flex} from 'grid-emotion';\nimport {Link} from 'react-router';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {\n  addSuccessMessage,\n  addErrorMessage,\n  addLoadingMessage,\n  removeIndicator,\n} from 'app/actionCreators/indicator';\nimport {conditionalGuideAnchor} from 'app/components/assistant/guideAnchor';\nimport {t, tct} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport Duration from 'app/components/duration';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport EnvironmentStore from 'app/stores/environmentStore';\nimport ListLink from 'app/components/listLink';\nimport NavTabs from 'app/components/navTabs';\nimport PermissionAlert from 'app/views/settings/project/permissionAlert';\nimport SentryTypes from 'app/sentryTypes';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport Tooltip from 'app/components/tooltip';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport withApi from 'app/utils/withApi';\n\nconst TextColorLink = styled(Link)`\n  color: ${p => p.theme.gray3};\n`;\n\nconst RuleDescriptionRow = styled.div`\n  display: flex;\n`;\nconst RuleDescriptionColumn = styled.div`\n  flex: 1;\n  padding: ${p => p.theme.grid * 2}px;\n  height: 100%;\n`;\nconst Condition = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100%;\n`;\n\nconst RuleRow = withApi(\n  class RuleRow extends React.Component {\n    static propTypes = {\n      api: PropTypes.object.isRequired,\n      orgId: PropTypes.string.isRequired,\n      projectId: PropTypes.string.isRequired,\n      data: PropTypes.object.isRequired,\n      onDelete: PropTypes.func.isRequired,\n      firstRule: PropTypes.bool,\n      canEdit: PropTypes.bool,\n    };\n\n    constructor(props) {\n      super(props);\n      this.state = {loading: false, error: false};\n    }\n\n    onDelete = () => {\n      if (this.state.loading) {\n        return;\n      }\n\n      const loadingIndicator = addLoadingMessage();\n      const {api, orgId, projectId, data} = this.props;\n      api.request(`/projects/${orgId}/${projectId}/rules/${data.id}/`, {\n        method: 'DELETE',\n        success: () => {\n          this.props.onDelete();\n          removeIndicator(loadingIndicator);\n          addSuccessMessage(tct('Successfully deleted \"[alert]\"', {alert: data.name}));\n        },\n        error: () => {\n          this.setState({\n            error: true,\n            loading: false,\n          });\n          removeIndicator(loadingIndicator);\n          addErrorMessage(t('Unable to save changes. Please try again.'));\n        },\n      });\n    };\n\n    render() {\n      const {data, canEdit} = this.props;\n      const editLink = recreateRoute(`${data.id}/`, this.props);\n\n      const env = EnvironmentStore.getByName(data.environment);\n\n      const environmentName = env ? env.displayName : t('All Environments');\n\n      return (\n        <Panel>\n          <PanelHeader align=\"center\" justify=\"space-between\" hasButtons>\n            <TextColorLink to={editLink}>\n              {data.name} - {environmentName}\n            </TextColorLink>\n\n            <Flex>\n              <Tooltip\n                disabled={canEdit}\n                title={t('You do not have permission to edit alert rules.')}\n              >\n                <Button\n                  data-test-id=\"edit-rule\"\n                  style={{marginRight: 5}}\n                  disabled={!canEdit}\n                  size=\"xsmall\"\n                  to={editLink}\n                >\n                  {t('Edit Rule')}\n                </Button>\n              </Tooltip>\n\n              <Tooltip\n                disabled={canEdit}\n                title={t('You do not have permission to edit alert rules.')}\n              >\n                <Confirm\n                  message={t('Are you sure you want to remove this rule?')}\n                  onConfirm={this.onDelete}\n                  disabled={!canEdit}\n                >\n                  <Button size=\"xsmall\" icon=\"icon-trash\" />\n                </Confirm>\n              </Tooltip>\n            </Flex>\n          </PanelHeader>\n\n          <PanelBody>\n            <RuleDescriptionRow>\n              <RuleDescriptionColumn>\n                {data.conditions.length !== 0 && (\n                  <Condition>\n                    <h6>\n                      When <strong>{data.actionMatch}</strong> of these conditions are\n                      met:\n                    </h6>\n                    {conditionalGuideAnchor(\n                      this.props.firstRule,\n                      'alert_conditions',\n                      'text',\n                      <table className=\"conditions-list table\">\n                        <tbody>\n                          {data.conditions.map((condition, i) => {\n                            return (\n                              <tr key={i}>\n                                <td>{condition.name}</td>\n                              </tr>\n                            );\n                          })}\n                        </tbody>\n                      </table>\n                    )}\n                  </Condition>\n                )}\n              </RuleDescriptionColumn>\n              <RuleDescriptionColumn>\n                {data.actions.length !== 0 && (\n                  <Condition>\n                    <h6>\n                      Take these actions at most{' '}\n                      <strong>\n                        once every <Duration seconds={data.frequency * 60} />\n                      </strong>{' '}\n                      for an issue:\n                    </h6>\n                    {conditionalGuideAnchor(\n                      this.props.firstRule,\n                      'alert_actions',\n                      'text',\n                      <table className=\"actions-list table\">\n                        <tbody>\n                          {data.actions.map((action, i) => {\n                            return (\n                              <tr key={i}>\n                                <td>{action.name}</td>\n                              </tr>\n                            );\n                          })}\n                        </tbody>\n                      </table>\n                    )}\n                  </Condition>\n                )}\n              </RuleDescriptionColumn>\n            </RuleDescriptionRow>\n          </PanelBody>\n        </Panel>\n      );\n    }\n  }\n);\n\nclass ProjectAlertRules extends AsyncView {\n  static propTypes = {\n    routes: PropTypes.array.isRequired,\n  };\n\n  static contextTypes = {\n    organization: SentryTypes.Organization,\n  };\n\n  getEndpoints() {\n    const {orgId, projectId} = this.props.params;\n    return [['ruleList', `/projects/${orgId}/${projectId}/rules/`]];\n  }\n\n  handleDeleteRule = rule => {\n    this.setState({\n      ruleList: this.state.ruleList.filter(r => r.id !== rule.id),\n    });\n  };\n\n  renderEmpty() {\n    return (\n      <Panel>\n        <EmptyStateWarning>\n          <p>{t('There are no alerts configured for this project.')}</p>\n        </EmptyStateWarning>\n      </Panel>\n    );\n  }\n\n  renderResults() {\n    const {orgId, projectId} = this.props.params;\n    const {organization} = this.context;\n    const canEditRule = organization.access.includes('project:write');\n\n    return (\n      <div className=\"rules-list\">\n        {this.state.ruleList.map(rule => {\n          return (\n            <RuleRow\n              key={rule.id}\n              data={rule}\n              orgId={orgId}\n              projectId={projectId}\n              params={this.props.params}\n              routes={this.props.routes}\n              onDelete={this.handleDeleteRule.bind(this, rule)}\n              firstRule={this.state.ruleList.indexOf(rule) === 0}\n              canEdit={canEditRule}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  renderBody() {\n    const {ruleList} = this.state;\n    const {organization} = this.context;\n    const canEditRule = organization.access.includes('project:write');\n\n    return (\n      <React.Fragment>\n        <SettingsPageHeader\n          title={t('Alerts')}\n          action={\n            <Tooltip\n              disabled={canEditRule}\n              title={t('You do not have permission to edit alert rules.')}\n            >\n              <Button\n                disabled={!canEditRule}\n                to={recreateRoute('new/', this.props)}\n                priority=\"primary\"\n                size=\"small\"\n                icon=\"icon-circle-add\"\n              >\n                {t('New Alert Rule')}\n              </Button>\n            </Tooltip>\n          }\n          tabs={\n            <NavTabs underlined={true}>\n              <ListLink to={recreateRoute('alerts', {...this.props, stepBack: -4})}>\n                {t('Settings')}\n              </ListLink>\n              <ListLink to={recreateRoute('', this.props)}>{t('Rules')}</ListLink>\n            </NavTabs>\n          }\n        />\n        <PermissionAlert />\n        {!!ruleList.length && this.renderResults()}\n        {!ruleList.length && this.renderEmpty()}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ProjectAlertRules;\n"],"sourceRoot":""}