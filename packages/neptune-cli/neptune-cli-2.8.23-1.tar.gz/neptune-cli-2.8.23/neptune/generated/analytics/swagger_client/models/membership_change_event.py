# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class MembershipChangeEvent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, operation=None, organization_name=None, poc=None, previous_role=None, role=None, user_organizations=None, user_owned_organizations=None, users_in_team=None):
        """
        MembershipChangeEvent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'operation': 'str',
            'organization_name': 'str',
            'poc': 'bool',
            'previous_role': 'str',
            'role': 'str',
            'user_organizations': 'int',
            'user_owned_organizations': 'int',
            'users_in_team': 'int'
        }

        self.attribute_map = {
            'operation': 'operation',
            'organization_name': 'organizationName',
            'poc': 'poc',
            'previous_role': 'previousRole',
            'role': 'role',
            'user_organizations': 'userOrganizations',
            'user_owned_organizations': 'userOwnedOrganizations',
            'users_in_team': 'usersInTeam'
        }

        self._operation = operation
        self._organization_name = organization_name
        self._poc = poc
        self._previous_role = previous_role
        self._role = role
        self._user_organizations = user_organizations
        self._user_owned_organizations = user_owned_organizations
        self._users_in_team = users_in_team

    @property
    def operation(self):
        """
        Gets the operation of this MembershipChangeEvent.


        :return: The operation of this MembershipChangeEvent.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """
        Sets the operation of this MembershipChangeEvent.


        :param operation: The operation of this MembershipChangeEvent.
        :type: str
        """
        
        self._operation = operation

    @property
    def organization_name(self):
        """
        Gets the organization_name of this MembershipChangeEvent.


        :return: The organization_name of this MembershipChangeEvent.
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """
        Sets the organization_name of this MembershipChangeEvent.


        :param organization_name: The organization_name of this MembershipChangeEvent.
        :type: str
        """
        
        self._organization_name = organization_name

    @property
    def poc(self):
        """
        Gets the poc of this MembershipChangeEvent.


        :return: The poc of this MembershipChangeEvent.
        :rtype: bool
        """
        return self._poc

    @poc.setter
    def poc(self, poc):
        """
        Sets the poc of this MembershipChangeEvent.


        :param poc: The poc of this MembershipChangeEvent.
        :type: bool
        """
        
        self._poc = poc

    @property
    def previous_role(self):
        """
        Gets the previous_role of this MembershipChangeEvent.


        :return: The previous_role of this MembershipChangeEvent.
        :rtype: str
        """
        return self._previous_role

    @previous_role.setter
    def previous_role(self, previous_role):
        """
        Sets the previous_role of this MembershipChangeEvent.


        :param previous_role: The previous_role of this MembershipChangeEvent.
        :type: str
        """
        
        self._previous_role = previous_role

    @property
    def role(self):
        """
        Gets the role of this MembershipChangeEvent.


        :return: The role of this MembershipChangeEvent.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """
        Sets the role of this MembershipChangeEvent.


        :param role: The role of this MembershipChangeEvent.
        :type: str
        """
        
        self._role = role

    @property
    def user_organizations(self):
        """
        Gets the user_organizations of this MembershipChangeEvent.


        :return: The user_organizations of this MembershipChangeEvent.
        :rtype: int
        """
        return self._user_organizations

    @user_organizations.setter
    def user_organizations(self, user_organizations):
        """
        Sets the user_organizations of this MembershipChangeEvent.


        :param user_organizations: The user_organizations of this MembershipChangeEvent.
        :type: int
        """
        
        self._user_organizations = user_organizations

    @property
    def user_owned_organizations(self):
        """
        Gets the user_owned_organizations of this MembershipChangeEvent.


        :return: The user_owned_organizations of this MembershipChangeEvent.
        :rtype: int
        """
        return self._user_owned_organizations

    @user_owned_organizations.setter
    def user_owned_organizations(self, user_owned_organizations):
        """
        Sets the user_owned_organizations of this MembershipChangeEvent.


        :param user_owned_organizations: The user_owned_organizations of this MembershipChangeEvent.
        :type: int
        """
        
        self._user_owned_organizations = user_owned_organizations

    @property
    def users_in_team(self):
        """
        Gets the users_in_team of this MembershipChangeEvent.


        :return: The users_in_team of this MembershipChangeEvent.
        :rtype: int
        """
        return self._users_in_team

    @users_in_team.setter
    def users_in_team(self, users_in_team):
        """
        Sets the users_in_team of this MembershipChangeEvent.


        :param users_in_team: The users_in_team of this MembershipChangeEvent.
        :type: int
        """
        
        self._users_in_team = users_in_team

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




