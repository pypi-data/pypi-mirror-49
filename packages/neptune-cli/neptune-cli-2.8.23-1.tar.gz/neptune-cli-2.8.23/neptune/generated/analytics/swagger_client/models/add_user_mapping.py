# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class AddUserMapping(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, alias=None, id=None, message_type=None):
        """
        AddUserMapping - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'alias': 'str',
            'id': 'str',
            'message_type': 'str'
        }

        self.attribute_map = {
            'alias': 'alias',
            'id': 'id',
            'message_type': 'messageType'
        }

        self._alias = alias
        self._id = id
        self._message_type = message_type

    @property
    def alias(self):
        """
        Gets the alias of this AddUserMapping.


        :return: The alias of this AddUserMapping.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """
        Sets the alias of this AddUserMapping.


        :param alias: The alias of this AddUserMapping.
        :type: str
        """
        
        self._alias = alias

    @property
    def id(self):
        """
        Gets the id of this AddUserMapping.


        :return: The id of this AddUserMapping.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AddUserMapping.


        :param id: The id of this AddUserMapping.
        :type: str
        """
        
        self._id = id

    @property
    def message_type(self):
        """
        Gets the message_type of this AddUserMapping.


        :return: The message_type of this AddUserMapping.
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """
        Sets the message_type of this AddUserMapping.


        :param message_type: The message_type of this AddUserMapping.
        :type: str
        """
        allowed_values = ["ADD_USER_MAPPING"]
        if message_type not in allowed_values:
            raise ValueError(
                "Invalid value for `message_type`, must be one of {0}"
                .format(allowed_values)
            )

        self._message_type = message_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




