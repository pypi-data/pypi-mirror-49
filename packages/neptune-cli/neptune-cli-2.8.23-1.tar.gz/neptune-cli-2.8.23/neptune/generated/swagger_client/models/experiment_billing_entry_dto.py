# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ExperimentBillingEntryDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, project_name=None, trashed=None, state=None, time_of_completion=None, time_of_creation=None, project_id=None, organization_name=None, group_id=None, is_notebook=None, id=None, short_id=None, time_of_entered_running_state=None, worker_type=None, environment=None, responding=None, project_deleted=None, organization_id=None, owner=None, deleted=None):
        """
        ExperimentBillingEntryDTO - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'project_name': 'str',
            'trashed': 'bool',
            'state': 'ExperimentStateDTO',
            'time_of_completion': 'datetime',
            'time_of_creation': 'datetime',
            'project_id': 'str',
            'organization_name': 'str',
            'group_id': 'str',
            'is_notebook': 'bool',
            'id': 'str',
            'short_id': 'str',
            'time_of_entered_running_state': 'datetime',
            'worker_type': 'str',
            'environment': 'str',
            'responding': 'bool',
            'project_deleted': 'bool',
            'organization_id': 'str',
            'owner': 'str',
            'deleted': 'bool'
        }

        self.attribute_map = {
            'name': 'name',
            'project_name': 'projectName',
            'trashed': 'trashed',
            'state': 'state',
            'time_of_completion': 'timeOfCompletion',
            'time_of_creation': 'timeOfCreation',
            'project_id': 'projectId',
            'organization_name': 'organizationName',
            'group_id': 'groupId',
            'is_notebook': 'isNotebook',
            'id': 'id',
            'short_id': 'shortId',
            'time_of_entered_running_state': 'timeOfEnteredRunningState',
            'worker_type': 'workerType',
            'environment': 'environment',
            'responding': 'responding',
            'project_deleted': 'projectDeleted',
            'organization_id': 'organizationId',
            'owner': 'owner',
            'deleted': 'deleted'
        }

        self._name = name
        self._project_name = project_name
        self._trashed = trashed
        self._state = state
        self._time_of_completion = time_of_completion
        self._time_of_creation = time_of_creation
        self._project_id = project_id
        self._organization_name = organization_name
        self._group_id = group_id
        self._is_notebook = is_notebook
        self._id = id
        self._short_id = short_id
        self._time_of_entered_running_state = time_of_entered_running_state
        self._worker_type = worker_type
        self._environment = environment
        self._responding = responding
        self._project_deleted = project_deleted
        self._organization_id = organization_id
        self._owner = owner
        self._deleted = deleted

    @property
    def name(self):
        """
        Gets the name of this ExperimentBillingEntryDTO.


        :return: The name of this ExperimentBillingEntryDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ExperimentBillingEntryDTO.


        :param name: The name of this ExperimentBillingEntryDTO.
        :type: str
        """
        
        self._name = name

    @property
    def project_name(self):
        """
        Gets the project_name of this ExperimentBillingEntryDTO.


        :return: The project_name of this ExperimentBillingEntryDTO.
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """
        Sets the project_name of this ExperimentBillingEntryDTO.


        :param project_name: The project_name of this ExperimentBillingEntryDTO.
        :type: str
        """
        
        self._project_name = project_name

    @property
    def trashed(self):
        """
        Gets the trashed of this ExperimentBillingEntryDTO.


        :return: The trashed of this ExperimentBillingEntryDTO.
        :rtype: bool
        """
        return self._trashed

    @trashed.setter
    def trashed(self, trashed):
        """
        Sets the trashed of this ExperimentBillingEntryDTO.


        :param trashed: The trashed of this ExperimentBillingEntryDTO.
        :type: bool
        """
        
        self._trashed = trashed

    @property
    def state(self):
        """
        Gets the state of this ExperimentBillingEntryDTO.


        :return: The state of this ExperimentBillingEntryDTO.
        :rtype: ExperimentStateDTO
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this ExperimentBillingEntryDTO.


        :param state: The state of this ExperimentBillingEntryDTO.
        :type: ExperimentStateDTO
        """
        
        self._state = state

    @property
    def time_of_completion(self):
        """
        Gets the time_of_completion of this ExperimentBillingEntryDTO.


        :return: The time_of_completion of this ExperimentBillingEntryDTO.
        :rtype: datetime
        """
        return self._time_of_completion

    @time_of_completion.setter
    def time_of_completion(self, time_of_completion):
        """
        Sets the time_of_completion of this ExperimentBillingEntryDTO.


        :param time_of_completion: The time_of_completion of this ExperimentBillingEntryDTO.
        :type: datetime
        """
        
        self._time_of_completion = time_of_completion

    @property
    def time_of_creation(self):
        """
        Gets the time_of_creation of this ExperimentBillingEntryDTO.


        :return: The time_of_creation of this ExperimentBillingEntryDTO.
        :rtype: datetime
        """
        return self._time_of_creation

    @time_of_creation.setter
    def time_of_creation(self, time_of_creation):
        """
        Sets the time_of_creation of this ExperimentBillingEntryDTO.


        :param time_of_creation: The time_of_creation of this ExperimentBillingEntryDTO.
        :type: datetime
        """
        
        self._time_of_creation = time_of_creation

    @property
    def project_id(self):
        """
        Gets the project_id of this ExperimentBillingEntryDTO.


        :return: The project_id of this ExperimentBillingEntryDTO.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """
        Sets the project_id of this ExperimentBillingEntryDTO.


        :param project_id: The project_id of this ExperimentBillingEntryDTO.
        :type: str
        """
        
        self._project_id = project_id

    @property
    def organization_name(self):
        """
        Gets the organization_name of this ExperimentBillingEntryDTO.


        :return: The organization_name of this ExperimentBillingEntryDTO.
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """
        Sets the organization_name of this ExperimentBillingEntryDTO.


        :param organization_name: The organization_name of this ExperimentBillingEntryDTO.
        :type: str
        """
        
        self._organization_name = organization_name

    @property
    def group_id(self):
        """
        Gets the group_id of this ExperimentBillingEntryDTO.


        :return: The group_id of this ExperimentBillingEntryDTO.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """
        Sets the group_id of this ExperimentBillingEntryDTO.


        :param group_id: The group_id of this ExperimentBillingEntryDTO.
        :type: str
        """
        
        self._group_id = group_id

    @property
    def is_notebook(self):
        """
        Gets the is_notebook of this ExperimentBillingEntryDTO.


        :return: The is_notebook of this ExperimentBillingEntryDTO.
        :rtype: bool
        """
        return self._is_notebook

    @is_notebook.setter
    def is_notebook(self, is_notebook):
        """
        Sets the is_notebook of this ExperimentBillingEntryDTO.


        :param is_notebook: The is_notebook of this ExperimentBillingEntryDTO.
        :type: bool
        """
        
        self._is_notebook = is_notebook

    @property
    def id(self):
        """
        Gets the id of this ExperimentBillingEntryDTO.


        :return: The id of this ExperimentBillingEntryDTO.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ExperimentBillingEntryDTO.


        :param id: The id of this ExperimentBillingEntryDTO.
        :type: str
        """
        
        self._id = id

    @property
    def short_id(self):
        """
        Gets the short_id of this ExperimentBillingEntryDTO.


        :return: The short_id of this ExperimentBillingEntryDTO.
        :rtype: str
        """
        return self._short_id

    @short_id.setter
    def short_id(self, short_id):
        """
        Sets the short_id of this ExperimentBillingEntryDTO.


        :param short_id: The short_id of this ExperimentBillingEntryDTO.
        :type: str
        """
        
        self._short_id = short_id

    @property
    def time_of_entered_running_state(self):
        """
        Gets the time_of_entered_running_state of this ExperimentBillingEntryDTO.


        :return: The time_of_entered_running_state of this ExperimentBillingEntryDTO.
        :rtype: datetime
        """
        return self._time_of_entered_running_state

    @time_of_entered_running_state.setter
    def time_of_entered_running_state(self, time_of_entered_running_state):
        """
        Sets the time_of_entered_running_state of this ExperimentBillingEntryDTO.


        :param time_of_entered_running_state: The time_of_entered_running_state of this ExperimentBillingEntryDTO.
        :type: datetime
        """
        
        self._time_of_entered_running_state = time_of_entered_running_state

    @property
    def worker_type(self):
        """
        Gets the worker_type of this ExperimentBillingEntryDTO.


        :return: The worker_type of this ExperimentBillingEntryDTO.
        :rtype: str
        """
        return self._worker_type

    @worker_type.setter
    def worker_type(self, worker_type):
        """
        Sets the worker_type of this ExperimentBillingEntryDTO.


        :param worker_type: The worker_type of this ExperimentBillingEntryDTO.
        :type: str
        """
        
        self._worker_type = worker_type

    @property
    def environment(self):
        """
        Gets the environment of this ExperimentBillingEntryDTO.


        :return: The environment of this ExperimentBillingEntryDTO.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """
        Sets the environment of this ExperimentBillingEntryDTO.


        :param environment: The environment of this ExperimentBillingEntryDTO.
        :type: str
        """
        
        self._environment = environment

    @property
    def responding(self):
        """
        Gets the responding of this ExperimentBillingEntryDTO.


        :return: The responding of this ExperimentBillingEntryDTO.
        :rtype: bool
        """
        return self._responding

    @responding.setter
    def responding(self, responding):
        """
        Sets the responding of this ExperimentBillingEntryDTO.


        :param responding: The responding of this ExperimentBillingEntryDTO.
        :type: bool
        """
        
        self._responding = responding

    @property
    def project_deleted(self):
        """
        Gets the project_deleted of this ExperimentBillingEntryDTO.


        :return: The project_deleted of this ExperimentBillingEntryDTO.
        :rtype: bool
        """
        return self._project_deleted

    @project_deleted.setter
    def project_deleted(self, project_deleted):
        """
        Sets the project_deleted of this ExperimentBillingEntryDTO.


        :param project_deleted: The project_deleted of this ExperimentBillingEntryDTO.
        :type: bool
        """
        
        self._project_deleted = project_deleted

    @property
    def organization_id(self):
        """
        Gets the organization_id of this ExperimentBillingEntryDTO.


        :return: The organization_id of this ExperimentBillingEntryDTO.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this ExperimentBillingEntryDTO.


        :param organization_id: The organization_id of this ExperimentBillingEntryDTO.
        :type: str
        """
        
        self._organization_id = organization_id

    @property
    def owner(self):
        """
        Gets the owner of this ExperimentBillingEntryDTO.


        :return: The owner of this ExperimentBillingEntryDTO.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this ExperimentBillingEntryDTO.


        :param owner: The owner of this ExperimentBillingEntryDTO.
        :type: str
        """
        
        self._owner = owner

    @property
    def deleted(self):
        """
        Gets the deleted of this ExperimentBillingEntryDTO.


        :return: The deleted of this ExperimentBillingEntryDTO.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this ExperimentBillingEntryDTO.


        :param deleted: The deleted of this ExperimentBillingEntryDTO.
        :type: bool
        """
        
        self._deleted = deleted

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




