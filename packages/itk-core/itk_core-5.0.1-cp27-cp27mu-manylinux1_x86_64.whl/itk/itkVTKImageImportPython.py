# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkVTKImageImportPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkVTKImageImportPython', [dirname(__file__)])
        except ImportError:
            import _itkVTKImageImportPython
            return _itkVTKImageImportPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkVTKImageImportPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkVTKImageImportPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkVTKImageImportPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageSourcePython
import itkImagePython
import stdcomplexPython
import pyBasePython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import ITKCommonBasePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkRGBAPixelPython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython

def itkVTKImageImportICVF43_New():
  return itkVTKImageImportICVF43.New()


def itkVTKImageImportICVF42_New():
  return itkVTKImageImportICVF42.New()


def itkVTKImageImportICVF33_New():
  return itkVTKImageImportICVF33.New()


def itkVTKImageImportICVF32_New():
  return itkVTKImageImportICVF32.New()


def itkVTKImageImportICVF23_New():
  return itkVTKImageImportICVF23.New()


def itkVTKImageImportICVF22_New():
  return itkVTKImageImportICVF22.New()


def itkVTKImageImportIVF43_New():
  return itkVTKImageImportIVF43.New()


def itkVTKImageImportIVF42_New():
  return itkVTKImageImportIVF42.New()


def itkVTKImageImportIVF33_New():
  return itkVTKImageImportIVF33.New()


def itkVTKImageImportIVF32_New():
  return itkVTKImageImportIVF32.New()


def itkVTKImageImportIVF23_New():
  return itkVTKImageImportIVF23.New()


def itkVTKImageImportIVF22_New():
  return itkVTKImageImportIVF22.New()


def itkVTKImageImportIRGBAUC3_New():
  return itkVTKImageImportIRGBAUC3.New()


def itkVTKImageImportIRGBAUC2_New():
  return itkVTKImageImportIRGBAUC2.New()


def itkVTKImageImportIRGBUC3_New():
  return itkVTKImageImportIRGBUC3.New()


def itkVTKImageImportIRGBUC2_New():
  return itkVTKImageImportIRGBUC2.New()


def itkVTKImageImportIF3_New():
  return itkVTKImageImportIF3.New()


def itkVTKImageImportIF2_New():
  return itkVTKImageImportIF2.New()


def itkVTKImageImportIUS3_New():
  return itkVTKImageImportIUS3.New()


def itkVTKImageImportIUS2_New():
  return itkVTKImageImportIUS2.New()


def itkVTKImageImportISS3_New():
  return itkVTKImageImportISS3.New()


def itkVTKImageImportISS2_New():
  return itkVTKImageImportISS2.New()


def itkVTKImageImportIUL3_New():
  return itkVTKImageImportIUL3.New()


def itkVTKImageImportIUL2_New():
  return itkVTKImageImportIUL2.New()


def itkVTKImageImportIUC3_New():
  return itkVTKImageImportIUC3.New()


def itkVTKImageImportIUC2_New():
  return itkVTKImageImportIUC2.New()

class itkVTKImageImportICVF22(itkImageSourcePython.itkImageSourceICVF22):
    """


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport

    C++ includes: itkVTKImageImport.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVTKImageImportICVF22_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVTKImageImportICVF22 self) -> itkVTKImageImportICVF22_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF22_Clone(self)


    def SetCallbackUserData(self, _arg):
        """SetCallbackUserData(itkVTKImageImportICVF22 self, void * _arg)"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF22_SetCallbackUserData(self, _arg)


    def GetCallbackUserData(self):
        """GetCallbackUserData(itkVTKImageImportICVF22 self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF22_GetCallbackUserData(self)

    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportICVF22

    def cast(obj):
        """cast(itkLightObject obj) -> itkVTKImageImportICVF22"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportICVF22

        Create a new object of the class itkVTKImageImportICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportICVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVTKImageImportICVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVTKImageImportICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVTKImageImportICVF22.Clone = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportICVF22_Clone, None, itkVTKImageImportICVF22)
itkVTKImageImportICVF22.SetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportICVF22_SetCallbackUserData, None, itkVTKImageImportICVF22)
itkVTKImageImportICVF22.GetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportICVF22_GetCallbackUserData, None, itkVTKImageImportICVF22)
itkVTKImageImportICVF22_swigregister = _itkVTKImageImportPython.itkVTKImageImportICVF22_swigregister
itkVTKImageImportICVF22_swigregister(itkVTKImageImportICVF22)

def itkVTKImageImportICVF22___New_orig__():
    """itkVTKImageImportICVF22___New_orig__() -> itkVTKImageImportICVF22_Pointer"""
    return _itkVTKImageImportPython.itkVTKImageImportICVF22___New_orig__()

def itkVTKImageImportICVF22_cast(obj):
    """itkVTKImageImportICVF22_cast(itkLightObject obj) -> itkVTKImageImportICVF22"""
    return _itkVTKImageImportPython.itkVTKImageImportICVF22_cast(obj)

class itkVTKImageImportICVF23(itkImageSourcePython.itkImageSourceICVF23):
    """


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport

    C++ includes: itkVTKImageImport.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVTKImageImportICVF23_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF23___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVTKImageImportICVF23 self) -> itkVTKImageImportICVF23_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF23_Clone(self)


    def SetCallbackUserData(self, _arg):
        """SetCallbackUserData(itkVTKImageImportICVF23 self, void * _arg)"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF23_SetCallbackUserData(self, _arg)


    def GetCallbackUserData(self):
        """GetCallbackUserData(itkVTKImageImportICVF23 self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF23_GetCallbackUserData(self)

    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportICVF23

    def cast(obj):
        """cast(itkLightObject obj) -> itkVTKImageImportICVF23"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF23_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportICVF23

        Create a new object of the class itkVTKImageImportICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportICVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVTKImageImportICVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVTKImageImportICVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVTKImageImportICVF23.Clone = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportICVF23_Clone, None, itkVTKImageImportICVF23)
itkVTKImageImportICVF23.SetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportICVF23_SetCallbackUserData, None, itkVTKImageImportICVF23)
itkVTKImageImportICVF23.GetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportICVF23_GetCallbackUserData, None, itkVTKImageImportICVF23)
itkVTKImageImportICVF23_swigregister = _itkVTKImageImportPython.itkVTKImageImportICVF23_swigregister
itkVTKImageImportICVF23_swigregister(itkVTKImageImportICVF23)

def itkVTKImageImportICVF23___New_orig__():
    """itkVTKImageImportICVF23___New_orig__() -> itkVTKImageImportICVF23_Pointer"""
    return _itkVTKImageImportPython.itkVTKImageImportICVF23___New_orig__()

def itkVTKImageImportICVF23_cast(obj):
    """itkVTKImageImportICVF23_cast(itkLightObject obj) -> itkVTKImageImportICVF23"""
    return _itkVTKImageImportPython.itkVTKImageImportICVF23_cast(obj)

class itkVTKImageImportICVF32(itkImageSourcePython.itkImageSourceICVF32):
    """


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport

    C++ includes: itkVTKImageImport.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVTKImageImportICVF32_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF32___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVTKImageImportICVF32 self) -> itkVTKImageImportICVF32_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF32_Clone(self)


    def SetCallbackUserData(self, _arg):
        """SetCallbackUserData(itkVTKImageImportICVF32 self, void * _arg)"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF32_SetCallbackUserData(self, _arg)


    def GetCallbackUserData(self):
        """GetCallbackUserData(itkVTKImageImportICVF32 self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF32_GetCallbackUserData(self)

    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportICVF32

    def cast(obj):
        """cast(itkLightObject obj) -> itkVTKImageImportICVF32"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF32_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportICVF32

        Create a new object of the class itkVTKImageImportICVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportICVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVTKImageImportICVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVTKImageImportICVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVTKImageImportICVF32.Clone = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportICVF32_Clone, None, itkVTKImageImportICVF32)
itkVTKImageImportICVF32.SetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportICVF32_SetCallbackUserData, None, itkVTKImageImportICVF32)
itkVTKImageImportICVF32.GetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportICVF32_GetCallbackUserData, None, itkVTKImageImportICVF32)
itkVTKImageImportICVF32_swigregister = _itkVTKImageImportPython.itkVTKImageImportICVF32_swigregister
itkVTKImageImportICVF32_swigregister(itkVTKImageImportICVF32)

def itkVTKImageImportICVF32___New_orig__():
    """itkVTKImageImportICVF32___New_orig__() -> itkVTKImageImportICVF32_Pointer"""
    return _itkVTKImageImportPython.itkVTKImageImportICVF32___New_orig__()

def itkVTKImageImportICVF32_cast(obj):
    """itkVTKImageImportICVF32_cast(itkLightObject obj) -> itkVTKImageImportICVF32"""
    return _itkVTKImageImportPython.itkVTKImageImportICVF32_cast(obj)

class itkVTKImageImportICVF33(itkImageSourcePython.itkImageSourceICVF33):
    """


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport

    C++ includes: itkVTKImageImport.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVTKImageImportICVF33_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVTKImageImportICVF33 self) -> itkVTKImageImportICVF33_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF33_Clone(self)


    def SetCallbackUserData(self, _arg):
        """SetCallbackUserData(itkVTKImageImportICVF33 self, void * _arg)"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF33_SetCallbackUserData(self, _arg)


    def GetCallbackUserData(self):
        """GetCallbackUserData(itkVTKImageImportICVF33 self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF33_GetCallbackUserData(self)

    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportICVF33

    def cast(obj):
        """cast(itkLightObject obj) -> itkVTKImageImportICVF33"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportICVF33

        Create a new object of the class itkVTKImageImportICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportICVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVTKImageImportICVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVTKImageImportICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVTKImageImportICVF33.Clone = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportICVF33_Clone, None, itkVTKImageImportICVF33)
itkVTKImageImportICVF33.SetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportICVF33_SetCallbackUserData, None, itkVTKImageImportICVF33)
itkVTKImageImportICVF33.GetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportICVF33_GetCallbackUserData, None, itkVTKImageImportICVF33)
itkVTKImageImportICVF33_swigregister = _itkVTKImageImportPython.itkVTKImageImportICVF33_swigregister
itkVTKImageImportICVF33_swigregister(itkVTKImageImportICVF33)

def itkVTKImageImportICVF33___New_orig__():
    """itkVTKImageImportICVF33___New_orig__() -> itkVTKImageImportICVF33_Pointer"""
    return _itkVTKImageImportPython.itkVTKImageImportICVF33___New_orig__()

def itkVTKImageImportICVF33_cast(obj):
    """itkVTKImageImportICVF33_cast(itkLightObject obj) -> itkVTKImageImportICVF33"""
    return _itkVTKImageImportPython.itkVTKImageImportICVF33_cast(obj)

class itkVTKImageImportICVF42(itkImageSourcePython.itkImageSourceICVF42):
    """


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport

    C++ includes: itkVTKImageImport.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVTKImageImportICVF42_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF42___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVTKImageImportICVF42 self) -> itkVTKImageImportICVF42_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF42_Clone(self)


    def SetCallbackUserData(self, _arg):
        """SetCallbackUserData(itkVTKImageImportICVF42 self, void * _arg)"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF42_SetCallbackUserData(self, _arg)


    def GetCallbackUserData(self):
        """GetCallbackUserData(itkVTKImageImportICVF42 self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF42_GetCallbackUserData(self)

    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportICVF42

    def cast(obj):
        """cast(itkLightObject obj) -> itkVTKImageImportICVF42"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF42_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportICVF42

        Create a new object of the class itkVTKImageImportICVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportICVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVTKImageImportICVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVTKImageImportICVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVTKImageImportICVF42.Clone = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportICVF42_Clone, None, itkVTKImageImportICVF42)
itkVTKImageImportICVF42.SetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportICVF42_SetCallbackUserData, None, itkVTKImageImportICVF42)
itkVTKImageImportICVF42.GetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportICVF42_GetCallbackUserData, None, itkVTKImageImportICVF42)
itkVTKImageImportICVF42_swigregister = _itkVTKImageImportPython.itkVTKImageImportICVF42_swigregister
itkVTKImageImportICVF42_swigregister(itkVTKImageImportICVF42)

def itkVTKImageImportICVF42___New_orig__():
    """itkVTKImageImportICVF42___New_orig__() -> itkVTKImageImportICVF42_Pointer"""
    return _itkVTKImageImportPython.itkVTKImageImportICVF42___New_orig__()

def itkVTKImageImportICVF42_cast(obj):
    """itkVTKImageImportICVF42_cast(itkLightObject obj) -> itkVTKImageImportICVF42"""
    return _itkVTKImageImportPython.itkVTKImageImportICVF42_cast(obj)

class itkVTKImageImportICVF43(itkImageSourcePython.itkImageSourceICVF43):
    """


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport

    C++ includes: itkVTKImageImport.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVTKImageImportICVF43_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF43___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVTKImageImportICVF43 self) -> itkVTKImageImportICVF43_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF43_Clone(self)


    def SetCallbackUserData(self, _arg):
        """SetCallbackUserData(itkVTKImageImportICVF43 self, void * _arg)"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF43_SetCallbackUserData(self, _arg)


    def GetCallbackUserData(self):
        """GetCallbackUserData(itkVTKImageImportICVF43 self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF43_GetCallbackUserData(self)

    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportICVF43

    def cast(obj):
        """cast(itkLightObject obj) -> itkVTKImageImportICVF43"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF43_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportICVF43

        Create a new object of the class itkVTKImageImportICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportICVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVTKImageImportICVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVTKImageImportICVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVTKImageImportICVF43.Clone = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportICVF43_Clone, None, itkVTKImageImportICVF43)
itkVTKImageImportICVF43.SetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportICVF43_SetCallbackUserData, None, itkVTKImageImportICVF43)
itkVTKImageImportICVF43.GetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportICVF43_GetCallbackUserData, None, itkVTKImageImportICVF43)
itkVTKImageImportICVF43_swigregister = _itkVTKImageImportPython.itkVTKImageImportICVF43_swigregister
itkVTKImageImportICVF43_swigregister(itkVTKImageImportICVF43)

def itkVTKImageImportICVF43___New_orig__():
    """itkVTKImageImportICVF43___New_orig__() -> itkVTKImageImportICVF43_Pointer"""
    return _itkVTKImageImportPython.itkVTKImageImportICVF43___New_orig__()

def itkVTKImageImportICVF43_cast(obj):
    """itkVTKImageImportICVF43_cast(itkLightObject obj) -> itkVTKImageImportICVF43"""
    return _itkVTKImageImportPython.itkVTKImageImportICVF43_cast(obj)

class itkVTKImageImportIF2(itkImageSourcePython.itkImageSourceIF2):
    """


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport

    C++ includes: itkVTKImageImport.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVTKImageImportIF2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVTKImageImportIF2 self) -> itkVTKImageImportIF2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIF2_Clone(self)


    def SetCallbackUserData(self, _arg):
        """SetCallbackUserData(itkVTKImageImportIF2 self, void * _arg)"""
        return _itkVTKImageImportPython.itkVTKImageImportIF2_SetCallbackUserData(self, _arg)


    def GetCallbackUserData(self):
        """GetCallbackUserData(itkVTKImageImportIF2 self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIF2_GetCallbackUserData(self)

    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIF2

    def cast(obj):
        """cast(itkLightObject obj) -> itkVTKImageImportIF2"""
        return _itkVTKImageImportPython.itkVTKImageImportIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIF2

        Create a new object of the class itkVTKImageImportIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVTKImageImportIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVTKImageImportIF2.Clone = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIF2_Clone, None, itkVTKImageImportIF2)
itkVTKImageImportIF2.SetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIF2_SetCallbackUserData, None, itkVTKImageImportIF2)
itkVTKImageImportIF2.GetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIF2_GetCallbackUserData, None, itkVTKImageImportIF2)
itkVTKImageImportIF2_swigregister = _itkVTKImageImportPython.itkVTKImageImportIF2_swigregister
itkVTKImageImportIF2_swigregister(itkVTKImageImportIF2)

def itkVTKImageImportIF2___New_orig__():
    """itkVTKImageImportIF2___New_orig__() -> itkVTKImageImportIF2_Pointer"""
    return _itkVTKImageImportPython.itkVTKImageImportIF2___New_orig__()

def itkVTKImageImportIF2_cast(obj):
    """itkVTKImageImportIF2_cast(itkLightObject obj) -> itkVTKImageImportIF2"""
    return _itkVTKImageImportPython.itkVTKImageImportIF2_cast(obj)

class itkVTKImageImportIF3(itkImageSourcePython.itkImageSourceIF3):
    """


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport

    C++ includes: itkVTKImageImport.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVTKImageImportIF3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVTKImageImportIF3 self) -> itkVTKImageImportIF3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIF3_Clone(self)


    def SetCallbackUserData(self, _arg):
        """SetCallbackUserData(itkVTKImageImportIF3 self, void * _arg)"""
        return _itkVTKImageImportPython.itkVTKImageImportIF3_SetCallbackUserData(self, _arg)


    def GetCallbackUserData(self):
        """GetCallbackUserData(itkVTKImageImportIF3 self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIF3_GetCallbackUserData(self)

    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIF3

    def cast(obj):
        """cast(itkLightObject obj) -> itkVTKImageImportIF3"""
        return _itkVTKImageImportPython.itkVTKImageImportIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIF3

        Create a new object of the class itkVTKImageImportIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVTKImageImportIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVTKImageImportIF3.Clone = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIF3_Clone, None, itkVTKImageImportIF3)
itkVTKImageImportIF3.SetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIF3_SetCallbackUserData, None, itkVTKImageImportIF3)
itkVTKImageImportIF3.GetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIF3_GetCallbackUserData, None, itkVTKImageImportIF3)
itkVTKImageImportIF3_swigregister = _itkVTKImageImportPython.itkVTKImageImportIF3_swigregister
itkVTKImageImportIF3_swigregister(itkVTKImageImportIF3)

def itkVTKImageImportIF3___New_orig__():
    """itkVTKImageImportIF3___New_orig__() -> itkVTKImageImportIF3_Pointer"""
    return _itkVTKImageImportPython.itkVTKImageImportIF3___New_orig__()

def itkVTKImageImportIF3_cast(obj):
    """itkVTKImageImportIF3_cast(itkLightObject obj) -> itkVTKImageImportIF3"""
    return _itkVTKImageImportPython.itkVTKImageImportIF3_cast(obj)

class itkVTKImageImportIRGBAUC2(itkImageSourcePython.itkImageSourceIRGBAUC2):
    """


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport

    C++ includes: itkVTKImageImport.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVTKImageImportIRGBAUC2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBAUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVTKImageImportIRGBAUC2 self) -> itkVTKImageImportIRGBAUC2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBAUC2_Clone(self)


    def SetCallbackUserData(self, _arg):
        """SetCallbackUserData(itkVTKImageImportIRGBAUC2 self, void * _arg)"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBAUC2_SetCallbackUserData(self, _arg)


    def GetCallbackUserData(self):
        """GetCallbackUserData(itkVTKImageImportIRGBAUC2 self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBAUC2_GetCallbackUserData(self)

    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIRGBAUC2

    def cast(obj):
        """cast(itkLightObject obj) -> itkVTKImageImportIRGBAUC2"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBAUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIRGBAUC2

        Create a new object of the class itkVTKImageImportIRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIRGBAUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIRGBAUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVTKImageImportIRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVTKImageImportIRGBAUC2.Clone = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIRGBAUC2_Clone, None, itkVTKImageImportIRGBAUC2)
itkVTKImageImportIRGBAUC2.SetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIRGBAUC2_SetCallbackUserData, None, itkVTKImageImportIRGBAUC2)
itkVTKImageImportIRGBAUC2.GetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIRGBAUC2_GetCallbackUserData, None, itkVTKImageImportIRGBAUC2)
itkVTKImageImportIRGBAUC2_swigregister = _itkVTKImageImportPython.itkVTKImageImportIRGBAUC2_swigregister
itkVTKImageImportIRGBAUC2_swigregister(itkVTKImageImportIRGBAUC2)

def itkVTKImageImportIRGBAUC2___New_orig__():
    """itkVTKImageImportIRGBAUC2___New_orig__() -> itkVTKImageImportIRGBAUC2_Pointer"""
    return _itkVTKImageImportPython.itkVTKImageImportIRGBAUC2___New_orig__()

def itkVTKImageImportIRGBAUC2_cast(obj):
    """itkVTKImageImportIRGBAUC2_cast(itkLightObject obj) -> itkVTKImageImportIRGBAUC2"""
    return _itkVTKImageImportPython.itkVTKImageImportIRGBAUC2_cast(obj)

class itkVTKImageImportIRGBAUC3(itkImageSourcePython.itkImageSourceIRGBAUC3):
    """


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport

    C++ includes: itkVTKImageImport.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVTKImageImportIRGBAUC3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBAUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVTKImageImportIRGBAUC3 self) -> itkVTKImageImportIRGBAUC3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBAUC3_Clone(self)


    def SetCallbackUserData(self, _arg):
        """SetCallbackUserData(itkVTKImageImportIRGBAUC3 self, void * _arg)"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBAUC3_SetCallbackUserData(self, _arg)


    def GetCallbackUserData(self):
        """GetCallbackUserData(itkVTKImageImportIRGBAUC3 self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBAUC3_GetCallbackUserData(self)

    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIRGBAUC3

    def cast(obj):
        """cast(itkLightObject obj) -> itkVTKImageImportIRGBAUC3"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBAUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIRGBAUC3

        Create a new object of the class itkVTKImageImportIRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIRGBAUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIRGBAUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVTKImageImportIRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVTKImageImportIRGBAUC3.Clone = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIRGBAUC3_Clone, None, itkVTKImageImportIRGBAUC3)
itkVTKImageImportIRGBAUC3.SetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIRGBAUC3_SetCallbackUserData, None, itkVTKImageImportIRGBAUC3)
itkVTKImageImportIRGBAUC3.GetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIRGBAUC3_GetCallbackUserData, None, itkVTKImageImportIRGBAUC3)
itkVTKImageImportIRGBAUC3_swigregister = _itkVTKImageImportPython.itkVTKImageImportIRGBAUC3_swigregister
itkVTKImageImportIRGBAUC3_swigregister(itkVTKImageImportIRGBAUC3)

def itkVTKImageImportIRGBAUC3___New_orig__():
    """itkVTKImageImportIRGBAUC3___New_orig__() -> itkVTKImageImportIRGBAUC3_Pointer"""
    return _itkVTKImageImportPython.itkVTKImageImportIRGBAUC3___New_orig__()

def itkVTKImageImportIRGBAUC3_cast(obj):
    """itkVTKImageImportIRGBAUC3_cast(itkLightObject obj) -> itkVTKImageImportIRGBAUC3"""
    return _itkVTKImageImportPython.itkVTKImageImportIRGBAUC3_cast(obj)

class itkVTKImageImportIRGBUC2(itkImageSourcePython.itkImageSourceIRGBUC2):
    """


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport

    C++ includes: itkVTKImageImport.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVTKImageImportIRGBUC2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVTKImageImportIRGBUC2 self) -> itkVTKImageImportIRGBUC2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBUC2_Clone(self)


    def SetCallbackUserData(self, _arg):
        """SetCallbackUserData(itkVTKImageImportIRGBUC2 self, void * _arg)"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBUC2_SetCallbackUserData(self, _arg)


    def GetCallbackUserData(self):
        """GetCallbackUserData(itkVTKImageImportIRGBUC2 self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBUC2_GetCallbackUserData(self)

    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIRGBUC2

    def cast(obj):
        """cast(itkLightObject obj) -> itkVTKImageImportIRGBUC2"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIRGBUC2

        Create a new object of the class itkVTKImageImportIRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIRGBUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIRGBUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVTKImageImportIRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVTKImageImportIRGBUC2.Clone = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIRGBUC2_Clone, None, itkVTKImageImportIRGBUC2)
itkVTKImageImportIRGBUC2.SetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIRGBUC2_SetCallbackUserData, None, itkVTKImageImportIRGBUC2)
itkVTKImageImportIRGBUC2.GetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIRGBUC2_GetCallbackUserData, None, itkVTKImageImportIRGBUC2)
itkVTKImageImportIRGBUC2_swigregister = _itkVTKImageImportPython.itkVTKImageImportIRGBUC2_swigregister
itkVTKImageImportIRGBUC2_swigregister(itkVTKImageImportIRGBUC2)

def itkVTKImageImportIRGBUC2___New_orig__():
    """itkVTKImageImportIRGBUC2___New_orig__() -> itkVTKImageImportIRGBUC2_Pointer"""
    return _itkVTKImageImportPython.itkVTKImageImportIRGBUC2___New_orig__()

def itkVTKImageImportIRGBUC2_cast(obj):
    """itkVTKImageImportIRGBUC2_cast(itkLightObject obj) -> itkVTKImageImportIRGBUC2"""
    return _itkVTKImageImportPython.itkVTKImageImportIRGBUC2_cast(obj)

class itkVTKImageImportIRGBUC3(itkImageSourcePython.itkImageSourceIRGBUC3):
    """


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport

    C++ includes: itkVTKImageImport.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVTKImageImportIRGBUC3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVTKImageImportIRGBUC3 self) -> itkVTKImageImportIRGBUC3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBUC3_Clone(self)


    def SetCallbackUserData(self, _arg):
        """SetCallbackUserData(itkVTKImageImportIRGBUC3 self, void * _arg)"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBUC3_SetCallbackUserData(self, _arg)


    def GetCallbackUserData(self):
        """GetCallbackUserData(itkVTKImageImportIRGBUC3 self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBUC3_GetCallbackUserData(self)

    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIRGBUC3

    def cast(obj):
        """cast(itkLightObject obj) -> itkVTKImageImportIRGBUC3"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIRGBUC3

        Create a new object of the class itkVTKImageImportIRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIRGBUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIRGBUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVTKImageImportIRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVTKImageImportIRGBUC3.Clone = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIRGBUC3_Clone, None, itkVTKImageImportIRGBUC3)
itkVTKImageImportIRGBUC3.SetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIRGBUC3_SetCallbackUserData, None, itkVTKImageImportIRGBUC3)
itkVTKImageImportIRGBUC3.GetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIRGBUC3_GetCallbackUserData, None, itkVTKImageImportIRGBUC3)
itkVTKImageImportIRGBUC3_swigregister = _itkVTKImageImportPython.itkVTKImageImportIRGBUC3_swigregister
itkVTKImageImportIRGBUC3_swigregister(itkVTKImageImportIRGBUC3)

def itkVTKImageImportIRGBUC3___New_orig__():
    """itkVTKImageImportIRGBUC3___New_orig__() -> itkVTKImageImportIRGBUC3_Pointer"""
    return _itkVTKImageImportPython.itkVTKImageImportIRGBUC3___New_orig__()

def itkVTKImageImportIRGBUC3_cast(obj):
    """itkVTKImageImportIRGBUC3_cast(itkLightObject obj) -> itkVTKImageImportIRGBUC3"""
    return _itkVTKImageImportPython.itkVTKImageImportIRGBUC3_cast(obj)

class itkVTKImageImportISS2(itkImageSourcePython.itkImageSourceISS2):
    """


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport

    C++ includes: itkVTKImageImport.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVTKImageImportISS2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVTKImageImportISS2 self) -> itkVTKImageImportISS2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportISS2_Clone(self)


    def SetCallbackUserData(self, _arg):
        """SetCallbackUserData(itkVTKImageImportISS2 self, void * _arg)"""
        return _itkVTKImageImportPython.itkVTKImageImportISS2_SetCallbackUserData(self, _arg)


    def GetCallbackUserData(self):
        """GetCallbackUserData(itkVTKImageImportISS2 self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportISS2_GetCallbackUserData(self)

    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportISS2

    def cast(obj):
        """cast(itkLightObject obj) -> itkVTKImageImportISS2"""
        return _itkVTKImageImportPython.itkVTKImageImportISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportISS2

        Create a new object of the class itkVTKImageImportISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVTKImageImportISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVTKImageImportISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVTKImageImportISS2.Clone = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportISS2_Clone, None, itkVTKImageImportISS2)
itkVTKImageImportISS2.SetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportISS2_SetCallbackUserData, None, itkVTKImageImportISS2)
itkVTKImageImportISS2.GetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportISS2_GetCallbackUserData, None, itkVTKImageImportISS2)
itkVTKImageImportISS2_swigregister = _itkVTKImageImportPython.itkVTKImageImportISS2_swigregister
itkVTKImageImportISS2_swigregister(itkVTKImageImportISS2)

def itkVTKImageImportISS2___New_orig__():
    """itkVTKImageImportISS2___New_orig__() -> itkVTKImageImportISS2_Pointer"""
    return _itkVTKImageImportPython.itkVTKImageImportISS2___New_orig__()

def itkVTKImageImportISS2_cast(obj):
    """itkVTKImageImportISS2_cast(itkLightObject obj) -> itkVTKImageImportISS2"""
    return _itkVTKImageImportPython.itkVTKImageImportISS2_cast(obj)

class itkVTKImageImportISS3(itkImageSourcePython.itkImageSourceISS3):
    """


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport

    C++ includes: itkVTKImageImport.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVTKImageImportISS3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVTKImageImportISS3 self) -> itkVTKImageImportISS3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportISS3_Clone(self)


    def SetCallbackUserData(self, _arg):
        """SetCallbackUserData(itkVTKImageImportISS3 self, void * _arg)"""
        return _itkVTKImageImportPython.itkVTKImageImportISS3_SetCallbackUserData(self, _arg)


    def GetCallbackUserData(self):
        """GetCallbackUserData(itkVTKImageImportISS3 self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportISS3_GetCallbackUserData(self)

    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportISS3

    def cast(obj):
        """cast(itkLightObject obj) -> itkVTKImageImportISS3"""
        return _itkVTKImageImportPython.itkVTKImageImportISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportISS3

        Create a new object of the class itkVTKImageImportISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVTKImageImportISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVTKImageImportISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVTKImageImportISS3.Clone = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportISS3_Clone, None, itkVTKImageImportISS3)
itkVTKImageImportISS3.SetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportISS3_SetCallbackUserData, None, itkVTKImageImportISS3)
itkVTKImageImportISS3.GetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportISS3_GetCallbackUserData, None, itkVTKImageImportISS3)
itkVTKImageImportISS3_swigregister = _itkVTKImageImportPython.itkVTKImageImportISS3_swigregister
itkVTKImageImportISS3_swigregister(itkVTKImageImportISS3)

def itkVTKImageImportISS3___New_orig__():
    """itkVTKImageImportISS3___New_orig__() -> itkVTKImageImportISS3_Pointer"""
    return _itkVTKImageImportPython.itkVTKImageImportISS3___New_orig__()

def itkVTKImageImportISS3_cast(obj):
    """itkVTKImageImportISS3_cast(itkLightObject obj) -> itkVTKImageImportISS3"""
    return _itkVTKImageImportPython.itkVTKImageImportISS3_cast(obj)

class itkVTKImageImportIUC2(itkImageSourcePython.itkImageSourceIUC2):
    """


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport

    C++ includes: itkVTKImageImport.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVTKImageImportIUC2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVTKImageImportIUC2 self) -> itkVTKImageImportIUC2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIUC2_Clone(self)


    def SetCallbackUserData(self, _arg):
        """SetCallbackUserData(itkVTKImageImportIUC2 self, void * _arg)"""
        return _itkVTKImageImportPython.itkVTKImageImportIUC2_SetCallbackUserData(self, _arg)


    def GetCallbackUserData(self):
        """GetCallbackUserData(itkVTKImageImportIUC2 self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIUC2_GetCallbackUserData(self)

    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIUC2

    def cast(obj):
        """cast(itkLightObject obj) -> itkVTKImageImportIUC2"""
        return _itkVTKImageImportPython.itkVTKImageImportIUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIUC2

        Create a new object of the class itkVTKImageImportIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVTKImageImportIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVTKImageImportIUC2.Clone = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIUC2_Clone, None, itkVTKImageImportIUC2)
itkVTKImageImportIUC2.SetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIUC2_SetCallbackUserData, None, itkVTKImageImportIUC2)
itkVTKImageImportIUC2.GetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIUC2_GetCallbackUserData, None, itkVTKImageImportIUC2)
itkVTKImageImportIUC2_swigregister = _itkVTKImageImportPython.itkVTKImageImportIUC2_swigregister
itkVTKImageImportIUC2_swigregister(itkVTKImageImportIUC2)

def itkVTKImageImportIUC2___New_orig__():
    """itkVTKImageImportIUC2___New_orig__() -> itkVTKImageImportIUC2_Pointer"""
    return _itkVTKImageImportPython.itkVTKImageImportIUC2___New_orig__()

def itkVTKImageImportIUC2_cast(obj):
    """itkVTKImageImportIUC2_cast(itkLightObject obj) -> itkVTKImageImportIUC2"""
    return _itkVTKImageImportPython.itkVTKImageImportIUC2_cast(obj)

class itkVTKImageImportIUC3(itkImageSourcePython.itkImageSourceIUC3):
    """


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport

    C++ includes: itkVTKImageImport.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVTKImageImportIUC3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVTKImageImportIUC3 self) -> itkVTKImageImportIUC3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIUC3_Clone(self)


    def SetCallbackUserData(self, _arg):
        """SetCallbackUserData(itkVTKImageImportIUC3 self, void * _arg)"""
        return _itkVTKImageImportPython.itkVTKImageImportIUC3_SetCallbackUserData(self, _arg)


    def GetCallbackUserData(self):
        """GetCallbackUserData(itkVTKImageImportIUC3 self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIUC3_GetCallbackUserData(self)

    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIUC3

    def cast(obj):
        """cast(itkLightObject obj) -> itkVTKImageImportIUC3"""
        return _itkVTKImageImportPython.itkVTKImageImportIUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIUC3

        Create a new object of the class itkVTKImageImportIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVTKImageImportIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVTKImageImportIUC3.Clone = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIUC3_Clone, None, itkVTKImageImportIUC3)
itkVTKImageImportIUC3.SetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIUC3_SetCallbackUserData, None, itkVTKImageImportIUC3)
itkVTKImageImportIUC3.GetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIUC3_GetCallbackUserData, None, itkVTKImageImportIUC3)
itkVTKImageImportIUC3_swigregister = _itkVTKImageImportPython.itkVTKImageImportIUC3_swigregister
itkVTKImageImportIUC3_swigregister(itkVTKImageImportIUC3)

def itkVTKImageImportIUC3___New_orig__():
    """itkVTKImageImportIUC3___New_orig__() -> itkVTKImageImportIUC3_Pointer"""
    return _itkVTKImageImportPython.itkVTKImageImportIUC3___New_orig__()

def itkVTKImageImportIUC3_cast(obj):
    """itkVTKImageImportIUC3_cast(itkLightObject obj) -> itkVTKImageImportIUC3"""
    return _itkVTKImageImportPython.itkVTKImageImportIUC3_cast(obj)

class itkVTKImageImportIUL2(itkImageSourcePython.itkImageSourceIUL2):
    """


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport

    C++ includes: itkVTKImageImport.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVTKImageImportIUL2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIUL2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVTKImageImportIUL2 self) -> itkVTKImageImportIUL2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIUL2_Clone(self)


    def SetCallbackUserData(self, _arg):
        """SetCallbackUserData(itkVTKImageImportIUL2 self, void * _arg)"""
        return _itkVTKImageImportPython.itkVTKImageImportIUL2_SetCallbackUserData(self, _arg)


    def GetCallbackUserData(self):
        """GetCallbackUserData(itkVTKImageImportIUL2 self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIUL2_GetCallbackUserData(self)

    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIUL2

    def cast(obj):
        """cast(itkLightObject obj) -> itkVTKImageImportIUL2"""
        return _itkVTKImageImportPython.itkVTKImageImportIUL2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIUL2

        Create a new object of the class itkVTKImageImportIUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIUL2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIUL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVTKImageImportIUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVTKImageImportIUL2.Clone = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIUL2_Clone, None, itkVTKImageImportIUL2)
itkVTKImageImportIUL2.SetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIUL2_SetCallbackUserData, None, itkVTKImageImportIUL2)
itkVTKImageImportIUL2.GetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIUL2_GetCallbackUserData, None, itkVTKImageImportIUL2)
itkVTKImageImportIUL2_swigregister = _itkVTKImageImportPython.itkVTKImageImportIUL2_swigregister
itkVTKImageImportIUL2_swigregister(itkVTKImageImportIUL2)

def itkVTKImageImportIUL2___New_orig__():
    """itkVTKImageImportIUL2___New_orig__() -> itkVTKImageImportIUL2_Pointer"""
    return _itkVTKImageImportPython.itkVTKImageImportIUL2___New_orig__()

def itkVTKImageImportIUL2_cast(obj):
    """itkVTKImageImportIUL2_cast(itkLightObject obj) -> itkVTKImageImportIUL2"""
    return _itkVTKImageImportPython.itkVTKImageImportIUL2_cast(obj)

class itkVTKImageImportIUL3(itkImageSourcePython.itkImageSourceIUL3):
    """


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport

    C++ includes: itkVTKImageImport.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVTKImageImportIUL3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIUL3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVTKImageImportIUL3 self) -> itkVTKImageImportIUL3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIUL3_Clone(self)


    def SetCallbackUserData(self, _arg):
        """SetCallbackUserData(itkVTKImageImportIUL3 self, void * _arg)"""
        return _itkVTKImageImportPython.itkVTKImageImportIUL3_SetCallbackUserData(self, _arg)


    def GetCallbackUserData(self):
        """GetCallbackUserData(itkVTKImageImportIUL3 self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIUL3_GetCallbackUserData(self)

    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIUL3

    def cast(obj):
        """cast(itkLightObject obj) -> itkVTKImageImportIUL3"""
        return _itkVTKImageImportPython.itkVTKImageImportIUL3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIUL3

        Create a new object of the class itkVTKImageImportIUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIUL3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIUL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVTKImageImportIUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVTKImageImportIUL3.Clone = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIUL3_Clone, None, itkVTKImageImportIUL3)
itkVTKImageImportIUL3.SetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIUL3_SetCallbackUserData, None, itkVTKImageImportIUL3)
itkVTKImageImportIUL3.GetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIUL3_GetCallbackUserData, None, itkVTKImageImportIUL3)
itkVTKImageImportIUL3_swigregister = _itkVTKImageImportPython.itkVTKImageImportIUL3_swigregister
itkVTKImageImportIUL3_swigregister(itkVTKImageImportIUL3)

def itkVTKImageImportIUL3___New_orig__():
    """itkVTKImageImportIUL3___New_orig__() -> itkVTKImageImportIUL3_Pointer"""
    return _itkVTKImageImportPython.itkVTKImageImportIUL3___New_orig__()

def itkVTKImageImportIUL3_cast(obj):
    """itkVTKImageImportIUL3_cast(itkLightObject obj) -> itkVTKImageImportIUL3"""
    return _itkVTKImageImportPython.itkVTKImageImportIUL3_cast(obj)

class itkVTKImageImportIUS2(itkImageSourcePython.itkImageSourceIUS2):
    """


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport

    C++ includes: itkVTKImageImport.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVTKImageImportIUS2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVTKImageImportIUS2 self) -> itkVTKImageImportIUS2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIUS2_Clone(self)


    def SetCallbackUserData(self, _arg):
        """SetCallbackUserData(itkVTKImageImportIUS2 self, void * _arg)"""
        return _itkVTKImageImportPython.itkVTKImageImportIUS2_SetCallbackUserData(self, _arg)


    def GetCallbackUserData(self):
        """GetCallbackUserData(itkVTKImageImportIUS2 self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIUS2_GetCallbackUserData(self)

    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIUS2

    def cast(obj):
        """cast(itkLightObject obj) -> itkVTKImageImportIUS2"""
        return _itkVTKImageImportPython.itkVTKImageImportIUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIUS2

        Create a new object of the class itkVTKImageImportIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVTKImageImportIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVTKImageImportIUS2.Clone = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIUS2_Clone, None, itkVTKImageImportIUS2)
itkVTKImageImportIUS2.SetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIUS2_SetCallbackUserData, None, itkVTKImageImportIUS2)
itkVTKImageImportIUS2.GetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIUS2_GetCallbackUserData, None, itkVTKImageImportIUS2)
itkVTKImageImportIUS2_swigregister = _itkVTKImageImportPython.itkVTKImageImportIUS2_swigregister
itkVTKImageImportIUS2_swigregister(itkVTKImageImportIUS2)

def itkVTKImageImportIUS2___New_orig__():
    """itkVTKImageImportIUS2___New_orig__() -> itkVTKImageImportIUS2_Pointer"""
    return _itkVTKImageImportPython.itkVTKImageImportIUS2___New_orig__()

def itkVTKImageImportIUS2_cast(obj):
    """itkVTKImageImportIUS2_cast(itkLightObject obj) -> itkVTKImageImportIUS2"""
    return _itkVTKImageImportPython.itkVTKImageImportIUS2_cast(obj)

class itkVTKImageImportIUS3(itkImageSourcePython.itkImageSourceIUS3):
    """


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport

    C++ includes: itkVTKImageImport.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVTKImageImportIUS3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVTKImageImportIUS3 self) -> itkVTKImageImportIUS3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIUS3_Clone(self)


    def SetCallbackUserData(self, _arg):
        """SetCallbackUserData(itkVTKImageImportIUS3 self, void * _arg)"""
        return _itkVTKImageImportPython.itkVTKImageImportIUS3_SetCallbackUserData(self, _arg)


    def GetCallbackUserData(self):
        """GetCallbackUserData(itkVTKImageImportIUS3 self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIUS3_GetCallbackUserData(self)

    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIUS3

    def cast(obj):
        """cast(itkLightObject obj) -> itkVTKImageImportIUS3"""
        return _itkVTKImageImportPython.itkVTKImageImportIUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIUS3

        Create a new object of the class itkVTKImageImportIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVTKImageImportIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVTKImageImportIUS3.Clone = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIUS3_Clone, None, itkVTKImageImportIUS3)
itkVTKImageImportIUS3.SetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIUS3_SetCallbackUserData, None, itkVTKImageImportIUS3)
itkVTKImageImportIUS3.GetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIUS3_GetCallbackUserData, None, itkVTKImageImportIUS3)
itkVTKImageImportIUS3_swigregister = _itkVTKImageImportPython.itkVTKImageImportIUS3_swigregister
itkVTKImageImportIUS3_swigregister(itkVTKImageImportIUS3)

def itkVTKImageImportIUS3___New_orig__():
    """itkVTKImageImportIUS3___New_orig__() -> itkVTKImageImportIUS3_Pointer"""
    return _itkVTKImageImportPython.itkVTKImageImportIUS3___New_orig__()

def itkVTKImageImportIUS3_cast(obj):
    """itkVTKImageImportIUS3_cast(itkLightObject obj) -> itkVTKImageImportIUS3"""
    return _itkVTKImageImportPython.itkVTKImageImportIUS3_cast(obj)

class itkVTKImageImportIVF22(itkImageSourcePython.itkImageSourceIVF22):
    """


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport

    C++ includes: itkVTKImageImport.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVTKImageImportIVF22_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVTKImageImportIVF22 self) -> itkVTKImageImportIVF22_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF22_Clone(self)


    def SetCallbackUserData(self, _arg):
        """SetCallbackUserData(itkVTKImageImportIVF22 self, void * _arg)"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF22_SetCallbackUserData(self, _arg)


    def GetCallbackUserData(self):
        """GetCallbackUserData(itkVTKImageImportIVF22 self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF22_GetCallbackUserData(self)

    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIVF22

    def cast(obj):
        """cast(itkLightObject obj) -> itkVTKImageImportIVF22"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIVF22

        Create a new object of the class itkVTKImageImportIVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVTKImageImportIVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVTKImageImportIVF22.Clone = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIVF22_Clone, None, itkVTKImageImportIVF22)
itkVTKImageImportIVF22.SetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIVF22_SetCallbackUserData, None, itkVTKImageImportIVF22)
itkVTKImageImportIVF22.GetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIVF22_GetCallbackUserData, None, itkVTKImageImportIVF22)
itkVTKImageImportIVF22_swigregister = _itkVTKImageImportPython.itkVTKImageImportIVF22_swigregister
itkVTKImageImportIVF22_swigregister(itkVTKImageImportIVF22)

def itkVTKImageImportIVF22___New_orig__():
    """itkVTKImageImportIVF22___New_orig__() -> itkVTKImageImportIVF22_Pointer"""
    return _itkVTKImageImportPython.itkVTKImageImportIVF22___New_orig__()

def itkVTKImageImportIVF22_cast(obj):
    """itkVTKImageImportIVF22_cast(itkLightObject obj) -> itkVTKImageImportIVF22"""
    return _itkVTKImageImportPython.itkVTKImageImportIVF22_cast(obj)

class itkVTKImageImportIVF23(itkImageSourcePython.itkImageSourceIVF23):
    """


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport

    C++ includes: itkVTKImageImport.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVTKImageImportIVF23_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF23___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVTKImageImportIVF23 self) -> itkVTKImageImportIVF23_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF23_Clone(self)


    def SetCallbackUserData(self, _arg):
        """SetCallbackUserData(itkVTKImageImportIVF23 self, void * _arg)"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF23_SetCallbackUserData(self, _arg)


    def GetCallbackUserData(self):
        """GetCallbackUserData(itkVTKImageImportIVF23 self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF23_GetCallbackUserData(self)

    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIVF23

    def cast(obj):
        """cast(itkLightObject obj) -> itkVTKImageImportIVF23"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF23_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIVF23

        Create a new object of the class itkVTKImageImportIVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVTKImageImportIVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVTKImageImportIVF23.Clone = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIVF23_Clone, None, itkVTKImageImportIVF23)
itkVTKImageImportIVF23.SetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIVF23_SetCallbackUserData, None, itkVTKImageImportIVF23)
itkVTKImageImportIVF23.GetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIVF23_GetCallbackUserData, None, itkVTKImageImportIVF23)
itkVTKImageImportIVF23_swigregister = _itkVTKImageImportPython.itkVTKImageImportIVF23_swigregister
itkVTKImageImportIVF23_swigregister(itkVTKImageImportIVF23)

def itkVTKImageImportIVF23___New_orig__():
    """itkVTKImageImportIVF23___New_orig__() -> itkVTKImageImportIVF23_Pointer"""
    return _itkVTKImageImportPython.itkVTKImageImportIVF23___New_orig__()

def itkVTKImageImportIVF23_cast(obj):
    """itkVTKImageImportIVF23_cast(itkLightObject obj) -> itkVTKImageImportIVF23"""
    return _itkVTKImageImportPython.itkVTKImageImportIVF23_cast(obj)

class itkVTKImageImportIVF32(itkImageSourcePython.itkImageSourceIVF32):
    """


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport

    C++ includes: itkVTKImageImport.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVTKImageImportIVF32_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF32___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVTKImageImportIVF32 self) -> itkVTKImageImportIVF32_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF32_Clone(self)


    def SetCallbackUserData(self, _arg):
        """SetCallbackUserData(itkVTKImageImportIVF32 self, void * _arg)"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF32_SetCallbackUserData(self, _arg)


    def GetCallbackUserData(self):
        """GetCallbackUserData(itkVTKImageImportIVF32 self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF32_GetCallbackUserData(self)

    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIVF32

    def cast(obj):
        """cast(itkLightObject obj) -> itkVTKImageImportIVF32"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF32_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIVF32

        Create a new object of the class itkVTKImageImportIVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVTKImageImportIVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVTKImageImportIVF32.Clone = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIVF32_Clone, None, itkVTKImageImportIVF32)
itkVTKImageImportIVF32.SetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIVF32_SetCallbackUserData, None, itkVTKImageImportIVF32)
itkVTKImageImportIVF32.GetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIVF32_GetCallbackUserData, None, itkVTKImageImportIVF32)
itkVTKImageImportIVF32_swigregister = _itkVTKImageImportPython.itkVTKImageImportIVF32_swigregister
itkVTKImageImportIVF32_swigregister(itkVTKImageImportIVF32)

def itkVTKImageImportIVF32___New_orig__():
    """itkVTKImageImportIVF32___New_orig__() -> itkVTKImageImportIVF32_Pointer"""
    return _itkVTKImageImportPython.itkVTKImageImportIVF32___New_orig__()

def itkVTKImageImportIVF32_cast(obj):
    """itkVTKImageImportIVF32_cast(itkLightObject obj) -> itkVTKImageImportIVF32"""
    return _itkVTKImageImportPython.itkVTKImageImportIVF32_cast(obj)

class itkVTKImageImportIVF33(itkImageSourcePython.itkImageSourceIVF33):
    """


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport

    C++ includes: itkVTKImageImport.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVTKImageImportIVF33_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVTKImageImportIVF33 self) -> itkVTKImageImportIVF33_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF33_Clone(self)


    def SetCallbackUserData(self, _arg):
        """SetCallbackUserData(itkVTKImageImportIVF33 self, void * _arg)"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF33_SetCallbackUserData(self, _arg)


    def GetCallbackUserData(self):
        """GetCallbackUserData(itkVTKImageImportIVF33 self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF33_GetCallbackUserData(self)

    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIVF33

    def cast(obj):
        """cast(itkLightObject obj) -> itkVTKImageImportIVF33"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIVF33

        Create a new object of the class itkVTKImageImportIVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVTKImageImportIVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVTKImageImportIVF33.Clone = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIVF33_Clone, None, itkVTKImageImportIVF33)
itkVTKImageImportIVF33.SetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIVF33_SetCallbackUserData, None, itkVTKImageImportIVF33)
itkVTKImageImportIVF33.GetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIVF33_GetCallbackUserData, None, itkVTKImageImportIVF33)
itkVTKImageImportIVF33_swigregister = _itkVTKImageImportPython.itkVTKImageImportIVF33_swigregister
itkVTKImageImportIVF33_swigregister(itkVTKImageImportIVF33)

def itkVTKImageImportIVF33___New_orig__():
    """itkVTKImageImportIVF33___New_orig__() -> itkVTKImageImportIVF33_Pointer"""
    return _itkVTKImageImportPython.itkVTKImageImportIVF33___New_orig__()

def itkVTKImageImportIVF33_cast(obj):
    """itkVTKImageImportIVF33_cast(itkLightObject obj) -> itkVTKImageImportIVF33"""
    return _itkVTKImageImportPython.itkVTKImageImportIVF33_cast(obj)

class itkVTKImageImportIVF42(itkImageSourcePython.itkImageSourceIVF42):
    """


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport

    C++ includes: itkVTKImageImport.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVTKImageImportIVF42_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF42___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVTKImageImportIVF42 self) -> itkVTKImageImportIVF42_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF42_Clone(self)


    def SetCallbackUserData(self, _arg):
        """SetCallbackUserData(itkVTKImageImportIVF42 self, void * _arg)"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF42_SetCallbackUserData(self, _arg)


    def GetCallbackUserData(self):
        """GetCallbackUserData(itkVTKImageImportIVF42 self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF42_GetCallbackUserData(self)

    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIVF42

    def cast(obj):
        """cast(itkLightObject obj) -> itkVTKImageImportIVF42"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF42_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIVF42

        Create a new object of the class itkVTKImageImportIVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVTKImageImportIVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVTKImageImportIVF42.Clone = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIVF42_Clone, None, itkVTKImageImportIVF42)
itkVTKImageImportIVF42.SetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIVF42_SetCallbackUserData, None, itkVTKImageImportIVF42)
itkVTKImageImportIVF42.GetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIVF42_GetCallbackUserData, None, itkVTKImageImportIVF42)
itkVTKImageImportIVF42_swigregister = _itkVTKImageImportPython.itkVTKImageImportIVF42_swigregister
itkVTKImageImportIVF42_swigregister(itkVTKImageImportIVF42)

def itkVTKImageImportIVF42___New_orig__():
    """itkVTKImageImportIVF42___New_orig__() -> itkVTKImageImportIVF42_Pointer"""
    return _itkVTKImageImportPython.itkVTKImageImportIVF42___New_orig__()

def itkVTKImageImportIVF42_cast(obj):
    """itkVTKImageImportIVF42_cast(itkLightObject obj) -> itkVTKImageImportIVF42"""
    return _itkVTKImageImportPython.itkVTKImageImportIVF42_cast(obj)

class itkVTKImageImportIVF43(itkImageSourcePython.itkImageSourceIVF43):
    """


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport

    C++ includes: itkVTKImageImport.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVTKImageImportIVF43_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF43___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVTKImageImportIVF43 self) -> itkVTKImageImportIVF43_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF43_Clone(self)


    def SetCallbackUserData(self, _arg):
        """SetCallbackUserData(itkVTKImageImportIVF43 self, void * _arg)"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF43_SetCallbackUserData(self, _arg)


    def GetCallbackUserData(self):
        """GetCallbackUserData(itkVTKImageImportIVF43 self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF43_GetCallbackUserData(self)

    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIVF43

    def cast(obj):
        """cast(itkLightObject obj) -> itkVTKImageImportIVF43"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF43_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIVF43

        Create a new object of the class itkVTKImageImportIVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVTKImageImportIVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVTKImageImportIVF43.Clone = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIVF43_Clone, None, itkVTKImageImportIVF43)
itkVTKImageImportIVF43.SetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIVF43_SetCallbackUserData, None, itkVTKImageImportIVF43)
itkVTKImageImportIVF43.GetCallbackUserData = new_instancemethod(_itkVTKImageImportPython.itkVTKImageImportIVF43_GetCallbackUserData, None, itkVTKImageImportIVF43)
itkVTKImageImportIVF43_swigregister = _itkVTKImageImportPython.itkVTKImageImportIVF43_swigregister
itkVTKImageImportIVF43_swigregister(itkVTKImageImportIVF43)

def itkVTKImageImportIVF43___New_orig__():
    """itkVTKImageImportIVF43___New_orig__() -> itkVTKImageImportIVF43_Pointer"""
    return _itkVTKImageImportPython.itkVTKImageImportIVF43___New_orig__()

def itkVTKImageImportIVF43_cast(obj):
    """itkVTKImageImportIVF43_cast(itkLightObject obj) -> itkVTKImageImportIVF43"""
    return _itkVTKImageImportPython.itkVTKImageImportIVF43_cast(obj)


def vtk_image_import(*args, **kwargs):
    """Procedural interface for VTKImageImport"""
    import itk
    instance = itk.VTKImageImport.New(*args, **kwargs)
    return instance.__internal_call__()

def vtk_image_import_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.VTKImageImport, itkTemplate.itkTemplate):
        vtk_image_import.__doc__ = itk.VTKImageImport.values()[0].__doc__
    else:
        vtk_image_import.__doc__ = itk.VTKImageImport.__doc__




