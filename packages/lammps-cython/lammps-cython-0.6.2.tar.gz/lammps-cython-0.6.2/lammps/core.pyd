""" Cython header file to lammps headers

You will see my description of what each modules does in my opinion
and some notes.  Notice that not all methods are exposed. This is
because only some methods are really needed for the interface. Also
with the power of python we dont need some of the computes (becuase
they are trivial).
"""

from libc.stdint cimport int64_t
from libcpp.map cimport map
from libcpp.string cimport string

cimport mpi4py.libmpi as mpi

# Define statements assumed for lammps
cdef extern from *:
    """
    #define LAMMPS_SMALLBIG
    #define LAMMPS_EXCEPTIONS
    #define LAMMPS_GZIP
    """

# TODO do we need the constructors (excluding LAMMPS)?
ctypedef int smallint
ctypedef int imageint
ctypedef int tagint
ctypedef int64_t bigint


# Error class
cdef extern from "error.h" namespace "LAMMPS_NS":
     cdef enum ErrorType:
          ERROR_NONE   = 0,
          ERROR_NORMAL = 1,
          ERROR_ABORT  = 2

     cdef cppclass ERROR "LAMMPS_NS:Error":
          char* get_last_error()
          ErrorType get_last_error_type()
          void set_last_error(char *, ErrorType);

# Input class
cdef extern from "input.h" namespace "LAMMPS_NS":
     cdef cppclass INPUT "LAMMPS_NS::Input":
          char* one(const char*)
          void file(const char*)
          void file()
          void clear()


# Atom class
cdef extern from "atom.h" namespace "LAMMPS_NS":
     cdef cppclass ATOM "LAMMPS_NS::Atom":
          char* atom_style
          bigint natoms
          int nlocal
          ATOMVEC *avec
          tagint *tag
          int *type
          double **x
          double **v
          double **f
          double *q
          # AtomTypes
          int ntypes
          double *mass
          void set_mass(const char *, int, int, double)
          # Get atom properties
          void* extract(char*)
          # For debugging
          int map_style
          int tag_enable
          int tag_consecutive()



# Atom vector class
cdef extern from "atom_vec.h" namespace "LAMMPS_NS":
     cdef cppclass ATOMVEC "LAMMPS_NS::AtomVec":
         void create_atom(int, double *)


# Compute class (and extended classes eg. ComputeTemp)
cdef extern from "compute.h" namespace "LAMMPS_NS":
     cdef cppclass COMPUTE "LAMMPS_NS::Compute":
          char* id
          char* style
          void modify_params(int narg, char** arg)

          int scalar_flag       # 0/1 if compute_scalar() function exists
          double scalar         # computed scalar from compute_scalar()
          double compute_scalar()

          int vector_flag       # 0/1 if compute_vector() function exists
          double *vector        # compute vector from compute_vector()
          int size_vector
          void compute_vector()


# Update class
cdef extern from "update.h" namespace "LAMMPS_NS":
     cdef cppclass UPDATE "LAMMPS_NS::Update":
          double dt             # timestep
          bigint ntimestep      # current step
          double atime          # simultation time at atimestep
          char* unit_style
          void reset_timestep(bigint)


# Output class
# automatically defines computes:
#     temperature: thermo_temp
#     pressure: thermo_press
#     potential energy: thermo_pe
cdef extern from "output.h" namespace "LAMMPS_NS":
     cdef cppclass OUTPUT "LAMMPS_NS::Output":
         THERMO* thermo


# Thermo class
cdef extern from "thermo.h" namespace "LAMMPS_NS":
     cdef cppclass THERMO "LAMMPS_NS::Thermo":
          double compute_vol()


# Universe class
cdef extern from "universe.h" namespace "LAMMPS_NS":
     cdef cppclass UNIVERSE "LAMMPS_NS::Universe":
          const char* version


# Domain class
cdef extern from "domain.h" namespace "LAMMPS_NS":
     cdef cppclass DOMAIN "LAMMPS_NS::Domain":
          int dimension
          double boxlo[3]
          double boxhi[3]
          double xy,xz,yz
          double xprd, yprd, zprd


# Modify class
ctypedef COMPUTE *(*ComputeCreator)(LAMMPS *, int, char **)

cdef extern from "modify.h" namespace "LAMMPS_NS":
     cdef cppclass MODIFY "LAMMPS_NS::Modify":
          COMPUTE **compute
          int find_compute(const char *)
          void add_compute(int, char **, int trysuffix=0)


# LAMMPS class
cdef extern from "lammps.h" namespace "LAMMPS_NS":
    cdef cppclass LAMMPS:
         LAMMPS(int, char**, mpi.MPI_Comm) except +
         INPUT* input
         UNIVERSE* universe
         ATOM* atom
         ERROR* error
         DOMAIN* domain
         OUTPUT* output
         UPDATE* update
         MODIFY* modify

# Library class
cdef extern from "library.h":
     char* lammps_command(void *, char *)
     void lammps_file(void *, char *)
     void lammps_reset_box(void *, double *, double *, double, double, double)
     void lammps_gather_atoms(void *, char *, int, int, void *)
     void lammps_gather_atoms_concat(void *, char *, int, int, void *)
     void lammps_gather_atoms_subset(void *, char *, int, int, int, int *, void *)
     void lammps_scatter_atoms(void *, char *, int, int, void *)
     void lammps_scatter_atoms_subset(void *, char *, int, int, int, int *, void *)
     void lammps_create_atoms(void *, int, int *, int *, double *, double *, int *, int)
