# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ChartValues(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, alias_id=None, channel_name=None, values=None, channel_id=None, level=None):
        """
        ChartValues - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'alias_id': 'str',
            'channel_name': 'str',
            'values': 'list[ChartPoint]',
            'channel_id': 'str',
            'level': 'int'
        }

        self.attribute_map = {
            'alias_id': 'aliasId',
            'channel_name': 'channelName',
            'values': 'values',
            'channel_id': 'channelId',
            'level': 'level'
        }

        self._alias_id = alias_id
        self._channel_name = channel_name
        self._values = values
        self._channel_id = channel_id
        self._level = level

    @property
    def alias_id(self):
        """
        Gets the alias_id of this ChartValues.


        :return: The alias_id of this ChartValues.
        :rtype: str
        """
        return self._alias_id

    @alias_id.setter
    def alias_id(self, alias_id):
        """
        Sets the alias_id of this ChartValues.


        :param alias_id: The alias_id of this ChartValues.
        :type: str
        """
        
        self._alias_id = alias_id

    @property
    def channel_name(self):
        """
        Gets the channel_name of this ChartValues.


        :return: The channel_name of this ChartValues.
        :rtype: str
        """
        return self._channel_name

    @channel_name.setter
    def channel_name(self, channel_name):
        """
        Sets the channel_name of this ChartValues.


        :param channel_name: The channel_name of this ChartValues.
        :type: str
        """
        
        self._channel_name = channel_name

    @property
    def values(self):
        """
        Gets the values of this ChartValues.


        :return: The values of this ChartValues.
        :rtype: list[ChartPoint]
        """
        return self._values

    @values.setter
    def values(self, values):
        """
        Sets the values of this ChartValues.


        :param values: The values of this ChartValues.
        :type: list[ChartPoint]
        """
        
        self._values = values

    @property
    def channel_id(self):
        """
        Gets the channel_id of this ChartValues.


        :return: The channel_id of this ChartValues.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """
        Sets the channel_id of this ChartValues.


        :param channel_id: The channel_id of this ChartValues.
        :type: str
        """
        
        self._channel_id = channel_id

    @property
    def level(self):
        """
        Gets the level of this ChartValues.


        :return: The level of this ChartValues.
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """
        Sets the level of this ChartValues.


        :param level: The level of this ChartValues.
        :type: int
        """
        
        self._level = level

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




