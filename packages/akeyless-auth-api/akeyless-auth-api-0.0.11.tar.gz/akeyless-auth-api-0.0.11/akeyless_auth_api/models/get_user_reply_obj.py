# coding: utf-8

"""
    Auth - Application API

    Auth manages access for services that need accesses management for their clients. Auth also issues temporary credentials for the services' clients and validates them for the services  # noqa: E501

    OpenAPI spec version: 1.0.7
    Contact: refael@akeyless-security.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from akeyless_auth_api.models.user_access_info import UserAccessInfo  # noqa: F401,E501


class GetUserReplyObj(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_info': 'UserAccessInfo',
        'account_id': 'str',
        'user_access_id': 'str',
        'user_name': 'str',
        'user_roles': 'list[str]'
    }

    attribute_map = {
        'access_info': 'access_info',
        'account_id': 'account_id',
        'user_access_id': 'user_access_id',
        'user_name': 'user_name',
        'user_roles': 'user_roles'
    }

    def __init__(self, access_info=None, account_id=None, user_access_id=None, user_name=None, user_roles=None):  # noqa: E501
        """GetUserReplyObj - a model defined in Swagger"""  # noqa: E501

        self._access_info = None
        self._account_id = None
        self._user_access_id = None
        self._user_name = None
        self._user_roles = None
        self.discriminator = None

        if access_info is not None:
            self.access_info = access_info
        if account_id is not None:
            self.account_id = account_id
        if user_access_id is not None:
            self.user_access_id = user_access_id
        if user_name is not None:
            self.user_name = user_name
        if user_roles is not None:
            self.user_roles = user_roles

    @property
    def access_info(self):
        """Gets the access_info of this GetUserReplyObj.  # noqa: E501


        :return: The access_info of this GetUserReplyObj.  # noqa: E501
        :rtype: UserAccessInfo
        """
        return self._access_info

    @access_info.setter
    def access_info(self, access_info):
        """Sets the access_info of this GetUserReplyObj.


        :param access_info: The access_info of this GetUserReplyObj.  # noqa: E501
        :type: UserAccessInfo
        """

        self._access_info = access_info

    @property
    def account_id(self):
        """Gets the account_id of this GetUserReplyObj.  # noqa: E501


        :return: The account_id of this GetUserReplyObj.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GetUserReplyObj.


        :param account_id: The account_id of this GetUserReplyObj.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def user_access_id(self):
        """Gets the user_access_id of this GetUserReplyObj.  # noqa: E501


        :return: The user_access_id of this GetUserReplyObj.  # noqa: E501
        :rtype: str
        """
        return self._user_access_id

    @user_access_id.setter
    def user_access_id(self, user_access_id):
        """Sets the user_access_id of this GetUserReplyObj.


        :param user_access_id: The user_access_id of this GetUserReplyObj.  # noqa: E501
        :type: str
        """

        self._user_access_id = user_access_id

    @property
    def user_name(self):
        """Gets the user_name of this GetUserReplyObj.  # noqa: E501


        :return: The user_name of this GetUserReplyObj.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this GetUserReplyObj.


        :param user_name: The user_name of this GetUserReplyObj.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def user_roles(self):
        """Gets the user_roles of this GetUserReplyObj.  # noqa: E501


        :return: The user_roles of this GetUserReplyObj.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_roles

    @user_roles.setter
    def user_roles(self, user_roles):
        """Sets the user_roles of this GetUserReplyObj.


        :param user_roles: The user_roles of this GetUserReplyObj.  # noqa: E501
        :type: list[str]
        """

        self._user_roles = user_roles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetUserReplyObj):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
