# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkImageFunctionBasePython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkImageFunctionBasePython', [dirname(__file__)])
        except ImportError:
            import _itkImageFunctionBasePython
            return _itkImageFunctionBasePython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkImageFunctionBasePython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkImageFunctionBasePython = swig_import_helper()
    del swig_import_helper
else:
    import _itkImageFunctionBasePython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkFunctionBasePython
import itkRGBPixelPython
import itkPointPython
import itkRGBAPixelPython
import itkArrayPython
import itkContinuousIndexPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkImagePython
import itkImageRegionPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkSymmetricSecondRankTensorPython

def itkImageFunctionIRGBAUC3RGBADD_New():
  return itkImageFunctionIRGBAUC3RGBADD.New()


def itkImageFunctionIRGBUC3RGBDD_New():
  return itkImageFunctionIRGBUC3RGBDD.New()


def itkImageFunctionIRGBAUC3RGBAUCD_New():
  return itkImageFunctionIRGBAUC3RGBAUCD.New()


def itkImageFunctionIRGBUC3RGBUCD_New():
  return itkImageFunctionIRGBUC3RGBUCD.New()


def itkImageFunctionICVF33DD_New():
  return itkImageFunctionICVF33DD.New()


def itkImageFunctionICVF33CVD3D_New():
  return itkImageFunctionICVF33CVD3D.New()


def itkImageFunctionICVF33VD3D_New():
  return itkImageFunctionICVF33VD3D.New()


def itkImageFunctionIVF33DD_New():
  return itkImageFunctionIVF33DD.New()


def itkImageFunctionIVF33CVD3D_New():
  return itkImageFunctionIVF33CVD3D.New()


def itkImageFunctionIVF33VD3D_New():
  return itkImageFunctionIVF33VD3D.New()


def itkImageFunctionIF3DD_New():
  return itkImageFunctionIF3DD.New()


def itkImageFunctionIF3DF_New():
  return itkImageFunctionIF3DF.New()


def itkImageFunctionIUS3DD_New():
  return itkImageFunctionIUS3DD.New()


def itkImageFunctionIUS3DF_New():
  return itkImageFunctionIUS3DF.New()


def itkImageFunctionIUC3DD_New():
  return itkImageFunctionIUC3DD.New()


def itkImageFunctionIUC3DF_New():
  return itkImageFunctionIUC3DF.New()


def itkImageFunctionISS3DD_New():
  return itkImageFunctionISS3DD.New()


def itkImageFunctionISS3DF_New():
  return itkImageFunctionISS3DF.New()


def itkImageFunctionIRGBAUC2RGBADD_New():
  return itkImageFunctionIRGBAUC2RGBADD.New()


def itkImageFunctionIRGBUC2RGBDD_New():
  return itkImageFunctionIRGBUC2RGBDD.New()


def itkImageFunctionIRGBAUC2RGBAUCD_New():
  return itkImageFunctionIRGBAUC2RGBAUCD.New()


def itkImageFunctionIRGBUC2RGBUCD_New():
  return itkImageFunctionIRGBUC2RGBUCD.New()


def itkImageFunctionICVF22DD_New():
  return itkImageFunctionICVF22DD.New()


def itkImageFunctionICVF22CVD2D_New():
  return itkImageFunctionICVF22CVD2D.New()


def itkImageFunctionICVF22VD2D_New():
  return itkImageFunctionICVF22VD2D.New()


def itkImageFunctionIVF22DD_New():
  return itkImageFunctionIVF22DD.New()


def itkImageFunctionIVF22CVD2D_New():
  return itkImageFunctionIVF22CVD2D.New()


def itkImageFunctionIVF22VD2D_New():
  return itkImageFunctionIVF22VD2D.New()


def itkImageFunctionIF2DD_New():
  return itkImageFunctionIF2DD.New()


def itkImageFunctionIF2DF_New():
  return itkImageFunctionIF2DF.New()


def itkImageFunctionIUS2DD_New():
  return itkImageFunctionIUS2DD.New()


def itkImageFunctionIUS2DF_New():
  return itkImageFunctionIUS2DF.New()


def itkImageFunctionIUC2DD_New():
  return itkImageFunctionIUC2DD.New()


def itkImageFunctionIUC2DF_New():
  return itkImageFunctionIUC2DF.New()


def itkImageFunctionISS2DD_New():
  return itkImageFunctionISS2DD.New()


def itkImageFunctionISS2DF_New():
  return itkImageFunctionISS2DF.New()

class itkImageFunctionICVF22CVD2D(itkFunctionBasePython.itkFunctionBasePD2CVD2):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionICVF22CVD2D self, itkImageCVF22 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionICVF22CVD2D self) -> itkImageCVF22

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionICVF22CVD2D self, itkIndex2 index) -> itkCovariantVectorD2

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionICVF22CVD2D self, itkContinuousIndexD2 index) -> itkCovariantVectorD2

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionICVF22CVD2D self, itkIndex2 index) -> bool
        IsInsideBuffer(itkImageFunctionICVF22CVD2D self, itkContinuousIndexD2 index) -> bool
        IsInsideBuffer(itkImageFunctionICVF22CVD2D self, itkPointD2 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionICVF22CVD2D self, itkPointD2 point, itkIndex2 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionICVF22CVD2D self, itkPointD2 point, itkContinuousIndexD2 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionICVF22CVD2D self, itkContinuousIndexD2 cindex, itkIndex2 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionICVF22CVD2D self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionICVF22CVD2D self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionICVF22CVD2D self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionICVF22CVD2D self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionICVF22CVD2D

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionICVF22CVD2D"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionICVF22CVD2D

        Create a new object of the class itkImageFunctionICVF22CVD2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionICVF22CVD2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionICVF22CVD2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionICVF22CVD2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionICVF22CVD2D.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_SetInputImage, None, itkImageFunctionICVF22CVD2D)
itkImageFunctionICVF22CVD2D.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_GetInputImage, None, itkImageFunctionICVF22CVD2D)
itkImageFunctionICVF22CVD2D.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_EvaluateAtIndex, None, itkImageFunctionICVF22CVD2D)
itkImageFunctionICVF22CVD2D.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_EvaluateAtContinuousIndex, None, itkImageFunctionICVF22CVD2D)
itkImageFunctionICVF22CVD2D.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_IsInsideBuffer, None, itkImageFunctionICVF22CVD2D)
itkImageFunctionICVF22CVD2D.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_ConvertPointToNearestIndex, None, itkImageFunctionICVF22CVD2D)
itkImageFunctionICVF22CVD2D.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_ConvertPointToContinuousIndex, None, itkImageFunctionICVF22CVD2D)
itkImageFunctionICVF22CVD2D.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionICVF22CVD2D)
itkImageFunctionICVF22CVD2D.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_GetStartIndex, None, itkImageFunctionICVF22CVD2D)
itkImageFunctionICVF22CVD2D.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_GetEndIndex, None, itkImageFunctionICVF22CVD2D)
itkImageFunctionICVF22CVD2D.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_GetStartContinuousIndex, None, itkImageFunctionICVF22CVD2D)
itkImageFunctionICVF22CVD2D.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_GetEndContinuousIndex, None, itkImageFunctionICVF22CVD2D)
itkImageFunctionICVF22CVD2D_swigregister = _itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_swigregister
itkImageFunctionICVF22CVD2D_swigregister(itkImageFunctionICVF22CVD2D)

def itkImageFunctionICVF22CVD2D_cast(obj):
    """itkImageFunctionICVF22CVD2D_cast(itkLightObject obj) -> itkImageFunctionICVF22CVD2D"""
    return _itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_cast(obj)

class itkImageFunctionICVF22DD(itkFunctionBasePython.itkFunctionBasePD2D):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionICVF22DD self, itkImageCVF22 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22DD_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionICVF22DD self) -> itkImageCVF22

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22DD_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionICVF22DD self, itkIndex2 index) -> double

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22DD_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionICVF22DD self, itkContinuousIndexD2 index) -> double

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22DD_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionICVF22DD self, itkIndex2 index) -> bool
        IsInsideBuffer(itkImageFunctionICVF22DD self, itkContinuousIndexD2 index) -> bool
        IsInsideBuffer(itkImageFunctionICVF22DD self, itkPointD2 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22DD_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionICVF22DD self, itkPointD2 point, itkIndex2 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22DD_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionICVF22DD self, itkPointD2 point, itkContinuousIndexD2 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22DD_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionICVF22DD self, itkContinuousIndexD2 cindex, itkIndex2 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionICVF22DD self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22DD_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionICVF22DD self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22DD_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionICVF22DD self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22DD_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionICVF22DD self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22DD_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionICVF22DD

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionICVF22DD"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22DD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionICVF22DD

        Create a new object of the class itkImageFunctionICVF22DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionICVF22DD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionICVF22DD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionICVF22DD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionICVF22DD.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22DD_SetInputImage, None, itkImageFunctionICVF22DD)
itkImageFunctionICVF22DD.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22DD_GetInputImage, None, itkImageFunctionICVF22DD)
itkImageFunctionICVF22DD.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22DD_EvaluateAtIndex, None, itkImageFunctionICVF22DD)
itkImageFunctionICVF22DD.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22DD_EvaluateAtContinuousIndex, None, itkImageFunctionICVF22DD)
itkImageFunctionICVF22DD.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22DD_IsInsideBuffer, None, itkImageFunctionICVF22DD)
itkImageFunctionICVF22DD.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22DD_ConvertPointToNearestIndex, None, itkImageFunctionICVF22DD)
itkImageFunctionICVF22DD.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22DD_ConvertPointToContinuousIndex, None, itkImageFunctionICVF22DD)
itkImageFunctionICVF22DD.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22DD_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionICVF22DD)
itkImageFunctionICVF22DD.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22DD_GetStartIndex, None, itkImageFunctionICVF22DD)
itkImageFunctionICVF22DD.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22DD_GetEndIndex, None, itkImageFunctionICVF22DD)
itkImageFunctionICVF22DD.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22DD_GetStartContinuousIndex, None, itkImageFunctionICVF22DD)
itkImageFunctionICVF22DD.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22DD_GetEndContinuousIndex, None, itkImageFunctionICVF22DD)
itkImageFunctionICVF22DD_swigregister = _itkImageFunctionBasePython.itkImageFunctionICVF22DD_swigregister
itkImageFunctionICVF22DD_swigregister(itkImageFunctionICVF22DD)

def itkImageFunctionICVF22DD_cast(obj):
    """itkImageFunctionICVF22DD_cast(itkLightObject obj) -> itkImageFunctionICVF22DD"""
    return _itkImageFunctionBasePython.itkImageFunctionICVF22DD_cast(obj)

class itkImageFunctionICVF22VD2D(itkFunctionBasePython.itkFunctionBasePD2VD2):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionICVF22VD2D self, itkImageCVF22 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionICVF22VD2D self) -> itkImageCVF22

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionICVF22VD2D self, itkIndex2 index) -> itkVectorD2

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionICVF22VD2D self, itkContinuousIndexD2 index) -> itkVectorD2

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionICVF22VD2D self, itkIndex2 index) -> bool
        IsInsideBuffer(itkImageFunctionICVF22VD2D self, itkContinuousIndexD2 index) -> bool
        IsInsideBuffer(itkImageFunctionICVF22VD2D self, itkPointD2 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionICVF22VD2D self, itkPointD2 point, itkIndex2 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionICVF22VD2D self, itkPointD2 point, itkContinuousIndexD2 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionICVF22VD2D self, itkContinuousIndexD2 cindex, itkIndex2 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionICVF22VD2D self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionICVF22VD2D self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionICVF22VD2D self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionICVF22VD2D self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionICVF22VD2D

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionICVF22VD2D"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionICVF22VD2D

        Create a new object of the class itkImageFunctionICVF22VD2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionICVF22VD2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionICVF22VD2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionICVF22VD2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionICVF22VD2D.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_SetInputImage, None, itkImageFunctionICVF22VD2D)
itkImageFunctionICVF22VD2D.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_GetInputImage, None, itkImageFunctionICVF22VD2D)
itkImageFunctionICVF22VD2D.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_EvaluateAtIndex, None, itkImageFunctionICVF22VD2D)
itkImageFunctionICVF22VD2D.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_EvaluateAtContinuousIndex, None, itkImageFunctionICVF22VD2D)
itkImageFunctionICVF22VD2D.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_IsInsideBuffer, None, itkImageFunctionICVF22VD2D)
itkImageFunctionICVF22VD2D.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_ConvertPointToNearestIndex, None, itkImageFunctionICVF22VD2D)
itkImageFunctionICVF22VD2D.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_ConvertPointToContinuousIndex, None, itkImageFunctionICVF22VD2D)
itkImageFunctionICVF22VD2D.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionICVF22VD2D)
itkImageFunctionICVF22VD2D.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_GetStartIndex, None, itkImageFunctionICVF22VD2D)
itkImageFunctionICVF22VD2D.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_GetEndIndex, None, itkImageFunctionICVF22VD2D)
itkImageFunctionICVF22VD2D.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_GetStartContinuousIndex, None, itkImageFunctionICVF22VD2D)
itkImageFunctionICVF22VD2D.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_GetEndContinuousIndex, None, itkImageFunctionICVF22VD2D)
itkImageFunctionICVF22VD2D_swigregister = _itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_swigregister
itkImageFunctionICVF22VD2D_swigregister(itkImageFunctionICVF22VD2D)

def itkImageFunctionICVF22VD2D_cast(obj):
    """itkImageFunctionICVF22VD2D_cast(itkLightObject obj) -> itkImageFunctionICVF22VD2D"""
    return _itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_cast(obj)

class itkImageFunctionICVF33CVD3D(itkFunctionBasePython.itkFunctionBasePD3CVD3):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionICVF33CVD3D self, itkImageCVF33 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionICVF33CVD3D self) -> itkImageCVF33

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionICVF33CVD3D self, itkIndex3 index) -> itkCovariantVectorD3

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionICVF33CVD3D self, itkContinuousIndexD3 index) -> itkCovariantVectorD3

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionICVF33CVD3D self, itkIndex3 index) -> bool
        IsInsideBuffer(itkImageFunctionICVF33CVD3D self, itkContinuousIndexD3 index) -> bool
        IsInsideBuffer(itkImageFunctionICVF33CVD3D self, itkPointD3 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionICVF33CVD3D self, itkPointD3 point, itkIndex3 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionICVF33CVD3D self, itkPointD3 point, itkContinuousIndexD3 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionICVF33CVD3D self, itkContinuousIndexD3 cindex, itkIndex3 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionICVF33CVD3D self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionICVF33CVD3D self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionICVF33CVD3D self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionICVF33CVD3D self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionICVF33CVD3D

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionICVF33CVD3D"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionICVF33CVD3D

        Create a new object of the class itkImageFunctionICVF33CVD3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionICVF33CVD3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionICVF33CVD3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionICVF33CVD3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionICVF33CVD3D.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_SetInputImage, None, itkImageFunctionICVF33CVD3D)
itkImageFunctionICVF33CVD3D.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_GetInputImage, None, itkImageFunctionICVF33CVD3D)
itkImageFunctionICVF33CVD3D.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_EvaluateAtIndex, None, itkImageFunctionICVF33CVD3D)
itkImageFunctionICVF33CVD3D.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_EvaluateAtContinuousIndex, None, itkImageFunctionICVF33CVD3D)
itkImageFunctionICVF33CVD3D.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_IsInsideBuffer, None, itkImageFunctionICVF33CVD3D)
itkImageFunctionICVF33CVD3D.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_ConvertPointToNearestIndex, None, itkImageFunctionICVF33CVD3D)
itkImageFunctionICVF33CVD3D.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_ConvertPointToContinuousIndex, None, itkImageFunctionICVF33CVD3D)
itkImageFunctionICVF33CVD3D.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionICVF33CVD3D)
itkImageFunctionICVF33CVD3D.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_GetStartIndex, None, itkImageFunctionICVF33CVD3D)
itkImageFunctionICVF33CVD3D.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_GetEndIndex, None, itkImageFunctionICVF33CVD3D)
itkImageFunctionICVF33CVD3D.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_GetStartContinuousIndex, None, itkImageFunctionICVF33CVD3D)
itkImageFunctionICVF33CVD3D.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_GetEndContinuousIndex, None, itkImageFunctionICVF33CVD3D)
itkImageFunctionICVF33CVD3D_swigregister = _itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_swigregister
itkImageFunctionICVF33CVD3D_swigregister(itkImageFunctionICVF33CVD3D)

def itkImageFunctionICVF33CVD3D_cast(obj):
    """itkImageFunctionICVF33CVD3D_cast(itkLightObject obj) -> itkImageFunctionICVF33CVD3D"""
    return _itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_cast(obj)

class itkImageFunctionICVF33DD(itkFunctionBasePython.itkFunctionBasePD3D):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionICVF33DD self, itkImageCVF33 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33DD_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionICVF33DD self) -> itkImageCVF33

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33DD_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionICVF33DD self, itkIndex3 index) -> double

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33DD_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionICVF33DD self, itkContinuousIndexD3 index) -> double

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33DD_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionICVF33DD self, itkIndex3 index) -> bool
        IsInsideBuffer(itkImageFunctionICVF33DD self, itkContinuousIndexD3 index) -> bool
        IsInsideBuffer(itkImageFunctionICVF33DD self, itkPointD3 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33DD_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionICVF33DD self, itkPointD3 point, itkIndex3 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33DD_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionICVF33DD self, itkPointD3 point, itkContinuousIndexD3 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33DD_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionICVF33DD self, itkContinuousIndexD3 cindex, itkIndex3 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionICVF33DD self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33DD_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionICVF33DD self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33DD_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionICVF33DD self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33DD_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionICVF33DD self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33DD_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionICVF33DD

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionICVF33DD"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33DD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionICVF33DD

        Create a new object of the class itkImageFunctionICVF33DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionICVF33DD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionICVF33DD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionICVF33DD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionICVF33DD.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33DD_SetInputImage, None, itkImageFunctionICVF33DD)
itkImageFunctionICVF33DD.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33DD_GetInputImage, None, itkImageFunctionICVF33DD)
itkImageFunctionICVF33DD.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33DD_EvaluateAtIndex, None, itkImageFunctionICVF33DD)
itkImageFunctionICVF33DD.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33DD_EvaluateAtContinuousIndex, None, itkImageFunctionICVF33DD)
itkImageFunctionICVF33DD.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33DD_IsInsideBuffer, None, itkImageFunctionICVF33DD)
itkImageFunctionICVF33DD.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33DD_ConvertPointToNearestIndex, None, itkImageFunctionICVF33DD)
itkImageFunctionICVF33DD.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33DD_ConvertPointToContinuousIndex, None, itkImageFunctionICVF33DD)
itkImageFunctionICVF33DD.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33DD_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionICVF33DD)
itkImageFunctionICVF33DD.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33DD_GetStartIndex, None, itkImageFunctionICVF33DD)
itkImageFunctionICVF33DD.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33DD_GetEndIndex, None, itkImageFunctionICVF33DD)
itkImageFunctionICVF33DD.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33DD_GetStartContinuousIndex, None, itkImageFunctionICVF33DD)
itkImageFunctionICVF33DD.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33DD_GetEndContinuousIndex, None, itkImageFunctionICVF33DD)
itkImageFunctionICVF33DD_swigregister = _itkImageFunctionBasePython.itkImageFunctionICVF33DD_swigregister
itkImageFunctionICVF33DD_swigregister(itkImageFunctionICVF33DD)

def itkImageFunctionICVF33DD_cast(obj):
    """itkImageFunctionICVF33DD_cast(itkLightObject obj) -> itkImageFunctionICVF33DD"""
    return _itkImageFunctionBasePython.itkImageFunctionICVF33DD_cast(obj)

class itkImageFunctionICVF33VD3D(itkFunctionBasePython.itkFunctionBasePD3VD3):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionICVF33VD3D self, itkImageCVF33 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionICVF33VD3D self) -> itkImageCVF33

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionICVF33VD3D self, itkIndex3 index) -> itkVectorD3

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionICVF33VD3D self, itkContinuousIndexD3 index) -> itkVectorD3

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionICVF33VD3D self, itkIndex3 index) -> bool
        IsInsideBuffer(itkImageFunctionICVF33VD3D self, itkContinuousIndexD3 index) -> bool
        IsInsideBuffer(itkImageFunctionICVF33VD3D self, itkPointD3 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionICVF33VD3D self, itkPointD3 point, itkIndex3 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionICVF33VD3D self, itkPointD3 point, itkContinuousIndexD3 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionICVF33VD3D self, itkContinuousIndexD3 cindex, itkIndex3 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionICVF33VD3D self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionICVF33VD3D self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionICVF33VD3D self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionICVF33VD3D self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionICVF33VD3D

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionICVF33VD3D"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionICVF33VD3D

        Create a new object of the class itkImageFunctionICVF33VD3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionICVF33VD3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionICVF33VD3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionICVF33VD3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionICVF33VD3D.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_SetInputImage, None, itkImageFunctionICVF33VD3D)
itkImageFunctionICVF33VD3D.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_GetInputImage, None, itkImageFunctionICVF33VD3D)
itkImageFunctionICVF33VD3D.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_EvaluateAtIndex, None, itkImageFunctionICVF33VD3D)
itkImageFunctionICVF33VD3D.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_EvaluateAtContinuousIndex, None, itkImageFunctionICVF33VD3D)
itkImageFunctionICVF33VD3D.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_IsInsideBuffer, None, itkImageFunctionICVF33VD3D)
itkImageFunctionICVF33VD3D.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_ConvertPointToNearestIndex, None, itkImageFunctionICVF33VD3D)
itkImageFunctionICVF33VD3D.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_ConvertPointToContinuousIndex, None, itkImageFunctionICVF33VD3D)
itkImageFunctionICVF33VD3D.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionICVF33VD3D)
itkImageFunctionICVF33VD3D.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_GetStartIndex, None, itkImageFunctionICVF33VD3D)
itkImageFunctionICVF33VD3D.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_GetEndIndex, None, itkImageFunctionICVF33VD3D)
itkImageFunctionICVF33VD3D.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_GetStartContinuousIndex, None, itkImageFunctionICVF33VD3D)
itkImageFunctionICVF33VD3D.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_GetEndContinuousIndex, None, itkImageFunctionICVF33VD3D)
itkImageFunctionICVF33VD3D_swigregister = _itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_swigregister
itkImageFunctionICVF33VD3D_swigregister(itkImageFunctionICVF33VD3D)

def itkImageFunctionICVF33VD3D_cast(obj):
    """itkImageFunctionICVF33VD3D_cast(itkLightObject obj) -> itkImageFunctionICVF33VD3D"""
    return _itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_cast(obj)

class itkImageFunctionIF2DD(itkFunctionBasePython.itkFunctionBasePD2D):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionIF2DD self, itkImageF2 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DD_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionIF2DD self) -> itkImageF2

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DD_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionIF2DD self, itkIndex2 index) -> double

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DD_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionIF2DD self, itkContinuousIndexD2 index) -> double

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DD_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionIF2DD self, itkIndex2 index) -> bool
        IsInsideBuffer(itkImageFunctionIF2DD self, itkContinuousIndexD2 index) -> bool
        IsInsideBuffer(itkImageFunctionIF2DD self, itkPointD2 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DD_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionIF2DD self, itkPointD2 point, itkIndex2 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DD_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionIF2DD self, itkPointD2 point, itkContinuousIndexD2 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DD_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionIF2DD self, itkContinuousIndexD2 cindex, itkIndex2 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionIF2DD self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIF2DD_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionIF2DD self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIF2DD_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionIF2DD self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIF2DD_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionIF2DD self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIF2DD_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIF2DD

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionIF2DD"""
        return _itkImageFunctionBasePython.itkImageFunctionIF2DD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIF2DD

        Create a new object of the class itkImageFunctionIF2DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIF2DD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIF2DD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIF2DD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIF2DD.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF2DD_SetInputImage, None, itkImageFunctionIF2DD)
itkImageFunctionIF2DD.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF2DD_GetInputImage, None, itkImageFunctionIF2DD)
itkImageFunctionIF2DD.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF2DD_EvaluateAtIndex, None, itkImageFunctionIF2DD)
itkImageFunctionIF2DD.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF2DD_EvaluateAtContinuousIndex, None, itkImageFunctionIF2DD)
itkImageFunctionIF2DD.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF2DD_IsInsideBuffer, None, itkImageFunctionIF2DD)
itkImageFunctionIF2DD.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF2DD_ConvertPointToNearestIndex, None, itkImageFunctionIF2DD)
itkImageFunctionIF2DD.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF2DD_ConvertPointToContinuousIndex, None, itkImageFunctionIF2DD)
itkImageFunctionIF2DD.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF2DD_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIF2DD)
itkImageFunctionIF2DD.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF2DD_GetStartIndex, None, itkImageFunctionIF2DD)
itkImageFunctionIF2DD.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF2DD_GetEndIndex, None, itkImageFunctionIF2DD)
itkImageFunctionIF2DD.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF2DD_GetStartContinuousIndex, None, itkImageFunctionIF2DD)
itkImageFunctionIF2DD.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF2DD_GetEndContinuousIndex, None, itkImageFunctionIF2DD)
itkImageFunctionIF2DD_swigregister = _itkImageFunctionBasePython.itkImageFunctionIF2DD_swigregister
itkImageFunctionIF2DD_swigregister(itkImageFunctionIF2DD)

def itkImageFunctionIF2DD_cast(obj):
    """itkImageFunctionIF2DD_cast(itkLightObject obj) -> itkImageFunctionIF2DD"""
    return _itkImageFunctionBasePython.itkImageFunctionIF2DD_cast(obj)

class itkImageFunctionIF2DF(itkFunctionBasePython.itkFunctionBasePF2D):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionIF2DF self, itkImageF2 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DF_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionIF2DF self) -> itkImageF2

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DF_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionIF2DF self, itkIndex2 index) -> double

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DF_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionIF2DF self, itkContinuousIndexF2 index) -> double

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DF_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionIF2DF self, itkIndex2 index) -> bool
        IsInsideBuffer(itkImageFunctionIF2DF self, itkContinuousIndexF2 index) -> bool
        IsInsideBuffer(itkImageFunctionIF2DF self, itkPointF2 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DF_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionIF2DF self, itkPointF2 point, itkIndex2 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DF_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionIF2DF self, itkPointF2 point, itkContinuousIndexF2 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DF_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionIF2DF self, itkContinuousIndexF2 cindex, itkIndex2 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DF_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionIF2DF self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIF2DF_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionIF2DF self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIF2DF_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionIF2DF self) -> itkContinuousIndexF2"""
        return _itkImageFunctionBasePython.itkImageFunctionIF2DF_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionIF2DF self) -> itkContinuousIndexF2"""
        return _itkImageFunctionBasePython.itkImageFunctionIF2DF_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIF2DF

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionIF2DF"""
        return _itkImageFunctionBasePython.itkImageFunctionIF2DF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIF2DF

        Create a new object of the class itkImageFunctionIF2DF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIF2DF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIF2DF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIF2DF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIF2DF.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF2DF_SetInputImage, None, itkImageFunctionIF2DF)
itkImageFunctionIF2DF.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF2DF_GetInputImage, None, itkImageFunctionIF2DF)
itkImageFunctionIF2DF.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF2DF_EvaluateAtIndex, None, itkImageFunctionIF2DF)
itkImageFunctionIF2DF.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF2DF_EvaluateAtContinuousIndex, None, itkImageFunctionIF2DF)
itkImageFunctionIF2DF.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF2DF_IsInsideBuffer, None, itkImageFunctionIF2DF)
itkImageFunctionIF2DF.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF2DF_ConvertPointToNearestIndex, None, itkImageFunctionIF2DF)
itkImageFunctionIF2DF.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF2DF_ConvertPointToContinuousIndex, None, itkImageFunctionIF2DF)
itkImageFunctionIF2DF.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF2DF_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIF2DF)
itkImageFunctionIF2DF.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF2DF_GetStartIndex, None, itkImageFunctionIF2DF)
itkImageFunctionIF2DF.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF2DF_GetEndIndex, None, itkImageFunctionIF2DF)
itkImageFunctionIF2DF.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF2DF_GetStartContinuousIndex, None, itkImageFunctionIF2DF)
itkImageFunctionIF2DF.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF2DF_GetEndContinuousIndex, None, itkImageFunctionIF2DF)
itkImageFunctionIF2DF_swigregister = _itkImageFunctionBasePython.itkImageFunctionIF2DF_swigregister
itkImageFunctionIF2DF_swigregister(itkImageFunctionIF2DF)

def itkImageFunctionIF2DF_cast(obj):
    """itkImageFunctionIF2DF_cast(itkLightObject obj) -> itkImageFunctionIF2DF"""
    return _itkImageFunctionBasePython.itkImageFunctionIF2DF_cast(obj)

class itkImageFunctionIF3DD(itkFunctionBasePython.itkFunctionBasePD3D):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionIF3DD self, itkImageF3 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DD_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionIF3DD self) -> itkImageF3

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DD_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionIF3DD self, itkIndex3 index) -> double

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DD_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionIF3DD self, itkContinuousIndexD3 index) -> double

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DD_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionIF3DD self, itkIndex3 index) -> bool
        IsInsideBuffer(itkImageFunctionIF3DD self, itkContinuousIndexD3 index) -> bool
        IsInsideBuffer(itkImageFunctionIF3DD self, itkPointD3 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DD_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionIF3DD self, itkPointD3 point, itkIndex3 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DD_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionIF3DD self, itkPointD3 point, itkContinuousIndexD3 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DD_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionIF3DD self, itkContinuousIndexD3 cindex, itkIndex3 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionIF3DD self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIF3DD_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionIF3DD self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIF3DD_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionIF3DD self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIF3DD_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionIF3DD self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIF3DD_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIF3DD

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionIF3DD"""
        return _itkImageFunctionBasePython.itkImageFunctionIF3DD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIF3DD

        Create a new object of the class itkImageFunctionIF3DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIF3DD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIF3DD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIF3DD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIF3DD.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF3DD_SetInputImage, None, itkImageFunctionIF3DD)
itkImageFunctionIF3DD.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF3DD_GetInputImage, None, itkImageFunctionIF3DD)
itkImageFunctionIF3DD.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF3DD_EvaluateAtIndex, None, itkImageFunctionIF3DD)
itkImageFunctionIF3DD.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF3DD_EvaluateAtContinuousIndex, None, itkImageFunctionIF3DD)
itkImageFunctionIF3DD.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF3DD_IsInsideBuffer, None, itkImageFunctionIF3DD)
itkImageFunctionIF3DD.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF3DD_ConvertPointToNearestIndex, None, itkImageFunctionIF3DD)
itkImageFunctionIF3DD.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF3DD_ConvertPointToContinuousIndex, None, itkImageFunctionIF3DD)
itkImageFunctionIF3DD.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF3DD_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIF3DD)
itkImageFunctionIF3DD.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF3DD_GetStartIndex, None, itkImageFunctionIF3DD)
itkImageFunctionIF3DD.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF3DD_GetEndIndex, None, itkImageFunctionIF3DD)
itkImageFunctionIF3DD.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF3DD_GetStartContinuousIndex, None, itkImageFunctionIF3DD)
itkImageFunctionIF3DD.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF3DD_GetEndContinuousIndex, None, itkImageFunctionIF3DD)
itkImageFunctionIF3DD_swigregister = _itkImageFunctionBasePython.itkImageFunctionIF3DD_swigregister
itkImageFunctionIF3DD_swigregister(itkImageFunctionIF3DD)

def itkImageFunctionIF3DD_cast(obj):
    """itkImageFunctionIF3DD_cast(itkLightObject obj) -> itkImageFunctionIF3DD"""
    return _itkImageFunctionBasePython.itkImageFunctionIF3DD_cast(obj)

class itkImageFunctionIF3DF(itkFunctionBasePython.itkFunctionBasePF3D):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionIF3DF self, itkImageF3 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DF_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionIF3DF self) -> itkImageF3

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DF_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionIF3DF self, itkIndex3 index) -> double

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DF_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionIF3DF self, itkContinuousIndexF3 index) -> double

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DF_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionIF3DF self, itkIndex3 index) -> bool
        IsInsideBuffer(itkImageFunctionIF3DF self, itkContinuousIndexF3 index) -> bool
        IsInsideBuffer(itkImageFunctionIF3DF self, itkPointF3 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DF_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionIF3DF self, itkPointF3 point, itkIndex3 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DF_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionIF3DF self, itkPointF3 point, itkContinuousIndexF3 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DF_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionIF3DF self, itkContinuousIndexF3 cindex, itkIndex3 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DF_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionIF3DF self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIF3DF_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionIF3DF self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIF3DF_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionIF3DF self) -> itkContinuousIndexF3"""
        return _itkImageFunctionBasePython.itkImageFunctionIF3DF_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionIF3DF self) -> itkContinuousIndexF3"""
        return _itkImageFunctionBasePython.itkImageFunctionIF3DF_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIF3DF

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionIF3DF"""
        return _itkImageFunctionBasePython.itkImageFunctionIF3DF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIF3DF

        Create a new object of the class itkImageFunctionIF3DF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIF3DF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIF3DF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIF3DF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIF3DF.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF3DF_SetInputImage, None, itkImageFunctionIF3DF)
itkImageFunctionIF3DF.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF3DF_GetInputImage, None, itkImageFunctionIF3DF)
itkImageFunctionIF3DF.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF3DF_EvaluateAtIndex, None, itkImageFunctionIF3DF)
itkImageFunctionIF3DF.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF3DF_EvaluateAtContinuousIndex, None, itkImageFunctionIF3DF)
itkImageFunctionIF3DF.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF3DF_IsInsideBuffer, None, itkImageFunctionIF3DF)
itkImageFunctionIF3DF.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF3DF_ConvertPointToNearestIndex, None, itkImageFunctionIF3DF)
itkImageFunctionIF3DF.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF3DF_ConvertPointToContinuousIndex, None, itkImageFunctionIF3DF)
itkImageFunctionIF3DF.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF3DF_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIF3DF)
itkImageFunctionIF3DF.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF3DF_GetStartIndex, None, itkImageFunctionIF3DF)
itkImageFunctionIF3DF.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF3DF_GetEndIndex, None, itkImageFunctionIF3DF)
itkImageFunctionIF3DF.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF3DF_GetStartContinuousIndex, None, itkImageFunctionIF3DF)
itkImageFunctionIF3DF.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIF3DF_GetEndContinuousIndex, None, itkImageFunctionIF3DF)
itkImageFunctionIF3DF_swigregister = _itkImageFunctionBasePython.itkImageFunctionIF3DF_swigregister
itkImageFunctionIF3DF_swigregister(itkImageFunctionIF3DF)

def itkImageFunctionIF3DF_cast(obj):
    """itkImageFunctionIF3DF_cast(itkLightObject obj) -> itkImageFunctionIF3DF"""
    return _itkImageFunctionBasePython.itkImageFunctionIF3DF_cast(obj)

class itkImageFunctionIRGBAUC2RGBADD(itkFunctionBasePython.itkFunctionBasePD2RGBAD):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionIRGBAUC2RGBADD self, itkImageRGBAUC2 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionIRGBAUC2RGBADD self) -> itkImageRGBAUC2

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionIRGBAUC2RGBADD self, itkIndex2 index) -> itkRGBAPixelD

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionIRGBAUC2RGBADD self, itkContinuousIndexD2 index) -> itkRGBAPixelD

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionIRGBAUC2RGBADD self, itkIndex2 index) -> bool
        IsInsideBuffer(itkImageFunctionIRGBAUC2RGBADD self, itkContinuousIndexD2 index) -> bool
        IsInsideBuffer(itkImageFunctionIRGBAUC2RGBADD self, itkPointD2 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionIRGBAUC2RGBADD self, itkPointD2 point, itkIndex2 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionIRGBAUC2RGBADD self, itkPointD2 point, itkContinuousIndexD2 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionIRGBAUC2RGBADD self, itkContinuousIndexD2 cindex, itkIndex2 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionIRGBAUC2RGBADD self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionIRGBAUC2RGBADD self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionIRGBAUC2RGBADD self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionIRGBAUC2RGBADD self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIRGBAUC2RGBADD

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionIRGBAUC2RGBADD"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIRGBAUC2RGBADD

        Create a new object of the class itkImageFunctionIRGBAUC2RGBADD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIRGBAUC2RGBADD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIRGBAUC2RGBADD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIRGBAUC2RGBADD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIRGBAUC2RGBADD.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_SetInputImage, None, itkImageFunctionIRGBAUC2RGBADD)
itkImageFunctionIRGBAUC2RGBADD.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_GetInputImage, None, itkImageFunctionIRGBAUC2RGBADD)
itkImageFunctionIRGBAUC2RGBADD.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_EvaluateAtIndex, None, itkImageFunctionIRGBAUC2RGBADD)
itkImageFunctionIRGBAUC2RGBADD.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_EvaluateAtContinuousIndex, None, itkImageFunctionIRGBAUC2RGBADD)
itkImageFunctionIRGBAUC2RGBADD.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_IsInsideBuffer, None, itkImageFunctionIRGBAUC2RGBADD)
itkImageFunctionIRGBAUC2RGBADD.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_ConvertPointToNearestIndex, None, itkImageFunctionIRGBAUC2RGBADD)
itkImageFunctionIRGBAUC2RGBADD.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_ConvertPointToContinuousIndex, None, itkImageFunctionIRGBAUC2RGBADD)
itkImageFunctionIRGBAUC2RGBADD.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIRGBAUC2RGBADD)
itkImageFunctionIRGBAUC2RGBADD.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_GetStartIndex, None, itkImageFunctionIRGBAUC2RGBADD)
itkImageFunctionIRGBAUC2RGBADD.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_GetEndIndex, None, itkImageFunctionIRGBAUC2RGBADD)
itkImageFunctionIRGBAUC2RGBADD.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_GetStartContinuousIndex, None, itkImageFunctionIRGBAUC2RGBADD)
itkImageFunctionIRGBAUC2RGBADD.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_GetEndContinuousIndex, None, itkImageFunctionIRGBAUC2RGBADD)
itkImageFunctionIRGBAUC2RGBADD_swigregister = _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_swigregister
itkImageFunctionIRGBAUC2RGBADD_swigregister(itkImageFunctionIRGBAUC2RGBADD)

def itkImageFunctionIRGBAUC2RGBADD_cast(obj):
    """itkImageFunctionIRGBAUC2RGBADD_cast(itkLightObject obj) -> itkImageFunctionIRGBAUC2RGBADD"""
    return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_cast(obj)

class itkImageFunctionIRGBAUC2RGBAUCD(itkFunctionBasePython.itkFunctionBasePD2RGBAUC):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionIRGBAUC2RGBAUCD self, itkImageRGBAUC2 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionIRGBAUC2RGBAUCD self) -> itkImageRGBAUC2

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionIRGBAUC2RGBAUCD self, itkIndex2 index) -> itkRGBAPixelUC

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionIRGBAUC2RGBAUCD self, itkContinuousIndexD2 index) -> itkRGBAPixelUC

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionIRGBAUC2RGBAUCD self, itkIndex2 index) -> bool
        IsInsideBuffer(itkImageFunctionIRGBAUC2RGBAUCD self, itkContinuousIndexD2 index) -> bool
        IsInsideBuffer(itkImageFunctionIRGBAUC2RGBAUCD self, itkPointD2 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionIRGBAUC2RGBAUCD self, itkPointD2 point, itkIndex2 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionIRGBAUC2RGBAUCD self, itkPointD2 point, itkContinuousIndexD2 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionIRGBAUC2RGBAUCD self, itkContinuousIndexD2 cindex, itkIndex2 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionIRGBAUC2RGBAUCD self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionIRGBAUC2RGBAUCD self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionIRGBAUC2RGBAUCD self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionIRGBAUC2RGBAUCD self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIRGBAUC2RGBAUCD

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionIRGBAUC2RGBAUCD"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIRGBAUC2RGBAUCD

        Create a new object of the class itkImageFunctionIRGBAUC2RGBAUCD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIRGBAUC2RGBAUCD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIRGBAUC2RGBAUCD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIRGBAUC2RGBAUCD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIRGBAUC2RGBAUCD.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_SetInputImage, None, itkImageFunctionIRGBAUC2RGBAUCD)
itkImageFunctionIRGBAUC2RGBAUCD.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_GetInputImage, None, itkImageFunctionIRGBAUC2RGBAUCD)
itkImageFunctionIRGBAUC2RGBAUCD.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_EvaluateAtIndex, None, itkImageFunctionIRGBAUC2RGBAUCD)
itkImageFunctionIRGBAUC2RGBAUCD.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_EvaluateAtContinuousIndex, None, itkImageFunctionIRGBAUC2RGBAUCD)
itkImageFunctionIRGBAUC2RGBAUCD.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_IsInsideBuffer, None, itkImageFunctionIRGBAUC2RGBAUCD)
itkImageFunctionIRGBAUC2RGBAUCD.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_ConvertPointToNearestIndex, None, itkImageFunctionIRGBAUC2RGBAUCD)
itkImageFunctionIRGBAUC2RGBAUCD.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_ConvertPointToContinuousIndex, None, itkImageFunctionIRGBAUC2RGBAUCD)
itkImageFunctionIRGBAUC2RGBAUCD.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIRGBAUC2RGBAUCD)
itkImageFunctionIRGBAUC2RGBAUCD.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_GetStartIndex, None, itkImageFunctionIRGBAUC2RGBAUCD)
itkImageFunctionIRGBAUC2RGBAUCD.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_GetEndIndex, None, itkImageFunctionIRGBAUC2RGBAUCD)
itkImageFunctionIRGBAUC2RGBAUCD.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_GetStartContinuousIndex, None, itkImageFunctionIRGBAUC2RGBAUCD)
itkImageFunctionIRGBAUC2RGBAUCD.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_GetEndContinuousIndex, None, itkImageFunctionIRGBAUC2RGBAUCD)
itkImageFunctionIRGBAUC2RGBAUCD_swigregister = _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_swigregister
itkImageFunctionIRGBAUC2RGBAUCD_swigregister(itkImageFunctionIRGBAUC2RGBAUCD)

def itkImageFunctionIRGBAUC2RGBAUCD_cast(obj):
    """itkImageFunctionIRGBAUC2RGBAUCD_cast(itkLightObject obj) -> itkImageFunctionIRGBAUC2RGBAUCD"""
    return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_cast(obj)

class itkImageFunctionIRGBAUC3RGBADD(itkFunctionBasePython.itkFunctionBasePD3RGBAD):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionIRGBAUC3RGBADD self, itkImageRGBAUC3 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionIRGBAUC3RGBADD self) -> itkImageRGBAUC3

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionIRGBAUC3RGBADD self, itkIndex3 index) -> itkRGBAPixelD

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionIRGBAUC3RGBADD self, itkContinuousIndexD3 index) -> itkRGBAPixelD

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionIRGBAUC3RGBADD self, itkIndex3 index) -> bool
        IsInsideBuffer(itkImageFunctionIRGBAUC3RGBADD self, itkContinuousIndexD3 index) -> bool
        IsInsideBuffer(itkImageFunctionIRGBAUC3RGBADD self, itkPointD3 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionIRGBAUC3RGBADD self, itkPointD3 point, itkIndex3 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionIRGBAUC3RGBADD self, itkPointD3 point, itkContinuousIndexD3 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionIRGBAUC3RGBADD self, itkContinuousIndexD3 cindex, itkIndex3 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionIRGBAUC3RGBADD self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionIRGBAUC3RGBADD self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionIRGBAUC3RGBADD self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionIRGBAUC3RGBADD self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIRGBAUC3RGBADD

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionIRGBAUC3RGBADD"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIRGBAUC3RGBADD

        Create a new object of the class itkImageFunctionIRGBAUC3RGBADD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIRGBAUC3RGBADD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIRGBAUC3RGBADD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIRGBAUC3RGBADD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIRGBAUC3RGBADD.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_SetInputImage, None, itkImageFunctionIRGBAUC3RGBADD)
itkImageFunctionIRGBAUC3RGBADD.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_GetInputImage, None, itkImageFunctionIRGBAUC3RGBADD)
itkImageFunctionIRGBAUC3RGBADD.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_EvaluateAtIndex, None, itkImageFunctionIRGBAUC3RGBADD)
itkImageFunctionIRGBAUC3RGBADD.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_EvaluateAtContinuousIndex, None, itkImageFunctionIRGBAUC3RGBADD)
itkImageFunctionIRGBAUC3RGBADD.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_IsInsideBuffer, None, itkImageFunctionIRGBAUC3RGBADD)
itkImageFunctionIRGBAUC3RGBADD.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_ConvertPointToNearestIndex, None, itkImageFunctionIRGBAUC3RGBADD)
itkImageFunctionIRGBAUC3RGBADD.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_ConvertPointToContinuousIndex, None, itkImageFunctionIRGBAUC3RGBADD)
itkImageFunctionIRGBAUC3RGBADD.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIRGBAUC3RGBADD)
itkImageFunctionIRGBAUC3RGBADD.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_GetStartIndex, None, itkImageFunctionIRGBAUC3RGBADD)
itkImageFunctionIRGBAUC3RGBADD.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_GetEndIndex, None, itkImageFunctionIRGBAUC3RGBADD)
itkImageFunctionIRGBAUC3RGBADD.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_GetStartContinuousIndex, None, itkImageFunctionIRGBAUC3RGBADD)
itkImageFunctionIRGBAUC3RGBADD.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_GetEndContinuousIndex, None, itkImageFunctionIRGBAUC3RGBADD)
itkImageFunctionIRGBAUC3RGBADD_swigregister = _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_swigregister
itkImageFunctionIRGBAUC3RGBADD_swigregister(itkImageFunctionIRGBAUC3RGBADD)

def itkImageFunctionIRGBAUC3RGBADD_cast(obj):
    """itkImageFunctionIRGBAUC3RGBADD_cast(itkLightObject obj) -> itkImageFunctionIRGBAUC3RGBADD"""
    return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_cast(obj)

class itkImageFunctionIRGBAUC3RGBAUCD(itkFunctionBasePython.itkFunctionBasePD3RGBAUC):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionIRGBAUC3RGBAUCD self, itkImageRGBAUC3 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionIRGBAUC3RGBAUCD self) -> itkImageRGBAUC3

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionIRGBAUC3RGBAUCD self, itkIndex3 index) -> itkRGBAPixelUC

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionIRGBAUC3RGBAUCD self, itkContinuousIndexD3 index) -> itkRGBAPixelUC

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionIRGBAUC3RGBAUCD self, itkIndex3 index) -> bool
        IsInsideBuffer(itkImageFunctionIRGBAUC3RGBAUCD self, itkContinuousIndexD3 index) -> bool
        IsInsideBuffer(itkImageFunctionIRGBAUC3RGBAUCD self, itkPointD3 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionIRGBAUC3RGBAUCD self, itkPointD3 point, itkIndex3 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionIRGBAUC3RGBAUCD self, itkPointD3 point, itkContinuousIndexD3 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionIRGBAUC3RGBAUCD self, itkContinuousIndexD3 cindex, itkIndex3 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionIRGBAUC3RGBAUCD self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionIRGBAUC3RGBAUCD self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionIRGBAUC3RGBAUCD self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionIRGBAUC3RGBAUCD self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIRGBAUC3RGBAUCD

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionIRGBAUC3RGBAUCD"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIRGBAUC3RGBAUCD

        Create a new object of the class itkImageFunctionIRGBAUC3RGBAUCD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIRGBAUC3RGBAUCD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIRGBAUC3RGBAUCD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIRGBAUC3RGBAUCD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIRGBAUC3RGBAUCD.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_SetInputImage, None, itkImageFunctionIRGBAUC3RGBAUCD)
itkImageFunctionIRGBAUC3RGBAUCD.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_GetInputImage, None, itkImageFunctionIRGBAUC3RGBAUCD)
itkImageFunctionIRGBAUC3RGBAUCD.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_EvaluateAtIndex, None, itkImageFunctionIRGBAUC3RGBAUCD)
itkImageFunctionIRGBAUC3RGBAUCD.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_EvaluateAtContinuousIndex, None, itkImageFunctionIRGBAUC3RGBAUCD)
itkImageFunctionIRGBAUC3RGBAUCD.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_IsInsideBuffer, None, itkImageFunctionIRGBAUC3RGBAUCD)
itkImageFunctionIRGBAUC3RGBAUCD.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_ConvertPointToNearestIndex, None, itkImageFunctionIRGBAUC3RGBAUCD)
itkImageFunctionIRGBAUC3RGBAUCD.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_ConvertPointToContinuousIndex, None, itkImageFunctionIRGBAUC3RGBAUCD)
itkImageFunctionIRGBAUC3RGBAUCD.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIRGBAUC3RGBAUCD)
itkImageFunctionIRGBAUC3RGBAUCD.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_GetStartIndex, None, itkImageFunctionIRGBAUC3RGBAUCD)
itkImageFunctionIRGBAUC3RGBAUCD.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_GetEndIndex, None, itkImageFunctionIRGBAUC3RGBAUCD)
itkImageFunctionIRGBAUC3RGBAUCD.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_GetStartContinuousIndex, None, itkImageFunctionIRGBAUC3RGBAUCD)
itkImageFunctionIRGBAUC3RGBAUCD.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_GetEndContinuousIndex, None, itkImageFunctionIRGBAUC3RGBAUCD)
itkImageFunctionIRGBAUC3RGBAUCD_swigregister = _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_swigregister
itkImageFunctionIRGBAUC3RGBAUCD_swigregister(itkImageFunctionIRGBAUC3RGBAUCD)

def itkImageFunctionIRGBAUC3RGBAUCD_cast(obj):
    """itkImageFunctionIRGBAUC3RGBAUCD_cast(itkLightObject obj) -> itkImageFunctionIRGBAUC3RGBAUCD"""
    return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_cast(obj)

class itkImageFunctionIRGBUC2RGBDD(itkFunctionBasePython.itkFunctionBasePD2RGBD):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionIRGBUC2RGBDD self, itkImageRGBUC2 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionIRGBUC2RGBDD self) -> itkImageRGBUC2

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionIRGBUC2RGBDD self, itkIndex2 index) -> itkRGBPixelD

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionIRGBUC2RGBDD self, itkContinuousIndexD2 index) -> itkRGBPixelD

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionIRGBUC2RGBDD self, itkIndex2 index) -> bool
        IsInsideBuffer(itkImageFunctionIRGBUC2RGBDD self, itkContinuousIndexD2 index) -> bool
        IsInsideBuffer(itkImageFunctionIRGBUC2RGBDD self, itkPointD2 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionIRGBUC2RGBDD self, itkPointD2 point, itkIndex2 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionIRGBUC2RGBDD self, itkPointD2 point, itkContinuousIndexD2 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionIRGBUC2RGBDD self, itkContinuousIndexD2 cindex, itkIndex2 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionIRGBUC2RGBDD self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionIRGBUC2RGBDD self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionIRGBUC2RGBDD self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionIRGBUC2RGBDD self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIRGBUC2RGBDD

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionIRGBUC2RGBDD"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIRGBUC2RGBDD

        Create a new object of the class itkImageFunctionIRGBUC2RGBDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIRGBUC2RGBDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIRGBUC2RGBDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIRGBUC2RGBDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIRGBUC2RGBDD.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_SetInputImage, None, itkImageFunctionIRGBUC2RGBDD)
itkImageFunctionIRGBUC2RGBDD.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_GetInputImage, None, itkImageFunctionIRGBUC2RGBDD)
itkImageFunctionIRGBUC2RGBDD.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_EvaluateAtIndex, None, itkImageFunctionIRGBUC2RGBDD)
itkImageFunctionIRGBUC2RGBDD.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_EvaluateAtContinuousIndex, None, itkImageFunctionIRGBUC2RGBDD)
itkImageFunctionIRGBUC2RGBDD.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_IsInsideBuffer, None, itkImageFunctionIRGBUC2RGBDD)
itkImageFunctionIRGBUC2RGBDD.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_ConvertPointToNearestIndex, None, itkImageFunctionIRGBUC2RGBDD)
itkImageFunctionIRGBUC2RGBDD.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_ConvertPointToContinuousIndex, None, itkImageFunctionIRGBUC2RGBDD)
itkImageFunctionIRGBUC2RGBDD.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIRGBUC2RGBDD)
itkImageFunctionIRGBUC2RGBDD.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_GetStartIndex, None, itkImageFunctionIRGBUC2RGBDD)
itkImageFunctionIRGBUC2RGBDD.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_GetEndIndex, None, itkImageFunctionIRGBUC2RGBDD)
itkImageFunctionIRGBUC2RGBDD.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_GetStartContinuousIndex, None, itkImageFunctionIRGBUC2RGBDD)
itkImageFunctionIRGBUC2RGBDD.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_GetEndContinuousIndex, None, itkImageFunctionIRGBUC2RGBDD)
itkImageFunctionIRGBUC2RGBDD_swigregister = _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_swigregister
itkImageFunctionIRGBUC2RGBDD_swigregister(itkImageFunctionIRGBUC2RGBDD)

def itkImageFunctionIRGBUC2RGBDD_cast(obj):
    """itkImageFunctionIRGBUC2RGBDD_cast(itkLightObject obj) -> itkImageFunctionIRGBUC2RGBDD"""
    return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_cast(obj)

class itkImageFunctionIRGBUC2RGBUCD(itkFunctionBasePython.itkFunctionBasePD2RGBUC):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionIRGBUC2RGBUCD self, itkImageRGBUC2 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionIRGBUC2RGBUCD self) -> itkImageRGBUC2

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionIRGBUC2RGBUCD self, itkIndex2 index) -> itkRGBPixelUC

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionIRGBUC2RGBUCD self, itkContinuousIndexD2 index) -> itkRGBPixelUC

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionIRGBUC2RGBUCD self, itkIndex2 index) -> bool
        IsInsideBuffer(itkImageFunctionIRGBUC2RGBUCD self, itkContinuousIndexD2 index) -> bool
        IsInsideBuffer(itkImageFunctionIRGBUC2RGBUCD self, itkPointD2 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionIRGBUC2RGBUCD self, itkPointD2 point, itkIndex2 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionIRGBUC2RGBUCD self, itkPointD2 point, itkContinuousIndexD2 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionIRGBUC2RGBUCD self, itkContinuousIndexD2 cindex, itkIndex2 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionIRGBUC2RGBUCD self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionIRGBUC2RGBUCD self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionIRGBUC2RGBUCD self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionIRGBUC2RGBUCD self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIRGBUC2RGBUCD

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionIRGBUC2RGBUCD"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIRGBUC2RGBUCD

        Create a new object of the class itkImageFunctionIRGBUC2RGBUCD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIRGBUC2RGBUCD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIRGBUC2RGBUCD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIRGBUC2RGBUCD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIRGBUC2RGBUCD.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_SetInputImage, None, itkImageFunctionIRGBUC2RGBUCD)
itkImageFunctionIRGBUC2RGBUCD.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_GetInputImage, None, itkImageFunctionIRGBUC2RGBUCD)
itkImageFunctionIRGBUC2RGBUCD.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_EvaluateAtIndex, None, itkImageFunctionIRGBUC2RGBUCD)
itkImageFunctionIRGBUC2RGBUCD.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_EvaluateAtContinuousIndex, None, itkImageFunctionIRGBUC2RGBUCD)
itkImageFunctionIRGBUC2RGBUCD.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_IsInsideBuffer, None, itkImageFunctionIRGBUC2RGBUCD)
itkImageFunctionIRGBUC2RGBUCD.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_ConvertPointToNearestIndex, None, itkImageFunctionIRGBUC2RGBUCD)
itkImageFunctionIRGBUC2RGBUCD.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_ConvertPointToContinuousIndex, None, itkImageFunctionIRGBUC2RGBUCD)
itkImageFunctionIRGBUC2RGBUCD.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIRGBUC2RGBUCD)
itkImageFunctionIRGBUC2RGBUCD.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_GetStartIndex, None, itkImageFunctionIRGBUC2RGBUCD)
itkImageFunctionIRGBUC2RGBUCD.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_GetEndIndex, None, itkImageFunctionIRGBUC2RGBUCD)
itkImageFunctionIRGBUC2RGBUCD.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_GetStartContinuousIndex, None, itkImageFunctionIRGBUC2RGBUCD)
itkImageFunctionIRGBUC2RGBUCD.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_GetEndContinuousIndex, None, itkImageFunctionIRGBUC2RGBUCD)
itkImageFunctionIRGBUC2RGBUCD_swigregister = _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_swigregister
itkImageFunctionIRGBUC2RGBUCD_swigregister(itkImageFunctionIRGBUC2RGBUCD)

def itkImageFunctionIRGBUC2RGBUCD_cast(obj):
    """itkImageFunctionIRGBUC2RGBUCD_cast(itkLightObject obj) -> itkImageFunctionIRGBUC2RGBUCD"""
    return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_cast(obj)

class itkImageFunctionIRGBUC3RGBDD(itkFunctionBasePython.itkFunctionBasePD3RGBD):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionIRGBUC3RGBDD self, itkImageRGBUC3 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionIRGBUC3RGBDD self) -> itkImageRGBUC3

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionIRGBUC3RGBDD self, itkIndex3 index) -> itkRGBPixelD

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionIRGBUC3RGBDD self, itkContinuousIndexD3 index) -> itkRGBPixelD

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionIRGBUC3RGBDD self, itkIndex3 index) -> bool
        IsInsideBuffer(itkImageFunctionIRGBUC3RGBDD self, itkContinuousIndexD3 index) -> bool
        IsInsideBuffer(itkImageFunctionIRGBUC3RGBDD self, itkPointD3 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionIRGBUC3RGBDD self, itkPointD3 point, itkIndex3 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionIRGBUC3RGBDD self, itkPointD3 point, itkContinuousIndexD3 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionIRGBUC3RGBDD self, itkContinuousIndexD3 cindex, itkIndex3 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionIRGBUC3RGBDD self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionIRGBUC3RGBDD self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionIRGBUC3RGBDD self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionIRGBUC3RGBDD self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIRGBUC3RGBDD

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionIRGBUC3RGBDD"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIRGBUC3RGBDD

        Create a new object of the class itkImageFunctionIRGBUC3RGBDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIRGBUC3RGBDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIRGBUC3RGBDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIRGBUC3RGBDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIRGBUC3RGBDD.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_SetInputImage, None, itkImageFunctionIRGBUC3RGBDD)
itkImageFunctionIRGBUC3RGBDD.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_GetInputImage, None, itkImageFunctionIRGBUC3RGBDD)
itkImageFunctionIRGBUC3RGBDD.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_EvaluateAtIndex, None, itkImageFunctionIRGBUC3RGBDD)
itkImageFunctionIRGBUC3RGBDD.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_EvaluateAtContinuousIndex, None, itkImageFunctionIRGBUC3RGBDD)
itkImageFunctionIRGBUC3RGBDD.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_IsInsideBuffer, None, itkImageFunctionIRGBUC3RGBDD)
itkImageFunctionIRGBUC3RGBDD.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_ConvertPointToNearestIndex, None, itkImageFunctionIRGBUC3RGBDD)
itkImageFunctionIRGBUC3RGBDD.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_ConvertPointToContinuousIndex, None, itkImageFunctionIRGBUC3RGBDD)
itkImageFunctionIRGBUC3RGBDD.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIRGBUC3RGBDD)
itkImageFunctionIRGBUC3RGBDD.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_GetStartIndex, None, itkImageFunctionIRGBUC3RGBDD)
itkImageFunctionIRGBUC3RGBDD.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_GetEndIndex, None, itkImageFunctionIRGBUC3RGBDD)
itkImageFunctionIRGBUC3RGBDD.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_GetStartContinuousIndex, None, itkImageFunctionIRGBUC3RGBDD)
itkImageFunctionIRGBUC3RGBDD.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_GetEndContinuousIndex, None, itkImageFunctionIRGBUC3RGBDD)
itkImageFunctionIRGBUC3RGBDD_swigregister = _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_swigregister
itkImageFunctionIRGBUC3RGBDD_swigregister(itkImageFunctionIRGBUC3RGBDD)

def itkImageFunctionIRGBUC3RGBDD_cast(obj):
    """itkImageFunctionIRGBUC3RGBDD_cast(itkLightObject obj) -> itkImageFunctionIRGBUC3RGBDD"""
    return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_cast(obj)

class itkImageFunctionIRGBUC3RGBUCD(itkFunctionBasePython.itkFunctionBasePD3RGBUC):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionIRGBUC3RGBUCD self, itkImageRGBUC3 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionIRGBUC3RGBUCD self) -> itkImageRGBUC3

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionIRGBUC3RGBUCD self, itkIndex3 index) -> itkRGBPixelUC

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionIRGBUC3RGBUCD self, itkContinuousIndexD3 index) -> itkRGBPixelUC

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionIRGBUC3RGBUCD self, itkIndex3 index) -> bool
        IsInsideBuffer(itkImageFunctionIRGBUC3RGBUCD self, itkContinuousIndexD3 index) -> bool
        IsInsideBuffer(itkImageFunctionIRGBUC3RGBUCD self, itkPointD3 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionIRGBUC3RGBUCD self, itkPointD3 point, itkIndex3 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionIRGBUC3RGBUCD self, itkPointD3 point, itkContinuousIndexD3 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionIRGBUC3RGBUCD self, itkContinuousIndexD3 cindex, itkIndex3 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionIRGBUC3RGBUCD self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionIRGBUC3RGBUCD self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionIRGBUC3RGBUCD self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionIRGBUC3RGBUCD self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIRGBUC3RGBUCD

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionIRGBUC3RGBUCD"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIRGBUC3RGBUCD

        Create a new object of the class itkImageFunctionIRGBUC3RGBUCD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIRGBUC3RGBUCD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIRGBUC3RGBUCD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIRGBUC3RGBUCD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIRGBUC3RGBUCD.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_SetInputImage, None, itkImageFunctionIRGBUC3RGBUCD)
itkImageFunctionIRGBUC3RGBUCD.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_GetInputImage, None, itkImageFunctionIRGBUC3RGBUCD)
itkImageFunctionIRGBUC3RGBUCD.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_EvaluateAtIndex, None, itkImageFunctionIRGBUC3RGBUCD)
itkImageFunctionIRGBUC3RGBUCD.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_EvaluateAtContinuousIndex, None, itkImageFunctionIRGBUC3RGBUCD)
itkImageFunctionIRGBUC3RGBUCD.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_IsInsideBuffer, None, itkImageFunctionIRGBUC3RGBUCD)
itkImageFunctionIRGBUC3RGBUCD.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_ConvertPointToNearestIndex, None, itkImageFunctionIRGBUC3RGBUCD)
itkImageFunctionIRGBUC3RGBUCD.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_ConvertPointToContinuousIndex, None, itkImageFunctionIRGBUC3RGBUCD)
itkImageFunctionIRGBUC3RGBUCD.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIRGBUC3RGBUCD)
itkImageFunctionIRGBUC3RGBUCD.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_GetStartIndex, None, itkImageFunctionIRGBUC3RGBUCD)
itkImageFunctionIRGBUC3RGBUCD.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_GetEndIndex, None, itkImageFunctionIRGBUC3RGBUCD)
itkImageFunctionIRGBUC3RGBUCD.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_GetStartContinuousIndex, None, itkImageFunctionIRGBUC3RGBUCD)
itkImageFunctionIRGBUC3RGBUCD.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_GetEndContinuousIndex, None, itkImageFunctionIRGBUC3RGBUCD)
itkImageFunctionIRGBUC3RGBUCD_swigregister = _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_swigregister
itkImageFunctionIRGBUC3RGBUCD_swigregister(itkImageFunctionIRGBUC3RGBUCD)

def itkImageFunctionIRGBUC3RGBUCD_cast(obj):
    """itkImageFunctionIRGBUC3RGBUCD_cast(itkLightObject obj) -> itkImageFunctionIRGBUC3RGBUCD"""
    return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_cast(obj)

class itkImageFunctionISS2DD(itkFunctionBasePython.itkFunctionBasePD2D):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionISS2DD self, itkImageSS2 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DD_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionISS2DD self) -> itkImageSS2

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DD_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionISS2DD self, itkIndex2 index) -> double

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DD_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionISS2DD self, itkContinuousIndexD2 index) -> double

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DD_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionISS2DD self, itkIndex2 index) -> bool
        IsInsideBuffer(itkImageFunctionISS2DD self, itkContinuousIndexD2 index) -> bool
        IsInsideBuffer(itkImageFunctionISS2DD self, itkPointD2 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DD_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionISS2DD self, itkPointD2 point, itkIndex2 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DD_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionISS2DD self, itkPointD2 point, itkContinuousIndexD2 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DD_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionISS2DD self, itkContinuousIndexD2 cindex, itkIndex2 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionISS2DD self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionISS2DD_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionISS2DD self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionISS2DD_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionISS2DD self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionISS2DD_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionISS2DD self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionISS2DD_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionISS2DD

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionISS2DD"""
        return _itkImageFunctionBasePython.itkImageFunctionISS2DD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionISS2DD

        Create a new object of the class itkImageFunctionISS2DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionISS2DD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionISS2DD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionISS2DD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionISS2DD.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS2DD_SetInputImage, None, itkImageFunctionISS2DD)
itkImageFunctionISS2DD.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS2DD_GetInputImage, None, itkImageFunctionISS2DD)
itkImageFunctionISS2DD.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS2DD_EvaluateAtIndex, None, itkImageFunctionISS2DD)
itkImageFunctionISS2DD.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS2DD_EvaluateAtContinuousIndex, None, itkImageFunctionISS2DD)
itkImageFunctionISS2DD.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS2DD_IsInsideBuffer, None, itkImageFunctionISS2DD)
itkImageFunctionISS2DD.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS2DD_ConvertPointToNearestIndex, None, itkImageFunctionISS2DD)
itkImageFunctionISS2DD.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS2DD_ConvertPointToContinuousIndex, None, itkImageFunctionISS2DD)
itkImageFunctionISS2DD.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS2DD_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionISS2DD)
itkImageFunctionISS2DD.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS2DD_GetStartIndex, None, itkImageFunctionISS2DD)
itkImageFunctionISS2DD.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS2DD_GetEndIndex, None, itkImageFunctionISS2DD)
itkImageFunctionISS2DD.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS2DD_GetStartContinuousIndex, None, itkImageFunctionISS2DD)
itkImageFunctionISS2DD.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS2DD_GetEndContinuousIndex, None, itkImageFunctionISS2DD)
itkImageFunctionISS2DD_swigregister = _itkImageFunctionBasePython.itkImageFunctionISS2DD_swigregister
itkImageFunctionISS2DD_swigregister(itkImageFunctionISS2DD)

def itkImageFunctionISS2DD_cast(obj):
    """itkImageFunctionISS2DD_cast(itkLightObject obj) -> itkImageFunctionISS2DD"""
    return _itkImageFunctionBasePython.itkImageFunctionISS2DD_cast(obj)

class itkImageFunctionISS2DF(itkFunctionBasePython.itkFunctionBasePF2D):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionISS2DF self, itkImageSS2 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DF_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionISS2DF self) -> itkImageSS2

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DF_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionISS2DF self, itkIndex2 index) -> double

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DF_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionISS2DF self, itkContinuousIndexF2 index) -> double

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DF_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionISS2DF self, itkIndex2 index) -> bool
        IsInsideBuffer(itkImageFunctionISS2DF self, itkContinuousIndexF2 index) -> bool
        IsInsideBuffer(itkImageFunctionISS2DF self, itkPointF2 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DF_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionISS2DF self, itkPointF2 point, itkIndex2 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DF_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionISS2DF self, itkPointF2 point, itkContinuousIndexF2 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DF_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionISS2DF self, itkContinuousIndexF2 cindex, itkIndex2 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DF_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionISS2DF self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionISS2DF_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionISS2DF self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionISS2DF_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionISS2DF self) -> itkContinuousIndexF2"""
        return _itkImageFunctionBasePython.itkImageFunctionISS2DF_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionISS2DF self) -> itkContinuousIndexF2"""
        return _itkImageFunctionBasePython.itkImageFunctionISS2DF_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionISS2DF

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionISS2DF"""
        return _itkImageFunctionBasePython.itkImageFunctionISS2DF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionISS2DF

        Create a new object of the class itkImageFunctionISS2DF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionISS2DF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionISS2DF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionISS2DF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionISS2DF.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS2DF_SetInputImage, None, itkImageFunctionISS2DF)
itkImageFunctionISS2DF.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS2DF_GetInputImage, None, itkImageFunctionISS2DF)
itkImageFunctionISS2DF.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS2DF_EvaluateAtIndex, None, itkImageFunctionISS2DF)
itkImageFunctionISS2DF.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS2DF_EvaluateAtContinuousIndex, None, itkImageFunctionISS2DF)
itkImageFunctionISS2DF.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS2DF_IsInsideBuffer, None, itkImageFunctionISS2DF)
itkImageFunctionISS2DF.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS2DF_ConvertPointToNearestIndex, None, itkImageFunctionISS2DF)
itkImageFunctionISS2DF.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS2DF_ConvertPointToContinuousIndex, None, itkImageFunctionISS2DF)
itkImageFunctionISS2DF.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS2DF_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionISS2DF)
itkImageFunctionISS2DF.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS2DF_GetStartIndex, None, itkImageFunctionISS2DF)
itkImageFunctionISS2DF.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS2DF_GetEndIndex, None, itkImageFunctionISS2DF)
itkImageFunctionISS2DF.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS2DF_GetStartContinuousIndex, None, itkImageFunctionISS2DF)
itkImageFunctionISS2DF.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS2DF_GetEndContinuousIndex, None, itkImageFunctionISS2DF)
itkImageFunctionISS2DF_swigregister = _itkImageFunctionBasePython.itkImageFunctionISS2DF_swigregister
itkImageFunctionISS2DF_swigregister(itkImageFunctionISS2DF)

def itkImageFunctionISS2DF_cast(obj):
    """itkImageFunctionISS2DF_cast(itkLightObject obj) -> itkImageFunctionISS2DF"""
    return _itkImageFunctionBasePython.itkImageFunctionISS2DF_cast(obj)

class itkImageFunctionISS3DD(itkFunctionBasePython.itkFunctionBasePD3D):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionISS3DD self, itkImageSS3 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DD_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionISS3DD self) -> itkImageSS3

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DD_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionISS3DD self, itkIndex3 index) -> double

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DD_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionISS3DD self, itkContinuousIndexD3 index) -> double

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DD_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionISS3DD self, itkIndex3 index) -> bool
        IsInsideBuffer(itkImageFunctionISS3DD self, itkContinuousIndexD3 index) -> bool
        IsInsideBuffer(itkImageFunctionISS3DD self, itkPointD3 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DD_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionISS3DD self, itkPointD3 point, itkIndex3 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DD_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionISS3DD self, itkPointD3 point, itkContinuousIndexD3 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DD_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionISS3DD self, itkContinuousIndexD3 cindex, itkIndex3 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionISS3DD self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionISS3DD_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionISS3DD self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionISS3DD_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionISS3DD self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionISS3DD_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionISS3DD self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionISS3DD_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionISS3DD

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionISS3DD"""
        return _itkImageFunctionBasePython.itkImageFunctionISS3DD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionISS3DD

        Create a new object of the class itkImageFunctionISS3DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionISS3DD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionISS3DD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionISS3DD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionISS3DD.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS3DD_SetInputImage, None, itkImageFunctionISS3DD)
itkImageFunctionISS3DD.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS3DD_GetInputImage, None, itkImageFunctionISS3DD)
itkImageFunctionISS3DD.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS3DD_EvaluateAtIndex, None, itkImageFunctionISS3DD)
itkImageFunctionISS3DD.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS3DD_EvaluateAtContinuousIndex, None, itkImageFunctionISS3DD)
itkImageFunctionISS3DD.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS3DD_IsInsideBuffer, None, itkImageFunctionISS3DD)
itkImageFunctionISS3DD.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS3DD_ConvertPointToNearestIndex, None, itkImageFunctionISS3DD)
itkImageFunctionISS3DD.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS3DD_ConvertPointToContinuousIndex, None, itkImageFunctionISS3DD)
itkImageFunctionISS3DD.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS3DD_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionISS3DD)
itkImageFunctionISS3DD.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS3DD_GetStartIndex, None, itkImageFunctionISS3DD)
itkImageFunctionISS3DD.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS3DD_GetEndIndex, None, itkImageFunctionISS3DD)
itkImageFunctionISS3DD.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS3DD_GetStartContinuousIndex, None, itkImageFunctionISS3DD)
itkImageFunctionISS3DD.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS3DD_GetEndContinuousIndex, None, itkImageFunctionISS3DD)
itkImageFunctionISS3DD_swigregister = _itkImageFunctionBasePython.itkImageFunctionISS3DD_swigregister
itkImageFunctionISS3DD_swigregister(itkImageFunctionISS3DD)

def itkImageFunctionISS3DD_cast(obj):
    """itkImageFunctionISS3DD_cast(itkLightObject obj) -> itkImageFunctionISS3DD"""
    return _itkImageFunctionBasePython.itkImageFunctionISS3DD_cast(obj)

class itkImageFunctionISS3DF(itkFunctionBasePython.itkFunctionBasePF3D):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionISS3DF self, itkImageSS3 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DF_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionISS3DF self) -> itkImageSS3

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DF_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionISS3DF self, itkIndex3 index) -> double

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DF_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionISS3DF self, itkContinuousIndexF3 index) -> double

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DF_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionISS3DF self, itkIndex3 index) -> bool
        IsInsideBuffer(itkImageFunctionISS3DF self, itkContinuousIndexF3 index) -> bool
        IsInsideBuffer(itkImageFunctionISS3DF self, itkPointF3 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DF_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionISS3DF self, itkPointF3 point, itkIndex3 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DF_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionISS3DF self, itkPointF3 point, itkContinuousIndexF3 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DF_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionISS3DF self, itkContinuousIndexF3 cindex, itkIndex3 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DF_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionISS3DF self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionISS3DF_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionISS3DF self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionISS3DF_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionISS3DF self) -> itkContinuousIndexF3"""
        return _itkImageFunctionBasePython.itkImageFunctionISS3DF_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionISS3DF self) -> itkContinuousIndexF3"""
        return _itkImageFunctionBasePython.itkImageFunctionISS3DF_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionISS3DF

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionISS3DF"""
        return _itkImageFunctionBasePython.itkImageFunctionISS3DF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionISS3DF

        Create a new object of the class itkImageFunctionISS3DF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionISS3DF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionISS3DF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionISS3DF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionISS3DF.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS3DF_SetInputImage, None, itkImageFunctionISS3DF)
itkImageFunctionISS3DF.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS3DF_GetInputImage, None, itkImageFunctionISS3DF)
itkImageFunctionISS3DF.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS3DF_EvaluateAtIndex, None, itkImageFunctionISS3DF)
itkImageFunctionISS3DF.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS3DF_EvaluateAtContinuousIndex, None, itkImageFunctionISS3DF)
itkImageFunctionISS3DF.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS3DF_IsInsideBuffer, None, itkImageFunctionISS3DF)
itkImageFunctionISS3DF.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS3DF_ConvertPointToNearestIndex, None, itkImageFunctionISS3DF)
itkImageFunctionISS3DF.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS3DF_ConvertPointToContinuousIndex, None, itkImageFunctionISS3DF)
itkImageFunctionISS3DF.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS3DF_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionISS3DF)
itkImageFunctionISS3DF.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS3DF_GetStartIndex, None, itkImageFunctionISS3DF)
itkImageFunctionISS3DF.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS3DF_GetEndIndex, None, itkImageFunctionISS3DF)
itkImageFunctionISS3DF.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS3DF_GetStartContinuousIndex, None, itkImageFunctionISS3DF)
itkImageFunctionISS3DF.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionISS3DF_GetEndContinuousIndex, None, itkImageFunctionISS3DF)
itkImageFunctionISS3DF_swigregister = _itkImageFunctionBasePython.itkImageFunctionISS3DF_swigregister
itkImageFunctionISS3DF_swigregister(itkImageFunctionISS3DF)

def itkImageFunctionISS3DF_cast(obj):
    """itkImageFunctionISS3DF_cast(itkLightObject obj) -> itkImageFunctionISS3DF"""
    return _itkImageFunctionBasePython.itkImageFunctionISS3DF_cast(obj)

class itkImageFunctionIUC2DD(itkFunctionBasePython.itkFunctionBasePD2D):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionIUC2DD self, itkImageUC2 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DD_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionIUC2DD self) -> itkImageUC2

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DD_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionIUC2DD self, itkIndex2 index) -> double

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DD_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionIUC2DD self, itkContinuousIndexD2 index) -> double

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DD_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionIUC2DD self, itkIndex2 index) -> bool
        IsInsideBuffer(itkImageFunctionIUC2DD self, itkContinuousIndexD2 index) -> bool
        IsInsideBuffer(itkImageFunctionIUC2DD self, itkPointD2 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DD_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionIUC2DD self, itkPointD2 point, itkIndex2 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DD_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionIUC2DD self, itkPointD2 point, itkContinuousIndexD2 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DD_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionIUC2DD self, itkContinuousIndexD2 cindex, itkIndex2 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionIUC2DD self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DD_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionIUC2DD self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DD_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionIUC2DD self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DD_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionIUC2DD self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DD_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIUC2DD

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionIUC2DD"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIUC2DD

        Create a new object of the class itkImageFunctionIUC2DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIUC2DD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIUC2DD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIUC2DD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIUC2DD.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC2DD_SetInputImage, None, itkImageFunctionIUC2DD)
itkImageFunctionIUC2DD.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC2DD_GetInputImage, None, itkImageFunctionIUC2DD)
itkImageFunctionIUC2DD.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC2DD_EvaluateAtIndex, None, itkImageFunctionIUC2DD)
itkImageFunctionIUC2DD.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC2DD_EvaluateAtContinuousIndex, None, itkImageFunctionIUC2DD)
itkImageFunctionIUC2DD.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC2DD_IsInsideBuffer, None, itkImageFunctionIUC2DD)
itkImageFunctionIUC2DD.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC2DD_ConvertPointToNearestIndex, None, itkImageFunctionIUC2DD)
itkImageFunctionIUC2DD.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC2DD_ConvertPointToContinuousIndex, None, itkImageFunctionIUC2DD)
itkImageFunctionIUC2DD.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC2DD_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIUC2DD)
itkImageFunctionIUC2DD.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC2DD_GetStartIndex, None, itkImageFunctionIUC2DD)
itkImageFunctionIUC2DD.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC2DD_GetEndIndex, None, itkImageFunctionIUC2DD)
itkImageFunctionIUC2DD.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC2DD_GetStartContinuousIndex, None, itkImageFunctionIUC2DD)
itkImageFunctionIUC2DD.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC2DD_GetEndContinuousIndex, None, itkImageFunctionIUC2DD)
itkImageFunctionIUC2DD_swigregister = _itkImageFunctionBasePython.itkImageFunctionIUC2DD_swigregister
itkImageFunctionIUC2DD_swigregister(itkImageFunctionIUC2DD)

def itkImageFunctionIUC2DD_cast(obj):
    """itkImageFunctionIUC2DD_cast(itkLightObject obj) -> itkImageFunctionIUC2DD"""
    return _itkImageFunctionBasePython.itkImageFunctionIUC2DD_cast(obj)

class itkImageFunctionIUC2DF(itkFunctionBasePython.itkFunctionBasePF2D):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionIUC2DF self, itkImageUC2 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DF_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionIUC2DF self) -> itkImageUC2

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DF_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionIUC2DF self, itkIndex2 index) -> double

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DF_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionIUC2DF self, itkContinuousIndexF2 index) -> double

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DF_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionIUC2DF self, itkIndex2 index) -> bool
        IsInsideBuffer(itkImageFunctionIUC2DF self, itkContinuousIndexF2 index) -> bool
        IsInsideBuffer(itkImageFunctionIUC2DF self, itkPointF2 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DF_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionIUC2DF self, itkPointF2 point, itkIndex2 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DF_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionIUC2DF self, itkPointF2 point, itkContinuousIndexF2 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DF_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionIUC2DF self, itkContinuousIndexF2 cindex, itkIndex2 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DF_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionIUC2DF self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DF_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionIUC2DF self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DF_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionIUC2DF self) -> itkContinuousIndexF2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DF_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionIUC2DF self) -> itkContinuousIndexF2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DF_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIUC2DF

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionIUC2DF"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIUC2DF

        Create a new object of the class itkImageFunctionIUC2DF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIUC2DF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIUC2DF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIUC2DF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIUC2DF.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC2DF_SetInputImage, None, itkImageFunctionIUC2DF)
itkImageFunctionIUC2DF.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC2DF_GetInputImage, None, itkImageFunctionIUC2DF)
itkImageFunctionIUC2DF.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC2DF_EvaluateAtIndex, None, itkImageFunctionIUC2DF)
itkImageFunctionIUC2DF.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC2DF_EvaluateAtContinuousIndex, None, itkImageFunctionIUC2DF)
itkImageFunctionIUC2DF.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC2DF_IsInsideBuffer, None, itkImageFunctionIUC2DF)
itkImageFunctionIUC2DF.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC2DF_ConvertPointToNearestIndex, None, itkImageFunctionIUC2DF)
itkImageFunctionIUC2DF.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC2DF_ConvertPointToContinuousIndex, None, itkImageFunctionIUC2DF)
itkImageFunctionIUC2DF.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC2DF_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIUC2DF)
itkImageFunctionIUC2DF.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC2DF_GetStartIndex, None, itkImageFunctionIUC2DF)
itkImageFunctionIUC2DF.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC2DF_GetEndIndex, None, itkImageFunctionIUC2DF)
itkImageFunctionIUC2DF.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC2DF_GetStartContinuousIndex, None, itkImageFunctionIUC2DF)
itkImageFunctionIUC2DF.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC2DF_GetEndContinuousIndex, None, itkImageFunctionIUC2DF)
itkImageFunctionIUC2DF_swigregister = _itkImageFunctionBasePython.itkImageFunctionIUC2DF_swigregister
itkImageFunctionIUC2DF_swigregister(itkImageFunctionIUC2DF)

def itkImageFunctionIUC2DF_cast(obj):
    """itkImageFunctionIUC2DF_cast(itkLightObject obj) -> itkImageFunctionIUC2DF"""
    return _itkImageFunctionBasePython.itkImageFunctionIUC2DF_cast(obj)

class itkImageFunctionIUC3DD(itkFunctionBasePython.itkFunctionBasePD3D):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionIUC3DD self, itkImageUC3 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DD_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionIUC3DD self) -> itkImageUC3

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DD_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionIUC3DD self, itkIndex3 index) -> double

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DD_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionIUC3DD self, itkContinuousIndexD3 index) -> double

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DD_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionIUC3DD self, itkIndex3 index) -> bool
        IsInsideBuffer(itkImageFunctionIUC3DD self, itkContinuousIndexD3 index) -> bool
        IsInsideBuffer(itkImageFunctionIUC3DD self, itkPointD3 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DD_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionIUC3DD self, itkPointD3 point, itkIndex3 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DD_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionIUC3DD self, itkPointD3 point, itkContinuousIndexD3 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DD_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionIUC3DD self, itkContinuousIndexD3 cindex, itkIndex3 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionIUC3DD self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DD_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionIUC3DD self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DD_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionIUC3DD self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DD_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionIUC3DD self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DD_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIUC3DD

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionIUC3DD"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIUC3DD

        Create a new object of the class itkImageFunctionIUC3DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIUC3DD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIUC3DD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIUC3DD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIUC3DD.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC3DD_SetInputImage, None, itkImageFunctionIUC3DD)
itkImageFunctionIUC3DD.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC3DD_GetInputImage, None, itkImageFunctionIUC3DD)
itkImageFunctionIUC3DD.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC3DD_EvaluateAtIndex, None, itkImageFunctionIUC3DD)
itkImageFunctionIUC3DD.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC3DD_EvaluateAtContinuousIndex, None, itkImageFunctionIUC3DD)
itkImageFunctionIUC3DD.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC3DD_IsInsideBuffer, None, itkImageFunctionIUC3DD)
itkImageFunctionIUC3DD.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC3DD_ConvertPointToNearestIndex, None, itkImageFunctionIUC3DD)
itkImageFunctionIUC3DD.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC3DD_ConvertPointToContinuousIndex, None, itkImageFunctionIUC3DD)
itkImageFunctionIUC3DD.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC3DD_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIUC3DD)
itkImageFunctionIUC3DD.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC3DD_GetStartIndex, None, itkImageFunctionIUC3DD)
itkImageFunctionIUC3DD.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC3DD_GetEndIndex, None, itkImageFunctionIUC3DD)
itkImageFunctionIUC3DD.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC3DD_GetStartContinuousIndex, None, itkImageFunctionIUC3DD)
itkImageFunctionIUC3DD.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC3DD_GetEndContinuousIndex, None, itkImageFunctionIUC3DD)
itkImageFunctionIUC3DD_swigregister = _itkImageFunctionBasePython.itkImageFunctionIUC3DD_swigregister
itkImageFunctionIUC3DD_swigregister(itkImageFunctionIUC3DD)

def itkImageFunctionIUC3DD_cast(obj):
    """itkImageFunctionIUC3DD_cast(itkLightObject obj) -> itkImageFunctionIUC3DD"""
    return _itkImageFunctionBasePython.itkImageFunctionIUC3DD_cast(obj)

class itkImageFunctionIUC3DF(itkFunctionBasePython.itkFunctionBasePF3D):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionIUC3DF self, itkImageUC3 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DF_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionIUC3DF self) -> itkImageUC3

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DF_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionIUC3DF self, itkIndex3 index) -> double

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DF_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionIUC3DF self, itkContinuousIndexF3 index) -> double

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DF_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionIUC3DF self, itkIndex3 index) -> bool
        IsInsideBuffer(itkImageFunctionIUC3DF self, itkContinuousIndexF3 index) -> bool
        IsInsideBuffer(itkImageFunctionIUC3DF self, itkPointF3 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DF_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionIUC3DF self, itkPointF3 point, itkIndex3 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DF_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionIUC3DF self, itkPointF3 point, itkContinuousIndexF3 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DF_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionIUC3DF self, itkContinuousIndexF3 cindex, itkIndex3 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DF_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionIUC3DF self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DF_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionIUC3DF self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DF_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionIUC3DF self) -> itkContinuousIndexF3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DF_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionIUC3DF self) -> itkContinuousIndexF3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DF_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIUC3DF

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionIUC3DF"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIUC3DF

        Create a new object of the class itkImageFunctionIUC3DF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIUC3DF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIUC3DF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIUC3DF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIUC3DF.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC3DF_SetInputImage, None, itkImageFunctionIUC3DF)
itkImageFunctionIUC3DF.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC3DF_GetInputImage, None, itkImageFunctionIUC3DF)
itkImageFunctionIUC3DF.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC3DF_EvaluateAtIndex, None, itkImageFunctionIUC3DF)
itkImageFunctionIUC3DF.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC3DF_EvaluateAtContinuousIndex, None, itkImageFunctionIUC3DF)
itkImageFunctionIUC3DF.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC3DF_IsInsideBuffer, None, itkImageFunctionIUC3DF)
itkImageFunctionIUC3DF.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC3DF_ConvertPointToNearestIndex, None, itkImageFunctionIUC3DF)
itkImageFunctionIUC3DF.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC3DF_ConvertPointToContinuousIndex, None, itkImageFunctionIUC3DF)
itkImageFunctionIUC3DF.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC3DF_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIUC3DF)
itkImageFunctionIUC3DF.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC3DF_GetStartIndex, None, itkImageFunctionIUC3DF)
itkImageFunctionIUC3DF.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC3DF_GetEndIndex, None, itkImageFunctionIUC3DF)
itkImageFunctionIUC3DF.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC3DF_GetStartContinuousIndex, None, itkImageFunctionIUC3DF)
itkImageFunctionIUC3DF.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUC3DF_GetEndContinuousIndex, None, itkImageFunctionIUC3DF)
itkImageFunctionIUC3DF_swigregister = _itkImageFunctionBasePython.itkImageFunctionIUC3DF_swigregister
itkImageFunctionIUC3DF_swigregister(itkImageFunctionIUC3DF)

def itkImageFunctionIUC3DF_cast(obj):
    """itkImageFunctionIUC3DF_cast(itkLightObject obj) -> itkImageFunctionIUC3DF"""
    return _itkImageFunctionBasePython.itkImageFunctionIUC3DF_cast(obj)

class itkImageFunctionIUS2DD(itkFunctionBasePython.itkFunctionBasePD2D):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionIUS2DD self, itkImageUS2 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DD_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionIUS2DD self) -> itkImageUS2

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DD_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionIUS2DD self, itkIndex2 index) -> double

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DD_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionIUS2DD self, itkContinuousIndexD2 index) -> double

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DD_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionIUS2DD self, itkIndex2 index) -> bool
        IsInsideBuffer(itkImageFunctionIUS2DD self, itkContinuousIndexD2 index) -> bool
        IsInsideBuffer(itkImageFunctionIUS2DD self, itkPointD2 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DD_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionIUS2DD self, itkPointD2 point, itkIndex2 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DD_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionIUS2DD self, itkPointD2 point, itkContinuousIndexD2 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DD_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionIUS2DD self, itkContinuousIndexD2 cindex, itkIndex2 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionIUS2DD self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DD_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionIUS2DD self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DD_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionIUS2DD self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DD_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionIUS2DD self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DD_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIUS2DD

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionIUS2DD"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIUS2DD

        Create a new object of the class itkImageFunctionIUS2DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIUS2DD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIUS2DD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIUS2DD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIUS2DD.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS2DD_SetInputImage, None, itkImageFunctionIUS2DD)
itkImageFunctionIUS2DD.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS2DD_GetInputImage, None, itkImageFunctionIUS2DD)
itkImageFunctionIUS2DD.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS2DD_EvaluateAtIndex, None, itkImageFunctionIUS2DD)
itkImageFunctionIUS2DD.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS2DD_EvaluateAtContinuousIndex, None, itkImageFunctionIUS2DD)
itkImageFunctionIUS2DD.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS2DD_IsInsideBuffer, None, itkImageFunctionIUS2DD)
itkImageFunctionIUS2DD.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS2DD_ConvertPointToNearestIndex, None, itkImageFunctionIUS2DD)
itkImageFunctionIUS2DD.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS2DD_ConvertPointToContinuousIndex, None, itkImageFunctionIUS2DD)
itkImageFunctionIUS2DD.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS2DD_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIUS2DD)
itkImageFunctionIUS2DD.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS2DD_GetStartIndex, None, itkImageFunctionIUS2DD)
itkImageFunctionIUS2DD.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS2DD_GetEndIndex, None, itkImageFunctionIUS2DD)
itkImageFunctionIUS2DD.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS2DD_GetStartContinuousIndex, None, itkImageFunctionIUS2DD)
itkImageFunctionIUS2DD.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS2DD_GetEndContinuousIndex, None, itkImageFunctionIUS2DD)
itkImageFunctionIUS2DD_swigregister = _itkImageFunctionBasePython.itkImageFunctionIUS2DD_swigregister
itkImageFunctionIUS2DD_swigregister(itkImageFunctionIUS2DD)

def itkImageFunctionIUS2DD_cast(obj):
    """itkImageFunctionIUS2DD_cast(itkLightObject obj) -> itkImageFunctionIUS2DD"""
    return _itkImageFunctionBasePython.itkImageFunctionIUS2DD_cast(obj)

class itkImageFunctionIUS2DF(itkFunctionBasePython.itkFunctionBasePF2D):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionIUS2DF self, itkImageUS2 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DF_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionIUS2DF self) -> itkImageUS2

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DF_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionIUS2DF self, itkIndex2 index) -> double

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DF_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionIUS2DF self, itkContinuousIndexF2 index) -> double

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DF_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionIUS2DF self, itkIndex2 index) -> bool
        IsInsideBuffer(itkImageFunctionIUS2DF self, itkContinuousIndexF2 index) -> bool
        IsInsideBuffer(itkImageFunctionIUS2DF self, itkPointF2 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DF_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionIUS2DF self, itkPointF2 point, itkIndex2 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DF_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionIUS2DF self, itkPointF2 point, itkContinuousIndexF2 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DF_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionIUS2DF self, itkContinuousIndexF2 cindex, itkIndex2 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DF_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionIUS2DF self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DF_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionIUS2DF self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DF_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionIUS2DF self) -> itkContinuousIndexF2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DF_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionIUS2DF self) -> itkContinuousIndexF2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DF_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIUS2DF

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionIUS2DF"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIUS2DF

        Create a new object of the class itkImageFunctionIUS2DF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIUS2DF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIUS2DF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIUS2DF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIUS2DF.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS2DF_SetInputImage, None, itkImageFunctionIUS2DF)
itkImageFunctionIUS2DF.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS2DF_GetInputImage, None, itkImageFunctionIUS2DF)
itkImageFunctionIUS2DF.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS2DF_EvaluateAtIndex, None, itkImageFunctionIUS2DF)
itkImageFunctionIUS2DF.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS2DF_EvaluateAtContinuousIndex, None, itkImageFunctionIUS2DF)
itkImageFunctionIUS2DF.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS2DF_IsInsideBuffer, None, itkImageFunctionIUS2DF)
itkImageFunctionIUS2DF.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS2DF_ConvertPointToNearestIndex, None, itkImageFunctionIUS2DF)
itkImageFunctionIUS2DF.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS2DF_ConvertPointToContinuousIndex, None, itkImageFunctionIUS2DF)
itkImageFunctionIUS2DF.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS2DF_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIUS2DF)
itkImageFunctionIUS2DF.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS2DF_GetStartIndex, None, itkImageFunctionIUS2DF)
itkImageFunctionIUS2DF.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS2DF_GetEndIndex, None, itkImageFunctionIUS2DF)
itkImageFunctionIUS2DF.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS2DF_GetStartContinuousIndex, None, itkImageFunctionIUS2DF)
itkImageFunctionIUS2DF.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS2DF_GetEndContinuousIndex, None, itkImageFunctionIUS2DF)
itkImageFunctionIUS2DF_swigregister = _itkImageFunctionBasePython.itkImageFunctionIUS2DF_swigregister
itkImageFunctionIUS2DF_swigregister(itkImageFunctionIUS2DF)

def itkImageFunctionIUS2DF_cast(obj):
    """itkImageFunctionIUS2DF_cast(itkLightObject obj) -> itkImageFunctionIUS2DF"""
    return _itkImageFunctionBasePython.itkImageFunctionIUS2DF_cast(obj)

class itkImageFunctionIUS3DD(itkFunctionBasePython.itkFunctionBasePD3D):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionIUS3DD self, itkImageUS3 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DD_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionIUS3DD self) -> itkImageUS3

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DD_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionIUS3DD self, itkIndex3 index) -> double

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DD_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionIUS3DD self, itkContinuousIndexD3 index) -> double

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DD_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionIUS3DD self, itkIndex3 index) -> bool
        IsInsideBuffer(itkImageFunctionIUS3DD self, itkContinuousIndexD3 index) -> bool
        IsInsideBuffer(itkImageFunctionIUS3DD self, itkPointD3 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DD_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionIUS3DD self, itkPointD3 point, itkIndex3 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DD_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionIUS3DD self, itkPointD3 point, itkContinuousIndexD3 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DD_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionIUS3DD self, itkContinuousIndexD3 cindex, itkIndex3 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionIUS3DD self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DD_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionIUS3DD self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DD_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionIUS3DD self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DD_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionIUS3DD self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DD_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIUS3DD

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionIUS3DD"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIUS3DD

        Create a new object of the class itkImageFunctionIUS3DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIUS3DD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIUS3DD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIUS3DD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIUS3DD.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS3DD_SetInputImage, None, itkImageFunctionIUS3DD)
itkImageFunctionIUS3DD.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS3DD_GetInputImage, None, itkImageFunctionIUS3DD)
itkImageFunctionIUS3DD.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS3DD_EvaluateAtIndex, None, itkImageFunctionIUS3DD)
itkImageFunctionIUS3DD.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS3DD_EvaluateAtContinuousIndex, None, itkImageFunctionIUS3DD)
itkImageFunctionIUS3DD.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS3DD_IsInsideBuffer, None, itkImageFunctionIUS3DD)
itkImageFunctionIUS3DD.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS3DD_ConvertPointToNearestIndex, None, itkImageFunctionIUS3DD)
itkImageFunctionIUS3DD.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS3DD_ConvertPointToContinuousIndex, None, itkImageFunctionIUS3DD)
itkImageFunctionIUS3DD.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS3DD_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIUS3DD)
itkImageFunctionIUS3DD.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS3DD_GetStartIndex, None, itkImageFunctionIUS3DD)
itkImageFunctionIUS3DD.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS3DD_GetEndIndex, None, itkImageFunctionIUS3DD)
itkImageFunctionIUS3DD.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS3DD_GetStartContinuousIndex, None, itkImageFunctionIUS3DD)
itkImageFunctionIUS3DD.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS3DD_GetEndContinuousIndex, None, itkImageFunctionIUS3DD)
itkImageFunctionIUS3DD_swigregister = _itkImageFunctionBasePython.itkImageFunctionIUS3DD_swigregister
itkImageFunctionIUS3DD_swigregister(itkImageFunctionIUS3DD)

def itkImageFunctionIUS3DD_cast(obj):
    """itkImageFunctionIUS3DD_cast(itkLightObject obj) -> itkImageFunctionIUS3DD"""
    return _itkImageFunctionBasePython.itkImageFunctionIUS3DD_cast(obj)

class itkImageFunctionIUS3DF(itkFunctionBasePython.itkFunctionBasePF3D):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionIUS3DF self, itkImageUS3 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DF_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionIUS3DF self) -> itkImageUS3

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DF_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionIUS3DF self, itkIndex3 index) -> double

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DF_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionIUS3DF self, itkContinuousIndexF3 index) -> double

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DF_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionIUS3DF self, itkIndex3 index) -> bool
        IsInsideBuffer(itkImageFunctionIUS3DF self, itkContinuousIndexF3 index) -> bool
        IsInsideBuffer(itkImageFunctionIUS3DF self, itkPointF3 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DF_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionIUS3DF self, itkPointF3 point, itkIndex3 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DF_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionIUS3DF self, itkPointF3 point, itkContinuousIndexF3 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DF_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionIUS3DF self, itkContinuousIndexF3 cindex, itkIndex3 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DF_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionIUS3DF self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DF_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionIUS3DF self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DF_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionIUS3DF self) -> itkContinuousIndexF3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DF_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionIUS3DF self) -> itkContinuousIndexF3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DF_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIUS3DF

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionIUS3DF"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIUS3DF

        Create a new object of the class itkImageFunctionIUS3DF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIUS3DF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIUS3DF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIUS3DF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIUS3DF.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS3DF_SetInputImage, None, itkImageFunctionIUS3DF)
itkImageFunctionIUS3DF.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS3DF_GetInputImage, None, itkImageFunctionIUS3DF)
itkImageFunctionIUS3DF.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS3DF_EvaluateAtIndex, None, itkImageFunctionIUS3DF)
itkImageFunctionIUS3DF.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS3DF_EvaluateAtContinuousIndex, None, itkImageFunctionIUS3DF)
itkImageFunctionIUS3DF.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS3DF_IsInsideBuffer, None, itkImageFunctionIUS3DF)
itkImageFunctionIUS3DF.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS3DF_ConvertPointToNearestIndex, None, itkImageFunctionIUS3DF)
itkImageFunctionIUS3DF.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS3DF_ConvertPointToContinuousIndex, None, itkImageFunctionIUS3DF)
itkImageFunctionIUS3DF.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS3DF_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIUS3DF)
itkImageFunctionIUS3DF.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS3DF_GetStartIndex, None, itkImageFunctionIUS3DF)
itkImageFunctionIUS3DF.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS3DF_GetEndIndex, None, itkImageFunctionIUS3DF)
itkImageFunctionIUS3DF.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS3DF_GetStartContinuousIndex, None, itkImageFunctionIUS3DF)
itkImageFunctionIUS3DF.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIUS3DF_GetEndContinuousIndex, None, itkImageFunctionIUS3DF)
itkImageFunctionIUS3DF_swigregister = _itkImageFunctionBasePython.itkImageFunctionIUS3DF_swigregister
itkImageFunctionIUS3DF_swigregister(itkImageFunctionIUS3DF)

def itkImageFunctionIUS3DF_cast(obj):
    """itkImageFunctionIUS3DF_cast(itkLightObject obj) -> itkImageFunctionIUS3DF"""
    return _itkImageFunctionBasePython.itkImageFunctionIUS3DF_cast(obj)

class itkImageFunctionIVF22CVD2D(itkFunctionBasePython.itkFunctionBasePD2CVD2):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionIVF22CVD2D self, itkImageVF22 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionIVF22CVD2D self) -> itkImageVF22

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionIVF22CVD2D self, itkIndex2 index) -> itkCovariantVectorD2

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionIVF22CVD2D self, itkContinuousIndexD2 index) -> itkCovariantVectorD2

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionIVF22CVD2D self, itkIndex2 index) -> bool
        IsInsideBuffer(itkImageFunctionIVF22CVD2D self, itkContinuousIndexD2 index) -> bool
        IsInsideBuffer(itkImageFunctionIVF22CVD2D self, itkPointD2 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionIVF22CVD2D self, itkPointD2 point, itkIndex2 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionIVF22CVD2D self, itkPointD2 point, itkContinuousIndexD2 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionIVF22CVD2D self, itkContinuousIndexD2 cindex, itkIndex2 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionIVF22CVD2D self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionIVF22CVD2D self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionIVF22CVD2D self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionIVF22CVD2D self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIVF22CVD2D

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionIVF22CVD2D"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIVF22CVD2D

        Create a new object of the class itkImageFunctionIVF22CVD2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIVF22CVD2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIVF22CVD2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIVF22CVD2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIVF22CVD2D.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_SetInputImage, None, itkImageFunctionIVF22CVD2D)
itkImageFunctionIVF22CVD2D.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_GetInputImage, None, itkImageFunctionIVF22CVD2D)
itkImageFunctionIVF22CVD2D.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_EvaluateAtIndex, None, itkImageFunctionIVF22CVD2D)
itkImageFunctionIVF22CVD2D.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_EvaluateAtContinuousIndex, None, itkImageFunctionIVF22CVD2D)
itkImageFunctionIVF22CVD2D.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_IsInsideBuffer, None, itkImageFunctionIVF22CVD2D)
itkImageFunctionIVF22CVD2D.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_ConvertPointToNearestIndex, None, itkImageFunctionIVF22CVD2D)
itkImageFunctionIVF22CVD2D.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_ConvertPointToContinuousIndex, None, itkImageFunctionIVF22CVD2D)
itkImageFunctionIVF22CVD2D.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIVF22CVD2D)
itkImageFunctionIVF22CVD2D.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_GetStartIndex, None, itkImageFunctionIVF22CVD2D)
itkImageFunctionIVF22CVD2D.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_GetEndIndex, None, itkImageFunctionIVF22CVD2D)
itkImageFunctionIVF22CVD2D.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_GetStartContinuousIndex, None, itkImageFunctionIVF22CVD2D)
itkImageFunctionIVF22CVD2D.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_GetEndContinuousIndex, None, itkImageFunctionIVF22CVD2D)
itkImageFunctionIVF22CVD2D_swigregister = _itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_swigregister
itkImageFunctionIVF22CVD2D_swigregister(itkImageFunctionIVF22CVD2D)

def itkImageFunctionIVF22CVD2D_cast(obj):
    """itkImageFunctionIVF22CVD2D_cast(itkLightObject obj) -> itkImageFunctionIVF22CVD2D"""
    return _itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_cast(obj)

class itkImageFunctionIVF22DD(itkFunctionBasePython.itkFunctionBasePD2D):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionIVF22DD self, itkImageVF22 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22DD_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionIVF22DD self) -> itkImageVF22

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22DD_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionIVF22DD self, itkIndex2 index) -> double

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22DD_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionIVF22DD self, itkContinuousIndexD2 index) -> double

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22DD_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionIVF22DD self, itkIndex2 index) -> bool
        IsInsideBuffer(itkImageFunctionIVF22DD self, itkContinuousIndexD2 index) -> bool
        IsInsideBuffer(itkImageFunctionIVF22DD self, itkPointD2 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22DD_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionIVF22DD self, itkPointD2 point, itkIndex2 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22DD_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionIVF22DD self, itkPointD2 point, itkContinuousIndexD2 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22DD_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionIVF22DD self, itkContinuousIndexD2 cindex, itkIndex2 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionIVF22DD self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22DD_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionIVF22DD self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22DD_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionIVF22DD self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22DD_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionIVF22DD self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22DD_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIVF22DD

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionIVF22DD"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22DD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIVF22DD

        Create a new object of the class itkImageFunctionIVF22DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIVF22DD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIVF22DD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIVF22DD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIVF22DD.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22DD_SetInputImage, None, itkImageFunctionIVF22DD)
itkImageFunctionIVF22DD.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22DD_GetInputImage, None, itkImageFunctionIVF22DD)
itkImageFunctionIVF22DD.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22DD_EvaluateAtIndex, None, itkImageFunctionIVF22DD)
itkImageFunctionIVF22DD.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22DD_EvaluateAtContinuousIndex, None, itkImageFunctionIVF22DD)
itkImageFunctionIVF22DD.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22DD_IsInsideBuffer, None, itkImageFunctionIVF22DD)
itkImageFunctionIVF22DD.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22DD_ConvertPointToNearestIndex, None, itkImageFunctionIVF22DD)
itkImageFunctionIVF22DD.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22DD_ConvertPointToContinuousIndex, None, itkImageFunctionIVF22DD)
itkImageFunctionIVF22DD.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22DD_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIVF22DD)
itkImageFunctionIVF22DD.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22DD_GetStartIndex, None, itkImageFunctionIVF22DD)
itkImageFunctionIVF22DD.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22DD_GetEndIndex, None, itkImageFunctionIVF22DD)
itkImageFunctionIVF22DD.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22DD_GetStartContinuousIndex, None, itkImageFunctionIVF22DD)
itkImageFunctionIVF22DD.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22DD_GetEndContinuousIndex, None, itkImageFunctionIVF22DD)
itkImageFunctionIVF22DD_swigregister = _itkImageFunctionBasePython.itkImageFunctionIVF22DD_swigregister
itkImageFunctionIVF22DD_swigregister(itkImageFunctionIVF22DD)

def itkImageFunctionIVF22DD_cast(obj):
    """itkImageFunctionIVF22DD_cast(itkLightObject obj) -> itkImageFunctionIVF22DD"""
    return _itkImageFunctionBasePython.itkImageFunctionIVF22DD_cast(obj)

class itkImageFunctionIVF22VD2D(itkFunctionBasePython.itkFunctionBasePD2VD2):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionIVF22VD2D self, itkImageVF22 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionIVF22VD2D self) -> itkImageVF22

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionIVF22VD2D self, itkIndex2 index) -> itkVectorD2

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionIVF22VD2D self, itkContinuousIndexD2 index) -> itkVectorD2

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionIVF22VD2D self, itkIndex2 index) -> bool
        IsInsideBuffer(itkImageFunctionIVF22VD2D self, itkContinuousIndexD2 index) -> bool
        IsInsideBuffer(itkImageFunctionIVF22VD2D self, itkPointD2 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionIVF22VD2D self, itkPointD2 point, itkIndex2 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionIVF22VD2D self, itkPointD2 point, itkContinuousIndexD2 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionIVF22VD2D self, itkContinuousIndexD2 cindex, itkIndex2 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionIVF22VD2D self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionIVF22VD2D self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionIVF22VD2D self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionIVF22VD2D self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIVF22VD2D

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionIVF22VD2D"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIVF22VD2D

        Create a new object of the class itkImageFunctionIVF22VD2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIVF22VD2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIVF22VD2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIVF22VD2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIVF22VD2D.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_SetInputImage, None, itkImageFunctionIVF22VD2D)
itkImageFunctionIVF22VD2D.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_GetInputImage, None, itkImageFunctionIVF22VD2D)
itkImageFunctionIVF22VD2D.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_EvaluateAtIndex, None, itkImageFunctionIVF22VD2D)
itkImageFunctionIVF22VD2D.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_EvaluateAtContinuousIndex, None, itkImageFunctionIVF22VD2D)
itkImageFunctionIVF22VD2D.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_IsInsideBuffer, None, itkImageFunctionIVF22VD2D)
itkImageFunctionIVF22VD2D.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_ConvertPointToNearestIndex, None, itkImageFunctionIVF22VD2D)
itkImageFunctionIVF22VD2D.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_ConvertPointToContinuousIndex, None, itkImageFunctionIVF22VD2D)
itkImageFunctionIVF22VD2D.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIVF22VD2D)
itkImageFunctionIVF22VD2D.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_GetStartIndex, None, itkImageFunctionIVF22VD2D)
itkImageFunctionIVF22VD2D.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_GetEndIndex, None, itkImageFunctionIVF22VD2D)
itkImageFunctionIVF22VD2D.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_GetStartContinuousIndex, None, itkImageFunctionIVF22VD2D)
itkImageFunctionIVF22VD2D.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_GetEndContinuousIndex, None, itkImageFunctionIVF22VD2D)
itkImageFunctionIVF22VD2D_swigregister = _itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_swigregister
itkImageFunctionIVF22VD2D_swigregister(itkImageFunctionIVF22VD2D)

def itkImageFunctionIVF22VD2D_cast(obj):
    """itkImageFunctionIVF22VD2D_cast(itkLightObject obj) -> itkImageFunctionIVF22VD2D"""
    return _itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_cast(obj)

class itkImageFunctionIVF33CVD3D(itkFunctionBasePython.itkFunctionBasePD3CVD3):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionIVF33CVD3D self, itkImageVF33 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionIVF33CVD3D self) -> itkImageVF33

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionIVF33CVD3D self, itkIndex3 index) -> itkCovariantVectorD3

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionIVF33CVD3D self, itkContinuousIndexD3 index) -> itkCovariantVectorD3

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionIVF33CVD3D self, itkIndex3 index) -> bool
        IsInsideBuffer(itkImageFunctionIVF33CVD3D self, itkContinuousIndexD3 index) -> bool
        IsInsideBuffer(itkImageFunctionIVF33CVD3D self, itkPointD3 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionIVF33CVD3D self, itkPointD3 point, itkIndex3 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionIVF33CVD3D self, itkPointD3 point, itkContinuousIndexD3 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionIVF33CVD3D self, itkContinuousIndexD3 cindex, itkIndex3 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionIVF33CVD3D self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionIVF33CVD3D self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionIVF33CVD3D self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionIVF33CVD3D self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIVF33CVD3D

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionIVF33CVD3D"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIVF33CVD3D

        Create a new object of the class itkImageFunctionIVF33CVD3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIVF33CVD3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIVF33CVD3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIVF33CVD3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIVF33CVD3D.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_SetInputImage, None, itkImageFunctionIVF33CVD3D)
itkImageFunctionIVF33CVD3D.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_GetInputImage, None, itkImageFunctionIVF33CVD3D)
itkImageFunctionIVF33CVD3D.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_EvaluateAtIndex, None, itkImageFunctionIVF33CVD3D)
itkImageFunctionIVF33CVD3D.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_EvaluateAtContinuousIndex, None, itkImageFunctionIVF33CVD3D)
itkImageFunctionIVF33CVD3D.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_IsInsideBuffer, None, itkImageFunctionIVF33CVD3D)
itkImageFunctionIVF33CVD3D.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_ConvertPointToNearestIndex, None, itkImageFunctionIVF33CVD3D)
itkImageFunctionIVF33CVD3D.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_ConvertPointToContinuousIndex, None, itkImageFunctionIVF33CVD3D)
itkImageFunctionIVF33CVD3D.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIVF33CVD3D)
itkImageFunctionIVF33CVD3D.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_GetStartIndex, None, itkImageFunctionIVF33CVD3D)
itkImageFunctionIVF33CVD3D.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_GetEndIndex, None, itkImageFunctionIVF33CVD3D)
itkImageFunctionIVF33CVD3D.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_GetStartContinuousIndex, None, itkImageFunctionIVF33CVD3D)
itkImageFunctionIVF33CVD3D.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_GetEndContinuousIndex, None, itkImageFunctionIVF33CVD3D)
itkImageFunctionIVF33CVD3D_swigregister = _itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_swigregister
itkImageFunctionIVF33CVD3D_swigregister(itkImageFunctionIVF33CVD3D)

def itkImageFunctionIVF33CVD3D_cast(obj):
    """itkImageFunctionIVF33CVD3D_cast(itkLightObject obj) -> itkImageFunctionIVF33CVD3D"""
    return _itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_cast(obj)

class itkImageFunctionIVF33DD(itkFunctionBasePython.itkFunctionBasePD3D):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionIVF33DD self, itkImageVF33 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33DD_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionIVF33DD self) -> itkImageVF33

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33DD_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionIVF33DD self, itkIndex3 index) -> double

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33DD_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionIVF33DD self, itkContinuousIndexD3 index) -> double

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33DD_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionIVF33DD self, itkIndex3 index) -> bool
        IsInsideBuffer(itkImageFunctionIVF33DD self, itkContinuousIndexD3 index) -> bool
        IsInsideBuffer(itkImageFunctionIVF33DD self, itkPointD3 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33DD_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionIVF33DD self, itkPointD3 point, itkIndex3 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33DD_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionIVF33DD self, itkPointD3 point, itkContinuousIndexD3 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33DD_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionIVF33DD self, itkContinuousIndexD3 cindex, itkIndex3 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionIVF33DD self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33DD_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionIVF33DD self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33DD_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionIVF33DD self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33DD_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionIVF33DD self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33DD_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIVF33DD

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionIVF33DD"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33DD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIVF33DD

        Create a new object of the class itkImageFunctionIVF33DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIVF33DD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIVF33DD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIVF33DD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIVF33DD.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33DD_SetInputImage, None, itkImageFunctionIVF33DD)
itkImageFunctionIVF33DD.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33DD_GetInputImage, None, itkImageFunctionIVF33DD)
itkImageFunctionIVF33DD.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33DD_EvaluateAtIndex, None, itkImageFunctionIVF33DD)
itkImageFunctionIVF33DD.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33DD_EvaluateAtContinuousIndex, None, itkImageFunctionIVF33DD)
itkImageFunctionIVF33DD.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33DD_IsInsideBuffer, None, itkImageFunctionIVF33DD)
itkImageFunctionIVF33DD.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33DD_ConvertPointToNearestIndex, None, itkImageFunctionIVF33DD)
itkImageFunctionIVF33DD.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33DD_ConvertPointToContinuousIndex, None, itkImageFunctionIVF33DD)
itkImageFunctionIVF33DD.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33DD_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIVF33DD)
itkImageFunctionIVF33DD.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33DD_GetStartIndex, None, itkImageFunctionIVF33DD)
itkImageFunctionIVF33DD.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33DD_GetEndIndex, None, itkImageFunctionIVF33DD)
itkImageFunctionIVF33DD.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33DD_GetStartContinuousIndex, None, itkImageFunctionIVF33DD)
itkImageFunctionIVF33DD.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33DD_GetEndContinuousIndex, None, itkImageFunctionIVF33DD)
itkImageFunctionIVF33DD_swigregister = _itkImageFunctionBasePython.itkImageFunctionIVF33DD_swigregister
itkImageFunctionIVF33DD_swigregister(itkImageFunctionIVF33DD)

def itkImageFunctionIVF33DD_cast(obj):
    """itkImageFunctionIVF33DD_cast(itkLightObject obj) -> itkImageFunctionIVF33DD"""
    return _itkImageFunctionBasePython.itkImageFunctionIVF33DD_cast(obj)

class itkImageFunctionIVF33VD3D(itkFunctionBasePython.itkFunctionBasePD3VD3):
    """


    Evaluates a function of an image at specified position.

    ImageFunction is a baseclass for all objects that evaluates a function
    of an image at index, continuous index or point. This class is
    templated over the input image type, the type of the function output
    and the coordinate representation type (e.g. float or double).

    The input image is set via method SetInputImage(). Methods Evaluate,
    EvaluateAtIndex and EvaluateAtContinuousIndex respectively evaluates
    the function at an geometric point, image index and continuous image
    index.

    WARNING:  Image BufferedRegion information is cached during in
    SetInputImage( image ). If the image BufferedRegion has changed one
    must call SetInputImage( image ) again to update the cache to the
    current values.

    See:  Point

    See:  Index

    See:  ContinuousIndex

    C++ includes: itkImageFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        """
        SetInputImage(itkImageFunctionIVF33VD3D self, itkImageVF33 ptr)

        Set the input image.
        WARNING:  this method caches BufferedRegion information. If the
        BufferedRegion has changed, user must call SetInputImage again to
        update cached values. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_SetInputImage(self, ptr)


    def GetInputImage(self):
        """
        GetInputImage(itkImageFunctionIVF33VD3D self) -> itkImageVF33

        Get the input image.

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_GetInputImage(self)


    def EvaluateAtIndex(self, index):
        """
        EvaluateAtIndex(itkImageFunctionIVF33VD3D self, itkIndex3 index) -> itkVectorD3

        Evaluate the
        function at specified Index position. Subclasses must provide this
        method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_EvaluateAtIndex(self, index)


    def EvaluateAtContinuousIndex(self, index):
        """
        EvaluateAtContinuousIndex(itkImageFunctionIVF33VD3D self, itkContinuousIndexD3 index) -> itkVectorD3

        Evaluate
        the function at specified ContinuousIndex position. Subclasses must
        provide this method. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_EvaluateAtContinuousIndex(self, index)


    def IsInsideBuffer(self, *args):
        """
        IsInsideBuffer(itkImageFunctionIVF33VD3D self, itkIndex3 index) -> bool
        IsInsideBuffer(itkImageFunctionIVF33VD3D self, itkContinuousIndexD3 index) -> bool
        IsInsideBuffer(itkImageFunctionIVF33VD3D self, itkPointD3 point) -> bool

        Check if a point is
        inside the image buffer. WARNING:  For efficiency, no validity
        checking of the input image pointer is done. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_IsInsideBuffer(self, *args)


    def ConvertPointToNearestIndex(self, point, index):
        """
        ConvertPointToNearestIndex(itkImageFunctionIVF33VD3D self, itkPointD3 point, itkIndex3 index)

        Convert
        point to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_ConvertPointToNearestIndex(self, point, index)


    def ConvertPointToContinuousIndex(self, point, cindex):
        """
        ConvertPointToContinuousIndex(itkImageFunctionIVF33VD3D self, itkPointD3 point, itkContinuousIndexD3 cindex)

        Convert point to continuous index 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_ConvertPointToContinuousIndex(self, point, cindex)


    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        """
        ConvertContinuousIndexToNearestIndex(itkImageFunctionIVF33VD3D self, itkContinuousIndexD3 cindex, itkIndex3 index)

        Convert continuous index to nearest index. 
        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_ConvertContinuousIndexToNearestIndex(self, cindex, index)


    def GetStartIndex(self):
        """GetStartIndex(itkImageFunctionIVF33VD3D self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_GetStartIndex(self)


    def GetEndIndex(self):
        """GetEndIndex(itkImageFunctionIVF33VD3D self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_GetEndIndex(self)


    def GetStartContinuousIndex(self):
        """GetStartContinuousIndex(itkImageFunctionIVF33VD3D self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_GetStartContinuousIndex(self)


    def GetEndContinuousIndex(self):
        """GetEndContinuousIndex(itkImageFunctionIVF33VD3D self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_GetEndContinuousIndex(self)

    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIVF33VD3D

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFunctionIVF33VD3D"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFunctionIVF33VD3D

        Create a new object of the class itkImageFunctionIVF33VD3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFunctionIVF33VD3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFunctionIVF33VD3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFunctionIVF33VD3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFunctionIVF33VD3D.SetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_SetInputImage, None, itkImageFunctionIVF33VD3D)
itkImageFunctionIVF33VD3D.GetInputImage = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_GetInputImage, None, itkImageFunctionIVF33VD3D)
itkImageFunctionIVF33VD3D.EvaluateAtIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_EvaluateAtIndex, None, itkImageFunctionIVF33VD3D)
itkImageFunctionIVF33VD3D.EvaluateAtContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_EvaluateAtContinuousIndex, None, itkImageFunctionIVF33VD3D)
itkImageFunctionIVF33VD3D.IsInsideBuffer = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_IsInsideBuffer, None, itkImageFunctionIVF33VD3D)
itkImageFunctionIVF33VD3D.ConvertPointToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_ConvertPointToNearestIndex, None, itkImageFunctionIVF33VD3D)
itkImageFunctionIVF33VD3D.ConvertPointToContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_ConvertPointToContinuousIndex, None, itkImageFunctionIVF33VD3D)
itkImageFunctionIVF33VD3D.ConvertContinuousIndexToNearestIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_ConvertContinuousIndexToNearestIndex, None, itkImageFunctionIVF33VD3D)
itkImageFunctionIVF33VD3D.GetStartIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_GetStartIndex, None, itkImageFunctionIVF33VD3D)
itkImageFunctionIVF33VD3D.GetEndIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_GetEndIndex, None, itkImageFunctionIVF33VD3D)
itkImageFunctionIVF33VD3D.GetStartContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_GetStartContinuousIndex, None, itkImageFunctionIVF33VD3D)
itkImageFunctionIVF33VD3D.GetEndContinuousIndex = new_instancemethod(_itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_GetEndContinuousIndex, None, itkImageFunctionIVF33VD3D)
itkImageFunctionIVF33VD3D_swigregister = _itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_swigregister
itkImageFunctionIVF33VD3D_swigregister(itkImageFunctionIVF33VD3D)

def itkImageFunctionIVF33VD3D_cast(obj):
    """itkImageFunctionIVF33VD3D_cast(itkLightObject obj) -> itkImageFunctionIVF33VD3D"""
    return _itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_cast(obj)



