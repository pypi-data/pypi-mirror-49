# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ExperimentEntryDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, channels_last_values=None, storage_size=None, name=None, project_name=None, source_size=None, hostname=None, source_md5=None, trashed=None, state=None, description=None, tags=None, time_of_completion=None, commit_id=None, time_of_creation=None, project_id=None, organization_name=None, group_id=None, is_notebook=None, id=None, properties=None, short_id=None, time_of_entered_running_state=None, worker_type=None, environment=None, responding=None, organization_id=None, owner=None, parameters=None):
        """
        ExperimentEntryDTO - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'channels_last_values': 'list[ChannelWithValue]',
            'storage_size': 'int',
            'name': 'str',
            'project_name': 'str',
            'source_size': 'int',
            'hostname': 'str',
            'source_md5': 'str',
            'trashed': 'bool',
            'state': 'ExperimentStateDTO',
            'description': 'str',
            'tags': 'list[str]',
            'time_of_completion': 'datetime',
            'commit_id': 'str',
            'time_of_creation': 'datetime',
            'project_id': 'str',
            'organization_name': 'str',
            'group_id': 'str',
            'is_notebook': 'bool',
            'id': 'str',
            'properties': 'list[KeyValueProperty]',
            'short_id': 'str',
            'time_of_entered_running_state': 'datetime',
            'worker_type': 'str',
            'environment': 'str',
            'responding': 'bool',
            'organization_id': 'str',
            'owner': 'str',
            'parameters': 'list[Parameter]'
        }

        self.attribute_map = {
            'channels_last_values': 'channelsLastValues',
            'storage_size': 'storageSize',
            'name': 'name',
            'project_name': 'projectName',
            'source_size': 'sourceSize',
            'hostname': 'hostname',
            'source_md5': 'sourceMd5',
            'trashed': 'trashed',
            'state': 'state',
            'description': 'description',
            'tags': 'tags',
            'time_of_completion': 'timeOfCompletion',
            'commit_id': 'commitId',
            'time_of_creation': 'timeOfCreation',
            'project_id': 'projectId',
            'organization_name': 'organizationName',
            'group_id': 'groupId',
            'is_notebook': 'isNotebook',
            'id': 'id',
            'properties': 'properties',
            'short_id': 'shortId',
            'time_of_entered_running_state': 'timeOfEnteredRunningState',
            'worker_type': 'workerType',
            'environment': 'environment',
            'responding': 'responding',
            'organization_id': 'organizationId',
            'owner': 'owner',
            'parameters': 'parameters'
        }

        self._channels_last_values = channels_last_values
        self._storage_size = storage_size
        self._name = name
        self._project_name = project_name
        self._source_size = source_size
        self._hostname = hostname
        self._source_md5 = source_md5
        self._trashed = trashed
        self._state = state
        self._description = description
        self._tags = tags
        self._time_of_completion = time_of_completion
        self._commit_id = commit_id
        self._time_of_creation = time_of_creation
        self._project_id = project_id
        self._organization_name = organization_name
        self._group_id = group_id
        self._is_notebook = is_notebook
        self._id = id
        self._properties = properties
        self._short_id = short_id
        self._time_of_entered_running_state = time_of_entered_running_state
        self._worker_type = worker_type
        self._environment = environment
        self._responding = responding
        self._organization_id = organization_id
        self._owner = owner
        self._parameters = parameters

    @property
    def channels_last_values(self):
        """
        Gets the channels_last_values of this ExperimentEntryDTO.


        :return: The channels_last_values of this ExperimentEntryDTO.
        :rtype: list[ChannelWithValue]
        """
        return self._channels_last_values

    @channels_last_values.setter
    def channels_last_values(self, channels_last_values):
        """
        Sets the channels_last_values of this ExperimentEntryDTO.


        :param channels_last_values: The channels_last_values of this ExperimentEntryDTO.
        :type: list[ChannelWithValue]
        """
        
        self._channels_last_values = channels_last_values

    @property
    def storage_size(self):
        """
        Gets the storage_size of this ExperimentEntryDTO.


        :return: The storage_size of this ExperimentEntryDTO.
        :rtype: int
        """
        return self._storage_size

    @storage_size.setter
    def storage_size(self, storage_size):
        """
        Sets the storage_size of this ExperimentEntryDTO.


        :param storage_size: The storage_size of this ExperimentEntryDTO.
        :type: int
        """
        
        self._storage_size = storage_size

    @property
    def name(self):
        """
        Gets the name of this ExperimentEntryDTO.


        :return: The name of this ExperimentEntryDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ExperimentEntryDTO.


        :param name: The name of this ExperimentEntryDTO.
        :type: str
        """
        
        self._name = name

    @property
    def project_name(self):
        """
        Gets the project_name of this ExperimentEntryDTO.


        :return: The project_name of this ExperimentEntryDTO.
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """
        Sets the project_name of this ExperimentEntryDTO.


        :param project_name: The project_name of this ExperimentEntryDTO.
        :type: str
        """
        
        self._project_name = project_name

    @property
    def source_size(self):
        """
        Gets the source_size of this ExperimentEntryDTO.


        :return: The source_size of this ExperimentEntryDTO.
        :rtype: int
        """
        return self._source_size

    @source_size.setter
    def source_size(self, source_size):
        """
        Sets the source_size of this ExperimentEntryDTO.


        :param source_size: The source_size of this ExperimentEntryDTO.
        :type: int
        """
        
        self._source_size = source_size

    @property
    def hostname(self):
        """
        Gets the hostname of this ExperimentEntryDTO.


        :return: The hostname of this ExperimentEntryDTO.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """
        Sets the hostname of this ExperimentEntryDTO.


        :param hostname: The hostname of this ExperimentEntryDTO.
        :type: str
        """
        
        self._hostname = hostname

    @property
    def source_md5(self):
        """
        Gets the source_md5 of this ExperimentEntryDTO.


        :return: The source_md5 of this ExperimentEntryDTO.
        :rtype: str
        """
        return self._source_md5

    @source_md5.setter
    def source_md5(self, source_md5):
        """
        Sets the source_md5 of this ExperimentEntryDTO.


        :param source_md5: The source_md5 of this ExperimentEntryDTO.
        :type: str
        """
        
        self._source_md5 = source_md5

    @property
    def trashed(self):
        """
        Gets the trashed of this ExperimentEntryDTO.


        :return: The trashed of this ExperimentEntryDTO.
        :rtype: bool
        """
        return self._trashed

    @trashed.setter
    def trashed(self, trashed):
        """
        Sets the trashed of this ExperimentEntryDTO.


        :param trashed: The trashed of this ExperimentEntryDTO.
        :type: bool
        """
        
        self._trashed = trashed

    @property
    def state(self):
        """
        Gets the state of this ExperimentEntryDTO.


        :return: The state of this ExperimentEntryDTO.
        :rtype: ExperimentStateDTO
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this ExperimentEntryDTO.


        :param state: The state of this ExperimentEntryDTO.
        :type: ExperimentStateDTO
        """
        
        self._state = state

    @property
    def description(self):
        """
        Gets the description of this ExperimentEntryDTO.


        :return: The description of this ExperimentEntryDTO.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ExperimentEntryDTO.


        :param description: The description of this ExperimentEntryDTO.
        :type: str
        """
        
        self._description = description

    @property
    def tags(self):
        """
        Gets the tags of this ExperimentEntryDTO.


        :return: The tags of this ExperimentEntryDTO.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this ExperimentEntryDTO.


        :param tags: The tags of this ExperimentEntryDTO.
        :type: list[str]
        """
        
        self._tags = tags

    @property
    def time_of_completion(self):
        """
        Gets the time_of_completion of this ExperimentEntryDTO.


        :return: The time_of_completion of this ExperimentEntryDTO.
        :rtype: datetime
        """
        return self._time_of_completion

    @time_of_completion.setter
    def time_of_completion(self, time_of_completion):
        """
        Sets the time_of_completion of this ExperimentEntryDTO.


        :param time_of_completion: The time_of_completion of this ExperimentEntryDTO.
        :type: datetime
        """
        
        self._time_of_completion = time_of_completion

    @property
    def commit_id(self):
        """
        Gets the commit_id of this ExperimentEntryDTO.


        :return: The commit_id of this ExperimentEntryDTO.
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """
        Sets the commit_id of this ExperimentEntryDTO.


        :param commit_id: The commit_id of this ExperimentEntryDTO.
        :type: str
        """
        
        self._commit_id = commit_id

    @property
    def time_of_creation(self):
        """
        Gets the time_of_creation of this ExperimentEntryDTO.


        :return: The time_of_creation of this ExperimentEntryDTO.
        :rtype: datetime
        """
        return self._time_of_creation

    @time_of_creation.setter
    def time_of_creation(self, time_of_creation):
        """
        Sets the time_of_creation of this ExperimentEntryDTO.


        :param time_of_creation: The time_of_creation of this ExperimentEntryDTO.
        :type: datetime
        """
        
        self._time_of_creation = time_of_creation

    @property
    def project_id(self):
        """
        Gets the project_id of this ExperimentEntryDTO.


        :return: The project_id of this ExperimentEntryDTO.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """
        Sets the project_id of this ExperimentEntryDTO.


        :param project_id: The project_id of this ExperimentEntryDTO.
        :type: str
        """
        
        self._project_id = project_id

    @property
    def organization_name(self):
        """
        Gets the organization_name of this ExperimentEntryDTO.


        :return: The organization_name of this ExperimentEntryDTO.
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """
        Sets the organization_name of this ExperimentEntryDTO.


        :param organization_name: The organization_name of this ExperimentEntryDTO.
        :type: str
        """
        
        self._organization_name = organization_name

    @property
    def group_id(self):
        """
        Gets the group_id of this ExperimentEntryDTO.


        :return: The group_id of this ExperimentEntryDTO.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """
        Sets the group_id of this ExperimentEntryDTO.


        :param group_id: The group_id of this ExperimentEntryDTO.
        :type: str
        """
        
        self._group_id = group_id

    @property
    def is_notebook(self):
        """
        Gets the is_notebook of this ExperimentEntryDTO.


        :return: The is_notebook of this ExperimentEntryDTO.
        :rtype: bool
        """
        return self._is_notebook

    @is_notebook.setter
    def is_notebook(self, is_notebook):
        """
        Sets the is_notebook of this ExperimentEntryDTO.


        :param is_notebook: The is_notebook of this ExperimentEntryDTO.
        :type: bool
        """
        
        self._is_notebook = is_notebook

    @property
    def id(self):
        """
        Gets the id of this ExperimentEntryDTO.


        :return: The id of this ExperimentEntryDTO.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ExperimentEntryDTO.


        :param id: The id of this ExperimentEntryDTO.
        :type: str
        """
        
        self._id = id

    @property
    def properties(self):
        """
        Gets the properties of this ExperimentEntryDTO.


        :return: The properties of this ExperimentEntryDTO.
        :rtype: list[KeyValueProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """
        Sets the properties of this ExperimentEntryDTO.


        :param properties: The properties of this ExperimentEntryDTO.
        :type: list[KeyValueProperty]
        """
        
        self._properties = properties

    @property
    def short_id(self):
        """
        Gets the short_id of this ExperimentEntryDTO.


        :return: The short_id of this ExperimentEntryDTO.
        :rtype: str
        """
        return self._short_id

    @short_id.setter
    def short_id(self, short_id):
        """
        Sets the short_id of this ExperimentEntryDTO.


        :param short_id: The short_id of this ExperimentEntryDTO.
        :type: str
        """
        
        self._short_id = short_id

    @property
    def time_of_entered_running_state(self):
        """
        Gets the time_of_entered_running_state of this ExperimentEntryDTO.


        :return: The time_of_entered_running_state of this ExperimentEntryDTO.
        :rtype: datetime
        """
        return self._time_of_entered_running_state

    @time_of_entered_running_state.setter
    def time_of_entered_running_state(self, time_of_entered_running_state):
        """
        Sets the time_of_entered_running_state of this ExperimentEntryDTO.


        :param time_of_entered_running_state: The time_of_entered_running_state of this ExperimentEntryDTO.
        :type: datetime
        """
        
        self._time_of_entered_running_state = time_of_entered_running_state

    @property
    def worker_type(self):
        """
        Gets the worker_type of this ExperimentEntryDTO.


        :return: The worker_type of this ExperimentEntryDTO.
        :rtype: str
        """
        return self._worker_type

    @worker_type.setter
    def worker_type(self, worker_type):
        """
        Sets the worker_type of this ExperimentEntryDTO.


        :param worker_type: The worker_type of this ExperimentEntryDTO.
        :type: str
        """
        
        self._worker_type = worker_type

    @property
    def environment(self):
        """
        Gets the environment of this ExperimentEntryDTO.


        :return: The environment of this ExperimentEntryDTO.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """
        Sets the environment of this ExperimentEntryDTO.


        :param environment: The environment of this ExperimentEntryDTO.
        :type: str
        """
        
        self._environment = environment

    @property
    def responding(self):
        """
        Gets the responding of this ExperimentEntryDTO.


        :return: The responding of this ExperimentEntryDTO.
        :rtype: bool
        """
        return self._responding

    @responding.setter
    def responding(self, responding):
        """
        Sets the responding of this ExperimentEntryDTO.


        :param responding: The responding of this ExperimentEntryDTO.
        :type: bool
        """
        
        self._responding = responding

    @property
    def organization_id(self):
        """
        Gets the organization_id of this ExperimentEntryDTO.


        :return: The organization_id of this ExperimentEntryDTO.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this ExperimentEntryDTO.


        :param organization_id: The organization_id of this ExperimentEntryDTO.
        :type: str
        """
        
        self._organization_id = organization_id

    @property
    def owner(self):
        """
        Gets the owner of this ExperimentEntryDTO.


        :return: The owner of this ExperimentEntryDTO.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this ExperimentEntryDTO.


        :param owner: The owner of this ExperimentEntryDTO.
        :type: str
        """
        
        self._owner = owner

    @property
    def parameters(self):
        """
        Gets the parameters of this ExperimentEntryDTO.


        :return: The parameters of this ExperimentEntryDTO.
        :rtype: list[Parameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this ExperimentEntryDTO.


        :param parameters: The parameters of this ExperimentEntryDTO.
        :type: list[Parameter]
        """
        
        self._parameters = parameters

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




