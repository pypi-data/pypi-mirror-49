"""
Модуль содержащий константы и функции приема отправки сообщений
Для обмен сообщениями используется ассиметричное шифрование RSA
"""

import json
import rsa
from enum import Enum


# Кодировка сообщений


class SysConst(Enum):
    """Класс системных констант"""
    ENCODING = 'utf-8'
    PUBLICKEY = rsa.PublicKey(21398861240354752897359515597515368555906324350098607159605742192139763336816841534991594943674409937742947439898488100771707536253244593501487475151941309944866808440286441104426257559940643240785179943693486638873343326089853455397326780230048332618343922116099430613175805015460623055858358640655087822382203101617404330725227594286958375316603338394181379698613732417282925757803608125628591300696388888365958495657592112101446763219305227850570264571018723964337074244339922479825427958129030532723153087028647966872933110500652043487320817768343706784400594743366819730786404206933925058381702078550560479250891, 65537)
    PRIVATEKEY = rsa.PrivateKey(
        21398861240354752897359515597515368555906324350098607159605742192139763336816841534991594943674409937742947439898488100771707536253244593501487475151941309944866808440286441104426257559940643240785179943693486638873343326089853455397326780230048332618343922116099430613175805015460623055858358640655087822382203101617404330725227594286958375316603338394181379698613732417282925757803608125628591300696388888365958495657592112101446763219305227850570264571018723964337074244339922479825427958129030532723153087028647966872933110500652043487320817768343706784400594743366819730786404206933925058381702078550560479250891,
        65537,
        755557393688769675213847431109915968664528961443584188585496550538038243456279221080771941035790234462016576528145955188454327157025924124730183217138291212787002681398642365620067442722472015184962790327703863197169788921859726502424800791191721343345710602814502989744553653749422185196892928209646476618837331621422755239997513016548884946907780237554065826576039015559213818266461010000595424743488929462688728697555098148543094475452745192864376218199840868794345382947712409718186746345470971173085254662852396459919199865628960272823739565549718943776516397471305876360938303487982725124288751934000442110721,
        3228201555865204331752711611707221752136691332832851137857287809857601237190779134663403069149498619614545211722821985125351406891050623801512841526115710975782832801733040787757121709542611630635716161794060249130341693973897231882058688228579769954708606509788725313552122486198270447910729301978696968066747124704606885589899,
        6628725273202326760228013631984132851704811269394768287188498058548097869835714737482104906702046916585268867888496259077568237668150325164648575314066166518663915936037250848434411706713783048901820027592943627664320200892090192420833907524222049052505676047741549057171057779148505238209)


# Ключи в сообщении протокола JIM
class MKeys(Enum):
    """Класс  констант с ключами сообщения в протоколе обмена JIM"""

    RESPONSE = 'response'
    ACTION = 'action'
    TIME = 'time'
    USER = 'user'
    ACCOUNT_NAME = 'account_name'
    PASSWORD = 'password'
    MSG = 'msg'
    TO = 'to'


# типы сообщений для ключа action
class MTypes(Enum):
    """Класс  констант с типами сообщений в протоколе обмена JIM"""

    ERROR = 'error'
    PRESENCE = 'presence'
    MESSAGE = 'message'
    JOIN = 'join'
    GET_CONTACTS = 'get_contacts'
    ADD_CONTACT = 'add_contact'
    DEL_CONTACT = 'del_contact'


# коды ответа
class RespCodes(Enum):
    """Класс  констант с кодами ответа в протоколе обмена JIM"""

    BASIC_NOTICE = 100
    OK = 200
    ACCEPTED = 202
    WRONG_REQUEST = 400
    AUTH_FAILED = 401
    SERVER_ERROR = 500

# возврат списка всех кодоов. для проверки вхождения значения в список
    @classmethod
    def list(cls):
        """класс метод реализующий получение списка всех возможных кодов ответа"""
        return list(map(lambda c: c.value, cls))


#  преобразуем словарь bytes
def dict_to_bytes(message_dict):
    """
    Функция преобразования словаря с сообщением в bytes
    для последующей отправки по сети.
    """

    jmessage = json.dumps(message_dict)
    bmessage = jmessage.encode(SysConst.ENCODING.value)
    return bmessage


#  преобразуем bytes в словарь
def bytes_to_dict(message_bytes):
    """
    Функция преобразования полученного по сети bytes сообщения
    в словарь для последующей обработки.
    """


    jmessage = message_bytes.decode(str(SysConst.ENCODING.value))
    message = json.loads(jmessage)
    return message


# отправка сообщения
def send_message(sock, message):
    """
    Функция отправки сообщения по сети
    перед отправкой проверяет сообщение на наличие необходимых ключей.
    """

    try:
        # проверка сообщения на обязательные ключи
        if message['time'] and message['action']:
            bmessage = dict_to_bytes(message)
            # шифруем
            bmessage = rsa.encrypt(bmessage, SysConst.PUBLICKEY.value)

            sock.send(bmessage)
    except KeyError:
        print('Ошибка отправки сообщения. Неверный формат.')


# отправка ответа
def send_response(sock, message):
    """ Функция отправки ответа (response) по сети. """

    try:
        bresponse = dict_to_bytes(message)
        bresponse = rsa.encrypt(bresponse, SysConst.PUBLICKEY.value)

        sock.send(bresponse)
    except BaseException:
        print('Ошибка отправки ответа.')


# получение сообщения
def get_message(sock):
    """ Функция получения сообщения по сети. """

    bmessage = sock.recv(1024)
    # расшифровываем сообщение
    bmessage = rsa.decrypt(bmessage, SysConst.PRIVATEKEY.value)
#    print(bmessage)
    # переводим байты в словарь
    message = bytes_to_dict(bmessage)

    # возвращаем словарь
    return message


# получение списка сообщений
def get_messages(r_clients, all_clients):
    """
    Функция получения всех сообщений от всех клиенто по сети.
    Используется только в сервере.
    """

    messages = {}  # Словарь ответов сервера вида {сокет: запрос}

    for sock in r_clients:
        try:
            data = get_message(sock)
            messages[sock] = data
        except ConnectionResetError:
            print(f'Клиент {sock.fileno()} {sock.getpeername()} отключился.')
            all_clients.pop(sock)
    return messages


# отправка списка сообщений
def send_messages(w_clients, all_clients, messages):
    """
    Функция отправки списка сообщений по сети.
    Используется только в сервере.
    """

    for sock in w_clients:
        try:
            for key in messages:
                if messages[key][MKeys.TO.value] in all_clients[sock]:
                    send_message(sock, messages[key])
        except BaseException:
            print(f' Клиент {sock.fileno()} {sock.getpeername()} отключился.')
            all_clients.pop(sock)
