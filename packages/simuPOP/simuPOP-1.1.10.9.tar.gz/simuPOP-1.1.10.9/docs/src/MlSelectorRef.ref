
class MlSelector
----------------

.. class:: MlSelector

   This selector is created by a list of selectors. When it is applied
   to an individual, it applies these selectors to the individual,
   obtain a list of fitness values, and compute a combined fitness
   value from them. ADDITIVE, multiplicative, and a heterogeneour
   multi-locus model are supported.


   .. method:: MlSelector(ops, mode=MULTIPLICATIVE, begin=0, end=-1, step=1, at=[], reps=ALL_AVAIL, subPops=ALL_AVAIL, infoFields=ALL_AVAIL)


      Create a multiple-locus selector from a list selection operator
      *selectors*. When this operator is applied to an individual
      (parents when used before mating and offspring when used during
      mating), it applies these operators to the individual and obtain
      a list of (usually single-locus) fitness values. These fitness
      values are combined to a single fitness value using

      + *Prod(f_i)*, namely the product of individual fitness if
        *mode* = ``MULTIPLICATIVE``,

      + *1-sum(1 - f_i)* if *mode* = ``ADDITIVE``,

      + *1-Prod(1 - f_i)* if *mode* = ``HETEROGENEITY``, and

      + *exp(- sum(1 - f_i))* if *mode* = ``EXPONENTIAL``,

      zero will be returned if the combined fitness value is less than
      zero.

      Applicability parameters (begin, end, step, at, reps, subPops)
      could be used in both :class:`MlSelector` and selectors in
      parameter *ops*, but parameters in :class:`MlSelector` will be
      interpreted first.

