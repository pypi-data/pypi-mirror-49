import os
import sys
import datetime
import argparse
import contextlib

from colorconsole import terminal
from jt64common import __qt_version_list__ as qt_version_list
from jt64common import __qt_version_dict__ as qt_version_dict
from jt64gentc import __version__
from jt64gentc import __name__
from jt64gentc import __summary__

# process variables
base_path = os.environ["JTSDK_HOME"]
tc_dir = os.path.join(base_path, "tools", "tcfiles")
script_name = os.path.basename(__file__)
home = os.environ['JTSDK_HOME']
qthome = os.path.join(home, 'tools', 'Qt')
available = []

# Hamlib base path
hamlib_base_path = os.path.join(base_path, "tools", "hamlib", "qt")
hamlib_base_path = hamlib_base_path.replace('\\', '/')

# other paths
fftw_path = os.environ["fftw3f_dir_f"]
adoc_path = os.environ["ruby_dir_f"]
svn_path = os.environ["svn_dir_f"]


def clear():
    """Clear screen Windows or *Nix"""
    os.system('cls' if os.name == 'nt' else 'clear')


def make_dir():
    """Makes a directory if not exist"""
    if not os.path.exists(tc_dir):
        os.makedirs(tc_dir)


def supported_versions():
    """Print list of supported QT Frameworks from qt_version_dict"""
    clear()
    screen = terminal.get_terminal(conEmu=False)
    screen.set_color(3, 0)
    print(f"Supported QT Frameworks\n")
    screen.reset_colors()
    print(f"{'Version':<12} {'GCC':<10} {'Available':<10} {'Installed'}")
    print("-" * 50)
    for k, v in qt_version_dict.items():
        path = os.path.join(qthome, k)
        if os.path.isdir(path):
            print(f"{k:<8} {v:<17} {'Yes':<10} {'Yes'}")
        else:
            print(f"{k:<8} {v:<17} {'Yes':<10} {'No'}")

def main():
    """Generates Tool Chain files for each QT version in qt_version_list"""
    clear()

    # setup the parser
    parser = argparse.ArgumentParser(add_help=True, description=__summary__)

    parser.add_argument('-s', '--supported',
                        action='store_true',
                        default=False,
                        dest='boolean_t',
                        help='list supported QT versions')

    parser.add_argument('-v', '--version',
                        action='version',
                        version='%(prog)s ' + __version__,
                        help='display module version')

    # process the arguments
    args = parser.parse_args()

    # if user requests supported versions
    if args.boolean_t:
        supported_versions()
    else:
        make_dir()
        screen = terminal.get_terminal(conEmu=False)
        print("------------------------------------------------------------")
        screen.set_color(3, 0)
        print(f"JTSDK64 Generate QT Tool Chain Files {os.environ['VERSION']}")
        screen.reset_colors()
        print("------------------------------------------------------------\n")

        # find installed verisons of Qt by checking for directories
        # TODO: move to jt64common, loop is used in jt64gentc and jt64setqt
        if os.path.isdir(qthome):
            for i in qt_version_list:
                path = os.path.join(qthome, i)
                if os.path.isdir(path):
                    available.append(str(i))
        else:
            print("Qt components do not appear to be installed yet.")
            sys.exit(0)

        # loop through each supported QT version and generate TC file
        # for testing, change the name of the Qt folder.
        for i in available:
            time_now = datetime.datetime.now()
            print(f"* Generating TC File for QT v{i}")
            file_name = "qt" + i.replace(".", "") + ".tc"
            file = os.path.join(tc_dir, file_name)

            # Qt Directory back slash
            qtdir = os.path.join(base_path, "tools", "Qt", i,
                                 "mingw73_64", "bin")
            qtdir = qtdir.replace('\\', '/')

            # Set GCCD: 5.12.2, 5.12.3, 5.12.4 and 5.13.0 use GCC 730_64
            gccd = os.path.join(base_path, "tools", "Qt", "Tools",
                                "mingw730_64", "bin")
            gccd = gccd.replace('\\', '/')

            # set the hHamlib directories
            hamlib_dir = os.path.join(hamlib_base_path, i)
            hamlib_dir = hamlib_dir.replace('\\', '/')

            # remove file while supressing not found error
            # TODO: move remove_file to jt64common
            with contextlib.suppress(FileNotFoundError):
                os.remove(file)

            # Open file
            with open(file, "w") as f:
                f.write(f"# " + 55 * "-" + "\n")
                f.write(f"# Tool Chain File for Qt {i}\n")
                f.write(f"# This file is auto-generated by : {script_name}\n")
                f.write(f"# Time Stamp: {time_now}\n")
                f.write(f"# " + 55 * "-" + "\n")
                f.write(f"\n# System Type and Base Paths\n")
                f.write(f"SET (CMAKE_SYSTEM_NAME Windows)\n")
                f.write(f"SET (QTDIR {qtdir})\n")
                f.write(f"SET (GCCD {gccd}\n")
                f.write(f"\n# Asciidoctor\n")
                f.write(f"SET (ADOCD {adoc_path})\n")
                f.write(f"\n# FFTW\n")
                f.write(f"SET (FFTWD {fftw_path})\n")
                f.write(f"\n# Hamlib\n")
                f.write(f"SET (HLIB {hamlib_dir})\n")
                f.write(f"\n# Subversion\n")
                f.write(f"SET (SVND {svn_path})\n")
                f.write(f"\n# CMake Consolidated variables\n")
                f.write("SET (CMAKE_PREFIX_PATH ${GCCD} ${QTDIR} ${HLIB} ${HLIB}/bin ${ADOCD} ${FFTWD} ${SVND})\n")
                f.write(f"SET (CMAKE_FIND_ROOT_PATH_PROGRAM NEVER)\n")
                f.write(f"SET (CMAKE_FIND_ROOT_PATH_LIBRARY BOTH)\n")
                f.write(f"SET (CMAKE_FIND_ROOT_PATH_INCLUDE BOTH)\n")
                f.write(f"\n# END Cmake Tool Chain File")

            f.close()


if __name__ == '__main__':
    main()
