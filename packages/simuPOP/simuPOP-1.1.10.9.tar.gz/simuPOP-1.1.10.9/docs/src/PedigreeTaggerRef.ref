
class PedigreeTagger
--------------------

.. class:: PedigreeTagger

   This tagging operator records the ID of parents of each offspring
   in specified information fields (default to ``father_id`` and
   ``mother_id``). Only one information field should be specified if
   an asexsual mating scheme is used so there is one parent for each
   offspring. Information recorded by this operator is intended to be
   used to record full pedigree information of an evolutionary
   process.


   .. method:: PedigreeTagger(idField="ind_id", output="", outputFields=[], outputLoci=[], begin=0, end=-1, step=1, at=[], reps=ALL_AVAIL, subPops=ALL_AVAIL, infoFields=["father_id", "mother_id"])


      Create a pedigree tagger that records the ID of parents of each
      offspring when it is applied to an offspring during-mating. If
      two information fields are specified (parameter *infoFields*,
      with default value ``['father_id', 'mother_id']``), they are
      used to record the ID of each individual's father and mother
      stored in the *idField* (default to ``ind_id``) field of the
      parents. Value ``-1`` will be assigned if any of the parent is
      missing. If only one information field is given, it will be used
      to record the ID of the first valid parent (father if both
      pedigree are valid).

      This operator by default does not send any output. If a valid
      output stream is given (should be in the form of
      ``'>>filename'`` so that output will be concatenated), this
      operator will output the ID of offspring, IDs of his or her
      parent(s), sex and affection status of offspring, and values at
      specified information fields (*outputFields*) and loci
      (*outputLoci*) in the format of ``off_id father_id mother_id M/F
      A/U fields genotype``. ``father_id`` or ``mother_id`` will be
      ignored if only one parent is involved. This file format can be
      loaded using function :func:`loadPedigree`.

      Because only offspring will be outputed, individuals in the top-
      most ancestral generation will not be outputed. This is usually
      not a problem because individuals who have offspring in the next
      generation will be constructed by function :func:`loadPedigree`,
      although their information fields and genotype will be missing.
      If you would like to create a file with complete pedigree
      information, you can apply this operator before evolution in the
      *initOps* parameter of functions :meth:`Population.evolve` or
      :meth:`Simulator.evolve`. This will output all individuals in
      the initial population (the top-most ancestral population after
      evolution) in the same format. Note that sex, affection status
      and genotype can be changed by other operators so this operator
      should usually be applied after all other operators are applied.

