# Copyright Â© 2019 Splunk, Inc.
# Licensed under the Apache License, Version 2.0 (the "License"): you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

############# This file is auto-generated.  Do not edit! #############

"""
    SDC Service: Provisioner

    With the Provisioner Service, you can provision your tenant and manage it

    OpenAPI spec version: v1beta1.1
    Generated by: https://openapi-generator.tech
"""


from datetime import datetime
from typing import List, Dict
from splunk_sdk.common.sscmodel import SSCModel
from splunk_sdk.base_client import dictify, inflate
from enum import Enum



class CreateProvisionJobBody(SSCModel):

    @staticmethod
    def _from_dict(model: dict) -> "CreateProvisionJobBody":
        instance = CreateProvisionJobBody.__new__(CreateProvisionJobBody)
        instance._attrs = model
        return instance

    def __init__(self, apps: "List[str]" = None, tenant: "str" = None, **extra):
        """CreateProvisionJobBody"""

        self._attrs = dict()
        if apps is not None:
            self._attrs["apps"] = apps
        if tenant is not None:
            self._attrs["tenant"] = tenant
        for k, v in extra:
            self._attrs[k] = v

    @property
    def apps(self) -> "List[str]":
        """ Gets the apps of this CreateProvisionJobBody.
        """
        return self._attrs.get("apps")

    @apps.setter
    def apps(self, apps: "List[str]"):
        """Sets the apps of this CreateProvisionJobBody.


        :param apps: The apps of this CreateProvisionJobBody.
        :type: List[str]
        """
        self._attrs["apps"] = apps

    @property
    def tenant(self) -> "str":
        """ Gets the tenant of this CreateProvisionJobBody.
        """
        return self._attrs.get("tenant")

    @tenant.setter
    def tenant(self, tenant: "str"):
        """Sets the tenant of this CreateProvisionJobBody.


        :param tenant: The tenant of this CreateProvisionJobBody.
        :type: str
        """
        self._attrs["tenant"] = tenant

    def to_dict(self):
        return {k: v for (k, v) in self._attrs.items() if v is not None}


class Error(SSCModel):

    @staticmethod
    def _from_dict(model: dict) -> "Error":
        instance = Error.__new__(Error)
        instance._attrs = model
        return instance

    def __init__(self, code: "str", message: "str", **extra):
        """Error"""

        self._attrs = dict()
        if code is not None:
            self._attrs["code"] = code
        if message is not None:
            self._attrs["message"] = message
        for k, v in extra:
            self._attrs[k] = v

    @property
    def code(self) -> "str":
        """ Gets the code of this Error.
        Service error code
        """
        return self._attrs.get("code")

    @code.setter
    def code(self, code: "str"):
        """Sets the code of this Error.

        Service error code

        :param code: The code of this Error.
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")
        self._attrs["code"] = code

    @property
    def message(self) -> "str":
        """ Gets the message of this Error.
        Human readable error message
        """
        return self._attrs.get("message")

    @message.setter
    def message(self, message: "str"):
        """Sets the message of this Error.

        Human readable error message

        :param message: The message of this Error.
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")
        self._attrs["message"] = message

    def to_dict(self):
        return {k: v for (k, v) in self._attrs.items() if v is not None}


class ProvisionJobInfoErrorsItems(SSCModel):

    @staticmethod
    def _from_dict(model: dict) -> "ProvisionJobInfoErrorsItems":
        instance = ProvisionJobInfoErrorsItems.__new__(ProvisionJobInfoErrorsItems)
        instance._attrs = model
        return instance

    def __init__(self, code: "str", job_stage: "str", message: "str", app: "str" = None, **extra):
        """ProvisionJobInfoErrorsItems"""

        self._attrs = dict()
        if code is not None:
            self._attrs["code"] = code
        if job_stage is not None:
            self._attrs["job_stage"] = job_stage
        if message is not None:
            self._attrs["message"] = message
        if app is not None:
            self._attrs["app"] = app
        for k, v in extra:
            self._attrs[k] = v

    @property
    def code(self) -> "str":
        """ Gets the code of this ProvisionJobInfoErrorsItems.
        """
        return self._attrs.get("code")

    @code.setter
    def code(self, code: "str"):
        """Sets the code of this ProvisionJobInfoErrorsItems.


        :param code: The code of this ProvisionJobInfoErrorsItems.
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")
        self._attrs["code"] = code

    @property
    def job_stage(self) -> "str":
        """ Gets the job_stage of this ProvisionJobInfoErrorsItems.
        """
        return self._attrs.get("job_stage")

    @job_stage.setter
    def job_stage(self, job_stage: "str"):
        """Sets the job_stage of this ProvisionJobInfoErrorsItems.


        :param job_stage: The job_stage of this ProvisionJobInfoErrorsItems.
        :type: str
        """
        if job_stage is None:
            raise ValueError("Invalid value for `job_stage`, must not be `None`")
        self._attrs["job_stage"] = job_stage

    @property
    def message(self) -> "str":
        """ Gets the message of this ProvisionJobInfoErrorsItems.
        """
        return self._attrs.get("message")

    @message.setter
    def message(self, message: "str"):
        """Sets the message of this ProvisionJobInfoErrorsItems.


        :param message: The message of this ProvisionJobInfoErrorsItems.
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")
        self._attrs["message"] = message

    @property
    def app(self) -> "str":
        """ Gets the app of this ProvisionJobInfoErrorsItems.
        """
        return self._attrs.get("app")

    @app.setter
    def app(self, app: "str"):
        """Sets the app of this ProvisionJobInfoErrorsItems.


        :param app: The app of this ProvisionJobInfoErrorsItems.
        :type: str
        """
        self._attrs["app"] = app

    def to_dict(self):
        return {k: v for (k, v) in self._attrs.items() if v is not None}


class StatusEnum(str, Enum):
    CREATED = "created"
    RUNNING = "running"
    COMPLETED = "completed"

    @staticmethod
    def from_value(value: str):
        if value == "created":
            return StatusEnum.CREATED
        if value == "running":
            return StatusEnum.RUNNING
        if value == "completed":
            return StatusEnum.COMPLETED


class ProvisionJobInfo(SSCModel):

    @staticmethod
    def _from_dict(model: dict) -> "ProvisionJobInfo":
        instance = ProvisionJobInfo.__new__(ProvisionJobInfo)
        instance._attrs = model
        return instance

    def __init__(self, apps: "List[str]", created_at: "datetime", created_by: "str", errors: "List[ProvisionJobInfoErrorsItems]", job_id: "str", status: "str", tenant: "str", **extra):
        """ProvisionJobInfo"""

        self._attrs = dict()
        if apps is not None:
            self._attrs["apps"] = apps
        if created_at is not None:
            self._attrs["createdAt"] = created_at
        if created_by is not None:
            self._attrs["createdBy"] = created_by
        if errors is not None:
            self._attrs["errors"] = errors
        if job_id is not None:
            self._attrs["jobID"] = job_id
        if status is not None:
            self._attrs["status"] = status
        if tenant is not None:
            self._attrs["tenant"] = tenant
        for k, v in extra:
            self._attrs[k] = v

    @property
    def apps(self) -> "List[str]":
        """ Gets the apps of this ProvisionJobInfo.
        """
        return self._attrs.get("apps")

    @apps.setter
    def apps(self, apps: "List[str]"):
        """Sets the apps of this ProvisionJobInfo.


        :param apps: The apps of this ProvisionJobInfo.
        :type: List[str]
        """
        if apps is None:
            raise ValueError("Invalid value for `apps`, must not be `None`")
        self._attrs["apps"] = apps

    @property
    def created_at(self) -> "datetime":
        """ Gets the created_at of this ProvisionJobInfo.
        """
        return self._attrs.get("createdAt")

    @created_at.setter
    def created_at(self, created_at: "datetime"):
        """Sets the created_at of this ProvisionJobInfo.


        :param created_at: The created_at of this ProvisionJobInfo.
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")
        self._attrs["createdAt"] = created_at

    @property
    def created_by(self) -> "str":
        """ Gets the created_by of this ProvisionJobInfo.
        """
        return self._attrs.get("createdBy")

    @created_by.setter
    def created_by(self, created_by: "str"):
        """Sets the created_by of this ProvisionJobInfo.


        :param created_by: The created_by of this ProvisionJobInfo.
        :type: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")
        self._attrs["createdBy"] = created_by

    @property
    def errors(self) -> "List[ProvisionJobInfoErrorsItems]":
        """ Gets the errors of this ProvisionJobInfo.
        """
        return [ProvisionJobInfoErrorsItems._from_dict(i) for i in self._attrs.get("errors")]

    @errors.setter
    def errors(self, errors: "List[ProvisionJobInfoErrorsItems]"):
        """Sets the errors of this ProvisionJobInfo.


        :param errors: The errors of this ProvisionJobInfo.
        :type: List[ProvisionJobInfoErrorsItems]
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")
        self._attrs["errors"] = errors

    @property
    def job_id(self) -> "str":
        """ Gets the job_id of this ProvisionJobInfo.
        """
        return self._attrs.get("jobID")

    @job_id.setter
    def job_id(self, job_id: "str"):
        """Sets the job_id of this ProvisionJobInfo.


        :param job_id: The job_id of this ProvisionJobInfo.
        :type: str
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")
        self._attrs["jobID"] = job_id

    @property
    def status(self) -> "StatusEnum":
        """ Gets the status of this ProvisionJobInfo.
        """
        return StatusEnum.from_value(self._attrs.get("status"))

    @status.setter
    def status(self, status: "str"):
        """Sets the status of this ProvisionJobInfo.


        :param status: The status of this ProvisionJobInfo.
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")
        if isinstance(status, Enum):
            self._attrs["status"] = status.value
        else:
            self._attrs["status"] = status  # If you supply a string, we presume you know the service will take it.

    @property
    def tenant(self) -> "str":
        """ Gets the tenant of this ProvisionJobInfo.
        """
        return self._attrs.get("tenant")

    @tenant.setter
    def tenant(self, tenant: "str"):
        """Sets the tenant of this ProvisionJobInfo.


        :param tenant: The tenant of this ProvisionJobInfo.
        :type: str
        """
        if tenant is None:
            raise ValueError("Invalid value for `tenant`, must not be `None`")
        self._attrs["tenant"] = tenant

    def to_dict(self):
        return {k: v for (k, v) in self._attrs.items() if v is not None}


class TenantInfo(SSCModel):

    @staticmethod
    def _from_dict(model: dict) -> "TenantInfo":
        instance = TenantInfo.__new__(TenantInfo)
        instance._attrs = model
        return instance

    def __init__(self, created_at: "datetime", created_by: "str", name: "str", status: "str", **extra):
        """TenantInfo"""

        self._attrs = dict()
        if created_at is not None:
            self._attrs["createdAt"] = created_at
        if created_by is not None:
            self._attrs["createdBy"] = created_by
        if name is not None:
            self._attrs["name"] = name
        if status is not None:
            self._attrs["status"] = status
        for k, v in extra:
            self._attrs[k] = v

    @property
    def created_at(self) -> "datetime":
        """ Gets the created_at of this TenantInfo.
        """
        return self._attrs.get("createdAt")

    @created_at.setter
    def created_at(self, created_at: "datetime"):
        """Sets the created_at of this TenantInfo.


        :param created_at: The created_at of this TenantInfo.
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")
        self._attrs["createdAt"] = created_at

    @property
    def created_by(self) -> "str":
        """ Gets the created_by of this TenantInfo.
        """
        return self._attrs.get("createdBy")

    @created_by.setter
    def created_by(self, created_by: "str"):
        """Sets the created_by of this TenantInfo.


        :param created_by: The created_by of this TenantInfo.
        :type: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")
        self._attrs["createdBy"] = created_by

    @property
    def name(self) -> "str":
        """ Gets the name of this TenantInfo.
        """
        return self._attrs.get("name")

    @name.setter
    def name(self, name: "str"):
        """Sets the name of this TenantInfo.


        :param name: The name of this TenantInfo.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        self._attrs["name"] = name

    @property
    def status(self) -> "str":
        """ Gets the status of this TenantInfo.
        """
        return self._attrs.get("status")

    @status.setter
    def status(self, status: "str"):
        """Sets the status of this TenantInfo.


        :param status: The status of this TenantInfo.
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")
        self._attrs["status"] = status

    def to_dict(self):
        return {k: v for (k, v) in self._attrs.items() if v is not None}
