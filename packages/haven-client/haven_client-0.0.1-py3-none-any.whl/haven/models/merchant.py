# coding: utf-8

"""
    Haven Money API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Merchant(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'address': 'Address',
        'hours': 'OpenHours',
        'image': 'str',
        'category': 'CleanCategory',
        'phone': 'str',
        'url': 'str',
        'facebook': 'str',
        'twitter': 'str',
        'instagram': 'str',
        'yelp': 'str',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'address': 'address',
        'hours': 'hours',
        'image': 'image',
        'category': 'category',
        'phone': 'phone',
        'url': 'url',
        'facebook': 'facebook',
        'twitter': 'twitter',
        'instagram': 'instagram',
        'yelp': 'yelp',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, name=None, address=None, hours=None, image=None, category=None, phone=None, url=None, facebook=None, twitter=None, instagram=None, yelp=None, updated_at=None):  # noqa: E501
        """Merchant - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._name = None
        self._address = None
        self._hours = None
        self._image = None
        self._category = None
        self._phone = None
        self._url = None
        self._facebook = None
        self._twitter = None
        self._instagram = None
        self._yelp = None
        self._updated_at = None
        self.discriminator = None

        self.id = id
        self.name = name
        if address is not None:
            self.address = address
        if hours is not None:
            self.hours = hours
        if image is not None:
            self.image = image
        self.category = category
        if phone is not None:
            self.phone = phone
        if url is not None:
            self.url = url
        if facebook is not None:
            self.facebook = facebook
        if twitter is not None:
            self.twitter = twitter
        if instagram is not None:
            self.instagram = instagram
        if yelp is not None:
            self.yelp = yelp
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this Merchant.  # noqa: E501


        :return: The id of this Merchant.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Merchant.


        :param id: The id of this Merchant.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Merchant.  # noqa: E501


        :return: The name of this Merchant.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Merchant.


        :param name: The name of this Merchant.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def address(self):
        """Gets the address of this Merchant.  # noqa: E501


        :return: The address of this Merchant.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Merchant.


        :param address: The address of this Merchant.  # noqa: E501
        :type: Address
        """

        self._address = address

    @property
    def hours(self):
        """Gets the hours of this Merchant.  # noqa: E501


        :return: The hours of this Merchant.  # noqa: E501
        :rtype: OpenHours
        """
        return self._hours

    @hours.setter
    def hours(self, hours):
        """Sets the hours of this Merchant.


        :param hours: The hours of this Merchant.  # noqa: E501
        :type: OpenHours
        """

        self._hours = hours

    @property
    def image(self):
        """Gets the image of this Merchant.  # noqa: E501


        :return: The image of this Merchant.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Merchant.


        :param image: The image of this Merchant.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def category(self):
        """Gets the category of this Merchant.  # noqa: E501


        :return: The category of this Merchant.  # noqa: E501
        :rtype: CleanCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Merchant.


        :param category: The category of this Merchant.  # noqa: E501
        :type: CleanCategory
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def phone(self):
        """Gets the phone of this Merchant.  # noqa: E501


        :return: The phone of this Merchant.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Merchant.


        :param phone: The phone of this Merchant.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def url(self):
        """Gets the url of this Merchant.  # noqa: E501


        :return: The url of this Merchant.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Merchant.


        :param url: The url of this Merchant.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def facebook(self):
        """Gets the facebook of this Merchant.  # noqa: E501


        :return: The facebook of this Merchant.  # noqa: E501
        :rtype: str
        """
        return self._facebook

    @facebook.setter
    def facebook(self, facebook):
        """Sets the facebook of this Merchant.


        :param facebook: The facebook of this Merchant.  # noqa: E501
        :type: str
        """

        self._facebook = facebook

    @property
    def twitter(self):
        """Gets the twitter of this Merchant.  # noqa: E501


        :return: The twitter of this Merchant.  # noqa: E501
        :rtype: str
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """Sets the twitter of this Merchant.


        :param twitter: The twitter of this Merchant.  # noqa: E501
        :type: str
        """

        self._twitter = twitter

    @property
    def instagram(self):
        """Gets the instagram of this Merchant.  # noqa: E501


        :return: The instagram of this Merchant.  # noqa: E501
        :rtype: str
        """
        return self._instagram

    @instagram.setter
    def instagram(self, instagram):
        """Sets the instagram of this Merchant.


        :param instagram: The instagram of this Merchant.  # noqa: E501
        :type: str
        """

        self._instagram = instagram

    @property
    def yelp(self):
        """Gets the yelp of this Merchant.  # noqa: E501


        :return: The yelp of this Merchant.  # noqa: E501
        :rtype: str
        """
        return self._yelp

    @yelp.setter
    def yelp(self, yelp):
        """Sets the yelp of this Merchant.


        :param yelp: The yelp of this Merchant.  # noqa: E501
        :type: str
        """

        self._yelp = yelp

    @property
    def updated_at(self):
        """Gets the updated_at of this Merchant.  # noqa: E501


        :return: The updated_at of this Merchant.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Merchant.


        :param updated_at: The updated_at of this Merchant.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Merchant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
