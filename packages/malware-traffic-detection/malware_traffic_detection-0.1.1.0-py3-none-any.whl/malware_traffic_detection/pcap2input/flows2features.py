"""

    transform bytes (of flow ) to features.

"""

import os
import binascii
import numpy as np


def hex2decimal(bytes_v, fixed_size=100):
    hexst = binascii.hexlify(bytes_v)  # Hexadecimal representation of binary data.
    bytes_len = int(len(hexst) / 2)
    if bytes_len < fixed_size:
        hexst = hexst + b'00' * (fixed_size - bytes_len)
    else:
        hexst = hexst[:fixed_size * 2]
    integers_v = [int(hexst[i:i + 2], 16) for i in range(0, len(hexst), 2)]

    return integers_v


def load_data_from_flows_txt(in_dir, fixed_size=100):
    print(f'in_dir:{in_dir}')
    features_data = []

    def read_data(file):
        with open(file, 'rb') as in_hdr:
            bytes_v = in_hdr.read()

        return bytes_v

    for idx, file in enumerate(os.listdir(in_dir)):
        file_path = os.path.join(in_dir, file)
        # print(f'file={file_path}')
        bytes_v = read_data(file_path)
        if (len(binascii.hexlify(bytes_v)) / 2) < fixed_size / 2:  # do not use flows with too small information.
            # print(f'idx={idx}, file={file}')
            continue
        integers_v = hex2decimal(bytes_v, fixed_size=fixed_size)
        features_data.append(integers_v)

    print(
        f'load {len(os.listdir(in_dir))} flow files, just {len(features_data)} flows are larger than {int(fixed_size/2)} bytes.')

    return np.asarray(features_data, dtype='float')


def main():
    in_dir = '../data/Skype'
    # in_dir = '../data/Monday-WorkingHours_output_00001_20170703081536'
    features_data = load_data_from_flows_txt(in_dir)
    print(features_data[0, :])


if __name__ == '__main__':
    main()
