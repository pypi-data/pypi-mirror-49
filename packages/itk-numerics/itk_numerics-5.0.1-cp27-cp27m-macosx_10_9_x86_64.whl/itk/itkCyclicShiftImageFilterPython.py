# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkCyclicShiftImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkCyclicShiftImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkCyclicShiftImageFilterPython
            return _itkCyclicShiftImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkCyclicShiftImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkCyclicShiftImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkCyclicShiftImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import pyBasePython
import ITKCommonBasePython
import itkImageToImageFilterBPython
import itkImagePython
import stdcomplexPython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkRGBAPixelPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterAPython

def itkCyclicShiftImageFilterICF3ICF3_New():
  return itkCyclicShiftImageFilterICF3ICF3.New()


def itkCyclicShiftImageFilterICF2ICF2_New():
  return itkCyclicShiftImageFilterICF2ICF2.New()


def itkCyclicShiftImageFilterIF3IF3_New():
  return itkCyclicShiftImageFilterIF3IF3.New()


def itkCyclicShiftImageFilterIF2IF2_New():
  return itkCyclicShiftImageFilterIF2IF2.New()


def itkCyclicShiftImageFilterIUS3IUS3_New():
  return itkCyclicShiftImageFilterIUS3IUS3.New()


def itkCyclicShiftImageFilterIUS2IUS2_New():
  return itkCyclicShiftImageFilterIUS2IUS2.New()


def itkCyclicShiftImageFilterIUC3IUC3_New():
  return itkCyclicShiftImageFilterIUC3IUC3.New()


def itkCyclicShiftImageFilterIUC2IUC2_New():
  return itkCyclicShiftImageFilterIUC2IUC2.New()


def itkCyclicShiftImageFilterISS3ISS3_New():
  return itkCyclicShiftImageFilterISS3ISS3.New()


def itkCyclicShiftImageFilterISS2ISS2_New():
  return itkCyclicShiftImageFilterISS2ISS2.New()


def itkCyclicShiftImageFilterICVF43ICVF43_New():
  return itkCyclicShiftImageFilterICVF43ICVF43.New()


def itkCyclicShiftImageFilterICVF42ICVF42_New():
  return itkCyclicShiftImageFilterICVF42ICVF42.New()


def itkCyclicShiftImageFilterICVF33ICVF33_New():
  return itkCyclicShiftImageFilterICVF33ICVF33.New()


def itkCyclicShiftImageFilterICVF32ICVF32_New():
  return itkCyclicShiftImageFilterICVF32ICVF32.New()


def itkCyclicShiftImageFilterICVF23ICVF23_New():
  return itkCyclicShiftImageFilterICVF23ICVF23.New()


def itkCyclicShiftImageFilterICVF22ICVF22_New():
  return itkCyclicShiftImageFilterICVF22ICVF22.New()


def itkCyclicShiftImageFilterIVF43IVF43_New():
  return itkCyclicShiftImageFilterIVF43IVF43.New()


def itkCyclicShiftImageFilterIVF42IVF42_New():
  return itkCyclicShiftImageFilterIVF42IVF42.New()


def itkCyclicShiftImageFilterIVF33IVF33_New():
  return itkCyclicShiftImageFilterIVF33IVF33.New()


def itkCyclicShiftImageFilterIVF32IVF32_New():
  return itkCyclicShiftImageFilterIVF32IVF32.New()


def itkCyclicShiftImageFilterIVF23IVF23_New():
  return itkCyclicShiftImageFilterIVF23IVF23.New()


def itkCyclicShiftImageFilterIVF22IVF22_New():
  return itkCyclicShiftImageFilterIVF22IVF22.New()


def itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3_New():
  return itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3.New()


def itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2_New():
  return itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2.New()


def itkCyclicShiftImageFilterIRGBUC3IRGBUC3_New():
  return itkCyclicShiftImageFilterIRGBUC3IRGBUC3.New()


def itkCyclicShiftImageFilterIRGBUC2IRGBUC2_New():
  return itkCyclicShiftImageFilterIRGBUC2IRGBUC2.New()

class itkCyclicShiftImageFilterICF2ICF2(itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2):
    """


    Perform a cyclic spatial shift of image intensities on the image grid.

    This filter supports arbitrary cyclic shifts of pixel values on the
    image grid. If the Shift is set to [xOff, yOff], the value of the
    pixel at [0, 0] in the input image will be the value of the pixel in
    the output image at index [xOff modulo xSize, yOff modulo ySize] where
    xSize and ySize are the sizes of the image in the x and y dimensions,
    respectively. If a pixel value is moved across a boundary, the pixel
    value is wrapped around that boundary. For example, if the image is
    40-by-40 and the Shift is [13, 47], then the value of the pixel at [0,
    0] in the input image will be the value of the pixel in the output
    image at index [13, 7].

    Negative Shifts are supported. This filter also works with images
    whose largest possible region starts at a non-zero index.

    C++ includes: itkCyclicShiftImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkCyclicShiftImageFilterICF2ICF2_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICF2ICF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkCyclicShiftImageFilterICF2ICF2 self) -> itkCyclicShiftImageFilterICF2ICF2_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICF2ICF2_Clone(self)


    def SetShift(self, _arg):
        """
        SetShift(itkCyclicShiftImageFilterICF2ICF2 self, itkOffset2 _arg)

        Set/get the shift. Shifts
        may be positive or negative. 
        """
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICF2ICF2_SetShift(self, _arg)


    def GetShift(self):
        """GetShift(itkCyclicShiftImageFilterICF2ICF2 self) -> itkOffset2"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICF2ICF2_GetShift(self)

    __swig_destroy__ = _itkCyclicShiftImageFilterPython.delete_itkCyclicShiftImageFilterICF2ICF2

    def cast(obj):
        """cast(itkLightObject obj) -> itkCyclicShiftImageFilterICF2ICF2"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICF2ICF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCyclicShiftImageFilterICF2ICF2

        Create a new object of the class itkCyclicShiftImageFilterICF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCyclicShiftImageFilterICF2ICF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCyclicShiftImageFilterICF2ICF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCyclicShiftImageFilterICF2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCyclicShiftImageFilterICF2ICF2.Clone = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICF2ICF2_Clone, None, itkCyclicShiftImageFilterICF2ICF2)
itkCyclicShiftImageFilterICF2ICF2.SetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICF2ICF2_SetShift, None, itkCyclicShiftImageFilterICF2ICF2)
itkCyclicShiftImageFilterICF2ICF2.GetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICF2ICF2_GetShift, None, itkCyclicShiftImageFilterICF2ICF2)
itkCyclicShiftImageFilterICF2ICF2_swigregister = _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICF2ICF2_swigregister
itkCyclicShiftImageFilterICF2ICF2_swigregister(itkCyclicShiftImageFilterICF2ICF2)

def itkCyclicShiftImageFilterICF2ICF2___New_orig__():
    """itkCyclicShiftImageFilterICF2ICF2___New_orig__() -> itkCyclicShiftImageFilterICF2ICF2_Pointer"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICF2ICF2___New_orig__()

def itkCyclicShiftImageFilterICF2ICF2_cast(obj):
    """itkCyclicShiftImageFilterICF2ICF2_cast(itkLightObject obj) -> itkCyclicShiftImageFilterICF2ICF2"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICF2ICF2_cast(obj)

class itkCyclicShiftImageFilterICF3ICF3(itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3):
    """


    Perform a cyclic spatial shift of image intensities on the image grid.

    This filter supports arbitrary cyclic shifts of pixel values on the
    image grid. If the Shift is set to [xOff, yOff], the value of the
    pixel at [0, 0] in the input image will be the value of the pixel in
    the output image at index [xOff modulo xSize, yOff modulo ySize] where
    xSize and ySize are the sizes of the image in the x and y dimensions,
    respectively. If a pixel value is moved across a boundary, the pixel
    value is wrapped around that boundary. For example, if the image is
    40-by-40 and the Shift is [13, 47], then the value of the pixel at [0,
    0] in the input image will be the value of the pixel in the output
    image at index [13, 7].

    Negative Shifts are supported. This filter also works with images
    whose largest possible region starts at a non-zero index.

    C++ includes: itkCyclicShiftImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkCyclicShiftImageFilterICF3ICF3_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICF3ICF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkCyclicShiftImageFilterICF3ICF3 self) -> itkCyclicShiftImageFilterICF3ICF3_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICF3ICF3_Clone(self)


    def SetShift(self, _arg):
        """
        SetShift(itkCyclicShiftImageFilterICF3ICF3 self, itkOffset3 _arg)

        Set/get the shift. Shifts
        may be positive or negative. 
        """
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICF3ICF3_SetShift(self, _arg)


    def GetShift(self):
        """GetShift(itkCyclicShiftImageFilterICF3ICF3 self) -> itkOffset3"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICF3ICF3_GetShift(self)

    __swig_destroy__ = _itkCyclicShiftImageFilterPython.delete_itkCyclicShiftImageFilterICF3ICF3

    def cast(obj):
        """cast(itkLightObject obj) -> itkCyclicShiftImageFilterICF3ICF3"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICF3ICF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCyclicShiftImageFilterICF3ICF3

        Create a new object of the class itkCyclicShiftImageFilterICF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCyclicShiftImageFilterICF3ICF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCyclicShiftImageFilterICF3ICF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCyclicShiftImageFilterICF3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCyclicShiftImageFilterICF3ICF3.Clone = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICF3ICF3_Clone, None, itkCyclicShiftImageFilterICF3ICF3)
itkCyclicShiftImageFilterICF3ICF3.SetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICF3ICF3_SetShift, None, itkCyclicShiftImageFilterICF3ICF3)
itkCyclicShiftImageFilterICF3ICF3.GetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICF3ICF3_GetShift, None, itkCyclicShiftImageFilterICF3ICF3)
itkCyclicShiftImageFilterICF3ICF3_swigregister = _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICF3ICF3_swigregister
itkCyclicShiftImageFilterICF3ICF3_swigregister(itkCyclicShiftImageFilterICF3ICF3)

def itkCyclicShiftImageFilterICF3ICF3___New_orig__():
    """itkCyclicShiftImageFilterICF3ICF3___New_orig__() -> itkCyclicShiftImageFilterICF3ICF3_Pointer"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICF3ICF3___New_orig__()

def itkCyclicShiftImageFilterICF3ICF3_cast(obj):
    """itkCyclicShiftImageFilterICF3ICF3_cast(itkLightObject obj) -> itkCyclicShiftImageFilterICF3ICF3"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICF3ICF3_cast(obj)

class itkCyclicShiftImageFilterICVF22ICVF22(itkImageToImageFilterAPython.itkImageToImageFilterICVF22ICVF22):
    """


    Perform a cyclic spatial shift of image intensities on the image grid.

    This filter supports arbitrary cyclic shifts of pixel values on the
    image grid. If the Shift is set to [xOff, yOff], the value of the
    pixel at [0, 0] in the input image will be the value of the pixel in
    the output image at index [xOff modulo xSize, yOff modulo ySize] where
    xSize and ySize are the sizes of the image in the x and y dimensions,
    respectively. If a pixel value is moved across a boundary, the pixel
    value is wrapped around that boundary. For example, if the image is
    40-by-40 and the Shift is [13, 47], then the value of the pixel at [0,
    0] in the input image will be the value of the pixel in the output
    image at index [13, 7].

    Negative Shifts are supported. This filter also works with images
    whose largest possible region starts at a non-zero index.

    C++ includes: itkCyclicShiftImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkCyclicShiftImageFilterICVF22ICVF22_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF22ICVF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkCyclicShiftImageFilterICVF22ICVF22 self) -> itkCyclicShiftImageFilterICVF22ICVF22_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF22ICVF22_Clone(self)


    def SetShift(self, _arg):
        """
        SetShift(itkCyclicShiftImageFilterICVF22ICVF22 self, itkOffset2 _arg)

        Set/get the shift. Shifts
        may be positive or negative. 
        """
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF22ICVF22_SetShift(self, _arg)


    def GetShift(self):
        """GetShift(itkCyclicShiftImageFilterICVF22ICVF22 self) -> itkOffset2"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF22ICVF22_GetShift(self)

    __swig_destroy__ = _itkCyclicShiftImageFilterPython.delete_itkCyclicShiftImageFilterICVF22ICVF22

    def cast(obj):
        """cast(itkLightObject obj) -> itkCyclicShiftImageFilterICVF22ICVF22"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF22ICVF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCyclicShiftImageFilterICVF22ICVF22

        Create a new object of the class itkCyclicShiftImageFilterICVF22ICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCyclicShiftImageFilterICVF22ICVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCyclicShiftImageFilterICVF22ICVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCyclicShiftImageFilterICVF22ICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCyclicShiftImageFilterICVF22ICVF22.Clone = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF22ICVF22_Clone, None, itkCyclicShiftImageFilterICVF22ICVF22)
itkCyclicShiftImageFilterICVF22ICVF22.SetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF22ICVF22_SetShift, None, itkCyclicShiftImageFilterICVF22ICVF22)
itkCyclicShiftImageFilterICVF22ICVF22.GetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF22ICVF22_GetShift, None, itkCyclicShiftImageFilterICVF22ICVF22)
itkCyclicShiftImageFilterICVF22ICVF22_swigregister = _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF22ICVF22_swigregister
itkCyclicShiftImageFilterICVF22ICVF22_swigregister(itkCyclicShiftImageFilterICVF22ICVF22)

def itkCyclicShiftImageFilterICVF22ICVF22___New_orig__():
    """itkCyclicShiftImageFilterICVF22ICVF22___New_orig__() -> itkCyclicShiftImageFilterICVF22ICVF22_Pointer"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF22ICVF22___New_orig__()

def itkCyclicShiftImageFilterICVF22ICVF22_cast(obj):
    """itkCyclicShiftImageFilterICVF22ICVF22_cast(itkLightObject obj) -> itkCyclicShiftImageFilterICVF22ICVF22"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF22ICVF22_cast(obj)

class itkCyclicShiftImageFilterICVF23ICVF23(itkImageToImageFilterAPython.itkImageToImageFilterICVF23ICVF23):
    """


    Perform a cyclic spatial shift of image intensities on the image grid.

    This filter supports arbitrary cyclic shifts of pixel values on the
    image grid. If the Shift is set to [xOff, yOff], the value of the
    pixel at [0, 0] in the input image will be the value of the pixel in
    the output image at index [xOff modulo xSize, yOff modulo ySize] where
    xSize and ySize are the sizes of the image in the x and y dimensions,
    respectively. If a pixel value is moved across a boundary, the pixel
    value is wrapped around that boundary. For example, if the image is
    40-by-40 and the Shift is [13, 47], then the value of the pixel at [0,
    0] in the input image will be the value of the pixel in the output
    image at index [13, 7].

    Negative Shifts are supported. This filter also works with images
    whose largest possible region starts at a non-zero index.

    C++ includes: itkCyclicShiftImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkCyclicShiftImageFilterICVF23ICVF23_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF23ICVF23___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkCyclicShiftImageFilterICVF23ICVF23 self) -> itkCyclicShiftImageFilterICVF23ICVF23_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF23ICVF23_Clone(self)


    def SetShift(self, _arg):
        """
        SetShift(itkCyclicShiftImageFilterICVF23ICVF23 self, itkOffset3 _arg)

        Set/get the shift. Shifts
        may be positive or negative. 
        """
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF23ICVF23_SetShift(self, _arg)


    def GetShift(self):
        """GetShift(itkCyclicShiftImageFilterICVF23ICVF23 self) -> itkOffset3"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF23ICVF23_GetShift(self)

    __swig_destroy__ = _itkCyclicShiftImageFilterPython.delete_itkCyclicShiftImageFilterICVF23ICVF23

    def cast(obj):
        """cast(itkLightObject obj) -> itkCyclicShiftImageFilterICVF23ICVF23"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF23ICVF23_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCyclicShiftImageFilterICVF23ICVF23

        Create a new object of the class itkCyclicShiftImageFilterICVF23ICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCyclicShiftImageFilterICVF23ICVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCyclicShiftImageFilterICVF23ICVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCyclicShiftImageFilterICVF23ICVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCyclicShiftImageFilterICVF23ICVF23.Clone = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF23ICVF23_Clone, None, itkCyclicShiftImageFilterICVF23ICVF23)
itkCyclicShiftImageFilterICVF23ICVF23.SetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF23ICVF23_SetShift, None, itkCyclicShiftImageFilterICVF23ICVF23)
itkCyclicShiftImageFilterICVF23ICVF23.GetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF23ICVF23_GetShift, None, itkCyclicShiftImageFilterICVF23ICVF23)
itkCyclicShiftImageFilterICVF23ICVF23_swigregister = _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF23ICVF23_swigregister
itkCyclicShiftImageFilterICVF23ICVF23_swigregister(itkCyclicShiftImageFilterICVF23ICVF23)

def itkCyclicShiftImageFilterICVF23ICVF23___New_orig__():
    """itkCyclicShiftImageFilterICVF23ICVF23___New_orig__() -> itkCyclicShiftImageFilterICVF23ICVF23_Pointer"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF23ICVF23___New_orig__()

def itkCyclicShiftImageFilterICVF23ICVF23_cast(obj):
    """itkCyclicShiftImageFilterICVF23ICVF23_cast(itkLightObject obj) -> itkCyclicShiftImageFilterICVF23ICVF23"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF23ICVF23_cast(obj)

class itkCyclicShiftImageFilterICVF32ICVF32(itkImageToImageFilterAPython.itkImageToImageFilterICVF32ICVF32):
    """


    Perform a cyclic spatial shift of image intensities on the image grid.

    This filter supports arbitrary cyclic shifts of pixel values on the
    image grid. If the Shift is set to [xOff, yOff], the value of the
    pixel at [0, 0] in the input image will be the value of the pixel in
    the output image at index [xOff modulo xSize, yOff modulo ySize] where
    xSize and ySize are the sizes of the image in the x and y dimensions,
    respectively. If a pixel value is moved across a boundary, the pixel
    value is wrapped around that boundary. For example, if the image is
    40-by-40 and the Shift is [13, 47], then the value of the pixel at [0,
    0] in the input image will be the value of the pixel in the output
    image at index [13, 7].

    Negative Shifts are supported. This filter also works with images
    whose largest possible region starts at a non-zero index.

    C++ includes: itkCyclicShiftImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkCyclicShiftImageFilterICVF32ICVF32_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF32ICVF32___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkCyclicShiftImageFilterICVF32ICVF32 self) -> itkCyclicShiftImageFilterICVF32ICVF32_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF32ICVF32_Clone(self)


    def SetShift(self, _arg):
        """
        SetShift(itkCyclicShiftImageFilterICVF32ICVF32 self, itkOffset2 _arg)

        Set/get the shift. Shifts
        may be positive or negative. 
        """
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF32ICVF32_SetShift(self, _arg)


    def GetShift(self):
        """GetShift(itkCyclicShiftImageFilterICVF32ICVF32 self) -> itkOffset2"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF32ICVF32_GetShift(self)

    __swig_destroy__ = _itkCyclicShiftImageFilterPython.delete_itkCyclicShiftImageFilterICVF32ICVF32

    def cast(obj):
        """cast(itkLightObject obj) -> itkCyclicShiftImageFilterICVF32ICVF32"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF32ICVF32_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCyclicShiftImageFilterICVF32ICVF32

        Create a new object of the class itkCyclicShiftImageFilterICVF32ICVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCyclicShiftImageFilterICVF32ICVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCyclicShiftImageFilterICVF32ICVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCyclicShiftImageFilterICVF32ICVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCyclicShiftImageFilterICVF32ICVF32.Clone = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF32ICVF32_Clone, None, itkCyclicShiftImageFilterICVF32ICVF32)
itkCyclicShiftImageFilterICVF32ICVF32.SetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF32ICVF32_SetShift, None, itkCyclicShiftImageFilterICVF32ICVF32)
itkCyclicShiftImageFilterICVF32ICVF32.GetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF32ICVF32_GetShift, None, itkCyclicShiftImageFilterICVF32ICVF32)
itkCyclicShiftImageFilterICVF32ICVF32_swigregister = _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF32ICVF32_swigregister
itkCyclicShiftImageFilterICVF32ICVF32_swigregister(itkCyclicShiftImageFilterICVF32ICVF32)

def itkCyclicShiftImageFilterICVF32ICVF32___New_orig__():
    """itkCyclicShiftImageFilterICVF32ICVF32___New_orig__() -> itkCyclicShiftImageFilterICVF32ICVF32_Pointer"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF32ICVF32___New_orig__()

def itkCyclicShiftImageFilterICVF32ICVF32_cast(obj):
    """itkCyclicShiftImageFilterICVF32ICVF32_cast(itkLightObject obj) -> itkCyclicShiftImageFilterICVF32ICVF32"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF32ICVF32_cast(obj)

class itkCyclicShiftImageFilterICVF33ICVF33(itkImageToImageFilterAPython.itkImageToImageFilterICVF33ICVF33):
    """


    Perform a cyclic spatial shift of image intensities on the image grid.

    This filter supports arbitrary cyclic shifts of pixel values on the
    image grid. If the Shift is set to [xOff, yOff], the value of the
    pixel at [0, 0] in the input image will be the value of the pixel in
    the output image at index [xOff modulo xSize, yOff modulo ySize] where
    xSize and ySize are the sizes of the image in the x and y dimensions,
    respectively. If a pixel value is moved across a boundary, the pixel
    value is wrapped around that boundary. For example, if the image is
    40-by-40 and the Shift is [13, 47], then the value of the pixel at [0,
    0] in the input image will be the value of the pixel in the output
    image at index [13, 7].

    Negative Shifts are supported. This filter also works with images
    whose largest possible region starts at a non-zero index.

    C++ includes: itkCyclicShiftImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkCyclicShiftImageFilterICVF33ICVF33_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF33ICVF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkCyclicShiftImageFilterICVF33ICVF33 self) -> itkCyclicShiftImageFilterICVF33ICVF33_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF33ICVF33_Clone(self)


    def SetShift(self, _arg):
        """
        SetShift(itkCyclicShiftImageFilterICVF33ICVF33 self, itkOffset3 _arg)

        Set/get the shift. Shifts
        may be positive or negative. 
        """
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF33ICVF33_SetShift(self, _arg)


    def GetShift(self):
        """GetShift(itkCyclicShiftImageFilterICVF33ICVF33 self) -> itkOffset3"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF33ICVF33_GetShift(self)

    __swig_destroy__ = _itkCyclicShiftImageFilterPython.delete_itkCyclicShiftImageFilterICVF33ICVF33

    def cast(obj):
        """cast(itkLightObject obj) -> itkCyclicShiftImageFilterICVF33ICVF33"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF33ICVF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCyclicShiftImageFilterICVF33ICVF33

        Create a new object of the class itkCyclicShiftImageFilterICVF33ICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCyclicShiftImageFilterICVF33ICVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCyclicShiftImageFilterICVF33ICVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCyclicShiftImageFilterICVF33ICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCyclicShiftImageFilterICVF33ICVF33.Clone = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF33ICVF33_Clone, None, itkCyclicShiftImageFilterICVF33ICVF33)
itkCyclicShiftImageFilterICVF33ICVF33.SetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF33ICVF33_SetShift, None, itkCyclicShiftImageFilterICVF33ICVF33)
itkCyclicShiftImageFilterICVF33ICVF33.GetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF33ICVF33_GetShift, None, itkCyclicShiftImageFilterICVF33ICVF33)
itkCyclicShiftImageFilterICVF33ICVF33_swigregister = _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF33ICVF33_swigregister
itkCyclicShiftImageFilterICVF33ICVF33_swigregister(itkCyclicShiftImageFilterICVF33ICVF33)

def itkCyclicShiftImageFilterICVF33ICVF33___New_orig__():
    """itkCyclicShiftImageFilterICVF33ICVF33___New_orig__() -> itkCyclicShiftImageFilterICVF33ICVF33_Pointer"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF33ICVF33___New_orig__()

def itkCyclicShiftImageFilterICVF33ICVF33_cast(obj):
    """itkCyclicShiftImageFilterICVF33ICVF33_cast(itkLightObject obj) -> itkCyclicShiftImageFilterICVF33ICVF33"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF33ICVF33_cast(obj)

class itkCyclicShiftImageFilterICVF42ICVF42(itkImageToImageFilterAPython.itkImageToImageFilterICVF42ICVF42):
    """


    Perform a cyclic spatial shift of image intensities on the image grid.

    This filter supports arbitrary cyclic shifts of pixel values on the
    image grid. If the Shift is set to [xOff, yOff], the value of the
    pixel at [0, 0] in the input image will be the value of the pixel in
    the output image at index [xOff modulo xSize, yOff modulo ySize] where
    xSize and ySize are the sizes of the image in the x and y dimensions,
    respectively. If a pixel value is moved across a boundary, the pixel
    value is wrapped around that boundary. For example, if the image is
    40-by-40 and the Shift is [13, 47], then the value of the pixel at [0,
    0] in the input image will be the value of the pixel in the output
    image at index [13, 7].

    Negative Shifts are supported. This filter also works with images
    whose largest possible region starts at a non-zero index.

    C++ includes: itkCyclicShiftImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkCyclicShiftImageFilterICVF42ICVF42_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF42ICVF42___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkCyclicShiftImageFilterICVF42ICVF42 self) -> itkCyclicShiftImageFilterICVF42ICVF42_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF42ICVF42_Clone(self)


    def SetShift(self, _arg):
        """
        SetShift(itkCyclicShiftImageFilterICVF42ICVF42 self, itkOffset2 _arg)

        Set/get the shift. Shifts
        may be positive or negative. 
        """
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF42ICVF42_SetShift(self, _arg)


    def GetShift(self):
        """GetShift(itkCyclicShiftImageFilterICVF42ICVF42 self) -> itkOffset2"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF42ICVF42_GetShift(self)

    __swig_destroy__ = _itkCyclicShiftImageFilterPython.delete_itkCyclicShiftImageFilterICVF42ICVF42

    def cast(obj):
        """cast(itkLightObject obj) -> itkCyclicShiftImageFilterICVF42ICVF42"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF42ICVF42_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCyclicShiftImageFilterICVF42ICVF42

        Create a new object of the class itkCyclicShiftImageFilterICVF42ICVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCyclicShiftImageFilterICVF42ICVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCyclicShiftImageFilterICVF42ICVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCyclicShiftImageFilterICVF42ICVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCyclicShiftImageFilterICVF42ICVF42.Clone = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF42ICVF42_Clone, None, itkCyclicShiftImageFilterICVF42ICVF42)
itkCyclicShiftImageFilterICVF42ICVF42.SetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF42ICVF42_SetShift, None, itkCyclicShiftImageFilterICVF42ICVF42)
itkCyclicShiftImageFilterICVF42ICVF42.GetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF42ICVF42_GetShift, None, itkCyclicShiftImageFilterICVF42ICVF42)
itkCyclicShiftImageFilterICVF42ICVF42_swigregister = _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF42ICVF42_swigregister
itkCyclicShiftImageFilterICVF42ICVF42_swigregister(itkCyclicShiftImageFilterICVF42ICVF42)

def itkCyclicShiftImageFilterICVF42ICVF42___New_orig__():
    """itkCyclicShiftImageFilterICVF42ICVF42___New_orig__() -> itkCyclicShiftImageFilterICVF42ICVF42_Pointer"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF42ICVF42___New_orig__()

def itkCyclicShiftImageFilterICVF42ICVF42_cast(obj):
    """itkCyclicShiftImageFilterICVF42ICVF42_cast(itkLightObject obj) -> itkCyclicShiftImageFilterICVF42ICVF42"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF42ICVF42_cast(obj)

class itkCyclicShiftImageFilterICVF43ICVF43(itkImageToImageFilterAPython.itkImageToImageFilterICVF43ICVF43):
    """


    Perform a cyclic spatial shift of image intensities on the image grid.

    This filter supports arbitrary cyclic shifts of pixel values on the
    image grid. If the Shift is set to [xOff, yOff], the value of the
    pixel at [0, 0] in the input image will be the value of the pixel in
    the output image at index [xOff modulo xSize, yOff modulo ySize] where
    xSize and ySize are the sizes of the image in the x and y dimensions,
    respectively. If a pixel value is moved across a boundary, the pixel
    value is wrapped around that boundary. For example, if the image is
    40-by-40 and the Shift is [13, 47], then the value of the pixel at [0,
    0] in the input image will be the value of the pixel in the output
    image at index [13, 7].

    Negative Shifts are supported. This filter also works with images
    whose largest possible region starts at a non-zero index.

    C++ includes: itkCyclicShiftImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkCyclicShiftImageFilterICVF43ICVF43_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF43ICVF43___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkCyclicShiftImageFilterICVF43ICVF43 self) -> itkCyclicShiftImageFilterICVF43ICVF43_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF43ICVF43_Clone(self)


    def SetShift(self, _arg):
        """
        SetShift(itkCyclicShiftImageFilterICVF43ICVF43 self, itkOffset3 _arg)

        Set/get the shift. Shifts
        may be positive or negative. 
        """
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF43ICVF43_SetShift(self, _arg)


    def GetShift(self):
        """GetShift(itkCyclicShiftImageFilterICVF43ICVF43 self) -> itkOffset3"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF43ICVF43_GetShift(self)

    __swig_destroy__ = _itkCyclicShiftImageFilterPython.delete_itkCyclicShiftImageFilterICVF43ICVF43

    def cast(obj):
        """cast(itkLightObject obj) -> itkCyclicShiftImageFilterICVF43ICVF43"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF43ICVF43_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCyclicShiftImageFilterICVF43ICVF43

        Create a new object of the class itkCyclicShiftImageFilterICVF43ICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCyclicShiftImageFilterICVF43ICVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCyclicShiftImageFilterICVF43ICVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCyclicShiftImageFilterICVF43ICVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCyclicShiftImageFilterICVF43ICVF43.Clone = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF43ICVF43_Clone, None, itkCyclicShiftImageFilterICVF43ICVF43)
itkCyclicShiftImageFilterICVF43ICVF43.SetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF43ICVF43_SetShift, None, itkCyclicShiftImageFilterICVF43ICVF43)
itkCyclicShiftImageFilterICVF43ICVF43.GetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF43ICVF43_GetShift, None, itkCyclicShiftImageFilterICVF43ICVF43)
itkCyclicShiftImageFilterICVF43ICVF43_swigregister = _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF43ICVF43_swigregister
itkCyclicShiftImageFilterICVF43ICVF43_swigregister(itkCyclicShiftImageFilterICVF43ICVF43)

def itkCyclicShiftImageFilterICVF43ICVF43___New_orig__():
    """itkCyclicShiftImageFilterICVF43ICVF43___New_orig__() -> itkCyclicShiftImageFilterICVF43ICVF43_Pointer"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF43ICVF43___New_orig__()

def itkCyclicShiftImageFilterICVF43ICVF43_cast(obj):
    """itkCyclicShiftImageFilterICVF43ICVF43_cast(itkLightObject obj) -> itkCyclicShiftImageFilterICVF43ICVF43"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF43ICVF43_cast(obj)

class itkCyclicShiftImageFilterIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """


    Perform a cyclic spatial shift of image intensities on the image grid.

    This filter supports arbitrary cyclic shifts of pixel values on the
    image grid. If the Shift is set to [xOff, yOff], the value of the
    pixel at [0, 0] in the input image will be the value of the pixel in
    the output image at index [xOff modulo xSize, yOff modulo ySize] where
    xSize and ySize are the sizes of the image in the x and y dimensions,
    respectively. If a pixel value is moved across a boundary, the pixel
    value is wrapped around that boundary. For example, if the image is
    40-by-40 and the Shift is [13, 47], then the value of the pixel at [0,
    0] in the input image will be the value of the pixel in the output
    image at index [13, 7].

    Negative Shifts are supported. This filter also works with images
    whose largest possible region starts at a non-zero index.

    C++ includes: itkCyclicShiftImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkCyclicShiftImageFilterIF2IF2_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkCyclicShiftImageFilterIF2IF2 self) -> itkCyclicShiftImageFilterIF2IF2_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIF2IF2_Clone(self)


    def SetShift(self, _arg):
        """
        SetShift(itkCyclicShiftImageFilterIF2IF2 self, itkOffset2 _arg)

        Set/get the shift. Shifts
        may be positive or negative. 
        """
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIF2IF2_SetShift(self, _arg)


    def GetShift(self):
        """GetShift(itkCyclicShiftImageFilterIF2IF2 self) -> itkOffset2"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIF2IF2_GetShift(self)

    __swig_destroy__ = _itkCyclicShiftImageFilterPython.delete_itkCyclicShiftImageFilterIF2IF2

    def cast(obj):
        """cast(itkLightObject obj) -> itkCyclicShiftImageFilterIF2IF2"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCyclicShiftImageFilterIF2IF2

        Create a new object of the class itkCyclicShiftImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCyclicShiftImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCyclicShiftImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCyclicShiftImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCyclicShiftImageFilterIF2IF2.Clone = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIF2IF2_Clone, None, itkCyclicShiftImageFilterIF2IF2)
itkCyclicShiftImageFilterIF2IF2.SetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIF2IF2_SetShift, None, itkCyclicShiftImageFilterIF2IF2)
itkCyclicShiftImageFilterIF2IF2.GetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIF2IF2_GetShift, None, itkCyclicShiftImageFilterIF2IF2)
itkCyclicShiftImageFilterIF2IF2_swigregister = _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIF2IF2_swigregister
itkCyclicShiftImageFilterIF2IF2_swigregister(itkCyclicShiftImageFilterIF2IF2)

def itkCyclicShiftImageFilterIF2IF2___New_orig__():
    """itkCyclicShiftImageFilterIF2IF2___New_orig__() -> itkCyclicShiftImageFilterIF2IF2_Pointer"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIF2IF2___New_orig__()

def itkCyclicShiftImageFilterIF2IF2_cast(obj):
    """itkCyclicShiftImageFilterIF2IF2_cast(itkLightObject obj) -> itkCyclicShiftImageFilterIF2IF2"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIF2IF2_cast(obj)

class itkCyclicShiftImageFilterIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    Perform a cyclic spatial shift of image intensities on the image grid.

    This filter supports arbitrary cyclic shifts of pixel values on the
    image grid. If the Shift is set to [xOff, yOff], the value of the
    pixel at [0, 0] in the input image will be the value of the pixel in
    the output image at index [xOff modulo xSize, yOff modulo ySize] where
    xSize and ySize are the sizes of the image in the x and y dimensions,
    respectively. If a pixel value is moved across a boundary, the pixel
    value is wrapped around that boundary. For example, if the image is
    40-by-40 and the Shift is [13, 47], then the value of the pixel at [0,
    0] in the input image will be the value of the pixel in the output
    image at index [13, 7].

    Negative Shifts are supported. This filter also works with images
    whose largest possible region starts at a non-zero index.

    C++ includes: itkCyclicShiftImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkCyclicShiftImageFilterIF3IF3_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkCyclicShiftImageFilterIF3IF3 self) -> itkCyclicShiftImageFilterIF3IF3_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIF3IF3_Clone(self)


    def SetShift(self, _arg):
        """
        SetShift(itkCyclicShiftImageFilterIF3IF3 self, itkOffset3 _arg)

        Set/get the shift. Shifts
        may be positive or negative. 
        """
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIF3IF3_SetShift(self, _arg)


    def GetShift(self):
        """GetShift(itkCyclicShiftImageFilterIF3IF3 self) -> itkOffset3"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIF3IF3_GetShift(self)

    __swig_destroy__ = _itkCyclicShiftImageFilterPython.delete_itkCyclicShiftImageFilterIF3IF3

    def cast(obj):
        """cast(itkLightObject obj) -> itkCyclicShiftImageFilterIF3IF3"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCyclicShiftImageFilterIF3IF3

        Create a new object of the class itkCyclicShiftImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCyclicShiftImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCyclicShiftImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCyclicShiftImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCyclicShiftImageFilterIF3IF3.Clone = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIF3IF3_Clone, None, itkCyclicShiftImageFilterIF3IF3)
itkCyclicShiftImageFilterIF3IF3.SetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIF3IF3_SetShift, None, itkCyclicShiftImageFilterIF3IF3)
itkCyclicShiftImageFilterIF3IF3.GetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIF3IF3_GetShift, None, itkCyclicShiftImageFilterIF3IF3)
itkCyclicShiftImageFilterIF3IF3_swigregister = _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIF3IF3_swigregister
itkCyclicShiftImageFilterIF3IF3_swigregister(itkCyclicShiftImageFilterIF3IF3)

def itkCyclicShiftImageFilterIF3IF3___New_orig__():
    """itkCyclicShiftImageFilterIF3IF3___New_orig__() -> itkCyclicShiftImageFilterIF3IF3_Pointer"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIF3IF3___New_orig__()

def itkCyclicShiftImageFilterIF3IF3_cast(obj):
    """itkCyclicShiftImageFilterIF3IF3_cast(itkLightObject obj) -> itkCyclicShiftImageFilterIF3IF3"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIF3IF3_cast(obj)

class itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2(itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC2IRGBAUC2):
    """


    Perform a cyclic spatial shift of image intensities on the image grid.

    This filter supports arbitrary cyclic shifts of pixel values on the
    image grid. If the Shift is set to [xOff, yOff], the value of the
    pixel at [0, 0] in the input image will be the value of the pixel in
    the output image at index [xOff modulo xSize, yOff modulo ySize] where
    xSize and ySize are the sizes of the image in the x and y dimensions,
    respectively. If a pixel value is moved across a boundary, the pixel
    value is wrapped around that boundary. For example, if the image is
    40-by-40 and the Shift is [13, 47], then the value of the pixel at [0,
    0] in the input image will be the value of the pixel in the output
    image at index [13, 7].

    Negative Shifts are supported. This filter also works with images
    whose largest possible region starts at a non-zero index.

    C++ includes: itkCyclicShiftImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2 self) -> itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2_Clone(self)


    def SetShift(self, _arg):
        """
        SetShift(itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2 self, itkOffset2 _arg)

        Set/get the shift. Shifts
        may be positive or negative. 
        """
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2_SetShift(self, _arg)


    def GetShift(self):
        """GetShift(itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2 self) -> itkOffset2"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2_GetShift(self)

    __swig_destroy__ = _itkCyclicShiftImageFilterPython.delete_itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2

    def cast(obj):
        """cast(itkLightObject obj) -> itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2

        Create a new object of the class itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2.Clone = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2_Clone, None, itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2)
itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2.SetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2_SetShift, None, itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2)
itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2.GetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2_GetShift, None, itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2)
itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2_swigregister = _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2_swigregister
itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2_swigregister(itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2)

def itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2___New_orig__():
    """itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2___New_orig__() -> itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2_Pointer"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2___New_orig__()

def itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2_cast(obj):
    """itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2_cast(itkLightObject obj) -> itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2_cast(obj)

class itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3(itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC3IRGBAUC3):
    """


    Perform a cyclic spatial shift of image intensities on the image grid.

    This filter supports arbitrary cyclic shifts of pixel values on the
    image grid. If the Shift is set to [xOff, yOff], the value of the
    pixel at [0, 0] in the input image will be the value of the pixel in
    the output image at index [xOff modulo xSize, yOff modulo ySize] where
    xSize and ySize are the sizes of the image in the x and y dimensions,
    respectively. If a pixel value is moved across a boundary, the pixel
    value is wrapped around that boundary. For example, if the image is
    40-by-40 and the Shift is [13, 47], then the value of the pixel at [0,
    0] in the input image will be the value of the pixel in the output
    image at index [13, 7].

    Negative Shifts are supported. This filter also works with images
    whose largest possible region starts at a non-zero index.

    C++ includes: itkCyclicShiftImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3 self) -> itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3_Clone(self)


    def SetShift(self, _arg):
        """
        SetShift(itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3 self, itkOffset3 _arg)

        Set/get the shift. Shifts
        may be positive or negative. 
        """
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3_SetShift(self, _arg)


    def GetShift(self):
        """GetShift(itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3 self) -> itkOffset3"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3_GetShift(self)

    __swig_destroy__ = _itkCyclicShiftImageFilterPython.delete_itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3

    def cast(obj):
        """cast(itkLightObject obj) -> itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3

        Create a new object of the class itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3.Clone = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3_Clone, None, itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3)
itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3.SetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3_SetShift, None, itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3)
itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3.GetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3_GetShift, None, itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3)
itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3_swigregister = _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3_swigregister
itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3_swigregister(itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3)

def itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3___New_orig__():
    """itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3___New_orig__() -> itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3_Pointer"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3___New_orig__()

def itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3_cast(obj):
    """itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3_cast(itkLightObject obj) -> itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3_cast(obj)

class itkCyclicShiftImageFilterIRGBUC2IRGBUC2(itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC2IRGBUC2):
    """


    Perform a cyclic spatial shift of image intensities on the image grid.

    This filter supports arbitrary cyclic shifts of pixel values on the
    image grid. If the Shift is set to [xOff, yOff], the value of the
    pixel at [0, 0] in the input image will be the value of the pixel in
    the output image at index [xOff modulo xSize, yOff modulo ySize] where
    xSize and ySize are the sizes of the image in the x and y dimensions,
    respectively. If a pixel value is moved across a boundary, the pixel
    value is wrapped around that boundary. For example, if the image is
    40-by-40 and the Shift is [13, 47], then the value of the pixel at [0,
    0] in the input image will be the value of the pixel in the output
    image at index [13, 7].

    Negative Shifts are supported. This filter also works with images
    whose largest possible region starts at a non-zero index.

    C++ includes: itkCyclicShiftImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkCyclicShiftImageFilterIRGBUC2IRGBUC2_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBUC2IRGBUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkCyclicShiftImageFilterIRGBUC2IRGBUC2 self) -> itkCyclicShiftImageFilterIRGBUC2IRGBUC2_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBUC2IRGBUC2_Clone(self)


    def SetShift(self, _arg):
        """
        SetShift(itkCyclicShiftImageFilterIRGBUC2IRGBUC2 self, itkOffset2 _arg)

        Set/get the shift. Shifts
        may be positive or negative. 
        """
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBUC2IRGBUC2_SetShift(self, _arg)


    def GetShift(self):
        """GetShift(itkCyclicShiftImageFilterIRGBUC2IRGBUC2 self) -> itkOffset2"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBUC2IRGBUC2_GetShift(self)

    __swig_destroy__ = _itkCyclicShiftImageFilterPython.delete_itkCyclicShiftImageFilterIRGBUC2IRGBUC2

    def cast(obj):
        """cast(itkLightObject obj) -> itkCyclicShiftImageFilterIRGBUC2IRGBUC2"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBUC2IRGBUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCyclicShiftImageFilterIRGBUC2IRGBUC2

        Create a new object of the class itkCyclicShiftImageFilterIRGBUC2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCyclicShiftImageFilterIRGBUC2IRGBUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCyclicShiftImageFilterIRGBUC2IRGBUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCyclicShiftImageFilterIRGBUC2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCyclicShiftImageFilterIRGBUC2IRGBUC2.Clone = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBUC2IRGBUC2_Clone, None, itkCyclicShiftImageFilterIRGBUC2IRGBUC2)
itkCyclicShiftImageFilterIRGBUC2IRGBUC2.SetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBUC2IRGBUC2_SetShift, None, itkCyclicShiftImageFilterIRGBUC2IRGBUC2)
itkCyclicShiftImageFilterIRGBUC2IRGBUC2.GetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBUC2IRGBUC2_GetShift, None, itkCyclicShiftImageFilterIRGBUC2IRGBUC2)
itkCyclicShiftImageFilterIRGBUC2IRGBUC2_swigregister = _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBUC2IRGBUC2_swigregister
itkCyclicShiftImageFilterIRGBUC2IRGBUC2_swigregister(itkCyclicShiftImageFilterIRGBUC2IRGBUC2)

def itkCyclicShiftImageFilterIRGBUC2IRGBUC2___New_orig__():
    """itkCyclicShiftImageFilterIRGBUC2IRGBUC2___New_orig__() -> itkCyclicShiftImageFilterIRGBUC2IRGBUC2_Pointer"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBUC2IRGBUC2___New_orig__()

def itkCyclicShiftImageFilterIRGBUC2IRGBUC2_cast(obj):
    """itkCyclicShiftImageFilterIRGBUC2IRGBUC2_cast(itkLightObject obj) -> itkCyclicShiftImageFilterIRGBUC2IRGBUC2"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBUC2IRGBUC2_cast(obj)

class itkCyclicShiftImageFilterIRGBUC3IRGBUC3(itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC3IRGBUC3):
    """


    Perform a cyclic spatial shift of image intensities on the image grid.

    This filter supports arbitrary cyclic shifts of pixel values on the
    image grid. If the Shift is set to [xOff, yOff], the value of the
    pixel at [0, 0] in the input image will be the value of the pixel in
    the output image at index [xOff modulo xSize, yOff modulo ySize] where
    xSize and ySize are the sizes of the image in the x and y dimensions,
    respectively. If a pixel value is moved across a boundary, the pixel
    value is wrapped around that boundary. For example, if the image is
    40-by-40 and the Shift is [13, 47], then the value of the pixel at [0,
    0] in the input image will be the value of the pixel in the output
    image at index [13, 7].

    Negative Shifts are supported. This filter also works with images
    whose largest possible region starts at a non-zero index.

    C++ includes: itkCyclicShiftImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkCyclicShiftImageFilterIRGBUC3IRGBUC3_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBUC3IRGBUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkCyclicShiftImageFilterIRGBUC3IRGBUC3 self) -> itkCyclicShiftImageFilterIRGBUC3IRGBUC3_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBUC3IRGBUC3_Clone(self)


    def SetShift(self, _arg):
        """
        SetShift(itkCyclicShiftImageFilterIRGBUC3IRGBUC3 self, itkOffset3 _arg)

        Set/get the shift. Shifts
        may be positive or negative. 
        """
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBUC3IRGBUC3_SetShift(self, _arg)


    def GetShift(self):
        """GetShift(itkCyclicShiftImageFilterIRGBUC3IRGBUC3 self) -> itkOffset3"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBUC3IRGBUC3_GetShift(self)

    __swig_destroy__ = _itkCyclicShiftImageFilterPython.delete_itkCyclicShiftImageFilterIRGBUC3IRGBUC3

    def cast(obj):
        """cast(itkLightObject obj) -> itkCyclicShiftImageFilterIRGBUC3IRGBUC3"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBUC3IRGBUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCyclicShiftImageFilterIRGBUC3IRGBUC3

        Create a new object of the class itkCyclicShiftImageFilterIRGBUC3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCyclicShiftImageFilterIRGBUC3IRGBUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCyclicShiftImageFilterIRGBUC3IRGBUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCyclicShiftImageFilterIRGBUC3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCyclicShiftImageFilterIRGBUC3IRGBUC3.Clone = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBUC3IRGBUC3_Clone, None, itkCyclicShiftImageFilterIRGBUC3IRGBUC3)
itkCyclicShiftImageFilterIRGBUC3IRGBUC3.SetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBUC3IRGBUC3_SetShift, None, itkCyclicShiftImageFilterIRGBUC3IRGBUC3)
itkCyclicShiftImageFilterIRGBUC3IRGBUC3.GetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBUC3IRGBUC3_GetShift, None, itkCyclicShiftImageFilterIRGBUC3IRGBUC3)
itkCyclicShiftImageFilterIRGBUC3IRGBUC3_swigregister = _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBUC3IRGBUC3_swigregister
itkCyclicShiftImageFilterIRGBUC3IRGBUC3_swigregister(itkCyclicShiftImageFilterIRGBUC3IRGBUC3)

def itkCyclicShiftImageFilterIRGBUC3IRGBUC3___New_orig__():
    """itkCyclicShiftImageFilterIRGBUC3IRGBUC3___New_orig__() -> itkCyclicShiftImageFilterIRGBUC3IRGBUC3_Pointer"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBUC3IRGBUC3___New_orig__()

def itkCyclicShiftImageFilterIRGBUC3IRGBUC3_cast(obj):
    """itkCyclicShiftImageFilterIRGBUC3IRGBUC3_cast(itkLightObject obj) -> itkCyclicShiftImageFilterIRGBUC3IRGBUC3"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBUC3IRGBUC3_cast(obj)

class itkCyclicShiftImageFilterISS2ISS2(itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    """


    Perform a cyclic spatial shift of image intensities on the image grid.

    This filter supports arbitrary cyclic shifts of pixel values on the
    image grid. If the Shift is set to [xOff, yOff], the value of the
    pixel at [0, 0] in the input image will be the value of the pixel in
    the output image at index [xOff modulo xSize, yOff modulo ySize] where
    xSize and ySize are the sizes of the image in the x and y dimensions,
    respectively. If a pixel value is moved across a boundary, the pixel
    value is wrapped around that boundary. For example, if the image is
    40-by-40 and the Shift is [13, 47], then the value of the pixel at [0,
    0] in the input image will be the value of the pixel in the output
    image at index [13, 7].

    Negative Shifts are supported. This filter also works with images
    whose largest possible region starts at a non-zero index.

    C++ includes: itkCyclicShiftImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkCyclicShiftImageFilterISS2ISS2_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkCyclicShiftImageFilterISS2ISS2 self) -> itkCyclicShiftImageFilterISS2ISS2_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterISS2ISS2_Clone(self)


    def SetShift(self, _arg):
        """
        SetShift(itkCyclicShiftImageFilterISS2ISS2 self, itkOffset2 _arg)

        Set/get the shift. Shifts
        may be positive or negative. 
        """
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterISS2ISS2_SetShift(self, _arg)


    def GetShift(self):
        """GetShift(itkCyclicShiftImageFilterISS2ISS2 self) -> itkOffset2"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterISS2ISS2_GetShift(self)

    __swig_destroy__ = _itkCyclicShiftImageFilterPython.delete_itkCyclicShiftImageFilterISS2ISS2

    def cast(obj):
        """cast(itkLightObject obj) -> itkCyclicShiftImageFilterISS2ISS2"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCyclicShiftImageFilterISS2ISS2

        Create a new object of the class itkCyclicShiftImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCyclicShiftImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCyclicShiftImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCyclicShiftImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCyclicShiftImageFilterISS2ISS2.Clone = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterISS2ISS2_Clone, None, itkCyclicShiftImageFilterISS2ISS2)
itkCyclicShiftImageFilterISS2ISS2.SetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterISS2ISS2_SetShift, None, itkCyclicShiftImageFilterISS2ISS2)
itkCyclicShiftImageFilterISS2ISS2.GetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterISS2ISS2_GetShift, None, itkCyclicShiftImageFilterISS2ISS2)
itkCyclicShiftImageFilterISS2ISS2_swigregister = _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterISS2ISS2_swigregister
itkCyclicShiftImageFilterISS2ISS2_swigregister(itkCyclicShiftImageFilterISS2ISS2)

def itkCyclicShiftImageFilterISS2ISS2___New_orig__():
    """itkCyclicShiftImageFilterISS2ISS2___New_orig__() -> itkCyclicShiftImageFilterISS2ISS2_Pointer"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterISS2ISS2___New_orig__()

def itkCyclicShiftImageFilterISS2ISS2_cast(obj):
    """itkCyclicShiftImageFilterISS2ISS2_cast(itkLightObject obj) -> itkCyclicShiftImageFilterISS2ISS2"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterISS2ISS2_cast(obj)

class itkCyclicShiftImageFilterISS3ISS3(itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    """


    Perform a cyclic spatial shift of image intensities on the image grid.

    This filter supports arbitrary cyclic shifts of pixel values on the
    image grid. If the Shift is set to [xOff, yOff], the value of the
    pixel at [0, 0] in the input image will be the value of the pixel in
    the output image at index [xOff modulo xSize, yOff modulo ySize] where
    xSize and ySize are the sizes of the image in the x and y dimensions,
    respectively. If a pixel value is moved across a boundary, the pixel
    value is wrapped around that boundary. For example, if the image is
    40-by-40 and the Shift is [13, 47], then the value of the pixel at [0,
    0] in the input image will be the value of the pixel in the output
    image at index [13, 7].

    Negative Shifts are supported. This filter also works with images
    whose largest possible region starts at a non-zero index.

    C++ includes: itkCyclicShiftImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkCyclicShiftImageFilterISS3ISS3_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkCyclicShiftImageFilterISS3ISS3 self) -> itkCyclicShiftImageFilterISS3ISS3_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterISS3ISS3_Clone(self)


    def SetShift(self, _arg):
        """
        SetShift(itkCyclicShiftImageFilterISS3ISS3 self, itkOffset3 _arg)

        Set/get the shift. Shifts
        may be positive or negative. 
        """
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterISS3ISS3_SetShift(self, _arg)


    def GetShift(self):
        """GetShift(itkCyclicShiftImageFilterISS3ISS3 self) -> itkOffset3"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterISS3ISS3_GetShift(self)

    __swig_destroy__ = _itkCyclicShiftImageFilterPython.delete_itkCyclicShiftImageFilterISS3ISS3

    def cast(obj):
        """cast(itkLightObject obj) -> itkCyclicShiftImageFilterISS3ISS3"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCyclicShiftImageFilterISS3ISS3

        Create a new object of the class itkCyclicShiftImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCyclicShiftImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCyclicShiftImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCyclicShiftImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCyclicShiftImageFilterISS3ISS3.Clone = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterISS3ISS3_Clone, None, itkCyclicShiftImageFilterISS3ISS3)
itkCyclicShiftImageFilterISS3ISS3.SetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterISS3ISS3_SetShift, None, itkCyclicShiftImageFilterISS3ISS3)
itkCyclicShiftImageFilterISS3ISS3.GetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterISS3ISS3_GetShift, None, itkCyclicShiftImageFilterISS3ISS3)
itkCyclicShiftImageFilterISS3ISS3_swigregister = _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterISS3ISS3_swigregister
itkCyclicShiftImageFilterISS3ISS3_swigregister(itkCyclicShiftImageFilterISS3ISS3)

def itkCyclicShiftImageFilterISS3ISS3___New_orig__():
    """itkCyclicShiftImageFilterISS3ISS3___New_orig__() -> itkCyclicShiftImageFilterISS3ISS3_Pointer"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterISS3ISS3___New_orig__()

def itkCyclicShiftImageFilterISS3ISS3_cast(obj):
    """itkCyclicShiftImageFilterISS3ISS3_cast(itkLightObject obj) -> itkCyclicShiftImageFilterISS3ISS3"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterISS3ISS3_cast(obj)

class itkCyclicShiftImageFilterIUC2IUC2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    """


    Perform a cyclic spatial shift of image intensities on the image grid.

    This filter supports arbitrary cyclic shifts of pixel values on the
    image grid. If the Shift is set to [xOff, yOff], the value of the
    pixel at [0, 0] in the input image will be the value of the pixel in
    the output image at index [xOff modulo xSize, yOff modulo ySize] where
    xSize and ySize are the sizes of the image in the x and y dimensions,
    respectively. If a pixel value is moved across a boundary, the pixel
    value is wrapped around that boundary. For example, if the image is
    40-by-40 and the Shift is [13, 47], then the value of the pixel at [0,
    0] in the input image will be the value of the pixel in the output
    image at index [13, 7].

    Negative Shifts are supported. This filter also works with images
    whose largest possible region starts at a non-zero index.

    C++ includes: itkCyclicShiftImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkCyclicShiftImageFilterIUC2IUC2_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkCyclicShiftImageFilterIUC2IUC2 self) -> itkCyclicShiftImageFilterIUC2IUC2_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUC2IUC2_Clone(self)


    def SetShift(self, _arg):
        """
        SetShift(itkCyclicShiftImageFilterIUC2IUC2 self, itkOffset2 _arg)

        Set/get the shift. Shifts
        may be positive or negative. 
        """
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUC2IUC2_SetShift(self, _arg)


    def GetShift(self):
        """GetShift(itkCyclicShiftImageFilterIUC2IUC2 self) -> itkOffset2"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUC2IUC2_GetShift(self)

    __swig_destroy__ = _itkCyclicShiftImageFilterPython.delete_itkCyclicShiftImageFilterIUC2IUC2

    def cast(obj):
        """cast(itkLightObject obj) -> itkCyclicShiftImageFilterIUC2IUC2"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCyclicShiftImageFilterIUC2IUC2

        Create a new object of the class itkCyclicShiftImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCyclicShiftImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCyclicShiftImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCyclicShiftImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCyclicShiftImageFilterIUC2IUC2.Clone = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUC2IUC2_Clone, None, itkCyclicShiftImageFilterIUC2IUC2)
itkCyclicShiftImageFilterIUC2IUC2.SetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUC2IUC2_SetShift, None, itkCyclicShiftImageFilterIUC2IUC2)
itkCyclicShiftImageFilterIUC2IUC2.GetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUC2IUC2_GetShift, None, itkCyclicShiftImageFilterIUC2IUC2)
itkCyclicShiftImageFilterIUC2IUC2_swigregister = _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUC2IUC2_swigregister
itkCyclicShiftImageFilterIUC2IUC2_swigregister(itkCyclicShiftImageFilterIUC2IUC2)

def itkCyclicShiftImageFilterIUC2IUC2___New_orig__():
    """itkCyclicShiftImageFilterIUC2IUC2___New_orig__() -> itkCyclicShiftImageFilterIUC2IUC2_Pointer"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUC2IUC2___New_orig__()

def itkCyclicShiftImageFilterIUC2IUC2_cast(obj):
    """itkCyclicShiftImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkCyclicShiftImageFilterIUC2IUC2"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUC2IUC2_cast(obj)

class itkCyclicShiftImageFilterIUC3IUC3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """


    Perform a cyclic spatial shift of image intensities on the image grid.

    This filter supports arbitrary cyclic shifts of pixel values on the
    image grid. If the Shift is set to [xOff, yOff], the value of the
    pixel at [0, 0] in the input image will be the value of the pixel in
    the output image at index [xOff modulo xSize, yOff modulo ySize] where
    xSize and ySize are the sizes of the image in the x and y dimensions,
    respectively. If a pixel value is moved across a boundary, the pixel
    value is wrapped around that boundary. For example, if the image is
    40-by-40 and the Shift is [13, 47], then the value of the pixel at [0,
    0] in the input image will be the value of the pixel in the output
    image at index [13, 7].

    Negative Shifts are supported. This filter also works with images
    whose largest possible region starts at a non-zero index.

    C++ includes: itkCyclicShiftImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkCyclicShiftImageFilterIUC3IUC3_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkCyclicShiftImageFilterIUC3IUC3 self) -> itkCyclicShiftImageFilterIUC3IUC3_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUC3IUC3_Clone(self)


    def SetShift(self, _arg):
        """
        SetShift(itkCyclicShiftImageFilterIUC3IUC3 self, itkOffset3 _arg)

        Set/get the shift. Shifts
        may be positive or negative. 
        """
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUC3IUC3_SetShift(self, _arg)


    def GetShift(self):
        """GetShift(itkCyclicShiftImageFilterIUC3IUC3 self) -> itkOffset3"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUC3IUC3_GetShift(self)

    __swig_destroy__ = _itkCyclicShiftImageFilterPython.delete_itkCyclicShiftImageFilterIUC3IUC3

    def cast(obj):
        """cast(itkLightObject obj) -> itkCyclicShiftImageFilterIUC3IUC3"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCyclicShiftImageFilterIUC3IUC3

        Create a new object of the class itkCyclicShiftImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCyclicShiftImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCyclicShiftImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCyclicShiftImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCyclicShiftImageFilterIUC3IUC3.Clone = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUC3IUC3_Clone, None, itkCyclicShiftImageFilterIUC3IUC3)
itkCyclicShiftImageFilterIUC3IUC3.SetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUC3IUC3_SetShift, None, itkCyclicShiftImageFilterIUC3IUC3)
itkCyclicShiftImageFilterIUC3IUC3.GetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUC3IUC3_GetShift, None, itkCyclicShiftImageFilterIUC3IUC3)
itkCyclicShiftImageFilterIUC3IUC3_swigregister = _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUC3IUC3_swigregister
itkCyclicShiftImageFilterIUC3IUC3_swigregister(itkCyclicShiftImageFilterIUC3IUC3)

def itkCyclicShiftImageFilterIUC3IUC3___New_orig__():
    """itkCyclicShiftImageFilterIUC3IUC3___New_orig__() -> itkCyclicShiftImageFilterIUC3IUC3_Pointer"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUC3IUC3___New_orig__()

def itkCyclicShiftImageFilterIUC3IUC3_cast(obj):
    """itkCyclicShiftImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkCyclicShiftImageFilterIUC3IUC3"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUC3IUC3_cast(obj)

class itkCyclicShiftImageFilterIUS2IUS2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    """


    Perform a cyclic spatial shift of image intensities on the image grid.

    This filter supports arbitrary cyclic shifts of pixel values on the
    image grid. If the Shift is set to [xOff, yOff], the value of the
    pixel at [0, 0] in the input image will be the value of the pixel in
    the output image at index [xOff modulo xSize, yOff modulo ySize] where
    xSize and ySize are the sizes of the image in the x and y dimensions,
    respectively. If a pixel value is moved across a boundary, the pixel
    value is wrapped around that boundary. For example, if the image is
    40-by-40 and the Shift is [13, 47], then the value of the pixel at [0,
    0] in the input image will be the value of the pixel in the output
    image at index [13, 7].

    Negative Shifts are supported. This filter also works with images
    whose largest possible region starts at a non-zero index.

    C++ includes: itkCyclicShiftImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkCyclicShiftImageFilterIUS2IUS2_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkCyclicShiftImageFilterIUS2IUS2 self) -> itkCyclicShiftImageFilterIUS2IUS2_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUS2IUS2_Clone(self)


    def SetShift(self, _arg):
        """
        SetShift(itkCyclicShiftImageFilterIUS2IUS2 self, itkOffset2 _arg)

        Set/get the shift. Shifts
        may be positive or negative. 
        """
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUS2IUS2_SetShift(self, _arg)


    def GetShift(self):
        """GetShift(itkCyclicShiftImageFilterIUS2IUS2 self) -> itkOffset2"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUS2IUS2_GetShift(self)

    __swig_destroy__ = _itkCyclicShiftImageFilterPython.delete_itkCyclicShiftImageFilterIUS2IUS2

    def cast(obj):
        """cast(itkLightObject obj) -> itkCyclicShiftImageFilterIUS2IUS2"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCyclicShiftImageFilterIUS2IUS2

        Create a new object of the class itkCyclicShiftImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCyclicShiftImageFilterIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCyclicShiftImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCyclicShiftImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCyclicShiftImageFilterIUS2IUS2.Clone = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUS2IUS2_Clone, None, itkCyclicShiftImageFilterIUS2IUS2)
itkCyclicShiftImageFilterIUS2IUS2.SetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUS2IUS2_SetShift, None, itkCyclicShiftImageFilterIUS2IUS2)
itkCyclicShiftImageFilterIUS2IUS2.GetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUS2IUS2_GetShift, None, itkCyclicShiftImageFilterIUS2IUS2)
itkCyclicShiftImageFilterIUS2IUS2_swigregister = _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUS2IUS2_swigregister
itkCyclicShiftImageFilterIUS2IUS2_swigregister(itkCyclicShiftImageFilterIUS2IUS2)

def itkCyclicShiftImageFilterIUS2IUS2___New_orig__():
    """itkCyclicShiftImageFilterIUS2IUS2___New_orig__() -> itkCyclicShiftImageFilterIUS2IUS2_Pointer"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUS2IUS2___New_orig__()

def itkCyclicShiftImageFilterIUS2IUS2_cast(obj):
    """itkCyclicShiftImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkCyclicShiftImageFilterIUS2IUS2"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUS2IUS2_cast(obj)

class itkCyclicShiftImageFilterIUS3IUS3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """


    Perform a cyclic spatial shift of image intensities on the image grid.

    This filter supports arbitrary cyclic shifts of pixel values on the
    image grid. If the Shift is set to [xOff, yOff], the value of the
    pixel at [0, 0] in the input image will be the value of the pixel in
    the output image at index [xOff modulo xSize, yOff modulo ySize] where
    xSize and ySize are the sizes of the image in the x and y dimensions,
    respectively. If a pixel value is moved across a boundary, the pixel
    value is wrapped around that boundary. For example, if the image is
    40-by-40 and the Shift is [13, 47], then the value of the pixel at [0,
    0] in the input image will be the value of the pixel in the output
    image at index [13, 7].

    Negative Shifts are supported. This filter also works with images
    whose largest possible region starts at a non-zero index.

    C++ includes: itkCyclicShiftImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkCyclicShiftImageFilterIUS3IUS3_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkCyclicShiftImageFilterIUS3IUS3 self) -> itkCyclicShiftImageFilterIUS3IUS3_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUS3IUS3_Clone(self)


    def SetShift(self, _arg):
        """
        SetShift(itkCyclicShiftImageFilterIUS3IUS3 self, itkOffset3 _arg)

        Set/get the shift. Shifts
        may be positive or negative. 
        """
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUS3IUS3_SetShift(self, _arg)


    def GetShift(self):
        """GetShift(itkCyclicShiftImageFilterIUS3IUS3 self) -> itkOffset3"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUS3IUS3_GetShift(self)

    __swig_destroy__ = _itkCyclicShiftImageFilterPython.delete_itkCyclicShiftImageFilterIUS3IUS3

    def cast(obj):
        """cast(itkLightObject obj) -> itkCyclicShiftImageFilterIUS3IUS3"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCyclicShiftImageFilterIUS3IUS3

        Create a new object of the class itkCyclicShiftImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCyclicShiftImageFilterIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCyclicShiftImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCyclicShiftImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCyclicShiftImageFilterIUS3IUS3.Clone = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUS3IUS3_Clone, None, itkCyclicShiftImageFilterIUS3IUS3)
itkCyclicShiftImageFilterIUS3IUS3.SetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUS3IUS3_SetShift, None, itkCyclicShiftImageFilterIUS3IUS3)
itkCyclicShiftImageFilterIUS3IUS3.GetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUS3IUS3_GetShift, None, itkCyclicShiftImageFilterIUS3IUS3)
itkCyclicShiftImageFilterIUS3IUS3_swigregister = _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUS3IUS3_swigregister
itkCyclicShiftImageFilterIUS3IUS3_swigregister(itkCyclicShiftImageFilterIUS3IUS3)

def itkCyclicShiftImageFilterIUS3IUS3___New_orig__():
    """itkCyclicShiftImageFilterIUS3IUS3___New_orig__() -> itkCyclicShiftImageFilterIUS3IUS3_Pointer"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUS3IUS3___New_orig__()

def itkCyclicShiftImageFilterIUS3IUS3_cast(obj):
    """itkCyclicShiftImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkCyclicShiftImageFilterIUS3IUS3"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUS3IUS3_cast(obj)

class itkCyclicShiftImageFilterIVF22IVF22(itkImageToImageFilterAPython.itkImageToImageFilterIVF22IVF22):
    """


    Perform a cyclic spatial shift of image intensities on the image grid.

    This filter supports arbitrary cyclic shifts of pixel values on the
    image grid. If the Shift is set to [xOff, yOff], the value of the
    pixel at [0, 0] in the input image will be the value of the pixel in
    the output image at index [xOff modulo xSize, yOff modulo ySize] where
    xSize and ySize are the sizes of the image in the x and y dimensions,
    respectively. If a pixel value is moved across a boundary, the pixel
    value is wrapped around that boundary. For example, if the image is
    40-by-40 and the Shift is [13, 47], then the value of the pixel at [0,
    0] in the input image will be the value of the pixel in the output
    image at index [13, 7].

    Negative Shifts are supported. This filter also works with images
    whose largest possible region starts at a non-zero index.

    C++ includes: itkCyclicShiftImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkCyclicShiftImageFilterIVF22IVF22_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF22IVF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkCyclicShiftImageFilterIVF22IVF22 self) -> itkCyclicShiftImageFilterIVF22IVF22_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF22IVF22_Clone(self)


    def SetShift(self, _arg):
        """
        SetShift(itkCyclicShiftImageFilterIVF22IVF22 self, itkOffset2 _arg)

        Set/get the shift. Shifts
        may be positive or negative. 
        """
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF22IVF22_SetShift(self, _arg)


    def GetShift(self):
        """GetShift(itkCyclicShiftImageFilterIVF22IVF22 self) -> itkOffset2"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF22IVF22_GetShift(self)

    __swig_destroy__ = _itkCyclicShiftImageFilterPython.delete_itkCyclicShiftImageFilterIVF22IVF22

    def cast(obj):
        """cast(itkLightObject obj) -> itkCyclicShiftImageFilterIVF22IVF22"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF22IVF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCyclicShiftImageFilterIVF22IVF22

        Create a new object of the class itkCyclicShiftImageFilterIVF22IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCyclicShiftImageFilterIVF22IVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCyclicShiftImageFilterIVF22IVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCyclicShiftImageFilterIVF22IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCyclicShiftImageFilterIVF22IVF22.Clone = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF22IVF22_Clone, None, itkCyclicShiftImageFilterIVF22IVF22)
itkCyclicShiftImageFilterIVF22IVF22.SetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF22IVF22_SetShift, None, itkCyclicShiftImageFilterIVF22IVF22)
itkCyclicShiftImageFilterIVF22IVF22.GetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF22IVF22_GetShift, None, itkCyclicShiftImageFilterIVF22IVF22)
itkCyclicShiftImageFilterIVF22IVF22_swigregister = _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF22IVF22_swigregister
itkCyclicShiftImageFilterIVF22IVF22_swigregister(itkCyclicShiftImageFilterIVF22IVF22)

def itkCyclicShiftImageFilterIVF22IVF22___New_orig__():
    """itkCyclicShiftImageFilterIVF22IVF22___New_orig__() -> itkCyclicShiftImageFilterIVF22IVF22_Pointer"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF22IVF22___New_orig__()

def itkCyclicShiftImageFilterIVF22IVF22_cast(obj):
    """itkCyclicShiftImageFilterIVF22IVF22_cast(itkLightObject obj) -> itkCyclicShiftImageFilterIVF22IVF22"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF22IVF22_cast(obj)

class itkCyclicShiftImageFilterIVF23IVF23(itkImageToImageFilterAPython.itkImageToImageFilterIVF23IVF23):
    """


    Perform a cyclic spatial shift of image intensities on the image grid.

    This filter supports arbitrary cyclic shifts of pixel values on the
    image grid. If the Shift is set to [xOff, yOff], the value of the
    pixel at [0, 0] in the input image will be the value of the pixel in
    the output image at index [xOff modulo xSize, yOff modulo ySize] where
    xSize and ySize are the sizes of the image in the x and y dimensions,
    respectively. If a pixel value is moved across a boundary, the pixel
    value is wrapped around that boundary. For example, if the image is
    40-by-40 and the Shift is [13, 47], then the value of the pixel at [0,
    0] in the input image will be the value of the pixel in the output
    image at index [13, 7].

    Negative Shifts are supported. This filter also works with images
    whose largest possible region starts at a non-zero index.

    C++ includes: itkCyclicShiftImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkCyclicShiftImageFilterIVF23IVF23_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF23IVF23___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkCyclicShiftImageFilterIVF23IVF23 self) -> itkCyclicShiftImageFilterIVF23IVF23_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF23IVF23_Clone(self)


    def SetShift(self, _arg):
        """
        SetShift(itkCyclicShiftImageFilterIVF23IVF23 self, itkOffset3 _arg)

        Set/get the shift. Shifts
        may be positive or negative. 
        """
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF23IVF23_SetShift(self, _arg)


    def GetShift(self):
        """GetShift(itkCyclicShiftImageFilterIVF23IVF23 self) -> itkOffset3"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF23IVF23_GetShift(self)

    __swig_destroy__ = _itkCyclicShiftImageFilterPython.delete_itkCyclicShiftImageFilterIVF23IVF23

    def cast(obj):
        """cast(itkLightObject obj) -> itkCyclicShiftImageFilterIVF23IVF23"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF23IVF23_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCyclicShiftImageFilterIVF23IVF23

        Create a new object of the class itkCyclicShiftImageFilterIVF23IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCyclicShiftImageFilterIVF23IVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCyclicShiftImageFilterIVF23IVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCyclicShiftImageFilterIVF23IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCyclicShiftImageFilterIVF23IVF23.Clone = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF23IVF23_Clone, None, itkCyclicShiftImageFilterIVF23IVF23)
itkCyclicShiftImageFilterIVF23IVF23.SetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF23IVF23_SetShift, None, itkCyclicShiftImageFilterIVF23IVF23)
itkCyclicShiftImageFilterIVF23IVF23.GetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF23IVF23_GetShift, None, itkCyclicShiftImageFilterIVF23IVF23)
itkCyclicShiftImageFilterIVF23IVF23_swigregister = _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF23IVF23_swigregister
itkCyclicShiftImageFilterIVF23IVF23_swigregister(itkCyclicShiftImageFilterIVF23IVF23)

def itkCyclicShiftImageFilterIVF23IVF23___New_orig__():
    """itkCyclicShiftImageFilterIVF23IVF23___New_orig__() -> itkCyclicShiftImageFilterIVF23IVF23_Pointer"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF23IVF23___New_orig__()

def itkCyclicShiftImageFilterIVF23IVF23_cast(obj):
    """itkCyclicShiftImageFilterIVF23IVF23_cast(itkLightObject obj) -> itkCyclicShiftImageFilterIVF23IVF23"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF23IVF23_cast(obj)

class itkCyclicShiftImageFilterIVF32IVF32(itkImageToImageFilterAPython.itkImageToImageFilterIVF32IVF32):
    """


    Perform a cyclic spatial shift of image intensities on the image grid.

    This filter supports arbitrary cyclic shifts of pixel values on the
    image grid. If the Shift is set to [xOff, yOff], the value of the
    pixel at [0, 0] in the input image will be the value of the pixel in
    the output image at index [xOff modulo xSize, yOff modulo ySize] where
    xSize and ySize are the sizes of the image in the x and y dimensions,
    respectively. If a pixel value is moved across a boundary, the pixel
    value is wrapped around that boundary. For example, if the image is
    40-by-40 and the Shift is [13, 47], then the value of the pixel at [0,
    0] in the input image will be the value of the pixel in the output
    image at index [13, 7].

    Negative Shifts are supported. This filter also works with images
    whose largest possible region starts at a non-zero index.

    C++ includes: itkCyclicShiftImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkCyclicShiftImageFilterIVF32IVF32_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF32IVF32___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkCyclicShiftImageFilterIVF32IVF32 self) -> itkCyclicShiftImageFilterIVF32IVF32_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF32IVF32_Clone(self)


    def SetShift(self, _arg):
        """
        SetShift(itkCyclicShiftImageFilterIVF32IVF32 self, itkOffset2 _arg)

        Set/get the shift. Shifts
        may be positive or negative. 
        """
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF32IVF32_SetShift(self, _arg)


    def GetShift(self):
        """GetShift(itkCyclicShiftImageFilterIVF32IVF32 self) -> itkOffset2"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF32IVF32_GetShift(self)

    __swig_destroy__ = _itkCyclicShiftImageFilterPython.delete_itkCyclicShiftImageFilterIVF32IVF32

    def cast(obj):
        """cast(itkLightObject obj) -> itkCyclicShiftImageFilterIVF32IVF32"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF32IVF32_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCyclicShiftImageFilterIVF32IVF32

        Create a new object of the class itkCyclicShiftImageFilterIVF32IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCyclicShiftImageFilterIVF32IVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCyclicShiftImageFilterIVF32IVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCyclicShiftImageFilterIVF32IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCyclicShiftImageFilterIVF32IVF32.Clone = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF32IVF32_Clone, None, itkCyclicShiftImageFilterIVF32IVF32)
itkCyclicShiftImageFilterIVF32IVF32.SetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF32IVF32_SetShift, None, itkCyclicShiftImageFilterIVF32IVF32)
itkCyclicShiftImageFilterIVF32IVF32.GetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF32IVF32_GetShift, None, itkCyclicShiftImageFilterIVF32IVF32)
itkCyclicShiftImageFilterIVF32IVF32_swigregister = _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF32IVF32_swigregister
itkCyclicShiftImageFilterIVF32IVF32_swigregister(itkCyclicShiftImageFilterIVF32IVF32)

def itkCyclicShiftImageFilterIVF32IVF32___New_orig__():
    """itkCyclicShiftImageFilterIVF32IVF32___New_orig__() -> itkCyclicShiftImageFilterIVF32IVF32_Pointer"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF32IVF32___New_orig__()

def itkCyclicShiftImageFilterIVF32IVF32_cast(obj):
    """itkCyclicShiftImageFilterIVF32IVF32_cast(itkLightObject obj) -> itkCyclicShiftImageFilterIVF32IVF32"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF32IVF32_cast(obj)

class itkCyclicShiftImageFilterIVF33IVF33(itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33):
    """


    Perform a cyclic spatial shift of image intensities on the image grid.

    This filter supports arbitrary cyclic shifts of pixel values on the
    image grid. If the Shift is set to [xOff, yOff], the value of the
    pixel at [0, 0] in the input image will be the value of the pixel in
    the output image at index [xOff modulo xSize, yOff modulo ySize] where
    xSize and ySize are the sizes of the image in the x and y dimensions,
    respectively. If a pixel value is moved across a boundary, the pixel
    value is wrapped around that boundary. For example, if the image is
    40-by-40 and the Shift is [13, 47], then the value of the pixel at [0,
    0] in the input image will be the value of the pixel in the output
    image at index [13, 7].

    Negative Shifts are supported. This filter also works with images
    whose largest possible region starts at a non-zero index.

    C++ includes: itkCyclicShiftImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkCyclicShiftImageFilterIVF33IVF33_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF33IVF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkCyclicShiftImageFilterIVF33IVF33 self) -> itkCyclicShiftImageFilterIVF33IVF33_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF33IVF33_Clone(self)


    def SetShift(self, _arg):
        """
        SetShift(itkCyclicShiftImageFilterIVF33IVF33 self, itkOffset3 _arg)

        Set/get the shift. Shifts
        may be positive or negative. 
        """
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF33IVF33_SetShift(self, _arg)


    def GetShift(self):
        """GetShift(itkCyclicShiftImageFilterIVF33IVF33 self) -> itkOffset3"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF33IVF33_GetShift(self)

    __swig_destroy__ = _itkCyclicShiftImageFilterPython.delete_itkCyclicShiftImageFilterIVF33IVF33

    def cast(obj):
        """cast(itkLightObject obj) -> itkCyclicShiftImageFilterIVF33IVF33"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF33IVF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCyclicShiftImageFilterIVF33IVF33

        Create a new object of the class itkCyclicShiftImageFilterIVF33IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCyclicShiftImageFilterIVF33IVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCyclicShiftImageFilterIVF33IVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCyclicShiftImageFilterIVF33IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCyclicShiftImageFilterIVF33IVF33.Clone = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF33IVF33_Clone, None, itkCyclicShiftImageFilterIVF33IVF33)
itkCyclicShiftImageFilterIVF33IVF33.SetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF33IVF33_SetShift, None, itkCyclicShiftImageFilterIVF33IVF33)
itkCyclicShiftImageFilterIVF33IVF33.GetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF33IVF33_GetShift, None, itkCyclicShiftImageFilterIVF33IVF33)
itkCyclicShiftImageFilterIVF33IVF33_swigregister = _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF33IVF33_swigregister
itkCyclicShiftImageFilterIVF33IVF33_swigregister(itkCyclicShiftImageFilterIVF33IVF33)

def itkCyclicShiftImageFilterIVF33IVF33___New_orig__():
    """itkCyclicShiftImageFilterIVF33IVF33___New_orig__() -> itkCyclicShiftImageFilterIVF33IVF33_Pointer"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF33IVF33___New_orig__()

def itkCyclicShiftImageFilterIVF33IVF33_cast(obj):
    """itkCyclicShiftImageFilterIVF33IVF33_cast(itkLightObject obj) -> itkCyclicShiftImageFilterIVF33IVF33"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF33IVF33_cast(obj)

class itkCyclicShiftImageFilterIVF42IVF42(itkImageToImageFilterAPython.itkImageToImageFilterIVF42IVF42):
    """


    Perform a cyclic spatial shift of image intensities on the image grid.

    This filter supports arbitrary cyclic shifts of pixel values on the
    image grid. If the Shift is set to [xOff, yOff], the value of the
    pixel at [0, 0] in the input image will be the value of the pixel in
    the output image at index [xOff modulo xSize, yOff modulo ySize] where
    xSize and ySize are the sizes of the image in the x and y dimensions,
    respectively. If a pixel value is moved across a boundary, the pixel
    value is wrapped around that boundary. For example, if the image is
    40-by-40 and the Shift is [13, 47], then the value of the pixel at [0,
    0] in the input image will be the value of the pixel in the output
    image at index [13, 7].

    Negative Shifts are supported. This filter also works with images
    whose largest possible region starts at a non-zero index.

    C++ includes: itkCyclicShiftImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkCyclicShiftImageFilterIVF42IVF42_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF42IVF42___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkCyclicShiftImageFilterIVF42IVF42 self) -> itkCyclicShiftImageFilterIVF42IVF42_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF42IVF42_Clone(self)


    def SetShift(self, _arg):
        """
        SetShift(itkCyclicShiftImageFilterIVF42IVF42 self, itkOffset2 _arg)

        Set/get the shift. Shifts
        may be positive or negative. 
        """
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF42IVF42_SetShift(self, _arg)


    def GetShift(self):
        """GetShift(itkCyclicShiftImageFilterIVF42IVF42 self) -> itkOffset2"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF42IVF42_GetShift(self)

    __swig_destroy__ = _itkCyclicShiftImageFilterPython.delete_itkCyclicShiftImageFilterIVF42IVF42

    def cast(obj):
        """cast(itkLightObject obj) -> itkCyclicShiftImageFilterIVF42IVF42"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF42IVF42_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCyclicShiftImageFilterIVF42IVF42

        Create a new object of the class itkCyclicShiftImageFilterIVF42IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCyclicShiftImageFilterIVF42IVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCyclicShiftImageFilterIVF42IVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCyclicShiftImageFilterIVF42IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCyclicShiftImageFilterIVF42IVF42.Clone = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF42IVF42_Clone, None, itkCyclicShiftImageFilterIVF42IVF42)
itkCyclicShiftImageFilterIVF42IVF42.SetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF42IVF42_SetShift, None, itkCyclicShiftImageFilterIVF42IVF42)
itkCyclicShiftImageFilterIVF42IVF42.GetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF42IVF42_GetShift, None, itkCyclicShiftImageFilterIVF42IVF42)
itkCyclicShiftImageFilterIVF42IVF42_swigregister = _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF42IVF42_swigregister
itkCyclicShiftImageFilterIVF42IVF42_swigregister(itkCyclicShiftImageFilterIVF42IVF42)

def itkCyclicShiftImageFilterIVF42IVF42___New_orig__():
    """itkCyclicShiftImageFilterIVF42IVF42___New_orig__() -> itkCyclicShiftImageFilterIVF42IVF42_Pointer"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF42IVF42___New_orig__()

def itkCyclicShiftImageFilterIVF42IVF42_cast(obj):
    """itkCyclicShiftImageFilterIVF42IVF42_cast(itkLightObject obj) -> itkCyclicShiftImageFilterIVF42IVF42"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF42IVF42_cast(obj)

class itkCyclicShiftImageFilterIVF43IVF43(itkImageToImageFilterAPython.itkImageToImageFilterIVF43IVF43):
    """


    Perform a cyclic spatial shift of image intensities on the image grid.

    This filter supports arbitrary cyclic shifts of pixel values on the
    image grid. If the Shift is set to [xOff, yOff], the value of the
    pixel at [0, 0] in the input image will be the value of the pixel in
    the output image at index [xOff modulo xSize, yOff modulo ySize] where
    xSize and ySize are the sizes of the image in the x and y dimensions,
    respectively. If a pixel value is moved across a boundary, the pixel
    value is wrapped around that boundary. For example, if the image is
    40-by-40 and the Shift is [13, 47], then the value of the pixel at [0,
    0] in the input image will be the value of the pixel in the output
    image at index [13, 7].

    Negative Shifts are supported. This filter also works with images
    whose largest possible region starts at a non-zero index.

    C++ includes: itkCyclicShiftImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkCyclicShiftImageFilterIVF43IVF43_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF43IVF43___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkCyclicShiftImageFilterIVF43IVF43 self) -> itkCyclicShiftImageFilterIVF43IVF43_Pointer"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF43IVF43_Clone(self)


    def SetShift(self, _arg):
        """
        SetShift(itkCyclicShiftImageFilterIVF43IVF43 self, itkOffset3 _arg)

        Set/get the shift. Shifts
        may be positive or negative. 
        """
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF43IVF43_SetShift(self, _arg)


    def GetShift(self):
        """GetShift(itkCyclicShiftImageFilterIVF43IVF43 self) -> itkOffset3"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF43IVF43_GetShift(self)

    __swig_destroy__ = _itkCyclicShiftImageFilterPython.delete_itkCyclicShiftImageFilterIVF43IVF43

    def cast(obj):
        """cast(itkLightObject obj) -> itkCyclicShiftImageFilterIVF43IVF43"""
        return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF43IVF43_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCyclicShiftImageFilterIVF43IVF43

        Create a new object of the class itkCyclicShiftImageFilterIVF43IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCyclicShiftImageFilterIVF43IVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCyclicShiftImageFilterIVF43IVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCyclicShiftImageFilterIVF43IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCyclicShiftImageFilterIVF43IVF43.Clone = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF43IVF43_Clone, None, itkCyclicShiftImageFilterIVF43IVF43)
itkCyclicShiftImageFilterIVF43IVF43.SetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF43IVF43_SetShift, None, itkCyclicShiftImageFilterIVF43IVF43)
itkCyclicShiftImageFilterIVF43IVF43.GetShift = new_instancemethod(_itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF43IVF43_GetShift, None, itkCyclicShiftImageFilterIVF43IVF43)
itkCyclicShiftImageFilterIVF43IVF43_swigregister = _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF43IVF43_swigregister
itkCyclicShiftImageFilterIVF43IVF43_swigregister(itkCyclicShiftImageFilterIVF43IVF43)

def itkCyclicShiftImageFilterIVF43IVF43___New_orig__():
    """itkCyclicShiftImageFilterIVF43IVF43___New_orig__() -> itkCyclicShiftImageFilterIVF43IVF43_Pointer"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF43IVF43___New_orig__()

def itkCyclicShiftImageFilterIVF43IVF43_cast(obj):
    """itkCyclicShiftImageFilterIVF43IVF43_cast(itkLightObject obj) -> itkCyclicShiftImageFilterIVF43IVF43"""
    return _itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF43IVF43_cast(obj)


def cyclic_shift_image_filter(*args, **kwargs):
    """Procedural interface for CyclicShiftImageFilter"""
    import itk
    instance = itk.CyclicShiftImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def cyclic_shift_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.CyclicShiftImageFilter, itkTemplate.itkTemplate):
        cyclic_shift_image_filter.__doc__ = itk.CyclicShiftImageFilter.values()[0].__doc__
    else:
        cyclic_shift_image_filter.__doc__ = itk.CyclicShiftImageFilter.__doc__




