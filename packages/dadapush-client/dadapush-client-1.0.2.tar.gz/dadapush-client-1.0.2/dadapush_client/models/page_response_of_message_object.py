# coding: utf-8

"""
    DaDaPush Public API

    DaDaPush: Real-time Notifications App Send real-time notifications through our API without coding and maintaining your own app for iOS or Android devices.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: contacts@dadapush.com
    Generated by: https://openapi-generator.tech
"""

import pprint

import six


class PageResponseOfMessageObject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'content': 'list[MessageObject]',
        'total_elements': 'int',
        'total_pages': 'int'
    }

    attribute_map = {
        'content': 'content',
        'total_elements': 'totalElements',
        'total_pages': 'totalPages'
    }

    def __init__(self, content=None, total_elements=None, total_pages=None):  # noqa: E501
        """PageResponseOfMessageObject - a model defined in OpenAPI"""  # noqa: E501

        self._content = None
        self._total_elements = None
        self._total_pages = None
        self.discriminator = None

        if content is not None:
            self.content = content
        if total_elements is not None:
            self.total_elements = total_elements
        if total_pages is not None:
            self.total_pages = total_pages

    @property
    def content(self):
        """Gets the content of this PageResponseOfMessageObject.  # noqa: E501


        :return: The content of this PageResponseOfMessageObject.  # noqa: E501
        :rtype: list[MessageObject]
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this PageResponseOfMessageObject.


        :param content: The content of this PageResponseOfMessageObject.  # noqa: E501
        :type: list[MessageObject]
        """

        self._content = content

    @property
    def total_elements(self):
        """Gets the total_elements of this PageResponseOfMessageObject.  # noqa: E501


        :return: The total_elements of this PageResponseOfMessageObject.  # noqa: E501
        :rtype: int
        """
        return self._total_elements

    @total_elements.setter
    def total_elements(self, total_elements):
        """Sets the total_elements of this PageResponseOfMessageObject.


        :param total_elements: The total_elements of this PageResponseOfMessageObject.  # noqa: E501
        :type: int
        """

        self._total_elements = total_elements

    @property
    def total_pages(self):
        """Gets the total_pages of this PageResponseOfMessageObject.  # noqa: E501


        :return: The total_pages of this PageResponseOfMessageObject.  # noqa: E501
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this PageResponseOfMessageObject.


        :param total_pages: The total_pages of this PageResponseOfMessageObject.  # noqa: E501
        :type: int
        """

        self._total_pages = total_pages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PageResponseOfMessageObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
