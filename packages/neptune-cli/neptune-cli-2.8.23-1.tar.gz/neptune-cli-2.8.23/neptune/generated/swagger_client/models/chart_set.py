# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ChartSet(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, charts=None, is_editable=None, default_charts_enabled=None, project_id=None, id=None):
        """
        ChartSet - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'charts': 'list[Chart]',
            'is_editable': 'bool',
            'default_charts_enabled': 'bool',
            'project_id': 'str',
            'id': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'charts': 'charts',
            'is_editable': 'isEditable',
            'default_charts_enabled': 'defaultChartsEnabled',
            'project_id': 'projectId',
            'id': 'id'
        }

        self._name = name
        self._charts = charts
        self._is_editable = is_editable
        self._default_charts_enabled = default_charts_enabled
        self._project_id = project_id
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this ChartSet.


        :return: The name of this ChartSet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ChartSet.


        :param name: The name of this ChartSet.
        :type: str
        """
        
        self._name = name

    @property
    def charts(self):
        """
        Gets the charts of this ChartSet.


        :return: The charts of this ChartSet.
        :rtype: list[Chart]
        """
        return self._charts

    @charts.setter
    def charts(self, charts):
        """
        Sets the charts of this ChartSet.


        :param charts: The charts of this ChartSet.
        :type: list[Chart]
        """
        
        self._charts = charts

    @property
    def is_editable(self):
        """
        Gets the is_editable of this ChartSet.


        :return: The is_editable of this ChartSet.
        :rtype: bool
        """
        return self._is_editable

    @is_editable.setter
    def is_editable(self, is_editable):
        """
        Sets the is_editable of this ChartSet.


        :param is_editable: The is_editable of this ChartSet.
        :type: bool
        """
        
        self._is_editable = is_editable

    @property
    def default_charts_enabled(self):
        """
        Gets the default_charts_enabled of this ChartSet.


        :return: The default_charts_enabled of this ChartSet.
        :rtype: bool
        """
        return self._default_charts_enabled

    @default_charts_enabled.setter
    def default_charts_enabled(self, default_charts_enabled):
        """
        Sets the default_charts_enabled of this ChartSet.


        :param default_charts_enabled: The default_charts_enabled of this ChartSet.
        :type: bool
        """
        
        self._default_charts_enabled = default_charts_enabled

    @property
    def project_id(self):
        """
        Gets the project_id of this ChartSet.


        :return: The project_id of this ChartSet.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """
        Sets the project_id of this ChartSet.


        :param project_id: The project_id of this ChartSet.
        :type: str
        """
        
        self._project_id = project_id

    @property
    def id(self):
        """
        Gets the id of this ChartSet.


        :return: The id of this ChartSet.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ChartSet.


        :param id: The id of this ChartSet.
        :type: str
        """
        
        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




