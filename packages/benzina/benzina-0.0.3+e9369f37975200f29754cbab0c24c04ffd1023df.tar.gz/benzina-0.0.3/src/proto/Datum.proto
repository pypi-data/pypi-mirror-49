/**
### Dataset:

A ProtoBuf-based Benzina data description format.

All Benzina Datasets are ITU-T H.264 Annex B bytestreams with extra metadata
spliced into the stream in a way that does not affect the bytestream's
validity. Metadata is encoded with ProtoBufs and embedded in the H.264 byte
stream using techniques that cause it to be ignored and discarded by compliant
decoders.

A Benzina Dataset consists in (up to) four files in the same directory:

    README.md:        A MarkDown-formatted documentation for the dataset.
    SHA256SUMS:       A list of SHA-256 checksums as generated by sha256sum.
    <FILENAME>:       A raw H.264 Annex B bytestream. It is effectively a
                      concatenation of Network Abstraction Layer (NAL) units
                      (NALUs) representing an ordered sequence of samples.
    <FILENAME>.index: A concatenation of 64-bit unsigned integers, representing
                      the lengths, in bytes, of each individual Datum, in the
                      order that they appear in data.bin.
                      
                      The index file is REQUIRED if an index is not present
                      within the file. Otherwise, it is IGNORED.

The prefered <FILENAME> is "data.bin", but other names are acceptable as well.


### METADATA:

Metadata is spliced into the H.264 bytestream using NALUs with the reserved
NALU type 0x1F (forbidden_bit=0, nal_ref_idc=0, nal_unit_type=31). This NALU
type is ignored and discarded by compliant H.264 decoders, and thus a Benzina
Dataset containing images remains a valid H.264 video, but Benzina deliberately
spots and interprets the reserved NALU type's contents.

#### Metadata NALU (mNALU)

All mNALUs frame exactly one Atom, the 
All mNALUs are encoded in the bytestream as follows:

    00 00 00 01              | Start Code Prefix.
                             |     The 4-byte start code prefix is mandatory
                             |     for all mNALUs.
    1F                       | NALU Header Byte.
                             |     forbidden_bit=0, nal_ref_idc=0, nal_unit_type=31
    AA TT OO MM TT YY PP EE  | Atom type. Eight ASCII characters, encoded as uint64be.
    PA YL LO AD LE NG TH US  | Atom payload length, in escaped bytes, encoded using
    IN GX OR EN CO DI NG XX  | XOR encoding. Both parts are coded as uint64le.
    <variable-length payload>| Atom payload
    80                       | Stop bit

#### Atom

*/


/**
 * A Datum is a validly-formed H.264 bytestream in its own right. An H.264
 * bytestream is a sequence of NAL (Network Abstraction Layer) Units. A Datum
 * consists at least of the following NALUs:
 * 
 *     1) Header: A NALU with nal_ref_idc == 0 and nal_unit_type == 31 (unspecified).
 *                Must be at offset 4 bytes relative to Datum base because of prefix
 *                start code of 00 00 00 01. The Header NALU format is:
 * 
 *            Off | Len  | Name | Desc
 *            ----+------+------+---------------------------------------------------
 *              0 |   16 | TYPE | The UUID a626d6c0-9964-4452-90b9-8dadc92917d2,
 *                |      |      | encoded in big-endian (a6,26,d6,c0,...,17,d2).
 *                |      |      | The UUID was chosen to neither start nor end
 *                |      |      | with 00, and not to contain the pattern 00 00
 *                |      |      | followed by 00, 01, 02 or 03.
 *             16 |   16 | IOFF | XOR-coded 64-bit offset to index, relative to
 *                |      |      | Datum base. 0 if unknown. Little-endian.
 *             32 |   16 | DLEN | XOR-coded 64-bit length of Datum. Must be
 *                |      |      | identical to corresponding data.index entry.
 *                |      |      | Little-endian.
 *             48 |   16 | PLEN | XOR-coded 64-bit length of embedded, byte-stuffed
 *                |      |      | Protobuf message. Little-endian.
 *             64 | MLEN | PMSG | Embedded benzina.Datum Protobuf message.
 *        64+MLEN |    1 | STOP | The stop byte 80.
 * 
 *                XOR-coding of a 64-bit integer x into two consecutively-stored
 *                64-bit integers (y0,y1):
 * 
 *                   y0 = (~x | 0xAAAAAAAAAAAAAAAA)
 *                   y1 = (~x |~0xAAAAAAAAAAAAAAAA)
 *
 *                XOR-decoding of a 64-bit integer x from (y0,y1):
 *
 *                   x  = y0^y1
 * 
 *     2) SPS:    The Sequence Parameter Set NALU.
 *     3) PPS:    The Picture  Parameter Set NALU.
 *     4) IDR:    The IDR (Instantaneous Decoder Refresh) NALU. Must contain
 *                exactly one slice.
 * 
 * Other NALUs (such as SEI) may be present, but this specification is not
 * concerned with them.
 *
 * For now, only Image data is supported.
 */
 

syntax = "proto3";
package benzina;


message Datum{
	uint64 version =         1; // Version of Datum message.
	
	oneof  data{
		Image image = 3;//Image data.
	}
	
	bytes  user    = 536870911; // User-provided metadata extensions.
};


/**
 * Image data.
 * 
 * Certain basic properties of how the image was generated are recorded here
 * for the benefit of post-processing. In particular, we store:
 * 
 *    - The *coded* width/height     (How big is a frame out of the decoder)
 *    - The *embed* width/height/x/y (The actual size and offset of the true image
 *                                    embedded in the coded frame. The embedded
 *                                    image may have been padded and centered to
 *                                    satisfy codec needs)
 *    - The *original* width/height  (How big was the source image that was
 *                                    transcoded into video)
 *    - The color primaries          (With which xyY color primaries was this image
 *                                    captured)
 *    - The opto-electronic transfer function (How are the primaries non-linearly
 *                                             transformed)
 *    - The color matrix             (The linear transformation applied to the
 *                                    non-linearly transformed primaries)
 */

message Image{
	uint32         codedW         =         3;
	uint32         codedH         =         4;
	uint32         embedW         =         5;
	uint32         embedH         =         6;
	uint32         embedX         =         7;
	uint32         embedY         =         8;
	reserved                                9 to 15;
	uint32         origW          =        16;
	uint32         origH          =        17;
	float          psnrhma        =        18;
	uint32         colorPrimaries =        19;
	uint32         colorTRC       =        20;/* Opto-Electronic Transfer Function */
	uint32         colorMatrix    =        21;
	
	/* CUVIDPICPARAMS struct. Required for GPU acceleration. */
	CuvidPicParams cuvidPicParams =      4096;
	
	/* User-provided metadata extensions. */
	bytes          user           = 536870911;
};

message CuvidPicParams{
	
};

message Index{
	uint64          version     = 1;
	repeated uint64 datumoffset = 2;
};
