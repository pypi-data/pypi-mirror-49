# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_AttysScanListener')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_AttysScanListener')
    _AttysScanListener = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_AttysScanListener', [dirname(__file__)])
        except ImportError:
            import _AttysScanListener
            return _AttysScanListener
        try:
            _mod = imp.load_module('_AttysScanListener', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _AttysScanListener = swig_import_helper()
    del swig_import_helper
else:
    import _AttysScanListener
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


NUM_THREADS = _AttysScanListener.NUM_THREADS
class AttysThread(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttysThread, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttysThread, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AttysScanListener.delete_AttysThread
    __del__ = lambda self: None

    def start(self):
        return _AttysScanListener.AttysThread_start(self)

    def join(self):
        return _AttysScanListener.AttysThread_join(self)

    def run(self):
        return _AttysScanListener.AttysThread_run(self)
AttysThread_swigregister = _AttysScanListener.AttysThread_swigregister
AttysThread_swigregister(AttysThread)


def Base64encode_len(len):
    return _AttysScanListener.Base64encode_len(len)
Base64encode_len = _AttysScanListener.Base64encode_len

def Base64encode(coded_dst, plain_src, len_plain_src):
    return _AttysScanListener.Base64encode(coded_dst, plain_src, len_plain_src)
Base64encode = _AttysScanListener.Base64encode

def Base64decode_len(coded_src):
    return _AttysScanListener.Base64decode_len(coded_src)
Base64decode_len = _AttysScanListener.Base64decode_len

def Base64decode(plain_dst, coded_src):
    return _AttysScanListener.Base64decode(plain_dst, coded_src)
Base64decode = _AttysScanListener.Base64decode
class AttysCommListener(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttysCommListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttysCommListener, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def hasSample(self, arg2, arg3):
        return _AttysScanListener.AttysCommListener_hasSample(self, arg2, arg3)
    __swig_destroy__ = _AttysScanListener.delete_AttysCommListener
    __del__ = lambda self: None
AttysCommListener_swigregister = _AttysScanListener.AttysCommListener_swigregister
AttysCommListener_swigregister(AttysCommListener)

class AttysCommError(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttysCommError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttysCommError, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def hasError(self, arg2, arg3):
        return _AttysScanListener.AttysCommError_hasError(self, arg2, arg3)
    __swig_destroy__ = _AttysScanListener.delete_AttysCommError
    __del__ = lambda self: None
AttysCommError_swigregister = _AttysScanListener.AttysCommError_swigregister
AttysCommError_swigregister(AttysCommError)

class AttysComm(AttysThread):
    __swig_setmethods__ = {}
    for _s in [AttysThread]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttysComm, name, value)
    __swig_getmethods__ = {}
    for _s in [AttysThread]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AttysComm, name)
    __repr__ = _swig_repr

    def __init__(self, _btsocket):
        this = _AttysScanListener.new_AttysComm(_btsocket)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AttysScanListener.delete_AttysComm
    __del__ = lambda self: None
    NCHANNELS = _AttysScanListener.AttysComm_NCHANNELS
    INDEX_Acceleration_X = _AttysScanListener.AttysComm_INDEX_Acceleration_X
    INDEX_Acceleration_Y = _AttysScanListener.AttysComm_INDEX_Acceleration_Y
    INDEX_Acceleration_Z = _AttysScanListener.AttysComm_INDEX_Acceleration_Z
    INDEX_Magnetic_field_X = _AttysScanListener.AttysComm_INDEX_Magnetic_field_X
    INDEX_Magnetic_field_Y = _AttysScanListener.AttysComm_INDEX_Magnetic_field_Y
    INDEX_Magnetic_field_Z = _AttysScanListener.AttysComm_INDEX_Magnetic_field_Z
    INDEX_Analogue_channel_1 = _AttysScanListener.AttysComm_INDEX_Analogue_channel_1
    INDEX_Analogue_channel_2 = _AttysScanListener.AttysComm_INDEX_Analogue_channel_2
    __swig_getmethods__["CHANNEL_DESCRIPTION"] = _AttysScanListener.AttysComm_CHANNEL_DESCRIPTION_get
    if _newclass:
        CHANNEL_DESCRIPTION = _swig_property(_AttysScanListener.AttysComm_CHANNEL_DESCRIPTION_get)
    __swig_getmethods__["CHANNEL_SHORT_DESCRIPTION"] = _AttysScanListener.AttysComm_CHANNEL_SHORT_DESCRIPTION_get
    if _newclass:
        CHANNEL_SHORT_DESCRIPTION = _swig_property(_AttysScanListener.AttysComm_CHANNEL_SHORT_DESCRIPTION_get)
    __swig_getmethods__["CHANNEL_UNITS"] = _AttysScanListener.AttysComm_CHANNEL_UNITS_get
    if _newclass:
        CHANNEL_UNITS = _swig_property(_AttysScanListener.AttysComm_CHANNEL_UNITS_get)
    ADC_RATE_125HZ = _AttysScanListener.AttysComm_ADC_RATE_125HZ
    ADC_RATE_250HZ = _AttysScanListener.AttysComm_ADC_RATE_250HZ
    ADC_RATE_500Hz = _AttysScanListener.AttysComm_ADC_RATE_500Hz
    ADC_DEFAULT_RATE = _AttysScanListener.AttysComm_ADC_DEFAULT_RATE
    __swig_getmethods__["ADC_SAMPLINGRATE"] = _AttysScanListener.AttysComm_ADC_SAMPLINGRATE_get
    if _newclass:
        ADC_SAMPLINGRATE = _swig_property(_AttysScanListener.AttysComm_ADC_SAMPLINGRATE_get)
    __swig_setmethods__["adc_rate_index"] = _AttysScanListener.AttysComm_adc_rate_index_set
    __swig_getmethods__["adc_rate_index"] = _AttysScanListener.AttysComm_adc_rate_index_get
    if _newclass:
        adc_rate_index = _swig_property(_AttysScanListener.AttysComm_adc_rate_index_get, _AttysScanListener.AttysComm_adc_rate_index_set)

    def setAdc_samplingrate_index(self, idx):
        return _AttysScanListener.AttysComm_setAdc_samplingrate_index(self, idx)

    def getSamplingRateInHz(self):
        return _AttysScanListener.AttysComm_getSamplingRateInHz(self)

    def getAdc_samplingrate_index(self):
        return _AttysScanListener.AttysComm_getAdc_samplingrate_index(self)
    ADC_GAIN_6 = _AttysScanListener.AttysComm_ADC_GAIN_6
    ADC_GAIN_1 = _AttysScanListener.AttysComm_ADC_GAIN_1
    ADC_GAIN_2 = _AttysScanListener.AttysComm_ADC_GAIN_2
    ADC_GAIN_3 = _AttysScanListener.AttysComm_ADC_GAIN_3
    ADC_GAIN_4 = _AttysScanListener.AttysComm_ADC_GAIN_4
    ADC_GAIN_8 = _AttysScanListener.AttysComm_ADC_GAIN_8
    ADC_GAIN_12 = _AttysScanListener.AttysComm_ADC_GAIN_12
    __swig_getmethods__["ADC_GAIN_FACTOR"] = _AttysScanListener.AttysComm_ADC_GAIN_FACTOR_get
    if _newclass:
        ADC_GAIN_FACTOR = _swig_property(_AttysScanListener.AttysComm_ADC_GAIN_FACTOR_get)
    __swig_getmethods__["ADC_REF"] = _AttysScanListener.AttysComm_ADC_REF_get
    if _newclass:
        ADC_REF = _swig_property(_AttysScanListener.AttysComm_ADC_REF_get)

    def getADCFullScaleRange(self, channel):
        return _AttysScanListener.AttysComm_getADCFullScaleRange(self, channel)

    def setAdc0_gain_index(self, idx):
        return _AttysScanListener.AttysComm_setAdc0_gain_index(self, idx)

    def setAdc1_gain_index(self, idx):
        return _AttysScanListener.AttysComm_setAdc1_gain_index(self, idx)
    __swig_setmethods__["adc0_gain_index"] = _AttysScanListener.AttysComm_adc0_gain_index_set
    __swig_getmethods__["adc0_gain_index"] = _AttysScanListener.AttysComm_adc0_gain_index_get
    if _newclass:
        adc0_gain_index = _swig_property(_AttysScanListener.AttysComm_adc0_gain_index_get, _AttysScanListener.AttysComm_adc0_gain_index_set)
    __swig_setmethods__["adc1_gain_index"] = _AttysScanListener.AttysComm_adc1_gain_index_set
    __swig_getmethods__["adc1_gain_index"] = _AttysScanListener.AttysComm_adc1_gain_index_get
    if _newclass:
        adc1_gain_index = _swig_property(_AttysScanListener.AttysComm_adc1_gain_index_get, _AttysScanListener.AttysComm_adc1_gain_index_set)
    ADC_CURRENT_6NA = _AttysScanListener.AttysComm_ADC_CURRENT_6NA
    ADC_CURRENT_22NA = _AttysScanListener.AttysComm_ADC_CURRENT_22NA
    ADC_CURRENT_6UA = _AttysScanListener.AttysComm_ADC_CURRENT_6UA
    ADC_CURRENT_22UA = _AttysScanListener.AttysComm_ADC_CURRENT_22UA
    __swig_setmethods__["current_index"] = _AttysScanListener.AttysComm_current_index_set
    __swig_getmethods__["current_index"] = _AttysScanListener.AttysComm_current_index_get
    if _newclass:
        current_index = _swig_property(_AttysScanListener.AttysComm_current_index_get, _AttysScanListener.AttysComm_current_index_set)
    __swig_setmethods__["current_mask"] = _AttysScanListener.AttysComm_current_mask_set
    __swig_getmethods__["current_mask"] = _AttysScanListener.AttysComm_current_mask_get
    if _newclass:
        current_mask = _swig_property(_AttysScanListener.AttysComm_current_mask_get, _AttysScanListener.AttysComm_current_mask_set)

    def setBiasCurrent(self, currIndex):
        return _AttysScanListener.AttysComm_setBiasCurrent(self, currIndex)

    def getBiasCurrent(self):
        return _AttysScanListener.AttysComm_getBiasCurrent(self)

    def enableCurrents(self, pos_ch1, neg_ch1, pos_ch2):
        return _AttysScanListener.AttysComm_enableCurrents(self, pos_ch1, neg_ch1, pos_ch2)
    ADC_MUX_NORMAL = _AttysScanListener.AttysComm_ADC_MUX_NORMAL
    ADC_MUX_SHORT = _AttysScanListener.AttysComm_ADC_MUX_SHORT
    ADC_MUX_SUPPLY = _AttysScanListener.AttysComm_ADC_MUX_SUPPLY
    ADC_MUX_TEMPERATURE = _AttysScanListener.AttysComm_ADC_MUX_TEMPERATURE
    ADC_MUX_TEST_SIGNAL = _AttysScanListener.AttysComm_ADC_MUX_TEST_SIGNAL
    ADC_MUX_ECG_EINTHOVEN = _AttysScanListener.AttysComm_ADC_MUX_ECG_EINTHOVEN
    __swig_setmethods__["adc0_mux_index"] = _AttysScanListener.AttysComm_adc0_mux_index_set
    __swig_getmethods__["adc0_mux_index"] = _AttysScanListener.AttysComm_adc0_mux_index_get
    if _newclass:
        adc0_mux_index = _swig_property(_AttysScanListener.AttysComm_adc0_mux_index_get, _AttysScanListener.AttysComm_adc0_mux_index_set)
    __swig_setmethods__["adc1_mux_index"] = _AttysScanListener.AttysComm_adc1_mux_index_set
    __swig_getmethods__["adc1_mux_index"] = _AttysScanListener.AttysComm_adc1_mux_index_get
    if _newclass:
        adc1_mux_index = _swig_property(_AttysScanListener.AttysComm_adc1_mux_index_get, _AttysScanListener.AttysComm_adc1_mux_index_set)

    def setAdc0_mux_index(self, idx):
        return _AttysScanListener.AttysComm_setAdc0_mux_index(self, idx)

    def setAdc1_mux_index(self, idx):
        return _AttysScanListener.AttysComm_setAdc1_mux_index(self, idx)
    if _newclass:
        phys2temperature = staticmethod(_AttysScanListener.AttysComm_phys2temperature)
    else:
        phys2temperature = _AttysScanListener.AttysComm_phys2temperature
    ACCEL_2G = _AttysScanListener.AttysComm_ACCEL_2G
    ACCEL_4G = _AttysScanListener.AttysComm_ACCEL_4G
    ACCEL_8G = _AttysScanListener.AttysComm_ACCEL_8G
    ACCEL_16G = _AttysScanListener.AttysComm_ACCEL_16G
    __swig_getmethods__["oneG"] = _AttysScanListener.AttysComm_oneG_get
    if _newclass:
        oneG = _swig_property(_AttysScanListener.AttysComm_oneG_get)
    __swig_getmethods__["ACCEL_FULL_SCALE"] = _AttysScanListener.AttysComm_ACCEL_FULL_SCALE_get
    if _newclass:
        ACCEL_FULL_SCALE = _swig_property(_AttysScanListener.AttysComm_ACCEL_FULL_SCALE_get)
    __swig_setmethods__["accel_full_scale_index"] = _AttysScanListener.AttysComm_accel_full_scale_index_set
    __swig_getmethods__["accel_full_scale_index"] = _AttysScanListener.AttysComm_accel_full_scale_index_get
    if _newclass:
        accel_full_scale_index = _swig_property(_AttysScanListener.AttysComm_accel_full_scale_index_get, _AttysScanListener.AttysComm_accel_full_scale_index_set)

    def getAccelFullScaleRange(self):
        return _AttysScanListener.AttysComm_getAccelFullScaleRange(self)

    def setAccel_full_scale_index(self, idx):
        return _AttysScanListener.AttysComm_setAccel_full_scale_index(self, idx)
    __swig_getmethods__["MAG_FULL_SCALE"] = _AttysScanListener.AttysComm_MAG_FULL_SCALE_get
    if _newclass:
        MAG_FULL_SCALE = _swig_property(_AttysScanListener.AttysComm_MAG_FULL_SCALE_get)

    def getMagFullScaleRange(self):
        return _AttysScanListener.AttysComm_getMagFullScaleRange(self)

    def setTimestamp(self, ts):
        return _AttysScanListener.AttysComm_setTimestamp(self, ts)

    def getTimestamp(self):
        return _AttysScanListener.AttysComm_getTimestamp(self)
    __swig_setmethods__["sampleNumber"] = _AttysScanListener.AttysComm_sampleNumber_set
    __swig_getmethods__["sampleNumber"] = _AttysScanListener.AttysComm_sampleNumber_get
    if _newclass:
        sampleNumber = _swig_property(_AttysScanListener.AttysComm_sampleNumber_get, _AttysScanListener.AttysComm_sampleNumber_set)

    def getSampleNumber(self):
        return _AttysScanListener.AttysComm_getSampleNumber(self)

    def setSampleNumber(self, sn):
        return _AttysScanListener.AttysComm_setSampleNumber(self, sn)
    MESSAGE_CONNECTED = _AttysScanListener.AttysComm_MESSAGE_CONNECTED
    MESSAGE_ERROR = _AttysScanListener.AttysComm_MESSAGE_ERROR
    MESSAGE_RETRY = _AttysScanListener.AttysComm_MESSAGE_RETRY
    MESSAGE_CONFIGURE = _AttysScanListener.AttysComm_MESSAGE_CONFIGURE
    MESSAGE_STARTED_RECORDING = _AttysScanListener.AttysComm_MESSAGE_STARTED_RECORDING
    MESSAGE_STOPPED_RECORDING = _AttysScanListener.AttysComm_MESSAGE_STOPPED_RECORDING
    MESSAGE_CONNECTING = _AttysScanListener.AttysComm_MESSAGE_CONNECTING

    def hasActiveConnection(self):
        return _AttysScanListener.AttysComm_hasActiveConnection(self)

    def hasFatalError(self):
        return _AttysScanListener.AttysComm_hasFatalError(self)

    def getSampleFromBuffer(self):
        return _AttysScanListener.AttysComm_getSampleFromBuffer(self)

    def hasSampleAvilabale(self):
        return _AttysScanListener.AttysComm_hasSampleAvilabale(self)

    def registerCallback(self, f):
        return _AttysScanListener.AttysComm_registerCallback(self, f)

    def unregisterCallback(self):
        return _AttysScanListener.AttysComm_unregisterCallback(self)

    def registerErrorCallback(self, f):
        return _AttysScanListener.AttysComm_registerErrorCallback(self, f)

    def unregisterErrorCallback(self):
        return _AttysScanListener.AttysComm_unregisterErrorCallback(self)

    def quit(self):
        return _AttysScanListener.AttysComm_quit(self)
AttysComm_swigregister = _AttysScanListener.AttysComm_swigregister
AttysComm_swigregister(AttysComm)

def AttysComm_phys2temperature(volt):
    return _AttysScanListener.AttysComm_phys2temperature(volt)
AttysComm_phys2temperature = _AttysScanListener.AttysComm_phys2temperature

MAX_ATTYS_DEVS = _AttysScanListener.MAX_ATTYS_DEVS
class AttysScanListener(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttysScanListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttysScanListener, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def message(self, arg2, arg3):
        return _AttysScanListener.AttysScanListener_message(self, arg2, arg3)
    __swig_destroy__ = _AttysScanListener.delete_AttysScanListener
    __del__ = lambda self: None
AttysScanListener_swigregister = _AttysScanListener.AttysScanListener_swigregister
AttysScanListener_swigregister(AttysScanListener)
cvar = _AttysScanListener.cvar

class AttysScan(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttysScan, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttysScan, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _AttysScanListener.delete_AttysScan
    __del__ = lambda self: None

    def scan(self, maxAttys=4):
        return _AttysScanListener.AttysScan_scan(self, maxAttys)
    SCAN_CONNECTED = _AttysScanListener.AttysScan_SCAN_CONNECTED
    SCAN_SEARCHING = _AttysScanListener.AttysScan_SCAN_SEARCHING
    SCAN_NODEV = _AttysScanListener.AttysScan_SCAN_NODEV
    SCAN_SOCKETERR = _AttysScanListener.AttysScan_SCAN_SOCKETERR
    SCAN_CONNECTING = _AttysScanListener.AttysScan_SCAN_CONNECTING
    SCAN_CONNECTERR = _AttysScanListener.AttysScan_SCAN_CONNECTERR

    def registerCallback(self, f):
        return _AttysScanListener.AttysScan_registerCallback(self, f)

    def unregisterCallback(self):
        return _AttysScanListener.AttysScan_unregisterCallback(self)
    __swig_setmethods__["statusCallback"] = _AttysScanListener.AttysScan_statusCallback_set
    __swig_getmethods__["statusCallback"] = _AttysScanListener.AttysScan_statusCallback_get
    if _newclass:
        statusCallback = _swig_property(_AttysScanListener.AttysScan_statusCallback_get, _AttysScanListener.AttysScan_statusCallback_set)
    __swig_setmethods__["nAttysDevices"] = _AttysScanListener.AttysScan_nAttysDevices_set
    __swig_getmethods__["nAttysDevices"] = _AttysScanListener.AttysScan_nAttysDevices_get
    if _newclass:
        nAttysDevices = _swig_property(_AttysScanListener.AttysScan_nAttysDevices_get, _AttysScanListener.AttysScan_nAttysDevices_set)
    __swig_setmethods__["dev"] = _AttysScanListener.AttysScan_dev_set
    __swig_getmethods__["dev"] = _AttysScanListener.AttysScan_dev_get
    if _newclass:
        dev = _swig_property(_AttysScanListener.AttysScan_dev_get, _AttysScanListener.AttysScan_dev_set)
    __swig_setmethods__["attysName"] = _AttysScanListener.AttysScan_attysName_set
    __swig_getmethods__["attysName"] = _AttysScanListener.AttysScan_attysName_get
    if _newclass:
        attysName = _swig_property(_AttysScanListener.AttysScan_attysName_get, _AttysScanListener.AttysScan_attysName_set)
    __swig_setmethods__["attysComm"] = _AttysScanListener.AttysScan_attysComm_set
    __swig_getmethods__["attysComm"] = _AttysScanListener.AttysScan_attysComm_get
    if _newclass:
        attysComm = _swig_property(_AttysScanListener.AttysScan_attysComm_get, _AttysScanListener.AttysScan_attysComm_set)

    def getAttysComm(self, i):
        return _AttysScanListener.AttysScan_getAttysComm(self, i)

    def __init__(self):
        this = _AttysScanListener.new_AttysScan()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
AttysScan_swigregister = _AttysScanListener.AttysScan_swigregister
AttysScan_swigregister(AttysScan)

# This file is compatible with both classic and new-style classes.


