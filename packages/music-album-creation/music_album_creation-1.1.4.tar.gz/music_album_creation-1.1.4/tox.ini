[tox]
envlist =
    clean,
    check,
    quality,
;    docs,
;    py27-cover,
;    py27-nocov,
;    py34-cover,
;    py34-nocov,
    py35-cover,
;    py35-nocov,
    py36-cover,
;    py36-nocov,
    py37-cover,
;    py37-nocov,
;    pypy-cover,
;    pypy-nocov,
;    pypy3-cover,
;    pypy3-nocov,
    report

skip_missing_interpreters = {env:TOX_SKIP_MISSING_INTERPRETERS:True}

passenv = TOXENV CI TRAVIS TRAVIS_* CODECOV_*
[testenv]
basepython =
    {docs,spell}: {env:TOXPYTHON:python3.6}
    {bootstrap,clean,check,report,codecov,coveralls,quality}: {env:TOXPYTHON:python3}
setenv =
    PYTHONPATH={toxinidir}/tests
    PYTHOUNBUFFERED=yes
    PIP_DISABLE_PIP_VERSION_CHECK=1
    VIRTUALENV_NO_DOWNLOAD=1
passenv =
    *

    # See https://github.com/codecov/codecov-python/blob/5b9d539a6a09bc84501b381b563956295478651a/README.md#using-tox
    codecov: TOXENV
    codecov: CI
    codecov: TRAVIS TRAVIS_*
deps =
    pytest
;    pytest-travis-fold
commands =
    {posargs:pytest -vv --ignore=src}


[testenv:bootstrap]
deps =
    jinja2
    matrix
skip_install = true
commands =
    python ci/bootstrap.py

[testenv:clean]
commands = coverage erase
skip_install = true
deps = coverage

# This env must succeed in order to be meaningful to proceed running the rest of the environments
[testenv:check]
deps =
    docutils
    readme-renderer
    pygments
    check-manifest
skip_install = true
commands =
    python setup.py check --strict --metadata --restructuredtext
    check-manifest {toxinidir}


# This env can be potentially allowed to fail
[testenv:quality]
deps =
    flake8
    pygments
    docutils
    readme-renderer
;    isort
skip_install = true
commands =
    flake8 src tests setup.py
    ;    isort --verbose --check-only --diff --recursive src tests setup.py

[flake8]
# select the type of style errors to check
select = B,C,E,F,I,N,S,W

# If True: disable skipping warning when '# noqa' is found
# If False: skips lines that have '# noqa'; does not check them
disable-noqa = False

# show the source file generating a warning
show-source  = True
# check syntax of the doctests
doctests     = True

# Codes: http://flake8.pycqa.org/en/latest/user/error-codes.html
ignore =
    # multiple spaces before operator
    E221,
    # too many blank lines
    E302,
    # too many blank lines
    E303,
    # expected 2 blank lines after class or function definition
    E305,
    # function name should be lowercase
    N802,
    # argument name should be lowercase
    N803,
    # first argument of a method should be named 'self'
    N805,
    # variable in function should be lowercase
    N806,
    # lowercase imported as non lowercase
    N812,
    # variable 'rawHeaders' in class scope should not be mixedCase
    N815,
    # variable 'noneIO' in global scope should not be mixedCase
    N816,
    # line break after binary operator (W503 and W504 are opposites)
    W504,
    # line too long
    E501,
    # multiple statements on one line (colon)
    E701,
    # too many leading # for block comment
    E266,
    # missing whitespace around arithmetic operator
    E226,
    # module level import not at top of file
    E402


[testenv:spell]
setenv =
    SPELLCHECK=1
commands =
    sphinx-build -b spelling docs dist/docs
skip_install = true
deps =
    -r{toxinidir}/docs/requirements.txt
    sphinxcontrib-spelling
    pyenchant

[testenv:docs]
deps =
    -r{toxinidir}/docs/requirements.txt
commands =
    sphinx-build {posargs:-E} -b doctest docs dist/docs
    sphinx-build {posargs:-E} -b html docs dist/docs
    sphinx-build -b linkcheck docs dist/docs

[testenv:coveralls]
# requires COVERALLS_REPO_TOKEN
deps =
    coveralls
skip_install = true
commands =
    coveralls []
;;    coverage run --source=music_album_creation setup.py test

[testenv:codecov]
deps =
    codecov
skip_install = true
commands =
    coverage xml --ignore-errors
    codecov []

[testenv:report]
deps = coverage
skip_install = true
commands =
    coverage report
    coverage html


[testenv:py35-active]
basepython = {env:TOXPYTHON:python3.5}
usedevelop = true
commands =
    create-album


[testenv:py35-cover]
basepython = {env:TOXPYTHON:python3.5}
setenv =
    {[testenv]setenv}
usedevelop = true
commands =
    {posargs:pytest --cov --cov-report=term-missing -vv}
deps =
    {[testenv]deps}
    pytest-cov

[testenv:py35-splitters]
basepython = {env:TOXPYTHON:python3.5}
setenv =
    {[testenv]setenv}
usedevelop = true
commands =
    {posargs:pytest --cov --cov-report=term-missing -vv -k test_splitters}
deps =
    {[testenv]deps}
    pytest-cov


[testenv:py35-offline]
basepython = {env:TOXPYTHON:python3.5}
setenv =
    {[testenv]setenv}
usedevelop = true
commands =
    {posargs:pytest --cov --cov-report=term-missing -vv -k 'not test_downloading'}
deps =
    {[testenv]deps}
    pytest-cov


[testenv:py35-nocov]
basepython = {env:TOXPYTHON:python3.5}


[testenv:py36-cover]
basepython = {env:TOXPYTHON:python3.6}
setenv =
    {[testenv]setenv}
usedevelop = true
commands =
    {posargs:pytest --cov --cov-report=term-missing -vv}
deps =
    {[testenv]deps}
    pytest-cov

[testenv:py36-nocov]
basepython = {env:TOXPYTHON:python3.6}


[testenv:py37-cover]
basepython = {env:TOXPYTHON:python3.7}
setenv =
    {[testenv]setenv}
usedevelop = true
commands =
    {posargs:pytest --cov --cov-report=term-missing -vv}
deps =
    {[testenv]deps}
    pytest-cov

[testenv:py37-nocov]
basepython = {env:TOXPYTHON:python3.7}
