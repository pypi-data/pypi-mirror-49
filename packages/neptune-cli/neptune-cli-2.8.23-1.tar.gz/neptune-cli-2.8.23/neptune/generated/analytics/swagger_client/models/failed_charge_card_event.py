# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class FailedChargeCardEvent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, balance=None, charged=None, compute_charged=None, license_charged=None):
        """
        FailedChargeCardEvent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'balance': 'float',
            'charged': 'float',
            'compute_charged': 'float',
            'license_charged': 'float'
        }

        self.attribute_map = {
            'balance': 'balance',
            'charged': 'charged',
            'compute_charged': 'computeCharged',
            'license_charged': 'licenseCharged'
        }

        self._balance = balance
        self._charged = charged
        self._compute_charged = compute_charged
        self._license_charged = license_charged

    @property
    def balance(self):
        """
        Gets the balance of this FailedChargeCardEvent.


        :return: The balance of this FailedChargeCardEvent.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """
        Sets the balance of this FailedChargeCardEvent.


        :param balance: The balance of this FailedChargeCardEvent.
        :type: float
        """
        
        self._balance = balance

    @property
    def charged(self):
        """
        Gets the charged of this FailedChargeCardEvent.


        :return: The charged of this FailedChargeCardEvent.
        :rtype: float
        """
        return self._charged

    @charged.setter
    def charged(self, charged):
        """
        Sets the charged of this FailedChargeCardEvent.


        :param charged: The charged of this FailedChargeCardEvent.
        :type: float
        """
        
        self._charged = charged

    @property
    def compute_charged(self):
        """
        Gets the compute_charged of this FailedChargeCardEvent.


        :return: The compute_charged of this FailedChargeCardEvent.
        :rtype: float
        """
        return self._compute_charged

    @compute_charged.setter
    def compute_charged(self, compute_charged):
        """
        Sets the compute_charged of this FailedChargeCardEvent.


        :param compute_charged: The compute_charged of this FailedChargeCardEvent.
        :type: float
        """
        
        self._compute_charged = compute_charged

    @property
    def license_charged(self):
        """
        Gets the license_charged of this FailedChargeCardEvent.


        :return: The license_charged of this FailedChargeCardEvent.
        :rtype: float
        """
        return self._license_charged

    @license_charged.setter
    def license_charged(self, license_charged):
        """
        Sets the license_charged of this FailedChargeCardEvent.


        :param license_charged: The license_charged of this FailedChargeCardEvent.
        :type: float
        """
        
        self._license_charged = license_charged

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




