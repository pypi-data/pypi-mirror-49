{"version":3,"sources":["webpack:///./app/views/projectDashboard/eventNode.jsx","webpack:///./app/views/projectDashboard/eventList.jsx","webpack:///./app/views/projectDashboard/chart.jsx","webpack:///./app/views/projectDashboard/index.jsx"],"names":["EventNode","createReactClass","displayName","propTypes","group","SentryTypes","Group","isRequired","mixins","ProjectState","render","this","props","userCount","react_default","a","createElement","className","eventOrGroupHeader","data","hideIcons","hideLevel","eventOrGroupExtraDetails","count","value","EventList","type","PropTypes","oneOf","environment","Environment","dateSince","number","ApiMixin","getInitialState","groupList","loading","error","statsPeriod","componentWillMount","fetchData","componentWillReceiveProps","nextProps","setState","getEndpoint","_this$props","params","qs","sort","query","since","name","concat","orgId","projectId","queryString","stringify","getMinutes","state","_this","endpoint","minutes","api","request","limit","success","onSelectStatsPeriod","period","eventNodes","map","item","eventNode","key","id","emptyStateMessage","tct","env","t","panels","style","flex","loadingIndicator","loadingError","onRetry","length","ProjectChart","resolution","string","stats","releaseList","getStatsEndpoint","org","getOrganization","project","getProject","slug","getProjectReleasesEndpoint","statsQuery","stat","releasesQuery","_","jqXHR","renderChart","points","point","x","y","startX","markers","filter","release","Date","dateCreated","getTime","label","shortVersion","StyledBarChart","height","gap","dynamicWrapper","fixed","moment","format","styled","BarChart","target","PERIODS","Set","ProjectDashboard","defaultStatsPeriod","setProjectNavSection","func","getDefaultProps","objectSpread_default","getQueryStringState","location","has","getStatsPeriodBeginTimestamp","now","getStatsPeriodResolution","_this$props$params","orgName","projectSlug","url","routeQuery","react_document_title_default","title","marginBottom","pageHeading","withMargins","textAlign","marginTop","es","to","pathname","chart","eventList","withEnvironmentInQueryString"],"mappings":"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","file":"ProjectDashboard.js","sourcesContent":["import React from 'react';\n\nimport createReactClass from 'create-react-class';\n\nimport Count from 'app/components/count';\nimport EventOrGroupExtraDetails from 'app/components/eventOrGroupExtraDetails';\nimport EventOrGroupHeader from 'app/components/eventOrGroupHeader';\nimport ProjectState from 'app/mixins/projectState';\nimport SentryTypes from 'app/sentryTypes';\n\nconst EventNode = createReactClass({\n  displayName: 'EventNode',\n\n  propTypes: {\n    group: SentryTypes.Group.isRequired,\n  },\n\n  mixins: [ProjectState],\n\n  render() {\n    const group = this.props.group;\n    const userCount = group.userCount;\n\n    return (\n      <li className=\"group row\">\n        <div className=\"col-xs-8 event-details\">\n          <EventOrGroupHeader data={group} hideIcons hideLevel />\n          <EventOrGroupExtraDetails {...group} />\n        </div>\n\n        <div className=\"col-xs-2 event-count align-right\">\n          <Count value={group.count} />\n        </div>\n        <div className=\"col-xs-2 event-users align-right\">\n          <Count value={userCount} />\n        </div>\n      </li>\n    );\n  },\n});\n\nexport default EventNode;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport createReactClass from 'create-react-class';\nimport queryString from 'query-string';\n\nimport {Panel, PanelHeader, PanelBody} from 'app/components/panels';\nimport {t, tct} from 'app/locale';\nimport ApiMixin from 'app/mixins/apiMixin';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport SentryTypes from 'app/sentryTypes';\n\nimport EventNode from './eventNode';\n\nconst EventList = createReactClass({\n  displayName: 'EventList',\n\n  propTypes: {\n    type: PropTypes.oneOf(['new', 'priority']).isRequired,\n    environment: SentryTypes.Environment,\n    dateSince: PropTypes.number,\n  },\n\n  mixins: [ApiMixin],\n\n  getInitialState() {\n    return {\n      groupList: [],\n      loading: true,\n      error: false,\n      statsPeriod: '24h',\n    };\n  },\n\n  componentWillMount() {\n    this.fetchData();\n  },\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.environment !== this.props.environment) {\n      this.setState(\n        {\n          loading: true,\n          error: false,\n        },\n        this.fetchData\n      );\n    }\n  },\n\n  getEndpoint() {\n    const {params, type, environment} = this.props;\n\n    const qs = {\n      sort: type,\n      query: 'is:unresolved',\n      since: this.props.dateSince,\n    };\n\n    if (environment) {\n      qs.environment = environment.name;\n      qs.query = `${qs.query} environment:${environment.name}`;\n    }\n\n    return `/projects/${params.orgId}/${params.projectId}/issues/?${queryString.stringify(\n      qs\n    )}`;\n  },\n\n  getMinutes() {\n    switch (this.state.statsPeriod) {\n      case '15m':\n        return '15';\n      case '60m':\n        return '60';\n      case '24h':\n      default:\n        return '1440';\n    }\n  },\n\n  fetchData() {\n    const endpoint = this.getEndpoint();\n    const minutes = this.getMinutes();\n\n    this.api.request(endpoint, {\n      query: {\n        limit: 5,\n        minutes,\n      },\n      success: data => {\n        this.setState({\n          groupList: data,\n          loading: false,\n          error: false,\n        });\n      },\n      error: () => {\n        this.setState({\n          loading: false,\n          error: true,\n        });\n      },\n    });\n  },\n\n  onSelectStatsPeriod(period) {\n    this.setState({\n      statsPeriod: period,\n    });\n  },\n\n  render() {\n    const eventNodes = this.state.groupList.map(item => {\n      return <EventNode group={item} key={item.id} />;\n    });\n\n    const {environment} = this.props;\n\n    const emptyStateMessage = environment\n      ? tct('No data available in the [env] environment.', {\n          env: environment.displayName,\n        })\n      : t('No data available.');\n\n    return (\n      <Panel>\n        <PanelHeader>\n          <div className=\"row\" style={{flex: 1}}>\n            <div className=\"col-xs-8\">\n              {this.props.type === 'new' ? t('New issues') : t('Trending issues')}\n            </div>\n            <div className=\"col-xs-2 align-right\">{t('Events')}</div>\n            <div className=\"col-xs-2 align-right\">{t('Users')}</div>\n          </div>\n        </PanelHeader>\n        <PanelBody>\n          <div className=\"tab-pane active\">\n            {this.state.loading ? (\n              <LoadingIndicator />\n            ) : this.state.error ? (\n              <LoadingError onRetry={this.fetchData} />\n            ) : eventNodes.length ? (\n              <ul className=\"group-list group-list-small\">{eventNodes}</ul>\n            ) : (\n              <div className=\"group-list-empty\">{emptyStateMessage}</div>\n            )}\n          </div>\n        </PanelBody>\n      </Panel>\n    );\n  },\n});\n\nexport default EventList;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\nimport createReactClass from 'create-react-class';\nimport moment from 'moment';\nimport SentryTypes from 'app/sentryTypes';\nimport ApiMixin from 'app/mixins/apiMixin';\nimport BarChart from 'app/components/barChart';\nimport DynamicWrapper from 'app/components/dynamicWrapper';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport ProjectState from 'app/mixins/projectState';\n\nconst ProjectChart = createReactClass({\n  displayName: 'ProjectChart',\n\n  propTypes: {\n    dateSince: PropTypes.number.isRequired,\n    resolution: PropTypes.string.isRequired,\n    environment: SentryTypes.Environment,\n  },\n\n  mixins: [ApiMixin, ProjectState],\n\n  getInitialState() {\n    return {\n      loading: true,\n      error: false,\n      stats: [],\n      releaseList: [],\n      environment: this.props.environment,\n    };\n  },\n\n  componentWillMount() {\n    this.fetchData();\n  },\n\n  componentWillReceiveProps(nextProps) {\n    if (\n      nextProps.environment !== this.props.environment ||\n      nextProps.resolution !== this.props.resolution ||\n      nextProps.dateSince !== this.props.dateSince\n    ) {\n      this.setState(\n        {\n          environment: nextProps.environment,\n          loading: true,\n          error: false,\n        },\n        this.fetchData\n      );\n    }\n  },\n\n  getStatsEndpoint() {\n    const org = this.getOrganization();\n    const project = this.getProject();\n    return '/projects/' + org.slug + '/' + project.slug + '/stats/';\n  },\n\n  getProjectReleasesEndpoint() {\n    const org = this.getOrganization();\n    const project = this.getProject();\n    return '/projects/' + org.slug + '/' + project.slug + '/releases/';\n  },\n\n  fetchData() {\n    const statsQuery = {\n      since: this.props.dateSince,\n      resolution: this.props.resolution,\n      stat: 'generated',\n    };\n\n    const releasesQuery = {};\n\n    if (this.state.environment) {\n      statsQuery.environment = this.state.environment.name;\n      releasesQuery.environment = this.state.environment.name;\n    }\n    this.api.request(this.getStatsEndpoint(), {\n      query: statsQuery,\n      success: data => {\n        this.setState({\n          stats: data,\n          error: false,\n          loading: false,\n        });\n      },\n      error: () => {\n        this.setState({\n          error: true,\n          loading: false,\n        });\n      },\n    });\n\n    this.api.request(this.getProjectReleasesEndpoint(), {\n      query: releasesQuery,\n      success: (data, _, jqXHR) => {\n        this.setState({\n          releaseList: data,\n        });\n      },\n    });\n  },\n\n  renderChart() {\n    const points = this.state.stats.map(point => {\n      return {x: point[0], y: point[1]};\n    });\n    const startX = this.props.dateSince;\n    const markers = this.state.releaseList\n      .filter(release => {\n        const date = new Date(release.dateCreated).getTime() / 1000;\n        return date >= startX;\n      })\n      .map(release => {\n        return {\n          label: 'Version ' + release.shortVersion,\n          x: new Date(release.dateCreated).getTime() / 1000,\n        };\n      });\n\n    return (\n      <div className=\"chart-wrapper\">\n        <StyledBarChart\n          points={points}\n          markers={markers}\n          label=\"events\"\n          height={150}\n          gap={0.2}\n          className=\"standard-barchart\"\n        />\n        <small className=\"date-legend\">\n          <DynamicWrapper\n            fixed=\"Test Date 1, 2000\"\n            value={moment(this.props.dateSince * 1000).format('LL')}\n          />\n        </small>\n      </div>\n    );\n  },\n\n  render() {\n    return this.state.loading ? (\n      <LoadingIndicator />\n    ) : this.state.error ? (\n      <LoadingError onRetry={this.fetchData} />\n    ) : (\n      this.renderChart()\n    );\n  },\n});\n\nconst StyledBarChart = styled(BarChart)`\n  background: #fff;\n`;\n\nexport default ProjectChart;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport createReactClass from 'create-react-class';\nimport {Link} from 'react-router';\nimport DocumentTitle from 'react-document-title';\n\nimport SentryTypes from 'app/sentryTypes';\nimport ProjectState from 'app/mixins/projectState';\nimport PageHeading from 'app/components/pageHeading';\nimport {t} from 'app/locale';\nimport withEnvironmentInQueryString from 'app/utils/withEnvironmentInQueryString';\n\nimport EventList from './eventList';\nimport ProjectChart from './chart';\n\nconst PERIOD_HOUR = '1h';\nconst PERIOD_DAY = '1d';\nconst PERIOD_WEEK = '1w';\nconst PERIODS = new Set([PERIOD_HOUR, PERIOD_DAY, PERIOD_WEEK]);\n\nconst ProjectDashboard = createReactClass({\n  displayName: 'ProjectDashboard',\n\n  propTypes: {\n    defaultStatsPeriod: PropTypes.string,\n    setProjectNavSection: PropTypes.func,\n    environment: SentryTypes.Environment,\n  },\n\n  mixins: [ProjectState],\n\n  getDefaultProps() {\n    return {\n      defaultStatsPeriod: PERIOD_DAY,\n    };\n  },\n\n  getInitialState() {\n    return {\n      statsPeriod: this.props.defaultStatsPeriod,\n      ...this.getQueryStringState(),\n    };\n  },\n\n  componentWillMount() {\n    this.props.setProjectNavSection('dashboard');\n  },\n\n  componentWillReceiveProps(nextProps) {\n    this.setState(this.getQueryStringState(nextProps));\n  },\n\n  getQueryStringState(props) {\n    props = props || this.props;\n    const currentQuery = props.location.query;\n    let statsPeriod = currentQuery.statsPeriod;\n\n    if (!PERIODS.has(statsPeriod)) {\n      statsPeriod = props.defaultStatsPeriod;\n    }\n\n    return {\n      statsPeriod,\n    };\n  },\n\n  getStatsPeriodBeginTimestamp(statsPeriod) {\n    const now = new Date().getTime() / 1000;\n    switch (statsPeriod) {\n      case PERIOD_WEEK:\n        return now - 3600 * 24 * 7;\n      case PERIOD_HOUR:\n        return now - 3600;\n      case PERIOD_DAY:\n      default:\n        return now - 3600 * 24;\n    }\n  },\n\n  getStatsPeriodResolution(statsPeriod) {\n    switch (statsPeriod) {\n      case PERIOD_WEEK:\n        return '1h';\n      case PERIOD_HOUR:\n        return '10s';\n      case PERIOD_DAY:\n      default:\n        return '1h';\n    }\n  },\n\n  render() {\n    const {statsPeriod} = this.state;\n    const dateSince = this.getStatsPeriodBeginTimestamp(statsPeriod);\n    const resolution = this.getStatsPeriodResolution(statsPeriod);\n    const {orgId, projectId} = this.props.params;\n    const {name: orgName} = this.getOrganization();\n    const {slug: projectSlug} = this.getProject();\n    const url = `/${orgId}/${projectId}/dashboard/`;\n    const routeQuery = this.props.location.query;\n\n    return (\n      <DocumentTitle title={`Overview - ${projectSlug} - ${orgName} - Sentry`}>\n        <div>\n          <div className=\"row\" style={{marginBottom: '5px'}}>\n            <div className=\"col-sm-9\">\n              <PageHeading withMargins>{t('Overview')}</PageHeading>\n            </div>\n            <div className=\"col-sm-3\" style={{textAlign: 'right', marginTop: '4px'}}>\n              <div className=\"btn-group\">\n                <Link\n                  to={{\n                    pathname: url,\n                    query: {...routeQuery, statsPeriod: PERIOD_HOUR},\n                  }}\n                  className={\n                    'btn btn-sm btn-default' +\n                    (statsPeriod === PERIOD_HOUR ? ' active' : '')\n                  }\n                >\n                  {t('1 hour')}\n                </Link>\n                <Link\n                  to={{\n                    pathname: url,\n                    query: {...routeQuery, statsPeriod: PERIOD_DAY},\n                  }}\n                  className={\n                    'btn btn-sm btn-default' +\n                    (statsPeriod === PERIOD_DAY ? ' active' : '')\n                  }\n                >\n                  {t('1 day')}\n                </Link>\n                <Link\n                  to={{\n                    pathname: url,\n                    query: {...routeQuery, statsPeriod: PERIOD_WEEK},\n                  }}\n                  className={\n                    'btn btn-sm btn-default' +\n                    (statsPeriod === PERIOD_WEEK ? ' active' : '')\n                  }\n                >\n                  {t('1 week')}\n                </Link>\n              </div>\n            </div>\n          </div>\n          <ProjectChart\n            dateSince={dateSince}\n            resolution={resolution}\n            environment={this.props.environment}\n          />\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <EventList\n                type=\"priority\"\n                environment={this.props.environment}\n                dateSince={dateSince}\n                params={this.props.params}\n              />\n            </div>\n            <div className=\"col-md-6\">\n              <EventList\n                type=\"new\"\n                environment={this.props.environment}\n                dateSince={dateSince}\n                params={this.props.params}\n              />\n            </div>\n          </div>\n        </div>\n      </DocumentTitle>\n    );\n  },\n});\n\nexport default withEnvironmentInQueryString(ProjectDashboard);\n"],"sourceRoot":""}