# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class PublicUserProfile(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, biography=None, email=None, username=None, avatar_url=None, avatar_source=None, last_name=None, links=None, first_name=None, short_info=None):
        """
        PublicUserProfile - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'biography': 'str',
            'email': 'str',
            'username': 'str',
            'avatar_url': 'str',
            'avatar_source': 'AvatarSourceEnum',
            'last_name': 'str',
            'links': 'list[TypedLink]',
            'first_name': 'str',
            'short_info': 'str'
        }

        self.attribute_map = {
            'biography': 'biography',
            'email': 'email',
            'username': 'username',
            'avatar_url': 'avatarUrl',
            'avatar_source': 'avatarSource',
            'last_name': 'lastName',
            'links': 'links',
            'first_name': 'firstName',
            'short_info': 'shortInfo'
        }

        self._biography = biography
        self._email = email
        self._username = username
        self._avatar_url = avatar_url
        self._avatar_source = avatar_source
        self._last_name = last_name
        self._links = links
        self._first_name = first_name
        self._short_info = short_info

    @property
    def biography(self):
        """
        Gets the biography of this PublicUserProfile.


        :return: The biography of this PublicUserProfile.
        :rtype: str
        """
        return self._biography

    @biography.setter
    def biography(self, biography):
        """
        Sets the biography of this PublicUserProfile.


        :param biography: The biography of this PublicUserProfile.
        :type: str
        """
        
        self._biography = biography

    @property
    def email(self):
        """
        Gets the email of this PublicUserProfile.


        :return: The email of this PublicUserProfile.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this PublicUserProfile.


        :param email: The email of this PublicUserProfile.
        :type: str
        """
        
        self._email = email

    @property
    def username(self):
        """
        Gets the username of this PublicUserProfile.


        :return: The username of this PublicUserProfile.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this PublicUserProfile.


        :param username: The username of this PublicUserProfile.
        :type: str
        """
        
        self._username = username

    @property
    def avatar_url(self):
        """
        Gets the avatar_url of this PublicUserProfile.


        :return: The avatar_url of this PublicUserProfile.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """
        Sets the avatar_url of this PublicUserProfile.


        :param avatar_url: The avatar_url of this PublicUserProfile.
        :type: str
        """
        
        self._avatar_url = avatar_url

    @property
    def avatar_source(self):
        """
        Gets the avatar_source of this PublicUserProfile.


        :return: The avatar_source of this PublicUserProfile.
        :rtype: AvatarSourceEnum
        """
        return self._avatar_source

    @avatar_source.setter
    def avatar_source(self, avatar_source):
        """
        Sets the avatar_source of this PublicUserProfile.


        :param avatar_source: The avatar_source of this PublicUserProfile.
        :type: AvatarSourceEnum
        """
        
        self._avatar_source = avatar_source

    @property
    def last_name(self):
        """
        Gets the last_name of this PublicUserProfile.


        :return: The last_name of this PublicUserProfile.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this PublicUserProfile.


        :param last_name: The last_name of this PublicUserProfile.
        :type: str
        """
        
        self._last_name = last_name

    @property
    def links(self):
        """
        Gets the links of this PublicUserProfile.


        :return: The links of this PublicUserProfile.
        :rtype: list[TypedLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this PublicUserProfile.


        :param links: The links of this PublicUserProfile.
        :type: list[TypedLink]
        """
        
        self._links = links

    @property
    def first_name(self):
        """
        Gets the first_name of this PublicUserProfile.


        :return: The first_name of this PublicUserProfile.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this PublicUserProfile.


        :param first_name: The first_name of this PublicUserProfile.
        :type: str
        """
        
        self._first_name = first_name

    @property
    def short_info(self):
        """
        Gets the short_info of this PublicUserProfile.


        :return: The short_info of this PublicUserProfile.
        :rtype: str
        """
        return self._short_info

    @short_info.setter
    def short_info(self, short_info):
        """
        Sets the short_info of this PublicUserProfile.


        :param short_info: The short_info of this PublicUserProfile.
        :type: str
        """
        
        self._short_info = short_info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




