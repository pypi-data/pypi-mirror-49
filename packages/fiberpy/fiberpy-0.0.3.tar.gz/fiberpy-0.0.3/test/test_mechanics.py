import numpy as np
import pytest

from fiberpy.mechanics import A2Eij, FiberComposite

# RVE data for Moldflow A218V50
rve_data = {
    "rho0": 1.14e-9,
    "E0": 631.66,
    "nu0": 0.42925,
    "alpha0": 5.86e-5,
    "rho1": 2.55e-9,
    "E1": 72000,
    "nu1": 0.22,
    "alpha1": 5e-6,
    "mf": 0.5,
    "aspect_ratio": 17.983,
}
fiber = FiberComposite(rve_data)

# Reference data generated by Digimat
Eij_Digimat_2d = np.array(
    [[3.92735e+03, 3.92735e+03, 1.88993e+03, 1.45310e+03, 4.05540e+02, 4.05540e+02, 3.51416e-01, 4.52022e-01, 2.17523e-01],
     [4.30739e+03, 3.57553e+03, 1.88402e+03, 1.44280e+03, 4.04380e+02, 4.06710e+02, 3.83972e-01, 4.76465e-01, 1.87011e-01],
     [4.71828e+03, 3.24903e+03, 1.86616e+03, 1.41190e+03, 4.03220e+02, 4.07870e+02, 4.15790e-01, 5.00628e-01, 1.59619e-01],
     [5.16350e+03, 2.94569e+03, 1.83650e+03, 1.36030e+03, 4.02050e+02, 4.09030e+02, 4.45986e-01, 5.24343e-01, 1.35381e-01],
     [5.64650e+03, 2.66348e+03, 1.79517e+03, 1.28790e+03, 4.00890e+02, 4.10200e+02, 4.73286e-01, 5.47486e-01, 1.14346e-01],
     [6.17084e+03, 2.40032e+03, 1.74230e+03, 1.19470e+03, 3.99730e+02, 4.11360e+02, 4.95920e-01, 5.70016e-01, 9.65277e-02],
     [6.73974e+03, 2.15467e+03, 1.67830e+03, 1.08070e+03, 3.98570e+02, 4.12520e+02, 5.11390e-01, 5.91794e-01, 8.19434e-02],
     [7.35542e+03, 1.92498e+03, 1.60340e+03, 9.45940e+02, 3.97400e+02, 4.13680e+02, 5.15989e-01, 6.12829e-01, 7.06132e-02],
     [8.01847e+03, 1.70961e+03, 1.51795e+03, 7.90370e+02, 3.96240e+02, 4.14850e+02, 5.04619e-01, 6.33106e-01, 6.24842e-02],
     [8.72648e+03, 1.50733e+03, 1.42233e+03, 6.14080e+02, 3.95080e+02, 4.16010e+02, 4.69675e-01, 6.52636e-01, 5.75241e-02],
     [9.47002e+03, 1.31677e+03, 1.31677e+03, 4.17170e+02, 3.93910e+02, 4.17170e+02, 4.00298e-01, 6.71456e-01, 5.56600e-02]]
)
Eij_Digimat_3d = np.array(
    [[2.61296e+03, 2.61315e+03, 2.61296e+03, 9.61870e+02, 9.61870e+02, 9.61940e+02, 3.58230e-01, 3.58255e-01, 3.58301e-01],
     [2.98581e+03, 2.45197e+03, 2.45197e+03, 9.91210e+02, 8.84030e+02, 9.91210e+02, 3.78803e-01, 3.86391e-01, 3.11077e-01],
     [3.42892e+03, 2.30287e+03, 2.30295e+03, 9.99500e+02, 8.11290e+02, 9.99440e+02, 3.96589e-01, 4.17909e-01, 2.66343e-01],
     [3.94302e+03, 2.16221e+03, 2.16207e+03, 9.87760e+02, 7.43410e+02, 9.87820e+02, 4.11234e-01, 4.51260e-01, 2.25542e-01],
     [4.52855e+03, 2.02706e+03, 2.02706e+03, 9.57170e+02, 6.80460e+02, 9.57170e+02, 4.22578e-01, 4.85352e-01, 1.89153e-01],
     [5.18506e+03, 1.89661e+03, 1.89673e+03, 9.08520e+02, 6.22170e+02, 9.08470e+02, 4.30197e-01, 5.19321e-01, 1.57327e-01],
     [5.91133e+03, 1.77060e+03, 1.77056e+03, 8.42520e+02, 5.68240e+02, 8.42570e+02, 4.33604e-01, 5.52602e-01, 1.29899e-01],
     [6.70593e+03, 1.64880e+03, 1.64880e+03, 7.59950e+02, 5.18740e+02, 7.59950e+02, 4.32738e-01, 5.84774e-01, 1.06398e-01],
     [7.56615e+03, 1.53196e+03, 1.53196e+03, 6.61270e+02, 4.73310e+02, 6.61250e+02, 4.27111e-01, 6.15479e-01, 8.64795e-02],
     [8.48867e+03, 1.42098e+03, 1.42098e+03, 5.46900e+02, 4.31750e+02, 5.46920e+02, 4.16393e-01, 6.44459e-01, 6.97028e-02],
     [9.47002e+03, 1.31677e+03, 1.31677e+03, 4.17170e+02, 3.93910e+02, 4.17170e+02, 4.00298e-01, 6.71456e-01, 5.56600e-02]]
)


@pytest.mark.parametrize(
    "fiber_orientation_type", ["2d", "3d"])
def test_elastic_properties(fiber_orientation_type):
    if fiber_orientation_type == "2d":
        ref = Eij_Digimat_2d
        a11 = np.linspace(0.5, 1, len(ref))

        def a_from_a11(a11):
            return np.array([a11, 1 - a11, 0])
    else:
        ref = Eij_Digimat_3d
        a11 = np.linspace(1 / 3, 1, len(ref))

        def a_from_a11(a11):
            return np.array([a11, (1 - a11) / 2, (1 - a11) / 2])

    Eij = np.zeros((len(a11), 9))
    for i in range(len(a11)):
        a = a_from_a11(a11[i])
        Eij[i, :] = A2Eij(fiber.ABar(a))
        assert np.allclose(Eij[i], ref[i], rtol=1e-3)


def test_thermal_properties():
    alpha = np.diag(fiber.alphaBar(fiber.TandonWeng()))
    ref = (8.29181165e-06, 5.44419385e-05, 5.44419385e-05)
    assert np.allclose(alpha, ref)
