# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class GroupCreationParams(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, grid_search_parameters=None, name=None, description=None, tags=None, project_id=None, metric=None, experiment_template_params=None):
        """
        GroupCreationParams - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'grid_search_parameters': 'list[GridSearchParameter]',
            'name': 'str',
            'description': 'str',
            'tags': 'list[str]',
            'project_id': 'str',
            'metric': 'Metric',
            'experiment_template_params': 'ExperimentTemplateParams'
        }

        self.attribute_map = {
            'grid_search_parameters': 'gridSearchParameters',
            'name': 'name',
            'description': 'description',
            'tags': 'tags',
            'project_id': 'projectId',
            'metric': 'metric',
            'experiment_template_params': 'experimentTemplateParams'
        }

        self._grid_search_parameters = grid_search_parameters
        self._name = name
        self._description = description
        self._tags = tags
        self._project_id = project_id
        self._metric = metric
        self._experiment_template_params = experiment_template_params

    @property
    def grid_search_parameters(self):
        """
        Gets the grid_search_parameters of this GroupCreationParams.


        :return: The grid_search_parameters of this GroupCreationParams.
        :rtype: list[GridSearchParameter]
        """
        return self._grid_search_parameters

    @grid_search_parameters.setter
    def grid_search_parameters(self, grid_search_parameters):
        """
        Sets the grid_search_parameters of this GroupCreationParams.


        :param grid_search_parameters: The grid_search_parameters of this GroupCreationParams.
        :type: list[GridSearchParameter]
        """
        
        self._grid_search_parameters = grid_search_parameters

    @property
    def name(self):
        """
        Gets the name of this GroupCreationParams.


        :return: The name of this GroupCreationParams.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this GroupCreationParams.


        :param name: The name of this GroupCreationParams.
        :type: str
        """
        
        self._name = name

    @property
    def description(self):
        """
        Gets the description of this GroupCreationParams.


        :return: The description of this GroupCreationParams.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this GroupCreationParams.


        :param description: The description of this GroupCreationParams.
        :type: str
        """
        
        self._description = description

    @property
    def tags(self):
        """
        Gets the tags of this GroupCreationParams.


        :return: The tags of this GroupCreationParams.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this GroupCreationParams.


        :param tags: The tags of this GroupCreationParams.
        :type: list[str]
        """
        
        self._tags = tags

    @property
    def project_id(self):
        """
        Gets the project_id of this GroupCreationParams.


        :return: The project_id of this GroupCreationParams.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """
        Sets the project_id of this GroupCreationParams.


        :param project_id: The project_id of this GroupCreationParams.
        :type: str
        """
        
        self._project_id = project_id

    @property
    def metric(self):
        """
        Gets the metric of this GroupCreationParams.


        :return: The metric of this GroupCreationParams.
        :rtype: Metric
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """
        Sets the metric of this GroupCreationParams.


        :param metric: The metric of this GroupCreationParams.
        :type: Metric
        """
        
        self._metric = metric

    @property
    def experiment_template_params(self):
        """
        Gets the experiment_template_params of this GroupCreationParams.


        :return: The experiment_template_params of this GroupCreationParams.
        :rtype: ExperimentTemplateParams
        """
        return self._experiment_template_params

    @experiment_template_params.setter
    def experiment_template_params(self, experiment_template_params):
        """
        Sets the experiment_template_params of this GroupCreationParams.


        :param experiment_template_params: The experiment_template_params of this GroupCreationParams.
        :type: ExperimentTemplateParams
        """
        
        self._experiment_template_params = experiment_template_params

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




