comment
  This is a file with custom definitions for Gaphor's data model.

  Parts are separated by '%%' (no training spaces) on a line.
  Comment parts start with 'comment' on the line below the percentage
  symbols, 'override' is used to define a overridden variable.

  Overrides may in their turn derive from other properties, in that case
  the 'derives' keyword may be used. It's only useful to declare the
  associations (and other derived properties) an overridden value depends
  on, since attributes have been written anyway. Note that no smart things
  wrt inheritance is done.
%%
override Element
from gaphor.UML.element import Element
%%
override Diagram
from gaphor.UML.diagram import Diagram
%%
override Transition
class Transition(RedefinableElement, NamedElement): pass
%%
override MultiplicityElement.lower derives MultiplicityElement.lowerValue
MultiplicityElement.lower = derived('lower', object, 0, 1, MultiplicityElement.lowerValue)
MultiplicityElement.lower.filter = lambda obj: [ obj.lowerValue ]
#MultiplicityElement.lower = MultiplicityElement.lowerValue
%%
override MultiplicityElement.upper derives MultiplicityElement.upperValue
MultiplicityElement.upper = derived('upper', object, 0, 1, MultiplicityElement.upperValue)
MultiplicityElement.upper.filter = lambda obj: [ obj.upperValue ]
#MultiplicityElement.upper = MultiplicityElement.upperValue
%%
override NamedElement.qualifiedName

def namedelement_qualifiedname(self):
    """
    Returns the qualified name of the element as a tuple
    """
    if self.namespace:
        return self.namespace.qualifiedName + (self.name,)
    else:
        return (self.name,)

NamedElement.qualifiedName = property(namedelement_qualifiedname, doc=namedelement_qualifiedname.__doc__)

del namedelement_qualifiedname
%%
override Association.endType derives Association.memberEnd Property.type

# References the classifiers that are used as types of the ends of the
# association.

Association.endType = derived('endType', Type, 0, '*', Association.memberEnd, Property.type)
Association.endType.filter = lambda self: [end.type for end in self.memberEnd if end]

%%
override Class.extension derives Extension.metaclass
# See https://www.omg.org/spec/UML/2.5/PDF, section 11.8.3.6, page 219
# It defines `Extension.allInstances()`, which basically means we have to query the element factory.
def class_extension(self):
    return list(self.model.select(lambda e: e.isKindOf(Extension) and self is e.metaclass))

# TODO: use those as soon as Extension.metaclass can be used.
#Class.extension = derived('extension', Extension, 0, '*', Extension.metaclass)
#Class.extension.filter = class_extension

Class.extension = property(class_extension, doc=\
"""References the Extensions that specify additional properties of the
metaclass. The property is derived from the extensions whose memberEnds
are typed by the Class.""")
del class_extension
%%
override Extension.metaclass derives Extension.ownedEnd Association.memberEnd
# See https://www.omg.org/spec/UML/2.5/PDF, section 12.4.1.5, page 271
def extension_metaclass(self):
    ownedEnd = self.ownedEnd
    metaend = [e for e in self.memberEnd if e is not ownedEnd]
    if metaend:
        return metaend[0].type

# Don't use derived() now, it can not deal with a [0..1] property derived from a [0..*] property.
#Extension.metaclass = derived('metaclass', Class, 0, 1, Extension.ownedEnd, Association.memberEnd)
#Extension.metaclass.filter = extension_metaclass
Extension.metaclass = property(extension_metaclass, doc=\
"""References the Class that is extended through an Extension. The
property is derived from the type of the memberEnd that is not the
ownedEnd.""")
del extension_metaclass
%%
override Classifier.inheritedMember
Classifier.inheritedMember = derivedunion('inheritedMember', NamedElement, 0, '*')
%%
override Classifier.general
def classifier_general(self):
    return [g.general for g in self.generalization]

Classifier.general = property(classifier_general, doc="""
    Return a list of all superclasses for class (iterating the Generalizations.
    """)
del classifier_general
%%
override Class.superClass
Class.superClass = Classifier.general
%%
override Namespace.importedMember
Namespace.importedMember = derivedunion('importedMember', PackageableElement, 0, '*')
%%
override Property.opposite

def property_opposite(self):
    """
    In the case where the property is one navigable end of a binary
    association with both ends navigable, this gives the other end.

    For Gaphor the property on the other end is returned regardless the
    navigability.
    """
    if self.association is not None and len(self.association.memberEnd) == 2:
        return self.association.memberEnd[0] is self \
               and self.association.memberEnd[1] \
               or self.association.memberEnd[0]
    return None

Property.opposite = property(property_opposite, doc=property_opposite.__doc__)

del property_opposite

%%
override Property.isComposite derives Property.aggregation
#Property.isComposite = property(lambda self: self.aggregation == 'composite')
Property.isComposite = derivedunion('isComposite', bool, 0, 1, Property.aggregation)
Property.isComposite.filter = lambda obj: [obj.aggregation == 'composite']
%%
override Constraint.context
Constraint.context = derivedunion('context', Namespace, 0, 1)
%%
override Property.navigability

def property_navigability(self):
    """
    Get navigability of an association end.
    If no association is related to the property, then unknown navigability
    is assumed.
    """
    assoc = self.association
    if not assoc or not self.opposite:
        return None # assume unknown
    owner = self.opposite.type
    if owner and ((type(self.type) in (Class, Interface) \
                and self in owner.ownedAttribute) \
            or self in assoc.navigableOwnedEnd):
        return True
    elif self in assoc.ownedEnd:
        return None
    else:
        return False

Property.navigability = property(property_navigability, doc=property_navigability.__doc__)

del property_navigability
%%
override Operation.type
Operation.type = derivedunion('type', DataType, 0, 1)
%%
override Lifeline.parse
from gaphor.UML.umllex import parse_lifeline
Lifeline.parse = parse_lifeline
del parse_lifeline
%%
override Lifeline.render
from gaphor.UML.umllex import render_lifeline
Lifeline.render = render_lifeline
del render_lifeline
%%
override Extenstion.metaclass

def extension_metaclass(self):
    """
    References the Class that is extended through an Extension. The
    property is derived from the type of the memberEnd that is not the
    ownedEnd.
    """
    for m in self.memberEnd:
        if m not in self.ownedEnd:
            return m
    return None

Extenstion.metaclass = property(extension_metaclass, doc=extension_metaclass.__doc__)
del extension_metaclass
%%
override Component.provided
import itertools

def _pr_interface_deps(classifier, dep_type):
    """
    Return all interfaces, which are connected to a classifier with given
    dependency type.
    """
    return (dep.supplier[0] for dep in classifier.clientDependency \
        if dep.isKindOf(dep_type) and dep.supplier[0].isKindOf(Interface))

def _pr_rc_interface_deps(component, dep_type):
    """
    Return all interfaces, which are connected to realizing classifiers of
    specified component. Returned interfaces are connected to realizing
    classifiers with given dependency type.

    Generator of generators is returned. Do not forget to flat it later.
    """
    return (_pr_interface_deps(r.realizingClassifier, dep_type) for r in component.realization)

def component_provided(self):
    implementations = (impl.contract[0] for impl in self.implementation if impl.isKindOf(Implementation))
    realizations = _pr_interface_deps(self, Realization)

    # realizing classifiers realizations
    # this generator of generators, so flatten it later
    rc_realizations = _pr_rc_interface_deps(self, Realization)

    return tuple(set(itertools.chain(implementations, realizations, *rc_realizations)))

Component.provided = property(component_provided, doc="""
    Interfaces provided to component environment.
    """)
del component_provided
%%
override Component.required
def component_required(self):
    usages = _pr_interface_deps(self, Usage)

    # realizing classifiers usages
    # this generator of generators, so flatten it later
    rc_usages = _pr_rc_interface_deps(self, Usage)

    return tuple(set(itertools.chain(usages, *rc_usages)))

Component.required = property(component_required, doc="""
    Interfaces required by component.
    """)
del component_required
%%
override Message.messageKind

def message_messageKind(self):
    kind = 'unknown'
    if self.sendEvent:
        kind = 'lost'
        if self.receiveEvent:
            kind = 'complete'
    elif self.receiveEvent:
        kind = 'found'
    return kind

Message.messageKind = property(message_messageKind, doc="""
    MessageKind
    """)
del message_messageKind


%%
override StructuredClassifier.part
def structuredclassifier_part(self):
    return tuple(a for a in self.ownedAttribute if a.isComposite)

StructuredClassifier.part = property(structuredclassifier_part, doc="""
    Properties owned by a classifier by composition.
""")
del structuredclassifier_part
