# -*- coding: utf-8 -*-

"""
    api_tester_upload_test

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from api_tester_upload_test.api_helper import APIHelper

class Data(object):

    """Implementation of the 'data' model.

    TODO: type model description here.

    Attributes:
        share_key (string): TODO: type description here.
        exists (string): TODO: type description here.
        path (list of string): TODO: type description here.
        share_url (string): TODO: type description here.
        id (string): TODO: type description here.
        application_data (string): TODO: type description here.
        name (string): TODO: type description here.
        date_created (datetime): TODO: type description here.
        to (string): TODO: type description here.
        parent_id (string): TODO: type description here.
        date_meta_last_modified (datetime): TODO: type description here.
        date_content_last_modified (datetime): TODO: type description here.
        size (int): TODO: type description here.
        mime (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "share_key":'share_key',
        "exists":'exists',
        "path":'path',
        "share_url":'share_url',
        "id":'id',
        "application_data":'application_data',
        "name":'name',
        "date_created":'date_created',
        "to":'to',
        "parent_id":'parent_id',
        "date_meta_last_modified":'date_meta_last_modified',
        "date_content_last_modified":'date_content_last_modified',
        "size":'size',
        "mime":'mime'
    }

    def __init__(self,
                 share_key=None,
                 exists=None,
                 path=None,
                 share_url=None,
                 id=None,
                 application_data=None,
                 name=None,
                 date_created=None,
                 to=None,
                 parent_id=None,
                 date_meta_last_modified=None,
                 date_content_last_modified=None,
                 size=None,
                 mime=None):
        """Constructor for the Data class"""

        # Initialize members of the class
        self.share_key = share_key
        self.exists = exists
        self.path = path
        self.share_url = share_url
        self.id = id
        self.application_data = application_data
        self.name = name
        self.date_created = APIHelper.RFC3339DateTime(date_created) if date_created else None
        self.to = to
        self.parent_id = parent_id
        self.date_meta_last_modified = APIHelper.RFC3339DateTime(date_meta_last_modified) if date_meta_last_modified else None
        self.date_content_last_modified = APIHelper.RFC3339DateTime(date_content_last_modified) if date_content_last_modified else None
        self.size = size
        self.mime = mime


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        share_key = dictionary.get('share_key')
        exists = dictionary.get('exists')
        path = dictionary.get('path')
        share_url = dictionary.get('share_url')
        id = dictionary.get('id')
        application_data = dictionary.get('application_data')
        name = dictionary.get('name')
        date_created = APIHelper.RFC3339DateTime.from_value(dictionary.get("date_created")).datetime if dictionary.get("date_created") else None
        to = dictionary.get('to')
        parent_id = dictionary.get('parent_id')
        date_meta_last_modified = APIHelper.RFC3339DateTime.from_value(dictionary.get("date_meta_last_modified")).datetime if dictionary.get("date_meta_last_modified") else None
        date_content_last_modified = APIHelper.RFC3339DateTime.from_value(dictionary.get("date_content_last_modified")).datetime if dictionary.get("date_content_last_modified") else None
        size = dictionary.get('size')
        mime = dictionary.get('mime')

        # Return an object of this model
        return cls(share_key,
                   exists,
                   path,
                   share_url,
                   id,
                   application_data,
                   name,
                   date_created,
                   to,
                   parent_id,
                   date_meta_last_modified,
                   date_content_last_modified,
                   size,
                   mime)


