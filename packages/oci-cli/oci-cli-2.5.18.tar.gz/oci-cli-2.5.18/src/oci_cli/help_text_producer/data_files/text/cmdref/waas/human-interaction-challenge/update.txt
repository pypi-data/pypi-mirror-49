update
******


Description
===========

Updates the Human Interaction Challenge (HIC) settings in the Web
Application Firewall configuration for a WAAS policy. HIC is a
countermeasure that allows the proxy to check the user's browser for
various behaviors that distinguish a human presence from a bot.


Usage
=====

   oci waas human-interaction-challenge update [OPTIONS]


Options
=======


--waas-policy-id [text]
-----------------------

The OCID of the WAAS policy. [required]


--is-enabled [boolean]
----------------------

Enables or disables the human interaction challenge Web Application
Firewall feature. [required]


--action [DETECT|BLOCK]
-----------------------

The action to take against requests from detected bots. If
unspecified, defaults to *DETECT*.


--failure-threshold [integer]
-----------------------------

The number of failed requests before taking action. If unspecified,
defaults to *10*.


--action-expiration-in-seconds [integer]
----------------------------------------

The number of seconds between challenges for the same IP address. If
unspecified, defaults to *60*.


--failure-threshold-expiration-in-seconds [integer]
---------------------------------------------------

The number of seconds before the failure threshold resets. If
unspecified, defaults to  *60*.


--interaction-threshold [integer]
---------------------------------

The number of interactions required to pass the challenge. If
unspecified, defaults to *3*.


--recording-period-in-seconds [integer]
---------------------------------------

The number of seconds to record the interactions from the user. If
unspecified, defaults to *15*.


--set-http-header [complex type]
--------------------------------

Adds an additional HTTP header to requests that fail the challenge
before being passed to the origin. Only applicable when the *action*
is set to *DETECT*. This is a complex type whose value must be valid
JSON. The value can be provided as a string on the command line or
passed in as a file using the file://path/to/file syntax.

The --generate-param-json-input option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


--challenge-settings [complex type]
-----------------------------------

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The --generate-param-json-input option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


--if-match [text]
-----------------

For optimistic concurrency control. In the *PUT* or *DELETE* call for
a resource, set the *if-match* parameter to the value of the etag from
a previous *GET* or *POST* response for that resource. The resource
will be updated or deleted only if the etag provided matches the
resource's current etag value.


--force
-------

Perform update without prompting for confirmation.


--wait-for-state [ACCEPTED|IN_PROGRESS|FAILED|SUCCEEDED|CANCELING|CANCELED]
---------------------------------------------------------------------------

This operation asynchronously creates, modifies or deletes a resource
and uses a work request to track the progress of the operation.
Specify this option to perform the action and then wait until the work
request reaches a certain state. If timeout is reached, a return code
of 2 is returned. For any other error, a return code of 1 is returned.


--max-wait-seconds [integer]
----------------------------

The maximum time to wait for the work request to reach the state
defined by --wait-for-state. Defaults to 1200 seconds.


--wait-interval-seconds [integer]
---------------------------------

Check every --wait-interval-seconds to see whether the work request to
see if it has reached the state defined by --wait-for-state. Defaults
to 30 seconds.


--from-json [text]
------------------

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The --generate-full-command-json-input option can be used to generate
a sample json file to be used with this command option. The key names
are pre-populated and match the command option names (converted to
camelCase format, e.g. compartment-id --> compartmentId), while the
values of the keys need to be populated by the user before using the
sample file as an input to this command. For any command option that
accepts multiple values, the value of the key can be a JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our "using CLI with
advanced JSON options" link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions


-?, -h, --help
--------------

For detailed help on any of these individual commands, enter <command>
--help.
