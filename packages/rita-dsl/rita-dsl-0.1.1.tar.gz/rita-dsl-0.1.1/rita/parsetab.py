# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = "3.10"

_lr_method = "LALR"

_lr_signature = "nonassocARROWnonassocCOMMAleftASSIGNleftRBRACKETLBRACKETLPARENRPARENleftKEYWORDNAMELITERALrightMODIF_QMARKMODIF_STARMODIF_PLUSARROW ASSIGN COMMA EXEC KEYWORD LBRACKET LITERAL LPAREN MODIF_PLUS MODIF_QMARK MODIF_STAR NAME RBRACKET RPAREN\n        DOCUMENT : MACRO_CHAIN\n                 | VARIABLE\n        \n        DOCUMENT : DOCUMENT MACRO_CHAIN\n                 | DOCUMENT VARIABLE\n         MACRO_CHAIN : MACRO ARROW MACRO  MACRO_CHAIN : ARRAY ARROW MACRO  MACRO_CHAIN : EXEC MACRO \n        MACRO : MACRO MODIF_PLUS\n              | MACRO MODIF_STAR\n              | MACRO MODIF_QMARK\n         MACRO : KEYWORD  MACRO : KEYWORD LPAREN ARGS RPAREN  MACRO : KEYWORD ARRAY  ARRAY : LBRACKET ARGS RBRACKET  VARIABLE_NAME : NAME  VARIABLE : NAME ASSIGN ARGS  ARGS : ARGS COMMA ARG  ARGS : ARG  ARG : LITERAL  ARG : MACRO  ARG : VARIABLE_NAME  ARGS : ARRAY "

_lr_action_items = {
    "KEYWORD": (
        [
            0,
            1,
            2,
            3,
            6,
            7,
            9,
            10,
            11,
            12,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
        ],
        [
            1,
            -11,
            -1,
            1,
            1,
            1,
            -2,
            1,
            -13,
            -18,
            -20,
            -15,
            -19,
            -22,
            -21,
            -8,
            -9,
            1,
            -10,
            1,
            -7,
            -3,
            -4,
            1,
            -14,
            1,
            -5,
            -16,
            -6,
            -12,
            -17,
        ],
    ),
    "MODIF_PLUS": (
        [1, 4, 11, 14, 19, 20, 22, 24, 29, 31, 33, 34],
        [-11, 19, -13, 19, -8, -9, -10, 19, -14, 19, 19, -12],
    ),
    "LBRACKET": (
        [
            0,
            1,
            2,
            3,
            7,
            9,
            10,
            11,
            12,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            22,
            23,
            24,
            25,
            26,
            29,
            31,
            32,
            33,
            34,
            35,
        ],
        [
            3,
            -11,
            -1,
            3,
            3,
            -2,
            3,
            -13,
            -18,
            -20,
            -15,
            -19,
            -22,
            -21,
            -8,
            -9,
            -10,
            3,
            -7,
            -3,
            -4,
            -14,
            -5,
            -16,
            -6,
            -12,
            -17,
        ],
    ),
    "RPAREN": (
        [1, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 28, 29, 34, 35],
        [-11, -13, -18, -20, -15, -19, -22, -21, -8, -9, -10, 34, -14, -12, -17],
    ),
    "RBRACKET": (
        [1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 29, 34, 35],
        [-11, -13, -18, 29, -20, -15, -19, -22, -21, -8, -9, -10, -14, -12, -17],
    ),
    "ASSIGN": ([5], [23]),
    "NAME": (
        [
            0,
            1,
            2,
            3,
            7,
            9,
            10,
            11,
            12,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            22,
            23,
            24,
            25,
            26,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
        ],
        [
            5,
            -11,
            -1,
            15,
            5,
            -2,
            15,
            -13,
            -18,
            -20,
            -15,
            -19,
            -22,
            -21,
            -8,
            -9,
            -10,
            15,
            -7,
            -3,
            -4,
            -14,
            15,
            -5,
            -16,
            -6,
            -12,
            -17,
        ],
    ),
    "EXEC": (
        [
            0,
            1,
            2,
            7,
            9,
            11,
            12,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            22,
            24,
            25,
            26,
            29,
            31,
            32,
            33,
            34,
            35,
        ],
        [
            6,
            -11,
            -1,
            6,
            -2,
            -13,
            -18,
            -20,
            -15,
            -19,
            -22,
            -21,
            -8,
            -9,
            -10,
            -7,
            -3,
            -4,
            -14,
            -5,
            -16,
            -6,
            -12,
            -17,
        ],
    ),
    "LPAREN": ([1], [10]),
    "MODIF_STAR": (
        [1, 4, 11, 14, 19, 20, 22, 24, 29, 31, 33, 34],
        [-11, 20, -13, 20, -8, -9, -10, 20, -14, 20, 20, -12],
    ),
    "LITERAL": ([3, 10, 23, 30], [16, 16, 16, 16]),
    "MODIF_QMARK": (
        [1, 4, 11, 14, 19, 20, 22, 24, 29, 31, 33, 34],
        [-11, 22, -13, 22, -8, -9, -10, 22, -14, 22, 22, -12],
    ),
    "COMMA": (
        [1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 28, 29, 32, 34, 35],
        [
            -11,
            -13,
            -18,
            30,
            -20,
            -15,
            -19,
            -22,
            -21,
            -8,
            -9,
            -10,
            30,
            -14,
            30,
            -12,
            -17,
        ],
    ),
    "ARROW": (
        [1, 4, 8, 11, 19, 20, 22, 29, 34],
        [-11, 21, 27, -13, -8, -9, -10, -14, -12],
    ),
    "$end": (
        [
            1,
            2,
            7,
            9,
            11,
            12,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            22,
            24,
            25,
            26,
            29,
            31,
            32,
            33,
            34,
            35,
        ],
        [
            -11,
            -1,
            0,
            -2,
            -13,
            -18,
            -20,
            -15,
            -19,
            -22,
            -21,
            -8,
            -9,
            -10,
            -7,
            -3,
            -4,
            -14,
            -5,
            -16,
            -6,
            -12,
            -17,
        ],
    ),
}

_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_action:
            _lr_action[_x] = {}
        _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {
    "ARG": ([3, 10, 23, 30], [12, 12, 12, 35]),
    "MACRO_CHAIN": ([0, 7], [2, 25]),
    "DOCUMENT": ([0], [7]),
    "ARGS": ([3, 10, 23], [13, 28, 32]),
    "ARRAY": ([0, 1, 3, 7, 10, 23], [8, 11, 17, 8, 17, 17]),
    "MACRO": ([0, 3, 6, 7, 10, 21, 23, 27, 30], [4, 14, 24, 4, 14, 31, 14, 33, 14]),
    "VARIABLE": ([0, 7], [9, 26]),
    "VARIABLE_NAME": ([3, 10, 23, 30], [18, 18, 18, 18]),
}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_goto:
            _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
    ("S' -> DOCUMENT", "S'", 1, None, None, None),
    ("DOCUMENT -> MACRO_CHAIN", "DOCUMENT", 1, "p_document", "parser.py", 59),
    ("DOCUMENT -> VARIABLE", "DOCUMENT", 1, "p_document", "parser.py", 60),
    (
        "DOCUMENT -> DOCUMENT MACRO_CHAIN",
        "DOCUMENT",
        2,
        "p_document_list",
        "parser.py",
        67,
    ),
    (
        "DOCUMENT -> DOCUMENT VARIABLE",
        "DOCUMENT",
        2,
        "p_document_list",
        "parser.py",
        68,
    ),
    (
        "MACRO_CHAIN -> MACRO ARROW MACRO",
        "MACRO_CHAIN",
        3,
        "p_macro_chain",
        "parser.py",
        74,
    ),
    (
        "MACRO_CHAIN -> ARRAY ARROW MACRO",
        "MACRO_CHAIN",
        3,
        "p_macro_chain_from_array",
        "parser.py",
        79,
    ),
    (
        "MACRO_CHAIN -> EXEC MACRO",
        "MACRO_CHAIN",
        2,
        "p_macro_chain_exec",
        "parser.py",
        84,
    ),
    ("MACRO -> MACRO MODIF_PLUS", "MACRO", 2, "p_macro_w_modif", "parser.py", 89),
    ("MACRO -> MACRO MODIF_STAR", "MACRO", 2, "p_macro_w_modif", "parser.py", 90),
    ("MACRO -> MACRO MODIF_QMARK", "MACRO", 2, "p_macro_w_modif", "parser.py", 91),
    ("MACRO -> KEYWORD", "MACRO", 1, "p_macro_wo_args", "parser.py", 98),
    (
        "MACRO -> KEYWORD LPAREN ARGS RPAREN",
        "MACRO",
        4,
        "p_macro_w_args",
        "parser.py",
        104,
    ),
    ("MACRO -> KEYWORD ARRAY", "MACRO", 2, "p_macro_from_array", "parser.py", 110),
    ("ARRAY -> LBRACKET ARGS RBRACKET", "ARRAY", 3, "p_array", "parser.py", 117),
    ("VARIABLE_NAME -> NAME", "VARIABLE_NAME", 1, "p_variable", "parser.py", 121),
    (
        "VARIABLE -> NAME ASSIGN ARGS",
        "VARIABLE",
        3,
        "p_variable_from_args",
        "parser.py",
        125,
    ),
    ("ARGS -> ARGS COMMA ARG", "ARGS", 3, "p_arg_list", "parser.py", 132),
    ("ARGS -> ARG", "ARGS", 1, "p_args", "parser.py", 136),
    ("ARG -> LITERAL", "ARG", 1, "p_arg", "parser.py", 140),
    ("ARG -> MACRO", "ARG", 1, "p_arg_from_macro", "parser.py", 144),
    ("ARG -> VARIABLE_NAME", "ARG", 1, "p_arg_from_var", "parser.py", 148),
    ("ARGS -> ARRAY", "ARGS", 1, "p_arg_from_array", "parser.py", 152),
]
