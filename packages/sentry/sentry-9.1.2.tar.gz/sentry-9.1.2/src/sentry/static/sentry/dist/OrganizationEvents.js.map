{"version":3,"sources":["webpack:////usr/src/sentry/node_modules/lodash/negate.js","webpack:////usr/src/sentry/node_modules/lodash/omitBy.js","webpack:///./app/views/organizationEvents/utils/canIncludePreviousPeriod.jsx","webpack:///./app/actionCreators/events.jsx","webpack:///./app/views/organizationEvents/utils/eventsRequest.jsx","webpack:///./app/views/organizationEvents/eventsChart.jsx","webpack:///./app/views/organizationEvents/eventsTable.jsx","webpack:///./app/views/organizationEvents/events.jsx"],"names":["FUNC_ERROR_TEXT","module","exports","predicate","TypeError","args","arguments","length","call","this","apply","baseIteratee","__webpack_require__","negate","pickBy","object","MAX_PERIOD_HOURS_INCLUDE_PREVIOUS","canIncludePreviousPeriod","includePrevious","period","parsePeriodToHours","doEventsRequest","api","_ref","organization","project","environment","start","end","interval","query","limit","shouldDoublePeriod","urlQuery","periodObj","getPeriod","requestPromise","concat","slug","objectSpread_default","propNamesToIgnore","omitIgnoredProps","props","omitBy_default","value","key","includes","EventsRequest","_this","classCallCheck_default","possibleConstructorReturn_default","getPrototypeOf_default","fetchData","asyncToGenerator_default","regenerator_default","a","mark","_callee","_this$props","timeseriesData","wrap","_context","prev","next","objectWithoutProperties_default","setState","state","reloading","sent","t0","responseJSON","detail","addErrorMessage","t","unmounting","abrupt","stop","getData","data","_this$props2","previous","current","hasPreviousPeriod","dataMiddleIndex","Math","floor","slice","calculateTotalsPerTimestamp","getName","undefined","timestamp","map","_ref2","i","_ref3","slicedToArray_default","countArray","name","reduce","acc","_ref4","count","transformPreviousPeriodData","seriesName","transformAggregatedTimeseries","transformTimeseriesData","_ref5","_ref6","_ref7","transformData","loading","prevProps","isEqual_default","_ref8","totals","_this$props3","includeTransformedData","includeTimeAggregation","timeAggregationSeriesName","_this$getData","allData","originalData","originalPreviousData","previousData","timeAggregatedData","_this$props4","children","showLoading","_this$state","react_default","createElement","loadingPanel","data-test-id","_ref9","processData","transformedTimeseriesData","allTimeseriesData","originalTimeseriesData","timeseriesTotals","originalPreviousTimeseriesData","previousTimeseriesData","React","PureComponent","propTypes","PropTypes","isRequired","SentryTypes","Organization","arrayOf","number","string","instanceOf","Date","bool","defaultProps","getCategory","DEFAULT_GET_CATEGORY","EventsLineChart","nextProps","releaseSeries","zoomRenderProps","lineChart","extends_default","series","toConsumableArray_default","seriesOptions","showSymbol","previousPeriod","grid","left","right","Component","array","EventsChart","utc","router","chartZoom","eventsRequest","getInterval","charts_releaseSeries","Fragment","TransparentLoadingMask","visible","eventsChart_EventsLineChart","EventsChartContainer","withGlobalSelection","withApi","_temp","_class","_React$Component3","EventsChartWithParams","inherits_default","createClass_default","selection","datetime","projects","environments","eventsChart_EventsChart","GlobalSelection","styled","LoadingMask","target","p","EventsTableBody","events","projectsMap","event","eventIdx","get","projectID","trimmedMessage","title","message","split","substr","hasSentry10","Set","features","has","eventLink","eventID","idBadge","components_idBadge","avatarSize","displayName","avatarProps","consistentWidth","TableRow","first","TableData","EventTitle","es","to","Project","user","hideEmail","StyledDateTime","date","dateCreated","EventsTable","zoomChanged","onUpdateComplete","hasEvents","panels","TableLayout","loadingIndicator","emptyStateWarning","StyledPanelBody","StyledLoadingIndicator","overlay","eventsTable_EventsTableBody","projectList","Map","id","func","withRouter","PanelBody","space","LoadingIndicator","theme","fontSizeMedium","borderLight","overflowEllipsis","Link","gray4","DateTime","gray2","parseRowFromLinks","links","numRows","utils","parseLinkHeader","results","currentStart","cursor","TotalEventCount","_location$query","location","statsPeriod","getParams","error","Sentry","Error","eventsMeta","isAllResults","toLocaleString","AsyncComponent","OrganizationEvents","shouldReload","handleZoom","zoomed","handleTableUpdateComplete","nextState","_this2","find","_location$query2","jqXHR","getResponseHeader","browserHistory","replace","resp","eventsPageLinks","renderBody","_this$state2","parsedLinks","get_default","prototype","eventsChart","onZoom","eventsTable","index_es","align","justify","RowDisplay","renderRowCounts","feature","events_TotalEventCount","pagination","pageLinks","className","AsyncView","gray6","withOrganization"],"mappings":"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","file":"OrganizationEvents.js","sourcesContent":["/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    var args = arguments;\n    switch (args.length) {\n      case 0: return !predicate.call(this);\n      case 1: return !predicate.call(this, args[0]);\n      case 2: return !predicate.call(this, args[0], args[1]);\n      case 3: return !predicate.call(this, args[0], args[1], args[2]);\n    }\n    return !predicate.apply(this, args);\n  };\n}\n\nmodule.exports = negate;\n","var baseIteratee = require('./_baseIteratee'),\n    negate = require('./negate'),\n    pickBy = require('./pickBy');\n\n/**\n * The opposite of `_.pickBy`; this method creates an object composed of\n * the own and inherited enumerable string keyed properties of `object` that\n * `predicate` doesn't return truthy for. The predicate is invoked with two\n * arguments: (value, key).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} [predicate=_.identity] The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omitBy(object, _.isNumber);\n * // => { 'b': '2' }\n */\nfunction omitBy(object, predicate) {\n  return pickBy(object, negate(baseIteratee(predicate)));\n}\n\nmodule.exports = omitBy;\n","import {parsePeriodToHours} from 'app/utils';\n// Max period (in hours) before we can no long include previous period\nconst MAX_PERIOD_HOURS_INCLUDE_PREVIOUS = 45 * 24;\n\nexport function canIncludePreviousPeriod(includePrevious, period) {\n  if (!includePrevious) {\n    return false;\n  }\n\n  if (period && parsePeriodToHours(period) > MAX_PERIOD_HOURS_INCLUDE_PREVIOUS) {\n    return false;\n  }\n\n  // otherwise true\n  return includePrevious;\n}\n","import {canIncludePreviousPeriod} from 'app/views/organizationEvents/utils/canIncludePreviousPeriod';\nimport {getPeriod} from 'app/utils/getPeriod';\n\nconst BASE_URL = org => `/organizations/${org.slug}/events-stats/`;\n\n/**\n * Make requests to `health` endpoint\n *\n * @param {Object} api API client instance\n * @param {Object} options Request parameters\n * @param {Object} options.organization Organization object\n * @param {Number[]} options.projects List of project ids\n * @param {String[]} options.environments List of environments to query for\n * @param {String} options.period Time period to query for, in the format: <integer><units> where units are \"d\" or \"h\"\n * @param {String} options.interval Time interval to group results in, in the format: <integer><units> where units are \"d\", \"h\", \"m\", \"s\"\n * @param {Boolean} options.includePrevious Should request also return reqsults for previous period?\n * @param {Number} options.limit The number of rows to return\n * @param {String} options.query Search query\n */\nexport const doEventsRequest = (\n  api,\n  {\n    organization,\n    project,\n    environment,\n    period,\n    start,\n    end,\n    interval,\n    includePrevious,\n    limit,\n    query,\n  }\n) => {\n  const shouldDoublePeriod = canIncludePreviousPeriod(includePrevious, period);\n  const urlQuery = {\n    interval,\n    project,\n    environment,\n    query,\n  };\n\n  // Doubling period for absolute dates is not accurate unless starting and\n  // ending times are the same (at least for daily intervals). This is\n  // the tradeoff for now.\n  const periodObj = getPeriod({period, start, end}, {shouldDoublePeriod});\n\n  return api.requestPromise(`${BASE_URL(organization)}`, {\n    query: {\n      ...urlQuery,\n      ...periodObj,\n    },\n  });\n};\n","import {isEqual, omitBy} from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {canIncludePreviousPeriod} from 'app/views/organizationEvents/utils/canIncludePreviousPeriod';\nimport {doEventsRequest} from 'app/actionCreators/events';\nimport {t} from 'app/locale';\nimport SentryTypes from 'app/sentryTypes';\n\nimport LoadingPanel from '../loadingPanel';\n\nconst propNamesToIgnore = ['api', 'children', 'organization', 'loading'];\nconst omitIgnoredProps = props =>\n  omitBy(props, (value, key) => propNamesToIgnore.includes(key));\n\nclass EventsRequest extends React.PureComponent {\n  static propTypes = {\n    /**\n     * API client instance\n     */\n    api: PropTypes.object.isRequired,\n\n    organization: SentryTypes.Organization.isRequired,\n\n    /**\n     * List of project ids to query\n     */\n    project: PropTypes.arrayOf(PropTypes.number),\n\n    /**\n     * List of environments to query\n     */\n    environment: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * Relative time period for query.\n     *\n     * Use `start` and `end` for absolute dates.\n     *\n     * e.g. 24h, 7d, 30d\n     */\n    period: PropTypes.string,\n\n    /**\n     * Absolute start date for query\n     */\n    start: PropTypes.instanceOf(Date),\n    /**\n     * Absolute end date for query\n     */\n    end: PropTypes.instanceOf(Date),\n\n    /**\n     * Interval to group results in\n     *\n     * e.g. 1d, 1h, 1m, 1s\n     */\n    interval: PropTypes.string,\n\n    /**\n     * Include data for previous period\n     */\n    includePrevious: PropTypes.bool,\n\n    /**\n     * number of rows to return\n     */\n    limit: PropTypes.number,\n\n    /**\n     * Transform the response data to be something ingestible by charts\n     */\n    includeTransformedData: PropTypes.bool,\n\n    /**\n     * Include a dataset transform that will aggregate count values for each timestamp.\n     * Be sure to supply a name to `timeAggregationSeriesName`\n     */\n    includeTimeAggregation: PropTypes.bool,\n\n    /**\n     * Name of series of aggregated timeseries\n     */\n    timeAggregationSeriesName: PropTypes.string,\n\n    // Initial loading state\n    loading: PropTypes.bool,\n\n    showLoading: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    period: null,\n    start: null,\n    end: null,\n    interval: '1d',\n    limit: 15,\n    getCategory: i => i,\n    query: '',\n\n    includePrevious: true,\n    includeTransformedData: true,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      reloading: false || props.loading,\n      timeseriesData: null,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (isEqual(omitIgnoredProps(prevProps), omitIgnoredProps(this.props))) {\n      return;\n    }\n\n    this.fetchData();\n  }\n\n  componentWillUnmount() {\n    this.unmounting = true;\n  }\n\n  fetchData = async () => {\n    const {api, ...props} = this.props;\n    let timeseriesData;\n\n    this.setState(state => ({\n      reloading: state.timeseriesData !== null,\n    }));\n\n    try {\n      timeseriesData = await doEventsRequest(api, props);\n    } catch (resp) {\n      if (resp && resp.responseJSON && resp.responseJSON.detail) {\n        addErrorMessage(resp.responseJSON.detail);\n      } else {\n        addErrorMessage(t('Error loading chart data'));\n      }\n      timeseriesData = null;\n    }\n\n    if (this.unmounting) {\n      return;\n    }\n\n    this.setState({\n      reloading: false,\n      timeseriesData,\n    });\n  };\n\n  /**\n   * Retrieves data set for the current period (since data can potentially contain previous period's data), as\n   * well as the previous period if possible.\n   *\n   * Returns `null` if data does not exist\n   */\n  getData = data => {\n    const {period, includePrevious} = this.props;\n\n    if (!data) {\n      return {\n        previous: null,\n        current: null,\n      };\n    }\n\n    const hasPreviousPeriod = canIncludePreviousPeriod(includePrevious, period);\n    // Take the floor just in case, but data should always be divisible by 2\n    const dataMiddleIndex = Math.floor(data.length / 2);\n\n    return {\n      previous: hasPreviousPeriod ? data.slice(0, dataMiddleIndex) : null,\n      current: hasPreviousPeriod ? data.slice(dataMiddleIndex) : data,\n    };\n  };\n\n  // This aggregates all values per `timestamp`\n  calculateTotalsPerTimestamp = (data, getName = timestamp => timestamp * 1000) => {\n    return data.map(([timestamp, countArray], i) => ({\n      name: getName(timestamp, countArray, i),\n      value: countArray.reduce((acc, {count}) => acc + count, 0),\n    }));\n  };\n\n  /**\n   * Get previous period data, but transform timestampts so that data fits unto the current period's data axis\n   */\n  transformPreviousPeriodData = (current, previous) => {\n    // Need the current period data array so we can take the timestamp\n    // so we can be sure the data lines up\n    if (!previous) {\n      return null;\n    }\n\n    return {\n      seriesName: 'Previous Period',\n      data: this.calculateTotalsPerTimestamp(\n        previous,\n        (timestamp, countArray, i) => current[i][0] * 1000\n      ),\n    };\n  };\n\n  /**\n   * Aggregate all counts for each time stamp\n   */\n  transformAggregatedTimeseries = (data, seriesName) => {\n    if (!data) {\n      return null;\n    }\n\n    return {\n      seriesName,\n      data: this.calculateTotalsPerTimestamp(data),\n    };\n  };\n\n  /**\n   * Transforms query response into timeseries data to be used in a chart\n   */\n  transformTimeseriesData = data => {\n    return [\n      {\n        seriesName: 'Events',\n        data: data.map(([timestamp, countsForTimestamp]) => ({\n          name: timestamp * 1000,\n          value: countsForTimestamp.reduce((acc, {count}) => acc + count, 0),\n        })),\n      },\n    ];\n  };\n\n  transformData = data => {\n    if (!data) {\n      return null;\n    }\n\n    return this.transformTimeseriesData(data);\n  };\n\n  processData({data, totals} = {}) {\n    const {\n      includeTransformedData,\n      includeTimeAggregation,\n      timeAggregationSeriesName,\n    } = this.props;\n    const {current, previous} = this.getData(data);\n    const transformedData = includeTransformedData ? this.transformData(current) : null;\n\n    const previousData = includeTransformedData\n      ? this.transformPreviousPeriodData(current, previous)\n      : null;\n\n    const timeAggregatedData = includeTimeAggregation\n      ? this.transformAggregatedTimeseries(current, timeAggregationSeriesName)\n      : null;\n\n    return {\n      data: transformedData,\n      allData: data,\n      originalData: current,\n      totals,\n      originalPreviousData: previous,\n      previousData,\n      timeAggregatedData,\n    };\n  }\n\n  render() {\n    const {children, showLoading, ...props} = this.props;\n\n    const {timeseriesData, reloading} = this.state;\n\n    // Is \"loading\" if data is null\n    const loading = this.props.loading || timeseriesData === null;\n\n    if (showLoading && loading) {\n      return <LoadingPanel data-test-id=\"events-request-loading\" />;\n    }\n\n    const {\n      data: transformedTimeseriesData,\n      allData: allTimeseriesData,\n      originalData: originalTimeseriesData,\n      totals: timeseriesTotals,\n      originalPreviousData: originalPreviousTimeseriesData,\n      previousData: previousTimeseriesData,\n      timeAggregatedData,\n    } =\n      (timeseriesData && this.processData(timeseriesData, true)) || {};\n\n    return children({\n      loading,\n      reloading,\n\n      // timeseries data\n      timeseriesData: transformedTimeseriesData,\n      allTimeseriesData,\n      originalTimeseriesData,\n      timeseriesTotals,\n      originalPreviousTimeseriesData,\n      previousTimeseriesData,\n      timeAggregatedData,\n\n      // sometimes we want to reference props that were given to EventsRequest\n      ...props,\n    });\n  }\n}\n\nexport default EventsRequest;\n","import {isEqual} from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport {getInterval} from 'app/components/charts/utils';\nimport {t} from 'app/locale';\nimport ChartZoom from 'app/components/charts/chartZoom';\nimport LineChart from 'app/components/charts/lineChart';\nimport LoadingPanel, {LoadingMask} from 'app/views/organizationEvents/loadingPanel';\nimport ReleaseSeries from 'app/components/charts/releaseSeries';\nimport SentryTypes from 'app/sentryTypes';\nimport withApi from 'app/utils/withApi';\nimport withGlobalSelection from 'app/utils/withGlobalSelection';\n\nimport EventsRequest from './utils/eventsRequest';\n\nconst DEFAULT_GET_CATEGORY = () => t('Events');\n\nclass EventsLineChart extends React.Component {\n  static propTypes = {\n    loading: PropTypes.bool,\n    reloading: PropTypes.bool,\n    releaseSeries: PropTypes.array,\n    zoomRenderProps: PropTypes.object,\n    timeseriesData: PropTypes.array,\n    previousTimeseriesData: PropTypes.object,\n  };\n\n  shouldComponentUpdate(nextProps) {\n    if (nextProps.reloading || !nextProps.timeseriesData) {\n      return false;\n    }\n\n    if (\n      isEqual(this.props.timeseriesData, nextProps.timeseriesData) &&\n      isEqual(this.props.releaseSeries, nextProps.releaseSeries)\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  render() {\n    const {\n      loading, // eslint-disable-line no-unused-vars\n      reloading, // eslint-disable-line no-unused-vars\n      releaseSeries,\n      zoomRenderProps,\n      timeseriesData,\n      previousTimeseriesData,\n      ...props\n    } = this.props;\n\n    return (\n      <LineChart\n        {...props}\n        {...zoomRenderProps}\n        series={[...timeseriesData, ...releaseSeries]}\n        seriesOptions={{\n          showSymbol: false,\n        }}\n        previousPeriod={previousTimeseriesData ? [previousTimeseriesData] : null}\n        grid={{\n          left: '30px',\n          right: '18px',\n        }}\n      />\n    );\n  }\n}\n\nclass EventsChart extends React.Component {\n  static propTypes = {\n    api: PropTypes.object,\n    period: PropTypes.string,\n    query: PropTypes.string,\n    utc: PropTypes.bool,\n    router: PropTypes.object,\n  };\n\n  render() {\n    const {api, period, utc, query, router, ...props} = this.props;\n\n    return (\n      <ChartZoom router={router} period={period} utc={utc} {...props}>\n        {({interval, ...zoomRenderProps}) => (\n          <EventsRequest\n            {...props}\n            api={api}\n            period={period}\n            interval={getInterval(this.props, true)}\n            showLoading={false}\n            query={query}\n            getCategory={DEFAULT_GET_CATEGORY}\n            includePrevious={!!period}\n          >\n            {({loading, reloading, timeseriesData, previousTimeseriesData}) => {\n              return (\n                <ReleaseSeries utc={utc} api={api}>\n                  {({releaseSeries}) => {\n                    if (loading && !reloading) {\n                      return <LoadingPanel data-test-id=\"events-request-loading\" />;\n                    }\n\n                    return (\n                      <React.Fragment>\n                        <TransparentLoadingMask visible={reloading} />\n                        <EventsLineChart\n                          {...zoomRenderProps}\n                          loading={loading}\n                          reloading={reloading}\n                          utc={utc}\n                          releaseSeries={releaseSeries}\n                          timeseriesData={timeseriesData}\n                          previousTimeseriesData={previousTimeseriesData}\n                        />\n                      </React.Fragment>\n                    );\n                  }}\n                </ReleaseSeries>\n              );\n            }}\n          </EventsRequest>\n        )}\n      </ChartZoom>\n    );\n  }\n}\n\nconst EventsChartContainer = withGlobalSelection(\n  withApi(\n    class EventsChartWithParams extends React.Component {\n      static propTypes = {\n        selection: SentryTypes.GlobalSelection,\n      };\n\n      render() {\n        const {selection, ...props} = this.props;\n        const {datetime, projects, environments} = selection;\n\n        return (\n          <EventsChart\n            {...datetime}\n            project={projects || []}\n            environment={environments || []}\n            {...props}\n          />\n        );\n      }\n    }\n  )\n);\n\nexport default EventsChartContainer;\nexport {EventsChart};\n\nconst TransparentLoadingMask = styled(LoadingMask)`\n  ${p => !p.visible && 'display: none;'} opacity: 0.4;\n  z-index: 1;\n`;\n","import {withRouter, Link} from 'react-router';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport {t} from 'app/locale';\nimport {PanelBody, Panel, PanelHeader} from 'app/components/panels';\nimport DateTime from 'app/components/dateTime';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport IdBadge from 'app/components/idBadge';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport SentryTypes from 'app/sentryTypes';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\n\nclass EventsTableBody extends React.PureComponent {\n  static propTypes = {\n    events: PropTypes.array,\n    organization: SentryTypes.Organization,\n    utc: PropTypes.bool,\n    projectsMap: PropTypes.object,\n  };\n\n  render() {\n    const {events, organization, utc, projectsMap} = this.props;\n\n    return events.map((event, eventIdx) => {\n      const project = projectsMap.get(event.projectID);\n      const trimmedMessage = event.title || event.message.split('\\n')[0].substr(0, 100);\n\n      const hasSentry10 = new Set(organization.features).has('sentry10');\n\n      const eventLink = hasSentry10\n        ? `/organizations/${organization.slug}/projects/${project.slug}/events/${event.eventID}/`\n        : `/${organization.slug}/${project.slug}/events/${event.eventID}/`;\n\n      const idBadge = (\n        <IdBadge\n          project={project}\n          avatarSize={16}\n          displayName={<span>{project.slug}</span>}\n          avatarProps={{consistentWidth: true}}\n        />\n      );\n\n      return (\n        <TableRow key={`${project.slug}-${event.eventID}`} first={eventIdx == 0}>\n          <TableData>\n            <EventTitle>\n              <Link to={eventLink}>{trimmedMessage}</Link>\n            </EventTitle>\n          </TableData>\n\n          <TableData>\n            {hasSentry10 ? (\n              idBadge\n            ) : (\n              <Project to={`/${organization.slug}/${project.slug}/`}>{idBadge}</Project>\n            )}\n          </TableData>\n\n          <TableData>\n            <IdBadge user={event.user} hideEmail avatarSize={16} />\n          </TableData>\n\n          <TableData>\n            <StyledDateTime utc={utc} date={new Date(event.dateCreated)} />\n          </TableData>\n        </TableRow>\n      );\n    });\n  }\n}\n\nclass EventsTable extends React.Component {\n  static propTypes = {\n    // Initial loading state\n    loading: PropTypes.bool,\n\n    // When initial data has been loaded, but params have changed\n    reloading: PropTypes.bool,\n\n    // Special state when chart has been zoomed\n    zoomChanged: PropTypes.bool,\n\n    events: PropTypes.array,\n    organization: SentryTypes.Organization,\n    projects: PropTypes.arrayOf(SentryTypes.Project),\n    utc: PropTypes.bool,\n\n    // When Table is in loading state due to chart zoom but has\n    // completed its new API request\n    onUpdateComplete: PropTypes.func,\n  };\n\n  shouldComponentUpdate(nextProps) {\n    // Update if any of these \"loading\"-type props change so we can display loader\n    if (\n      this.props.reloading !== nextProps.reloading ||\n      this.props.zoomChanged !== nextProps.zoomChanged ||\n      this.props.loading !== nextProps.loading\n    ) {\n      return true;\n    }\n\n    // If org or events has not changed, then don't re-render\n    // Shallow compare events\n    if (\n      this.props.organization === nextProps.organization &&\n      this.props.events === nextProps.events\n    ) {\n      return false;\n    }\n\n    // Otherwise update\n    return true;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.onUpdateComplete && prevProps.zoomChanged && this.props.reloading) {\n      this.props.onUpdateComplete();\n    }\n  }\n\n  get projectsMap() {\n    const {organization, projects} = this.props;\n    const projectList = projects || organization.projects;\n\n    return new Map(projectList.map(project => [project.id, project]));\n  }\n\n  render() {\n    const {events, organization, loading, reloading, zoomChanged, utc} = this.props;\n    const hasEvents = events && !!events.length;\n\n    return (\n      <Panel>\n        <PanelHeader>\n          <TableLayout>\n            <div>{t('Event')}</div>\n            <div>{t('Project')}</div>\n            <div>{t('User')}</div>\n            <div>{t('Time')}</div>\n          </TableLayout>\n        </PanelHeader>\n        {loading && <LoadingIndicator />}\n        {!loading &&\n          !hasEvents && (\n            <EmptyStateWarning>\n              <p>No events</p>\n            </EmptyStateWarning>\n          )}\n        {hasEvents && (\n          <StyledPanelBody>\n            {(reloading || zoomChanged) && <StyledLoadingIndicator overlay />}\n            <EventsTableBody\n              projectsMap={this.projectsMap}\n              events={events}\n              organization={organization}\n              utc={utc}\n            />\n          </StyledPanelBody>\n        )}\n      </Panel>\n    );\n  }\n}\n\nexport default withRouter(EventsTable);\nexport {EventsTable};\n\nconst StyledPanelBody = styled(PanelBody)`\n  overflow-x: auto;\n  padding: 0;\n`;\n\nconst TableLayout = styled('div')`\n  display: grid;\n  grid-template-columns: 0.8fr 0.15fr 0.25fr 200px;\n  grid-column-gap: ${space(1.5)};\n  width: 100%;\n`;\n\nconst StyledLoadingIndicator = styled(LoadingIndicator)`\n  padding-top: 10vh;\n  z-index: 1;\n  &.loading.overlay {\n    align-items: flex-start;\n  }\n`;\n\nconst TableRow = styled(TableLayout)`\n  font-size: ${p => p.theme.fontSizeMedium};\n  border-top: 1px solid ${p => (p.first ? 'transparent' : p.theme.borderLight)};\n  align-items: center;\n  padding: ${space(1)} ${space(2)};\n`;\n\nconst TableData = styled('div')`\n  overflow: hidden; /* enables overflow-ellipsis on child container */\n`;\n\nconst EventTitle = styled(TableData)`\n  padding-right: ${space(2)};\n  ${overflowEllipsis};\n`;\n\nconst Project = styled(Link)`\n  display: flex;\n  color: ${p => p.theme.gray4};\n  ${overflowEllipsis};\n`;\n\nconst StyledDateTime = styled(DateTime)`\n  color: ${p => p.theme.gray2};\n  ${overflowEllipsis};\n`;\n","import * as Sentry from '@sentry/browser';\nimport {Flex} from 'grid-emotion';\nimport {isEqual} from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\nimport {browserHistory} from 'react-router';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {Panel} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport AsyncView from 'app/views/asyncView';\nimport Feature from 'app/components/acl/feature';\nimport Pagination from 'app/components/pagination';\nimport SentryTypes from 'app/sentryTypes';\nimport utils from 'app/utils';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport {getParams} from './utils/getParams';\nimport EventsChart from './eventsChart';\nimport EventsTable from './eventsTable';\n\nconst parseRowFromLinks = (links, numRows) => {\n  links = utils.parseLinkHeader(links);\n  if (!links.previous.results) {\n    return `1-${numRows}`;\n  }\n  const prevStart = links.previous.cursor.split(':')[1];\n  const nextStart = links.next.cursor.split(':')[1];\n  const currentStart = (prevStart + nextStart) / 2 + 1;\n  return `${currentStart}-${currentStart + numRows - 1}`;\n};\n\nclass TotalEventCount extends AsyncComponent {\n  static propTypes = {\n    organization: SentryTypes.Organization.isRequired,\n    location: PropTypes.object.isRequired,\n    isAllResults: PropTypes.bool.isRequired,\n    numRows: PropTypes.number.isRequired,\n  };\n\n  getEndpoints() {\n    const {organization, location} = this.props;\n    const {statsPeriod, ...query} = location.query;\n\n    return [\n      [\n        'eventsMeta',\n        `/organizations/${organization.slug}/events-meta/`,\n        {\n          query: getParams({\n            statsPeriod,\n            ...query,\n          }),\n        },\n      ],\n    ];\n  }\n\n  onRequestError(error) {\n    Sentry.captureException(new Error('Unable to fetch \"total event count\"'));\n  }\n\n  renderError(error, disableLog = false, disableReport = false) {\n    // Don't show an error message, handle it in `onRequestError`\n    return null;\n  }\n\n  renderBody() {\n    const {eventsMeta} = this.state;\n    const {isAllResults, numRows} = this.props;\n    const count = isAllResults ? numRows : eventsMeta.count;\n    return t(` of ${count.toLocaleString()}${isAllResults ? '' : ' (estimated)'}`);\n  }\n}\n\nclass OrganizationEvents extends AsyncView {\n  static propTypes = {\n    organization: SentryTypes.Organization,\n  };\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // Always update if state changes\n    if (this.state !== nextState) {\n      return true;\n    }\n\n    const isDiff = ['path', 'search'].find(\n      key => !isEqual(this.props.location[key], nextProps.location[key])\n    );\n\n    // Always update if query parameters change\n    if (isDiff) {\n      return true;\n    }\n\n    return false;\n  }\n\n  shouldReload = true;\n\n  getEndpoints() {\n    const {organization, location} = this.props;\n    const {statsPeriod, ...query} = location.query;\n\n    return [\n      [\n        'events',\n        `/organizations/${organization.slug}/events/`,\n        {\n          query: getParams({\n            statsPeriod,\n            ...query,\n          }),\n        },\n      ],\n    ];\n  }\n\n  getTitle() {\n    return `Events - ${this.props.organization.slug}`;\n  }\n\n  onRequestSuccess({data, jqXHR}) {\n    const {organization} = this.props;\n\n    if (jqXHR.getResponseHeader('X-Sentry-Direct-Hit') === '1') {\n      const event = data[0];\n      const project = organization.projects.find(p => p.id === event.projectID);\n\n      browserHistory.replace(\n        `/organizations/${organization.slug}/projects/${project.slug}/events/${event.eventID}/`\n      );\n    }\n  }\n\n  onRequestError(resp, args) {\n    // Allow children to implement this\n    if (resp && resp.responseJSON && resp.responseJSON.detail) {\n      addErrorMessage(resp.responseJSON.detail);\n    }\n  }\n\n  handleZoom = () => this.setState({zoomed: true});\n\n  // Table is considered to be updated when table is in a\n  // reloading state due to chart zoom, but reloading has been finished\n  handleTableUpdateComplete = () => this.setState({zoomed: false});\n\n  renderRowCounts() {\n    const {events, eventsPageLinks} = this.state;\n    if (!eventsPageLinks) {\n      return null;\n    }\n\n    return parseRowFromLinks(eventsPageLinks, events.length);\n  }\n\n  renderError() {\n    return this.renderBody();\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {organization, location, router} = this.props;\n    const {error, loading, reloading, events, eventsPageLinks} = this.state;\n    const parsedLinks =\n      !loading && !error && eventsPageLinks ? utils.parseLinkHeader(eventsPageLinks) : {};\n\n    return (\n      <React.Fragment>\n        {error &&\n          super.renderError(\n            new Error('Unable to load all required endpoints'),\n            false,\n            true\n          )}\n        <Panel>\n          <EventsChart\n            router={router}\n            query={location.query.query}\n            organization={organization}\n            onZoom={this.handleZoom}\n          />\n        </Panel>\n\n        <EventsTable\n          loading={!reloading && loading}\n          reloading={reloading}\n          zoomChanged={this.state.zoomed}\n          events={events}\n          organization={organization}\n          onUpdateComplete={this.handleTableUpdateComplete}\n        />\n\n        {!loading &&\n          !reloading &&\n          !error && (\n            <Flex align=\"center\" justify=\"space-between\">\n              <RowDisplay>\n                {events.length ? t(`Results ${this.renderRowCounts()}`) : t('No Results')}\n                {!!events.length &&\n                  eventsPageLinks && (\n                    <Feature features={['internal-catchall']}>\n                      <TotalEventCount\n                        organization={organization}\n                        location={location}\n                        isAllResults={\n                          !parsedLinks.previous.results && !parsedLinks.next.results\n                        }\n                        numRows={events.length}\n                      />\n                    </Feature>\n                  )}\n              </RowDisplay>\n              <Pagination pageLinks={eventsPageLinks} className=\"\" />\n            </Flex>\n          )}\n      </React.Fragment>\n    );\n  }\n}\n\nconst RowDisplay = styled('div')`\n  color: ${p => p.theme.gray6};\n`;\n\nexport default withOrganization(OrganizationEvents);\nexport {OrganizationEvents, parseRowFromLinks};\n"],"sourceRoot":""}