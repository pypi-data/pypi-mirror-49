# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkImageMomentsCalculatorPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkImageMomentsCalculatorPython', [dirname(__file__)])
        except ImportError:
            import _itkImageMomentsCalculatorPython
            return _itkImageMomentsCalculatorPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkImageMomentsCalculatorPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkImageMomentsCalculatorPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkImageMomentsCalculatorPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkSpatialObjectBasePython
import itkAffineTransformPython
import itkVectorPython
import vnl_vectorPython
import stdcomplexPython
import pyBasePython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkPointPython
import itkTransformBasePython
import itkDiffusionTensor3DPython
import itkSymmetricSecondRankTensorPython
import itkOptimizerParametersPython
import itkArrayPython
import ITKCommonBasePython
import itkArray2DPython
import itkVariableLengthVectorPython
import itkMatrixOffsetTransformBasePython
import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkSpatialObjectPropertyPython
import itkRGBAPixelPython
import itkBoundingBoxPython
import itkMapContainerPython
import itkVectorContainerPython
import itkContinuousIndexPython
import itkImagePython
import itkRGBPixelPython

def itkImageMomentsCalculatorIF3_New():
  return itkImageMomentsCalculatorIF3.New()


def itkImageMomentsCalculatorIF2_New():
  return itkImageMomentsCalculatorIF2.New()


def itkImageMomentsCalculatorIUS3_New():
  return itkImageMomentsCalculatorIUS3.New()


def itkImageMomentsCalculatorIUS2_New():
  return itkImageMomentsCalculatorIUS2.New()


def itkImageMomentsCalculatorIUC3_New():
  return itkImageMomentsCalculatorIUC3.New()


def itkImageMomentsCalculatorIUC2_New():
  return itkImageMomentsCalculatorIUC2.New()


def itkImageMomentsCalculatorISS3_New():
  return itkImageMomentsCalculatorISS3.New()


def itkImageMomentsCalculatorISS2_New():
  return itkImageMomentsCalculatorISS2.New()

class itkImageMomentsCalculatorIF2(ITKCommonBasePython.itkObject):
    """


    Compute moments of an n-dimensional image.

    This class provides methods for computing the moments and related
    properties of a single-echo image. Computing the (non-central) moments
    of a large image can easily take a million times longer than computing
    the various other values derived from them, so we compute the moments
    only on explicit request, and save their values (in an
    ImageMomentsCalculator object) for later retrieval by the user.

    The non-central moments computed by this class are not really intended
    for general use and are therefore in index coordinates; that is, we
    pretend that the index that selects a particular pixel also equals its
    physical coordinates. The center of gravity, central moments,
    principal moments and principal axes are all more generally useful and
    are computed in the physical coordinates defined by the Origin and
    Spacing parameters of the image.

    The methods that return values return the values themselves rather
    than references because the cost is small compared to the cost of
    computing the moments and doing so simplifies memory management for
    the caller.

    Todo It's not yet clear how multi-echo images should be handled here.

    C++ includes: itkImageMomentsCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageMomentsCalculatorIF2_Pointer"""
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageMomentsCalculatorIF2 self) -> itkImageMomentsCalculatorIF2_Pointer"""
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_Clone(self)


    def SetImage(self, image):
        """
        SetImage(itkImageMomentsCalculatorIF2 self, itkImageF2 image)

        Set the input image. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_SetImage(self, image)


    def SetSpatialObjectMask(self, so):
        """
        SetSpatialObjectMask(itkImageMomentsCalculatorIF2 self, itkSpatialObject2 so)

        Set the
        spatial object mask. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_SetSpatialObjectMask(self, so)


    def Compute(self):
        """
        Compute(itkImageMomentsCalculatorIF2 self)

        Compute moments of a new or
        modified image. This method computes the moments of the image given as
        a parameter and stores them in the object. The values of these moments
        and related parameters can then be retrieved by using other methods of
        this object. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_Compute(self)


    def GetTotalMass(self):
        """
        GetTotalMass(itkImageMomentsCalculatorIF2 self) -> double

        Return the total mass
        (or zeroth moment) of an image. This method returns the sum of pixel
        intensities (also known as the zeroth moment or the total mass) of the
        image whose moments were last computed by this object. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_GetTotalMass(self)


    def GetFirstMoments(self):
        """
        GetFirstMoments(itkImageMomentsCalculatorIF2 self) -> itkVectorD2

        Return first
        moments about origin, in index coordinates. This method returns the
        first moments around the origin of the image whose moments were last
        computed by this object. For simplicity, these moments are computed in
        index coordinates rather than physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_GetFirstMoments(self)


    def GetSecondMoments(self):
        """
        GetSecondMoments(itkImageMomentsCalculatorIF2 self) -> itkMatrixD22

        Return second
        moments about origin, in index coordinates. This method returns the
        second moments around the origin of the image whose moments were last
        computed by this object. For simplicity, these moments are computed in
        index coordinates rather than physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_GetSecondMoments(self)


    def GetCenterOfGravity(self):
        """
        GetCenterOfGravity(itkImageMomentsCalculatorIF2 self) -> itkVectorD2

        Return center of
        gravity, in physical coordinates. This method returns the center of
        gravity of the image whose moments were last computed by this object.
        The center of gravity is computed in physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_GetCenterOfGravity(self)


    def GetCentralMoments(self):
        """
        GetCentralMoments(itkImageMomentsCalculatorIF2 self) -> itkMatrixD22

        Return second
        central moments, in physical coordinates. This method returns the
        central second moments of the image whose moments were last computed
        by this object. The central moments are computed in physical
        coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_GetCentralMoments(self)


    def GetPrincipalMoments(self):
        """
        GetPrincipalMoments(itkImageMomentsCalculatorIF2 self) -> itkVectorD2

        Return
        principal moments, in physical coordinates. This method returns the
        principal moments of the image whose moments were last computed by
        this object. The moments are returned as a vector, with the principal
        moments ordered from smallest to largest. The moments are computed in
        physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_GetPrincipalMoments(self)


    def GetPrincipalAxes(self):
        """
        GetPrincipalAxes(itkImageMomentsCalculatorIF2 self) -> itkMatrixD22

        Return principal
        axes, in physical coordinates. This method returns the principal axes
        of the image whose moments were last computed by this object. The
        moments are returned as an orthogonal matrix, each row of which
        corresponds corresponding to the smallest principal moment is the
        vector m[0], where m is the value returned by this method. The matrix
        of principal axes is guaranteed to be a proper rotation; that is, to
        have determinant +1 and to preserve parity. (Unless you have foolishly
        made one or more of the spacing values negative; in that case, you get
        to figure out the consequences.) The moments are computed in physical
        coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_GetPrincipalAxes(self)


    def GetPrincipalAxesToPhysicalAxesTransform(self):
        """
        GetPrincipalAxesToPhysicalAxesTransform(itkImageMomentsCalculatorIF2 self) -> itkAffineTransformD2_Pointer

        Get the affine
        transform from principal axes to physical axes This method returns an
        affine transform which transforms from the principal axes coordinate
        system to physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_GetPrincipalAxesToPhysicalAxesTransform(self)


    def GetPhysicalAxesToPrincipalAxesTransform(self):
        """
        GetPhysicalAxesToPrincipalAxesTransform(itkImageMomentsCalculatorIF2 self) -> itkAffineTransformD2_Pointer

        Get the affine
        transform from physical axes to principal axes This method returns an
        affine transform which transforms from the physical coordinate system
        to the principal axes coordinate system. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_GetPhysicalAxesToPrincipalAxesTransform(self)

    __swig_destroy__ = _itkImageMomentsCalculatorPython.delete_itkImageMomentsCalculatorIF2

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageMomentsCalculatorIF2"""
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageMomentsCalculatorIF2

        Create a new object of the class itkImageMomentsCalculatorIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageMomentsCalculatorIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageMomentsCalculatorIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageMomentsCalculatorIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageMomentsCalculatorIF2.Clone = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_Clone, None, itkImageMomentsCalculatorIF2)
itkImageMomentsCalculatorIF2.SetImage = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_SetImage, None, itkImageMomentsCalculatorIF2)
itkImageMomentsCalculatorIF2.SetSpatialObjectMask = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_SetSpatialObjectMask, None, itkImageMomentsCalculatorIF2)
itkImageMomentsCalculatorIF2.Compute = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_Compute, None, itkImageMomentsCalculatorIF2)
itkImageMomentsCalculatorIF2.GetTotalMass = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_GetTotalMass, None, itkImageMomentsCalculatorIF2)
itkImageMomentsCalculatorIF2.GetFirstMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_GetFirstMoments, None, itkImageMomentsCalculatorIF2)
itkImageMomentsCalculatorIF2.GetSecondMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_GetSecondMoments, None, itkImageMomentsCalculatorIF2)
itkImageMomentsCalculatorIF2.GetCenterOfGravity = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_GetCenterOfGravity, None, itkImageMomentsCalculatorIF2)
itkImageMomentsCalculatorIF2.GetCentralMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_GetCentralMoments, None, itkImageMomentsCalculatorIF2)
itkImageMomentsCalculatorIF2.GetPrincipalMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_GetPrincipalMoments, None, itkImageMomentsCalculatorIF2)
itkImageMomentsCalculatorIF2.GetPrincipalAxes = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_GetPrincipalAxes, None, itkImageMomentsCalculatorIF2)
itkImageMomentsCalculatorIF2.GetPrincipalAxesToPhysicalAxesTransform = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_GetPrincipalAxesToPhysicalAxesTransform, None, itkImageMomentsCalculatorIF2)
itkImageMomentsCalculatorIF2.GetPhysicalAxesToPrincipalAxesTransform = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_GetPhysicalAxesToPrincipalAxesTransform, None, itkImageMomentsCalculatorIF2)
itkImageMomentsCalculatorIF2_swigregister = _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_swigregister
itkImageMomentsCalculatorIF2_swigregister(itkImageMomentsCalculatorIF2)

def itkImageMomentsCalculatorIF2___New_orig__():
    """itkImageMomentsCalculatorIF2___New_orig__() -> itkImageMomentsCalculatorIF2_Pointer"""
    return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2___New_orig__()

def itkImageMomentsCalculatorIF2_cast(obj):
    """itkImageMomentsCalculatorIF2_cast(itkLightObject obj) -> itkImageMomentsCalculatorIF2"""
    return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_cast(obj)

class itkImageMomentsCalculatorIF3(ITKCommonBasePython.itkObject):
    """


    Compute moments of an n-dimensional image.

    This class provides methods for computing the moments and related
    properties of a single-echo image. Computing the (non-central) moments
    of a large image can easily take a million times longer than computing
    the various other values derived from them, so we compute the moments
    only on explicit request, and save their values (in an
    ImageMomentsCalculator object) for later retrieval by the user.

    The non-central moments computed by this class are not really intended
    for general use and are therefore in index coordinates; that is, we
    pretend that the index that selects a particular pixel also equals its
    physical coordinates. The center of gravity, central moments,
    principal moments and principal axes are all more generally useful and
    are computed in the physical coordinates defined by the Origin and
    Spacing parameters of the image.

    The methods that return values return the values themselves rather
    than references because the cost is small compared to the cost of
    computing the moments and doing so simplifies memory management for
    the caller.

    Todo It's not yet clear how multi-echo images should be handled here.

    C++ includes: itkImageMomentsCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageMomentsCalculatorIF3_Pointer"""
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageMomentsCalculatorIF3 self) -> itkImageMomentsCalculatorIF3_Pointer"""
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_Clone(self)


    def SetImage(self, image):
        """
        SetImage(itkImageMomentsCalculatorIF3 self, itkImageF3 image)

        Set the input image. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_SetImage(self, image)


    def SetSpatialObjectMask(self, so):
        """
        SetSpatialObjectMask(itkImageMomentsCalculatorIF3 self, itkSpatialObject3 so)

        Set the
        spatial object mask. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_SetSpatialObjectMask(self, so)


    def Compute(self):
        """
        Compute(itkImageMomentsCalculatorIF3 self)

        Compute moments of a new or
        modified image. This method computes the moments of the image given as
        a parameter and stores them in the object. The values of these moments
        and related parameters can then be retrieved by using other methods of
        this object. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_Compute(self)


    def GetTotalMass(self):
        """
        GetTotalMass(itkImageMomentsCalculatorIF3 self) -> double

        Return the total mass
        (or zeroth moment) of an image. This method returns the sum of pixel
        intensities (also known as the zeroth moment or the total mass) of the
        image whose moments were last computed by this object. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_GetTotalMass(self)


    def GetFirstMoments(self):
        """
        GetFirstMoments(itkImageMomentsCalculatorIF3 self) -> itkVectorD3

        Return first
        moments about origin, in index coordinates. This method returns the
        first moments around the origin of the image whose moments were last
        computed by this object. For simplicity, these moments are computed in
        index coordinates rather than physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_GetFirstMoments(self)


    def GetSecondMoments(self):
        """
        GetSecondMoments(itkImageMomentsCalculatorIF3 self) -> itkMatrixD33

        Return second
        moments about origin, in index coordinates. This method returns the
        second moments around the origin of the image whose moments were last
        computed by this object. For simplicity, these moments are computed in
        index coordinates rather than physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_GetSecondMoments(self)


    def GetCenterOfGravity(self):
        """
        GetCenterOfGravity(itkImageMomentsCalculatorIF3 self) -> itkVectorD3

        Return center of
        gravity, in physical coordinates. This method returns the center of
        gravity of the image whose moments were last computed by this object.
        The center of gravity is computed in physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_GetCenterOfGravity(self)


    def GetCentralMoments(self):
        """
        GetCentralMoments(itkImageMomentsCalculatorIF3 self) -> itkMatrixD33

        Return second
        central moments, in physical coordinates. This method returns the
        central second moments of the image whose moments were last computed
        by this object. The central moments are computed in physical
        coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_GetCentralMoments(self)


    def GetPrincipalMoments(self):
        """
        GetPrincipalMoments(itkImageMomentsCalculatorIF3 self) -> itkVectorD3

        Return
        principal moments, in physical coordinates. This method returns the
        principal moments of the image whose moments were last computed by
        this object. The moments are returned as a vector, with the principal
        moments ordered from smallest to largest. The moments are computed in
        physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_GetPrincipalMoments(self)


    def GetPrincipalAxes(self):
        """
        GetPrincipalAxes(itkImageMomentsCalculatorIF3 self) -> itkMatrixD33

        Return principal
        axes, in physical coordinates. This method returns the principal axes
        of the image whose moments were last computed by this object. The
        moments are returned as an orthogonal matrix, each row of which
        corresponds corresponding to the smallest principal moment is the
        vector m[0], where m is the value returned by this method. The matrix
        of principal axes is guaranteed to be a proper rotation; that is, to
        have determinant +1 and to preserve parity. (Unless you have foolishly
        made one or more of the spacing values negative; in that case, you get
        to figure out the consequences.) The moments are computed in physical
        coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_GetPrincipalAxes(self)


    def GetPrincipalAxesToPhysicalAxesTransform(self):
        """
        GetPrincipalAxesToPhysicalAxesTransform(itkImageMomentsCalculatorIF3 self) -> itkAffineTransformD3_Pointer

        Get the affine
        transform from principal axes to physical axes This method returns an
        affine transform which transforms from the principal axes coordinate
        system to physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_GetPrincipalAxesToPhysicalAxesTransform(self)


    def GetPhysicalAxesToPrincipalAxesTransform(self):
        """
        GetPhysicalAxesToPrincipalAxesTransform(itkImageMomentsCalculatorIF3 self) -> itkAffineTransformD3_Pointer

        Get the affine
        transform from physical axes to principal axes This method returns an
        affine transform which transforms from the physical coordinate system
        to the principal axes coordinate system. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_GetPhysicalAxesToPrincipalAxesTransform(self)

    __swig_destroy__ = _itkImageMomentsCalculatorPython.delete_itkImageMomentsCalculatorIF3

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageMomentsCalculatorIF3"""
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageMomentsCalculatorIF3

        Create a new object of the class itkImageMomentsCalculatorIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageMomentsCalculatorIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageMomentsCalculatorIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageMomentsCalculatorIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageMomentsCalculatorIF3.Clone = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_Clone, None, itkImageMomentsCalculatorIF3)
itkImageMomentsCalculatorIF3.SetImage = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_SetImage, None, itkImageMomentsCalculatorIF3)
itkImageMomentsCalculatorIF3.SetSpatialObjectMask = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_SetSpatialObjectMask, None, itkImageMomentsCalculatorIF3)
itkImageMomentsCalculatorIF3.Compute = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_Compute, None, itkImageMomentsCalculatorIF3)
itkImageMomentsCalculatorIF3.GetTotalMass = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_GetTotalMass, None, itkImageMomentsCalculatorIF3)
itkImageMomentsCalculatorIF3.GetFirstMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_GetFirstMoments, None, itkImageMomentsCalculatorIF3)
itkImageMomentsCalculatorIF3.GetSecondMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_GetSecondMoments, None, itkImageMomentsCalculatorIF3)
itkImageMomentsCalculatorIF3.GetCenterOfGravity = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_GetCenterOfGravity, None, itkImageMomentsCalculatorIF3)
itkImageMomentsCalculatorIF3.GetCentralMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_GetCentralMoments, None, itkImageMomentsCalculatorIF3)
itkImageMomentsCalculatorIF3.GetPrincipalMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_GetPrincipalMoments, None, itkImageMomentsCalculatorIF3)
itkImageMomentsCalculatorIF3.GetPrincipalAxes = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_GetPrincipalAxes, None, itkImageMomentsCalculatorIF3)
itkImageMomentsCalculatorIF3.GetPrincipalAxesToPhysicalAxesTransform = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_GetPrincipalAxesToPhysicalAxesTransform, None, itkImageMomentsCalculatorIF3)
itkImageMomentsCalculatorIF3.GetPhysicalAxesToPrincipalAxesTransform = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_GetPhysicalAxesToPrincipalAxesTransform, None, itkImageMomentsCalculatorIF3)
itkImageMomentsCalculatorIF3_swigregister = _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_swigregister
itkImageMomentsCalculatorIF3_swigregister(itkImageMomentsCalculatorIF3)

def itkImageMomentsCalculatorIF3___New_orig__():
    """itkImageMomentsCalculatorIF3___New_orig__() -> itkImageMomentsCalculatorIF3_Pointer"""
    return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3___New_orig__()

def itkImageMomentsCalculatorIF3_cast(obj):
    """itkImageMomentsCalculatorIF3_cast(itkLightObject obj) -> itkImageMomentsCalculatorIF3"""
    return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_cast(obj)

class itkImageMomentsCalculatorISS2(ITKCommonBasePython.itkObject):
    """


    Compute moments of an n-dimensional image.

    This class provides methods for computing the moments and related
    properties of a single-echo image. Computing the (non-central) moments
    of a large image can easily take a million times longer than computing
    the various other values derived from them, so we compute the moments
    only on explicit request, and save their values (in an
    ImageMomentsCalculator object) for later retrieval by the user.

    The non-central moments computed by this class are not really intended
    for general use and are therefore in index coordinates; that is, we
    pretend that the index that selects a particular pixel also equals its
    physical coordinates. The center of gravity, central moments,
    principal moments and principal axes are all more generally useful and
    are computed in the physical coordinates defined by the Origin and
    Spacing parameters of the image.

    The methods that return values return the values themselves rather
    than references because the cost is small compared to the cost of
    computing the moments and doing so simplifies memory management for
    the caller.

    Todo It's not yet clear how multi-echo images should be handled here.

    C++ includes: itkImageMomentsCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageMomentsCalculatorISS2_Pointer"""
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageMomentsCalculatorISS2 self) -> itkImageMomentsCalculatorISS2_Pointer"""
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_Clone(self)


    def SetImage(self, image):
        """
        SetImage(itkImageMomentsCalculatorISS2 self, itkImageSS2 image)

        Set the input image. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_SetImage(self, image)


    def SetSpatialObjectMask(self, so):
        """
        SetSpatialObjectMask(itkImageMomentsCalculatorISS2 self, itkSpatialObject2 so)

        Set the
        spatial object mask. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_SetSpatialObjectMask(self, so)


    def Compute(self):
        """
        Compute(itkImageMomentsCalculatorISS2 self)

        Compute moments of a new or
        modified image. This method computes the moments of the image given as
        a parameter and stores them in the object. The values of these moments
        and related parameters can then be retrieved by using other methods of
        this object. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_Compute(self)


    def GetTotalMass(self):
        """
        GetTotalMass(itkImageMomentsCalculatorISS2 self) -> double

        Return the total mass
        (or zeroth moment) of an image. This method returns the sum of pixel
        intensities (also known as the zeroth moment or the total mass) of the
        image whose moments were last computed by this object. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_GetTotalMass(self)


    def GetFirstMoments(self):
        """
        GetFirstMoments(itkImageMomentsCalculatorISS2 self) -> itkVectorD2

        Return first
        moments about origin, in index coordinates. This method returns the
        first moments around the origin of the image whose moments were last
        computed by this object. For simplicity, these moments are computed in
        index coordinates rather than physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_GetFirstMoments(self)


    def GetSecondMoments(self):
        """
        GetSecondMoments(itkImageMomentsCalculatorISS2 self) -> itkMatrixD22

        Return second
        moments about origin, in index coordinates. This method returns the
        second moments around the origin of the image whose moments were last
        computed by this object. For simplicity, these moments are computed in
        index coordinates rather than physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_GetSecondMoments(self)


    def GetCenterOfGravity(self):
        """
        GetCenterOfGravity(itkImageMomentsCalculatorISS2 self) -> itkVectorD2

        Return center of
        gravity, in physical coordinates. This method returns the center of
        gravity of the image whose moments were last computed by this object.
        The center of gravity is computed in physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_GetCenterOfGravity(self)


    def GetCentralMoments(self):
        """
        GetCentralMoments(itkImageMomentsCalculatorISS2 self) -> itkMatrixD22

        Return second
        central moments, in physical coordinates. This method returns the
        central second moments of the image whose moments were last computed
        by this object. The central moments are computed in physical
        coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_GetCentralMoments(self)


    def GetPrincipalMoments(self):
        """
        GetPrincipalMoments(itkImageMomentsCalculatorISS2 self) -> itkVectorD2

        Return
        principal moments, in physical coordinates. This method returns the
        principal moments of the image whose moments were last computed by
        this object. The moments are returned as a vector, with the principal
        moments ordered from smallest to largest. The moments are computed in
        physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_GetPrincipalMoments(self)


    def GetPrincipalAxes(self):
        """
        GetPrincipalAxes(itkImageMomentsCalculatorISS2 self) -> itkMatrixD22

        Return principal
        axes, in physical coordinates. This method returns the principal axes
        of the image whose moments were last computed by this object. The
        moments are returned as an orthogonal matrix, each row of which
        corresponds corresponding to the smallest principal moment is the
        vector m[0], where m is the value returned by this method. The matrix
        of principal axes is guaranteed to be a proper rotation; that is, to
        have determinant +1 and to preserve parity. (Unless you have foolishly
        made one or more of the spacing values negative; in that case, you get
        to figure out the consequences.) The moments are computed in physical
        coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_GetPrincipalAxes(self)


    def GetPrincipalAxesToPhysicalAxesTransform(self):
        """
        GetPrincipalAxesToPhysicalAxesTransform(itkImageMomentsCalculatorISS2 self) -> itkAffineTransformD2_Pointer

        Get the affine
        transform from principal axes to physical axes This method returns an
        affine transform which transforms from the principal axes coordinate
        system to physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_GetPrincipalAxesToPhysicalAxesTransform(self)


    def GetPhysicalAxesToPrincipalAxesTransform(self):
        """
        GetPhysicalAxesToPrincipalAxesTransform(itkImageMomentsCalculatorISS2 self) -> itkAffineTransformD2_Pointer

        Get the affine
        transform from physical axes to principal axes This method returns an
        affine transform which transforms from the physical coordinate system
        to the principal axes coordinate system. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_GetPhysicalAxesToPrincipalAxesTransform(self)

    __swig_destroy__ = _itkImageMomentsCalculatorPython.delete_itkImageMomentsCalculatorISS2

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageMomentsCalculatorISS2"""
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageMomentsCalculatorISS2

        Create a new object of the class itkImageMomentsCalculatorISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageMomentsCalculatorISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageMomentsCalculatorISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageMomentsCalculatorISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageMomentsCalculatorISS2.Clone = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_Clone, None, itkImageMomentsCalculatorISS2)
itkImageMomentsCalculatorISS2.SetImage = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_SetImage, None, itkImageMomentsCalculatorISS2)
itkImageMomentsCalculatorISS2.SetSpatialObjectMask = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_SetSpatialObjectMask, None, itkImageMomentsCalculatorISS2)
itkImageMomentsCalculatorISS2.Compute = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_Compute, None, itkImageMomentsCalculatorISS2)
itkImageMomentsCalculatorISS2.GetTotalMass = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_GetTotalMass, None, itkImageMomentsCalculatorISS2)
itkImageMomentsCalculatorISS2.GetFirstMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_GetFirstMoments, None, itkImageMomentsCalculatorISS2)
itkImageMomentsCalculatorISS2.GetSecondMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_GetSecondMoments, None, itkImageMomentsCalculatorISS2)
itkImageMomentsCalculatorISS2.GetCenterOfGravity = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_GetCenterOfGravity, None, itkImageMomentsCalculatorISS2)
itkImageMomentsCalculatorISS2.GetCentralMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_GetCentralMoments, None, itkImageMomentsCalculatorISS2)
itkImageMomentsCalculatorISS2.GetPrincipalMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_GetPrincipalMoments, None, itkImageMomentsCalculatorISS2)
itkImageMomentsCalculatorISS2.GetPrincipalAxes = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_GetPrincipalAxes, None, itkImageMomentsCalculatorISS2)
itkImageMomentsCalculatorISS2.GetPrincipalAxesToPhysicalAxesTransform = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_GetPrincipalAxesToPhysicalAxesTransform, None, itkImageMomentsCalculatorISS2)
itkImageMomentsCalculatorISS2.GetPhysicalAxesToPrincipalAxesTransform = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_GetPhysicalAxesToPrincipalAxesTransform, None, itkImageMomentsCalculatorISS2)
itkImageMomentsCalculatorISS2_swigregister = _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_swigregister
itkImageMomentsCalculatorISS2_swigregister(itkImageMomentsCalculatorISS2)

def itkImageMomentsCalculatorISS2___New_orig__():
    """itkImageMomentsCalculatorISS2___New_orig__() -> itkImageMomentsCalculatorISS2_Pointer"""
    return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2___New_orig__()

def itkImageMomentsCalculatorISS2_cast(obj):
    """itkImageMomentsCalculatorISS2_cast(itkLightObject obj) -> itkImageMomentsCalculatorISS2"""
    return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_cast(obj)

class itkImageMomentsCalculatorISS3(ITKCommonBasePython.itkObject):
    """


    Compute moments of an n-dimensional image.

    This class provides methods for computing the moments and related
    properties of a single-echo image. Computing the (non-central) moments
    of a large image can easily take a million times longer than computing
    the various other values derived from them, so we compute the moments
    only on explicit request, and save their values (in an
    ImageMomentsCalculator object) for later retrieval by the user.

    The non-central moments computed by this class are not really intended
    for general use and are therefore in index coordinates; that is, we
    pretend that the index that selects a particular pixel also equals its
    physical coordinates. The center of gravity, central moments,
    principal moments and principal axes are all more generally useful and
    are computed in the physical coordinates defined by the Origin and
    Spacing parameters of the image.

    The methods that return values return the values themselves rather
    than references because the cost is small compared to the cost of
    computing the moments and doing so simplifies memory management for
    the caller.

    Todo It's not yet clear how multi-echo images should be handled here.

    C++ includes: itkImageMomentsCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageMomentsCalculatorISS3_Pointer"""
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageMomentsCalculatorISS3 self) -> itkImageMomentsCalculatorISS3_Pointer"""
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_Clone(self)


    def SetImage(self, image):
        """
        SetImage(itkImageMomentsCalculatorISS3 self, itkImageSS3 image)

        Set the input image. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_SetImage(self, image)


    def SetSpatialObjectMask(self, so):
        """
        SetSpatialObjectMask(itkImageMomentsCalculatorISS3 self, itkSpatialObject3 so)

        Set the
        spatial object mask. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_SetSpatialObjectMask(self, so)


    def Compute(self):
        """
        Compute(itkImageMomentsCalculatorISS3 self)

        Compute moments of a new or
        modified image. This method computes the moments of the image given as
        a parameter and stores them in the object. The values of these moments
        and related parameters can then be retrieved by using other methods of
        this object. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_Compute(self)


    def GetTotalMass(self):
        """
        GetTotalMass(itkImageMomentsCalculatorISS3 self) -> double

        Return the total mass
        (or zeroth moment) of an image. This method returns the sum of pixel
        intensities (also known as the zeroth moment or the total mass) of the
        image whose moments were last computed by this object. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_GetTotalMass(self)


    def GetFirstMoments(self):
        """
        GetFirstMoments(itkImageMomentsCalculatorISS3 self) -> itkVectorD3

        Return first
        moments about origin, in index coordinates. This method returns the
        first moments around the origin of the image whose moments were last
        computed by this object. For simplicity, these moments are computed in
        index coordinates rather than physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_GetFirstMoments(self)


    def GetSecondMoments(self):
        """
        GetSecondMoments(itkImageMomentsCalculatorISS3 self) -> itkMatrixD33

        Return second
        moments about origin, in index coordinates. This method returns the
        second moments around the origin of the image whose moments were last
        computed by this object. For simplicity, these moments are computed in
        index coordinates rather than physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_GetSecondMoments(self)


    def GetCenterOfGravity(self):
        """
        GetCenterOfGravity(itkImageMomentsCalculatorISS3 self) -> itkVectorD3

        Return center of
        gravity, in physical coordinates. This method returns the center of
        gravity of the image whose moments were last computed by this object.
        The center of gravity is computed in physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_GetCenterOfGravity(self)


    def GetCentralMoments(self):
        """
        GetCentralMoments(itkImageMomentsCalculatorISS3 self) -> itkMatrixD33

        Return second
        central moments, in physical coordinates. This method returns the
        central second moments of the image whose moments were last computed
        by this object. The central moments are computed in physical
        coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_GetCentralMoments(self)


    def GetPrincipalMoments(self):
        """
        GetPrincipalMoments(itkImageMomentsCalculatorISS3 self) -> itkVectorD3

        Return
        principal moments, in physical coordinates. This method returns the
        principal moments of the image whose moments were last computed by
        this object. The moments are returned as a vector, with the principal
        moments ordered from smallest to largest. The moments are computed in
        physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_GetPrincipalMoments(self)


    def GetPrincipalAxes(self):
        """
        GetPrincipalAxes(itkImageMomentsCalculatorISS3 self) -> itkMatrixD33

        Return principal
        axes, in physical coordinates. This method returns the principal axes
        of the image whose moments were last computed by this object. The
        moments are returned as an orthogonal matrix, each row of which
        corresponds corresponding to the smallest principal moment is the
        vector m[0], where m is the value returned by this method. The matrix
        of principal axes is guaranteed to be a proper rotation; that is, to
        have determinant +1 and to preserve parity. (Unless you have foolishly
        made one or more of the spacing values negative; in that case, you get
        to figure out the consequences.) The moments are computed in physical
        coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_GetPrincipalAxes(self)


    def GetPrincipalAxesToPhysicalAxesTransform(self):
        """
        GetPrincipalAxesToPhysicalAxesTransform(itkImageMomentsCalculatorISS3 self) -> itkAffineTransformD3_Pointer

        Get the affine
        transform from principal axes to physical axes This method returns an
        affine transform which transforms from the principal axes coordinate
        system to physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_GetPrincipalAxesToPhysicalAxesTransform(self)


    def GetPhysicalAxesToPrincipalAxesTransform(self):
        """
        GetPhysicalAxesToPrincipalAxesTransform(itkImageMomentsCalculatorISS3 self) -> itkAffineTransformD3_Pointer

        Get the affine
        transform from physical axes to principal axes This method returns an
        affine transform which transforms from the physical coordinate system
        to the principal axes coordinate system. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_GetPhysicalAxesToPrincipalAxesTransform(self)

    __swig_destroy__ = _itkImageMomentsCalculatorPython.delete_itkImageMomentsCalculatorISS3

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageMomentsCalculatorISS3"""
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageMomentsCalculatorISS3

        Create a new object of the class itkImageMomentsCalculatorISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageMomentsCalculatorISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageMomentsCalculatorISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageMomentsCalculatorISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageMomentsCalculatorISS3.Clone = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_Clone, None, itkImageMomentsCalculatorISS3)
itkImageMomentsCalculatorISS3.SetImage = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_SetImage, None, itkImageMomentsCalculatorISS3)
itkImageMomentsCalculatorISS3.SetSpatialObjectMask = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_SetSpatialObjectMask, None, itkImageMomentsCalculatorISS3)
itkImageMomentsCalculatorISS3.Compute = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_Compute, None, itkImageMomentsCalculatorISS3)
itkImageMomentsCalculatorISS3.GetTotalMass = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_GetTotalMass, None, itkImageMomentsCalculatorISS3)
itkImageMomentsCalculatorISS3.GetFirstMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_GetFirstMoments, None, itkImageMomentsCalculatorISS3)
itkImageMomentsCalculatorISS3.GetSecondMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_GetSecondMoments, None, itkImageMomentsCalculatorISS3)
itkImageMomentsCalculatorISS3.GetCenterOfGravity = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_GetCenterOfGravity, None, itkImageMomentsCalculatorISS3)
itkImageMomentsCalculatorISS3.GetCentralMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_GetCentralMoments, None, itkImageMomentsCalculatorISS3)
itkImageMomentsCalculatorISS3.GetPrincipalMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_GetPrincipalMoments, None, itkImageMomentsCalculatorISS3)
itkImageMomentsCalculatorISS3.GetPrincipalAxes = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_GetPrincipalAxes, None, itkImageMomentsCalculatorISS3)
itkImageMomentsCalculatorISS3.GetPrincipalAxesToPhysicalAxesTransform = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_GetPrincipalAxesToPhysicalAxesTransform, None, itkImageMomentsCalculatorISS3)
itkImageMomentsCalculatorISS3.GetPhysicalAxesToPrincipalAxesTransform = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_GetPhysicalAxesToPrincipalAxesTransform, None, itkImageMomentsCalculatorISS3)
itkImageMomentsCalculatorISS3_swigregister = _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_swigregister
itkImageMomentsCalculatorISS3_swigregister(itkImageMomentsCalculatorISS3)

def itkImageMomentsCalculatorISS3___New_orig__():
    """itkImageMomentsCalculatorISS3___New_orig__() -> itkImageMomentsCalculatorISS3_Pointer"""
    return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3___New_orig__()

def itkImageMomentsCalculatorISS3_cast(obj):
    """itkImageMomentsCalculatorISS3_cast(itkLightObject obj) -> itkImageMomentsCalculatorISS3"""
    return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_cast(obj)

class itkImageMomentsCalculatorIUC2(ITKCommonBasePython.itkObject):
    """


    Compute moments of an n-dimensional image.

    This class provides methods for computing the moments and related
    properties of a single-echo image. Computing the (non-central) moments
    of a large image can easily take a million times longer than computing
    the various other values derived from them, so we compute the moments
    only on explicit request, and save their values (in an
    ImageMomentsCalculator object) for later retrieval by the user.

    The non-central moments computed by this class are not really intended
    for general use and are therefore in index coordinates; that is, we
    pretend that the index that selects a particular pixel also equals its
    physical coordinates. The center of gravity, central moments,
    principal moments and principal axes are all more generally useful and
    are computed in the physical coordinates defined by the Origin and
    Spacing parameters of the image.

    The methods that return values return the values themselves rather
    than references because the cost is small compared to the cost of
    computing the moments and doing so simplifies memory management for
    the caller.

    Todo It's not yet clear how multi-echo images should be handled here.

    C++ includes: itkImageMomentsCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageMomentsCalculatorIUC2_Pointer"""
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageMomentsCalculatorIUC2 self) -> itkImageMomentsCalculatorIUC2_Pointer"""
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_Clone(self)


    def SetImage(self, image):
        """
        SetImage(itkImageMomentsCalculatorIUC2 self, itkImageUC2 image)

        Set the input image. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_SetImage(self, image)


    def SetSpatialObjectMask(self, so):
        """
        SetSpatialObjectMask(itkImageMomentsCalculatorIUC2 self, itkSpatialObject2 so)

        Set the
        spatial object mask. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_SetSpatialObjectMask(self, so)


    def Compute(self):
        """
        Compute(itkImageMomentsCalculatorIUC2 self)

        Compute moments of a new or
        modified image. This method computes the moments of the image given as
        a parameter and stores them in the object. The values of these moments
        and related parameters can then be retrieved by using other methods of
        this object. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_Compute(self)


    def GetTotalMass(self):
        """
        GetTotalMass(itkImageMomentsCalculatorIUC2 self) -> double

        Return the total mass
        (or zeroth moment) of an image. This method returns the sum of pixel
        intensities (also known as the zeroth moment or the total mass) of the
        image whose moments were last computed by this object. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_GetTotalMass(self)


    def GetFirstMoments(self):
        """
        GetFirstMoments(itkImageMomentsCalculatorIUC2 self) -> itkVectorD2

        Return first
        moments about origin, in index coordinates. This method returns the
        first moments around the origin of the image whose moments were last
        computed by this object. For simplicity, these moments are computed in
        index coordinates rather than physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_GetFirstMoments(self)


    def GetSecondMoments(self):
        """
        GetSecondMoments(itkImageMomentsCalculatorIUC2 self) -> itkMatrixD22

        Return second
        moments about origin, in index coordinates. This method returns the
        second moments around the origin of the image whose moments were last
        computed by this object. For simplicity, these moments are computed in
        index coordinates rather than physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_GetSecondMoments(self)


    def GetCenterOfGravity(self):
        """
        GetCenterOfGravity(itkImageMomentsCalculatorIUC2 self) -> itkVectorD2

        Return center of
        gravity, in physical coordinates. This method returns the center of
        gravity of the image whose moments were last computed by this object.
        The center of gravity is computed in physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_GetCenterOfGravity(self)


    def GetCentralMoments(self):
        """
        GetCentralMoments(itkImageMomentsCalculatorIUC2 self) -> itkMatrixD22

        Return second
        central moments, in physical coordinates. This method returns the
        central second moments of the image whose moments were last computed
        by this object. The central moments are computed in physical
        coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_GetCentralMoments(self)


    def GetPrincipalMoments(self):
        """
        GetPrincipalMoments(itkImageMomentsCalculatorIUC2 self) -> itkVectorD2

        Return
        principal moments, in physical coordinates. This method returns the
        principal moments of the image whose moments were last computed by
        this object. The moments are returned as a vector, with the principal
        moments ordered from smallest to largest. The moments are computed in
        physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_GetPrincipalMoments(self)


    def GetPrincipalAxes(self):
        """
        GetPrincipalAxes(itkImageMomentsCalculatorIUC2 self) -> itkMatrixD22

        Return principal
        axes, in physical coordinates. This method returns the principal axes
        of the image whose moments were last computed by this object. The
        moments are returned as an orthogonal matrix, each row of which
        corresponds corresponding to the smallest principal moment is the
        vector m[0], where m is the value returned by this method. The matrix
        of principal axes is guaranteed to be a proper rotation; that is, to
        have determinant +1 and to preserve parity. (Unless you have foolishly
        made one or more of the spacing values negative; in that case, you get
        to figure out the consequences.) The moments are computed in physical
        coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_GetPrincipalAxes(self)


    def GetPrincipalAxesToPhysicalAxesTransform(self):
        """
        GetPrincipalAxesToPhysicalAxesTransform(itkImageMomentsCalculatorIUC2 self) -> itkAffineTransformD2_Pointer

        Get the affine
        transform from principal axes to physical axes This method returns an
        affine transform which transforms from the principal axes coordinate
        system to physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_GetPrincipalAxesToPhysicalAxesTransform(self)


    def GetPhysicalAxesToPrincipalAxesTransform(self):
        """
        GetPhysicalAxesToPrincipalAxesTransform(itkImageMomentsCalculatorIUC2 self) -> itkAffineTransformD2_Pointer

        Get the affine
        transform from physical axes to principal axes This method returns an
        affine transform which transforms from the physical coordinate system
        to the principal axes coordinate system. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_GetPhysicalAxesToPrincipalAxesTransform(self)

    __swig_destroy__ = _itkImageMomentsCalculatorPython.delete_itkImageMomentsCalculatorIUC2

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageMomentsCalculatorIUC2"""
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageMomentsCalculatorIUC2

        Create a new object of the class itkImageMomentsCalculatorIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageMomentsCalculatorIUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageMomentsCalculatorIUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageMomentsCalculatorIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageMomentsCalculatorIUC2.Clone = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_Clone, None, itkImageMomentsCalculatorIUC2)
itkImageMomentsCalculatorIUC2.SetImage = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_SetImage, None, itkImageMomentsCalculatorIUC2)
itkImageMomentsCalculatorIUC2.SetSpatialObjectMask = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_SetSpatialObjectMask, None, itkImageMomentsCalculatorIUC2)
itkImageMomentsCalculatorIUC2.Compute = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_Compute, None, itkImageMomentsCalculatorIUC2)
itkImageMomentsCalculatorIUC2.GetTotalMass = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_GetTotalMass, None, itkImageMomentsCalculatorIUC2)
itkImageMomentsCalculatorIUC2.GetFirstMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_GetFirstMoments, None, itkImageMomentsCalculatorIUC2)
itkImageMomentsCalculatorIUC2.GetSecondMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_GetSecondMoments, None, itkImageMomentsCalculatorIUC2)
itkImageMomentsCalculatorIUC2.GetCenterOfGravity = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_GetCenterOfGravity, None, itkImageMomentsCalculatorIUC2)
itkImageMomentsCalculatorIUC2.GetCentralMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_GetCentralMoments, None, itkImageMomentsCalculatorIUC2)
itkImageMomentsCalculatorIUC2.GetPrincipalMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_GetPrincipalMoments, None, itkImageMomentsCalculatorIUC2)
itkImageMomentsCalculatorIUC2.GetPrincipalAxes = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_GetPrincipalAxes, None, itkImageMomentsCalculatorIUC2)
itkImageMomentsCalculatorIUC2.GetPrincipalAxesToPhysicalAxesTransform = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_GetPrincipalAxesToPhysicalAxesTransform, None, itkImageMomentsCalculatorIUC2)
itkImageMomentsCalculatorIUC2.GetPhysicalAxesToPrincipalAxesTransform = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_GetPhysicalAxesToPrincipalAxesTransform, None, itkImageMomentsCalculatorIUC2)
itkImageMomentsCalculatorIUC2_swigregister = _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_swigregister
itkImageMomentsCalculatorIUC2_swigregister(itkImageMomentsCalculatorIUC2)

def itkImageMomentsCalculatorIUC2___New_orig__():
    """itkImageMomentsCalculatorIUC2___New_orig__() -> itkImageMomentsCalculatorIUC2_Pointer"""
    return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2___New_orig__()

def itkImageMomentsCalculatorIUC2_cast(obj):
    """itkImageMomentsCalculatorIUC2_cast(itkLightObject obj) -> itkImageMomentsCalculatorIUC2"""
    return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_cast(obj)

class itkImageMomentsCalculatorIUC3(ITKCommonBasePython.itkObject):
    """


    Compute moments of an n-dimensional image.

    This class provides methods for computing the moments and related
    properties of a single-echo image. Computing the (non-central) moments
    of a large image can easily take a million times longer than computing
    the various other values derived from them, so we compute the moments
    only on explicit request, and save their values (in an
    ImageMomentsCalculator object) for later retrieval by the user.

    The non-central moments computed by this class are not really intended
    for general use and are therefore in index coordinates; that is, we
    pretend that the index that selects a particular pixel also equals its
    physical coordinates. The center of gravity, central moments,
    principal moments and principal axes are all more generally useful and
    are computed in the physical coordinates defined by the Origin and
    Spacing parameters of the image.

    The methods that return values return the values themselves rather
    than references because the cost is small compared to the cost of
    computing the moments and doing so simplifies memory management for
    the caller.

    Todo It's not yet clear how multi-echo images should be handled here.

    C++ includes: itkImageMomentsCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageMomentsCalculatorIUC3_Pointer"""
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageMomentsCalculatorIUC3 self) -> itkImageMomentsCalculatorIUC3_Pointer"""
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_Clone(self)


    def SetImage(self, image):
        """
        SetImage(itkImageMomentsCalculatorIUC3 self, itkImageUC3 image)

        Set the input image. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_SetImage(self, image)


    def SetSpatialObjectMask(self, so):
        """
        SetSpatialObjectMask(itkImageMomentsCalculatorIUC3 self, itkSpatialObject3 so)

        Set the
        spatial object mask. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_SetSpatialObjectMask(self, so)


    def Compute(self):
        """
        Compute(itkImageMomentsCalculatorIUC3 self)

        Compute moments of a new or
        modified image. This method computes the moments of the image given as
        a parameter and stores them in the object. The values of these moments
        and related parameters can then be retrieved by using other methods of
        this object. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_Compute(self)


    def GetTotalMass(self):
        """
        GetTotalMass(itkImageMomentsCalculatorIUC3 self) -> double

        Return the total mass
        (or zeroth moment) of an image. This method returns the sum of pixel
        intensities (also known as the zeroth moment or the total mass) of the
        image whose moments were last computed by this object. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_GetTotalMass(self)


    def GetFirstMoments(self):
        """
        GetFirstMoments(itkImageMomentsCalculatorIUC3 self) -> itkVectorD3

        Return first
        moments about origin, in index coordinates. This method returns the
        first moments around the origin of the image whose moments were last
        computed by this object. For simplicity, these moments are computed in
        index coordinates rather than physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_GetFirstMoments(self)


    def GetSecondMoments(self):
        """
        GetSecondMoments(itkImageMomentsCalculatorIUC3 self) -> itkMatrixD33

        Return second
        moments about origin, in index coordinates. This method returns the
        second moments around the origin of the image whose moments were last
        computed by this object. For simplicity, these moments are computed in
        index coordinates rather than physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_GetSecondMoments(self)


    def GetCenterOfGravity(self):
        """
        GetCenterOfGravity(itkImageMomentsCalculatorIUC3 self) -> itkVectorD3

        Return center of
        gravity, in physical coordinates. This method returns the center of
        gravity of the image whose moments were last computed by this object.
        The center of gravity is computed in physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_GetCenterOfGravity(self)


    def GetCentralMoments(self):
        """
        GetCentralMoments(itkImageMomentsCalculatorIUC3 self) -> itkMatrixD33

        Return second
        central moments, in physical coordinates. This method returns the
        central second moments of the image whose moments were last computed
        by this object. The central moments are computed in physical
        coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_GetCentralMoments(self)


    def GetPrincipalMoments(self):
        """
        GetPrincipalMoments(itkImageMomentsCalculatorIUC3 self) -> itkVectorD3

        Return
        principal moments, in physical coordinates. This method returns the
        principal moments of the image whose moments were last computed by
        this object. The moments are returned as a vector, with the principal
        moments ordered from smallest to largest. The moments are computed in
        physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_GetPrincipalMoments(self)


    def GetPrincipalAxes(self):
        """
        GetPrincipalAxes(itkImageMomentsCalculatorIUC3 self) -> itkMatrixD33

        Return principal
        axes, in physical coordinates. This method returns the principal axes
        of the image whose moments were last computed by this object. The
        moments are returned as an orthogonal matrix, each row of which
        corresponds corresponding to the smallest principal moment is the
        vector m[0], where m is the value returned by this method. The matrix
        of principal axes is guaranteed to be a proper rotation; that is, to
        have determinant +1 and to preserve parity. (Unless you have foolishly
        made one or more of the spacing values negative; in that case, you get
        to figure out the consequences.) The moments are computed in physical
        coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_GetPrincipalAxes(self)


    def GetPrincipalAxesToPhysicalAxesTransform(self):
        """
        GetPrincipalAxesToPhysicalAxesTransform(itkImageMomentsCalculatorIUC3 self) -> itkAffineTransformD3_Pointer

        Get the affine
        transform from principal axes to physical axes This method returns an
        affine transform which transforms from the principal axes coordinate
        system to physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_GetPrincipalAxesToPhysicalAxesTransform(self)


    def GetPhysicalAxesToPrincipalAxesTransform(self):
        """
        GetPhysicalAxesToPrincipalAxesTransform(itkImageMomentsCalculatorIUC3 self) -> itkAffineTransformD3_Pointer

        Get the affine
        transform from physical axes to principal axes This method returns an
        affine transform which transforms from the physical coordinate system
        to the principal axes coordinate system. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_GetPhysicalAxesToPrincipalAxesTransform(self)

    __swig_destroy__ = _itkImageMomentsCalculatorPython.delete_itkImageMomentsCalculatorIUC3

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageMomentsCalculatorIUC3"""
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageMomentsCalculatorIUC3

        Create a new object of the class itkImageMomentsCalculatorIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageMomentsCalculatorIUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageMomentsCalculatorIUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageMomentsCalculatorIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageMomentsCalculatorIUC3.Clone = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_Clone, None, itkImageMomentsCalculatorIUC3)
itkImageMomentsCalculatorIUC3.SetImage = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_SetImage, None, itkImageMomentsCalculatorIUC3)
itkImageMomentsCalculatorIUC3.SetSpatialObjectMask = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_SetSpatialObjectMask, None, itkImageMomentsCalculatorIUC3)
itkImageMomentsCalculatorIUC3.Compute = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_Compute, None, itkImageMomentsCalculatorIUC3)
itkImageMomentsCalculatorIUC3.GetTotalMass = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_GetTotalMass, None, itkImageMomentsCalculatorIUC3)
itkImageMomentsCalculatorIUC3.GetFirstMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_GetFirstMoments, None, itkImageMomentsCalculatorIUC3)
itkImageMomentsCalculatorIUC3.GetSecondMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_GetSecondMoments, None, itkImageMomentsCalculatorIUC3)
itkImageMomentsCalculatorIUC3.GetCenterOfGravity = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_GetCenterOfGravity, None, itkImageMomentsCalculatorIUC3)
itkImageMomentsCalculatorIUC3.GetCentralMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_GetCentralMoments, None, itkImageMomentsCalculatorIUC3)
itkImageMomentsCalculatorIUC3.GetPrincipalMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_GetPrincipalMoments, None, itkImageMomentsCalculatorIUC3)
itkImageMomentsCalculatorIUC3.GetPrincipalAxes = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_GetPrincipalAxes, None, itkImageMomentsCalculatorIUC3)
itkImageMomentsCalculatorIUC3.GetPrincipalAxesToPhysicalAxesTransform = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_GetPrincipalAxesToPhysicalAxesTransform, None, itkImageMomentsCalculatorIUC3)
itkImageMomentsCalculatorIUC3.GetPhysicalAxesToPrincipalAxesTransform = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_GetPhysicalAxesToPrincipalAxesTransform, None, itkImageMomentsCalculatorIUC3)
itkImageMomentsCalculatorIUC3_swigregister = _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_swigregister
itkImageMomentsCalculatorIUC3_swigregister(itkImageMomentsCalculatorIUC3)

def itkImageMomentsCalculatorIUC3___New_orig__():
    """itkImageMomentsCalculatorIUC3___New_orig__() -> itkImageMomentsCalculatorIUC3_Pointer"""
    return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3___New_orig__()

def itkImageMomentsCalculatorIUC3_cast(obj):
    """itkImageMomentsCalculatorIUC3_cast(itkLightObject obj) -> itkImageMomentsCalculatorIUC3"""
    return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_cast(obj)

class itkImageMomentsCalculatorIUS2(ITKCommonBasePython.itkObject):
    """


    Compute moments of an n-dimensional image.

    This class provides methods for computing the moments and related
    properties of a single-echo image. Computing the (non-central) moments
    of a large image can easily take a million times longer than computing
    the various other values derived from them, so we compute the moments
    only on explicit request, and save their values (in an
    ImageMomentsCalculator object) for later retrieval by the user.

    The non-central moments computed by this class are not really intended
    for general use and are therefore in index coordinates; that is, we
    pretend that the index that selects a particular pixel also equals its
    physical coordinates. The center of gravity, central moments,
    principal moments and principal axes are all more generally useful and
    are computed in the physical coordinates defined by the Origin and
    Spacing parameters of the image.

    The methods that return values return the values themselves rather
    than references because the cost is small compared to the cost of
    computing the moments and doing so simplifies memory management for
    the caller.

    Todo It's not yet clear how multi-echo images should be handled here.

    C++ includes: itkImageMomentsCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageMomentsCalculatorIUS2_Pointer"""
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageMomentsCalculatorIUS2 self) -> itkImageMomentsCalculatorIUS2_Pointer"""
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_Clone(self)


    def SetImage(self, image):
        """
        SetImage(itkImageMomentsCalculatorIUS2 self, itkImageUS2 image)

        Set the input image. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_SetImage(self, image)


    def SetSpatialObjectMask(self, so):
        """
        SetSpatialObjectMask(itkImageMomentsCalculatorIUS2 self, itkSpatialObject2 so)

        Set the
        spatial object mask. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_SetSpatialObjectMask(self, so)


    def Compute(self):
        """
        Compute(itkImageMomentsCalculatorIUS2 self)

        Compute moments of a new or
        modified image. This method computes the moments of the image given as
        a parameter and stores them in the object. The values of these moments
        and related parameters can then be retrieved by using other methods of
        this object. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_Compute(self)


    def GetTotalMass(self):
        """
        GetTotalMass(itkImageMomentsCalculatorIUS2 self) -> double

        Return the total mass
        (or zeroth moment) of an image. This method returns the sum of pixel
        intensities (also known as the zeroth moment or the total mass) of the
        image whose moments were last computed by this object. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_GetTotalMass(self)


    def GetFirstMoments(self):
        """
        GetFirstMoments(itkImageMomentsCalculatorIUS2 self) -> itkVectorD2

        Return first
        moments about origin, in index coordinates. This method returns the
        first moments around the origin of the image whose moments were last
        computed by this object. For simplicity, these moments are computed in
        index coordinates rather than physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_GetFirstMoments(self)


    def GetSecondMoments(self):
        """
        GetSecondMoments(itkImageMomentsCalculatorIUS2 self) -> itkMatrixD22

        Return second
        moments about origin, in index coordinates. This method returns the
        second moments around the origin of the image whose moments were last
        computed by this object. For simplicity, these moments are computed in
        index coordinates rather than physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_GetSecondMoments(self)


    def GetCenterOfGravity(self):
        """
        GetCenterOfGravity(itkImageMomentsCalculatorIUS2 self) -> itkVectorD2

        Return center of
        gravity, in physical coordinates. This method returns the center of
        gravity of the image whose moments were last computed by this object.
        The center of gravity is computed in physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_GetCenterOfGravity(self)


    def GetCentralMoments(self):
        """
        GetCentralMoments(itkImageMomentsCalculatorIUS2 self) -> itkMatrixD22

        Return second
        central moments, in physical coordinates. This method returns the
        central second moments of the image whose moments were last computed
        by this object. The central moments are computed in physical
        coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_GetCentralMoments(self)


    def GetPrincipalMoments(self):
        """
        GetPrincipalMoments(itkImageMomentsCalculatorIUS2 self) -> itkVectorD2

        Return
        principal moments, in physical coordinates. This method returns the
        principal moments of the image whose moments were last computed by
        this object. The moments are returned as a vector, with the principal
        moments ordered from smallest to largest. The moments are computed in
        physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_GetPrincipalMoments(self)


    def GetPrincipalAxes(self):
        """
        GetPrincipalAxes(itkImageMomentsCalculatorIUS2 self) -> itkMatrixD22

        Return principal
        axes, in physical coordinates. This method returns the principal axes
        of the image whose moments were last computed by this object. The
        moments are returned as an orthogonal matrix, each row of which
        corresponds corresponding to the smallest principal moment is the
        vector m[0], where m is the value returned by this method. The matrix
        of principal axes is guaranteed to be a proper rotation; that is, to
        have determinant +1 and to preserve parity. (Unless you have foolishly
        made one or more of the spacing values negative; in that case, you get
        to figure out the consequences.) The moments are computed in physical
        coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_GetPrincipalAxes(self)


    def GetPrincipalAxesToPhysicalAxesTransform(self):
        """
        GetPrincipalAxesToPhysicalAxesTransform(itkImageMomentsCalculatorIUS2 self) -> itkAffineTransformD2_Pointer

        Get the affine
        transform from principal axes to physical axes This method returns an
        affine transform which transforms from the principal axes coordinate
        system to physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_GetPrincipalAxesToPhysicalAxesTransform(self)


    def GetPhysicalAxesToPrincipalAxesTransform(self):
        """
        GetPhysicalAxesToPrincipalAxesTransform(itkImageMomentsCalculatorIUS2 self) -> itkAffineTransformD2_Pointer

        Get the affine
        transform from physical axes to principal axes This method returns an
        affine transform which transforms from the physical coordinate system
        to the principal axes coordinate system. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_GetPhysicalAxesToPrincipalAxesTransform(self)

    __swig_destroy__ = _itkImageMomentsCalculatorPython.delete_itkImageMomentsCalculatorIUS2

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageMomentsCalculatorIUS2"""
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageMomentsCalculatorIUS2

        Create a new object of the class itkImageMomentsCalculatorIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageMomentsCalculatorIUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageMomentsCalculatorIUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageMomentsCalculatorIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageMomentsCalculatorIUS2.Clone = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_Clone, None, itkImageMomentsCalculatorIUS2)
itkImageMomentsCalculatorIUS2.SetImage = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_SetImage, None, itkImageMomentsCalculatorIUS2)
itkImageMomentsCalculatorIUS2.SetSpatialObjectMask = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_SetSpatialObjectMask, None, itkImageMomentsCalculatorIUS2)
itkImageMomentsCalculatorIUS2.Compute = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_Compute, None, itkImageMomentsCalculatorIUS2)
itkImageMomentsCalculatorIUS2.GetTotalMass = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_GetTotalMass, None, itkImageMomentsCalculatorIUS2)
itkImageMomentsCalculatorIUS2.GetFirstMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_GetFirstMoments, None, itkImageMomentsCalculatorIUS2)
itkImageMomentsCalculatorIUS2.GetSecondMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_GetSecondMoments, None, itkImageMomentsCalculatorIUS2)
itkImageMomentsCalculatorIUS2.GetCenterOfGravity = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_GetCenterOfGravity, None, itkImageMomentsCalculatorIUS2)
itkImageMomentsCalculatorIUS2.GetCentralMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_GetCentralMoments, None, itkImageMomentsCalculatorIUS2)
itkImageMomentsCalculatorIUS2.GetPrincipalMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_GetPrincipalMoments, None, itkImageMomentsCalculatorIUS2)
itkImageMomentsCalculatorIUS2.GetPrincipalAxes = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_GetPrincipalAxes, None, itkImageMomentsCalculatorIUS2)
itkImageMomentsCalculatorIUS2.GetPrincipalAxesToPhysicalAxesTransform = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_GetPrincipalAxesToPhysicalAxesTransform, None, itkImageMomentsCalculatorIUS2)
itkImageMomentsCalculatorIUS2.GetPhysicalAxesToPrincipalAxesTransform = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_GetPhysicalAxesToPrincipalAxesTransform, None, itkImageMomentsCalculatorIUS2)
itkImageMomentsCalculatorIUS2_swigregister = _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_swigregister
itkImageMomentsCalculatorIUS2_swigregister(itkImageMomentsCalculatorIUS2)

def itkImageMomentsCalculatorIUS2___New_orig__():
    """itkImageMomentsCalculatorIUS2___New_orig__() -> itkImageMomentsCalculatorIUS2_Pointer"""
    return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2___New_orig__()

def itkImageMomentsCalculatorIUS2_cast(obj):
    """itkImageMomentsCalculatorIUS2_cast(itkLightObject obj) -> itkImageMomentsCalculatorIUS2"""
    return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_cast(obj)

class itkImageMomentsCalculatorIUS3(ITKCommonBasePython.itkObject):
    """


    Compute moments of an n-dimensional image.

    This class provides methods for computing the moments and related
    properties of a single-echo image. Computing the (non-central) moments
    of a large image can easily take a million times longer than computing
    the various other values derived from them, so we compute the moments
    only on explicit request, and save their values (in an
    ImageMomentsCalculator object) for later retrieval by the user.

    The non-central moments computed by this class are not really intended
    for general use and are therefore in index coordinates; that is, we
    pretend that the index that selects a particular pixel also equals its
    physical coordinates. The center of gravity, central moments,
    principal moments and principal axes are all more generally useful and
    are computed in the physical coordinates defined by the Origin and
    Spacing parameters of the image.

    The methods that return values return the values themselves rather
    than references because the cost is small compared to the cost of
    computing the moments and doing so simplifies memory management for
    the caller.

    Todo It's not yet clear how multi-echo images should be handled here.

    C++ includes: itkImageMomentsCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageMomentsCalculatorIUS3_Pointer"""
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageMomentsCalculatorIUS3 self) -> itkImageMomentsCalculatorIUS3_Pointer"""
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_Clone(self)


    def SetImage(self, image):
        """
        SetImage(itkImageMomentsCalculatorIUS3 self, itkImageUS3 image)

        Set the input image. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_SetImage(self, image)


    def SetSpatialObjectMask(self, so):
        """
        SetSpatialObjectMask(itkImageMomentsCalculatorIUS3 self, itkSpatialObject3 so)

        Set the
        spatial object mask. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_SetSpatialObjectMask(self, so)


    def Compute(self):
        """
        Compute(itkImageMomentsCalculatorIUS3 self)

        Compute moments of a new or
        modified image. This method computes the moments of the image given as
        a parameter and stores them in the object. The values of these moments
        and related parameters can then be retrieved by using other methods of
        this object. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_Compute(self)


    def GetTotalMass(self):
        """
        GetTotalMass(itkImageMomentsCalculatorIUS3 self) -> double

        Return the total mass
        (or zeroth moment) of an image. This method returns the sum of pixel
        intensities (also known as the zeroth moment or the total mass) of the
        image whose moments were last computed by this object. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_GetTotalMass(self)


    def GetFirstMoments(self):
        """
        GetFirstMoments(itkImageMomentsCalculatorIUS3 self) -> itkVectorD3

        Return first
        moments about origin, in index coordinates. This method returns the
        first moments around the origin of the image whose moments were last
        computed by this object. For simplicity, these moments are computed in
        index coordinates rather than physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_GetFirstMoments(self)


    def GetSecondMoments(self):
        """
        GetSecondMoments(itkImageMomentsCalculatorIUS3 self) -> itkMatrixD33

        Return second
        moments about origin, in index coordinates. This method returns the
        second moments around the origin of the image whose moments were last
        computed by this object. For simplicity, these moments are computed in
        index coordinates rather than physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_GetSecondMoments(self)


    def GetCenterOfGravity(self):
        """
        GetCenterOfGravity(itkImageMomentsCalculatorIUS3 self) -> itkVectorD3

        Return center of
        gravity, in physical coordinates. This method returns the center of
        gravity of the image whose moments were last computed by this object.
        The center of gravity is computed in physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_GetCenterOfGravity(self)


    def GetCentralMoments(self):
        """
        GetCentralMoments(itkImageMomentsCalculatorIUS3 self) -> itkMatrixD33

        Return second
        central moments, in physical coordinates. This method returns the
        central second moments of the image whose moments were last computed
        by this object. The central moments are computed in physical
        coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_GetCentralMoments(self)


    def GetPrincipalMoments(self):
        """
        GetPrincipalMoments(itkImageMomentsCalculatorIUS3 self) -> itkVectorD3

        Return
        principal moments, in physical coordinates. This method returns the
        principal moments of the image whose moments were last computed by
        this object. The moments are returned as a vector, with the principal
        moments ordered from smallest to largest. The moments are computed in
        physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_GetPrincipalMoments(self)


    def GetPrincipalAxes(self):
        """
        GetPrincipalAxes(itkImageMomentsCalculatorIUS3 self) -> itkMatrixD33

        Return principal
        axes, in physical coordinates. This method returns the principal axes
        of the image whose moments were last computed by this object. The
        moments are returned as an orthogonal matrix, each row of which
        corresponds corresponding to the smallest principal moment is the
        vector m[0], where m is the value returned by this method. The matrix
        of principal axes is guaranteed to be a proper rotation; that is, to
        have determinant +1 and to preserve parity. (Unless you have foolishly
        made one or more of the spacing values negative; in that case, you get
        to figure out the consequences.) The moments are computed in physical
        coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_GetPrincipalAxes(self)


    def GetPrincipalAxesToPhysicalAxesTransform(self):
        """
        GetPrincipalAxesToPhysicalAxesTransform(itkImageMomentsCalculatorIUS3 self) -> itkAffineTransformD3_Pointer

        Get the affine
        transform from principal axes to physical axes This method returns an
        affine transform which transforms from the principal axes coordinate
        system to physical coordinates. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_GetPrincipalAxesToPhysicalAxesTransform(self)


    def GetPhysicalAxesToPrincipalAxesTransform(self):
        """
        GetPhysicalAxesToPrincipalAxesTransform(itkImageMomentsCalculatorIUS3 self) -> itkAffineTransformD3_Pointer

        Get the affine
        transform from physical axes to principal axes This method returns an
        affine transform which transforms from the physical coordinate system
        to the principal axes coordinate system. 
        """
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_GetPhysicalAxesToPrincipalAxesTransform(self)

    __swig_destroy__ = _itkImageMomentsCalculatorPython.delete_itkImageMomentsCalculatorIUS3

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageMomentsCalculatorIUS3"""
        return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageMomentsCalculatorIUS3

        Create a new object of the class itkImageMomentsCalculatorIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageMomentsCalculatorIUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageMomentsCalculatorIUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageMomentsCalculatorIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageMomentsCalculatorIUS3.Clone = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_Clone, None, itkImageMomentsCalculatorIUS3)
itkImageMomentsCalculatorIUS3.SetImage = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_SetImage, None, itkImageMomentsCalculatorIUS3)
itkImageMomentsCalculatorIUS3.SetSpatialObjectMask = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_SetSpatialObjectMask, None, itkImageMomentsCalculatorIUS3)
itkImageMomentsCalculatorIUS3.Compute = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_Compute, None, itkImageMomentsCalculatorIUS3)
itkImageMomentsCalculatorIUS3.GetTotalMass = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_GetTotalMass, None, itkImageMomentsCalculatorIUS3)
itkImageMomentsCalculatorIUS3.GetFirstMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_GetFirstMoments, None, itkImageMomentsCalculatorIUS3)
itkImageMomentsCalculatorIUS3.GetSecondMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_GetSecondMoments, None, itkImageMomentsCalculatorIUS3)
itkImageMomentsCalculatorIUS3.GetCenterOfGravity = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_GetCenterOfGravity, None, itkImageMomentsCalculatorIUS3)
itkImageMomentsCalculatorIUS3.GetCentralMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_GetCentralMoments, None, itkImageMomentsCalculatorIUS3)
itkImageMomentsCalculatorIUS3.GetPrincipalMoments = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_GetPrincipalMoments, None, itkImageMomentsCalculatorIUS3)
itkImageMomentsCalculatorIUS3.GetPrincipalAxes = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_GetPrincipalAxes, None, itkImageMomentsCalculatorIUS3)
itkImageMomentsCalculatorIUS3.GetPrincipalAxesToPhysicalAxesTransform = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_GetPrincipalAxesToPhysicalAxesTransform, None, itkImageMomentsCalculatorIUS3)
itkImageMomentsCalculatorIUS3.GetPhysicalAxesToPrincipalAxesTransform = new_instancemethod(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_GetPhysicalAxesToPrincipalAxesTransform, None, itkImageMomentsCalculatorIUS3)
itkImageMomentsCalculatorIUS3_swigregister = _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_swigregister
itkImageMomentsCalculatorIUS3_swigregister(itkImageMomentsCalculatorIUS3)

def itkImageMomentsCalculatorIUS3___New_orig__():
    """itkImageMomentsCalculatorIUS3___New_orig__() -> itkImageMomentsCalculatorIUS3_Pointer"""
    return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3___New_orig__()

def itkImageMomentsCalculatorIUS3_cast(obj):
    """itkImageMomentsCalculatorIUS3_cast(itkLightObject obj) -> itkImageMomentsCalculatorIUS3"""
    return _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_cast(obj)



