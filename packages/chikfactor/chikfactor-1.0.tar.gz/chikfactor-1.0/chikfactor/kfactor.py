from mpmath import polylog, log, pi, sqrt


def li2(z):
    return polylog(2, z)


def domain_check(c):

    def c_j(r):
        if 0 < r and r < 1:
            return float( c(r) )
        else:
            raise ValueError("physics domain error (0 < r < 1)")

    return c_j

@domain_check
def c_0(r):
    if r == 1.0/3.0:
        raise ZeroDivisionError("pole at r = 1/3")

    b = sqrt(1.0-r)
    return  (-2.0/9.0)*(pi**2*(4.0*r**4-7.0*r**3+11.0*r**2-r+1.0)/(1.0-r)**2+6.0*r*(7.0*r**4-25.0*r**3+31.0*r**2-25.0*r+24.0)/(r-2.0)**2)/(3.0*r**3-r**2+3.0*r-1.0)+(2.0*(4.0*r**4-7.0*r**3+11.0*r**2-r+1.0)*log((2.0-r)/r)**2/(r**2+1.0)+(3.0*r**3-6.0*r**2-3.0*r+2.0)*log((1.0-b)/(1.0+b))**2+4.0*(1.0-r)*(3.0*r**2-12.0*r+5.0)*log((1.0-b)/(1.0+b))/b-8.0*(2.0*r**4-5.0*r**3+6.0*r**2-2.0*r+1.0)*log(2.0*(1.0-r)/r)*log((2.0-r)/r)/(r**2+1.0)+8.0*(8.0*r**5-50.0*r**4+125.0*r**3-152.0*r**2+87.0*r-18.0)*log(2.0*(1.0-r)/r)/(r-2.0)**3)/(3.0*(1.0-r)**2*(3.0*r-1.0))+4.0*((4.0*r**4-7.0*r**3+11.0*r**2-r+1.0)*li2(r/(2.0-r))-2.0*(2.0*r**4-5.0*r**3+6.0*r**2-2.0*r+1.0)*li2(2.0*(r-1.0)/r))/(3.0*(3.0*r-1.0)*(1.0-r)**2*(r**2+1.0))

def c_10(r):
    b = sqrt(1.0-r)
    return 2.0*(pi**2.0*(r-2.0)*(r**2.0-r+2.0)-6.0*(r-1.0)*(4.0*r-7.0))/(9.0*(r-1.0)*(r-2.0))+4.0*(r**2.0-2.0*r-1.0)*log((1.0-b)/(1.0+b))/(3.0*b*(1.0-r))+8.0*(3.0*r**3.0-10.0*r**2.0+9.0*r-1.0)*log(2.0/r-2.0)/(3.0*(r-2.0)**2.0*(r-1.0))+(r-2.0)*(r**2.0+1.0)*log((1.0-b)/(1.0+b))**2.0/(3.0*(r-1.0)**2.0)-2.0*log(2.0/r-1.0)*(2.0*(1.0-2.0*r)*log(2.0/r-2.0)+(r-1.0)*(r**2.0-r+2.0)*log(2.0/r-1.0))-4.0*((1.0-2.0*r)*li2(2.0-2.0/r)+(r-1.0)*(r**2.0-r+2.0)*li2(r/(2.0-r)))/(3.0*(r-1.0)**2.0)

def c_11(r):
    b = sqrt(1.0-r)
    return (pi**2.0*(-4.0*r**2.0+19.0*r-5.0)-36.0*(r-1.0)**2.0)/(9.0*(r-1.0)**2.0)+(-3.0*r**2.0+3.0*r-2.0)*log((1.0-b)/(1.0+b))**2.0/(3.0*(r-1.0)**2.0)+4.0*((r-2.0)*(2.0*r**2.0-r+1.0)*log((1.0-b)/(1.0+b))+b*(2.0*r**2.0-5.0*r+1.0)*log(2.0/r-2.0))/(3.0*b*(r-2.0)*(r-1.0))+((4.0*r**2.0-19.0*r+5.0)*log(2.0/r-1.0)-2.0*(r**2.0-16.0*r+3.0)*log(2.0/r-2.0))*log(2.0/r-1.0)/(3.0*(r-1.0)**2.0)+(2.0*(4.0*r**2.0-19.0*r+5.0)*li2(r/(2.0-r))-2.0*(r**2.0-16.0*r+3.0)*li2(2.0-2.0/r))/(3.0*(r-1.0)**2.0)

@domain_check
def c_1(r):
    return (c_10(r)+r*c_11(r))/(1.0+r)

def c_20(r):
    b = sqrt(1.0-r)
    return  ((-1.0)*pi**2.0*(2.0*r**4.0+9.0*r**3.0+27.0*r**2.0-11.0*r+5.0)*(r-2.0)**2.0+12.0*(r-1.0)**2.0*(2.0*r**3.0-11.0*r**2.0+6.0*r+12.0))/(9.0*(r-2.0)**2.0*(r-1.0)**2.0)+(-1.0)*(3.0*r**3.0+30.0*r**2.0+3.0*r+2.0)*log((1.0-b)/(1.0+b))**2.0/(3.0*(r-1.0)**2.0)+(2.0*r**4.0+9.0*r**3.0+27.0*r**2.0-11.0*r+5.0)*log(2.0/r-1.0)**2.0/(3.0*(r-1.0)**2.0)+8.0*(6.0*r**5.0-38.0*r**4.0+60.0*r**3.0+16.0*r**2.0-69.0*r+6.0)*log(2.0/r-2.0)/(3.0*(r-2.0)**3.0*(r-1.0))+4.0*(21.0*r**2.0+18.0*r-1.0)*log((1.0-b)/(1.0+b))/(3.0*b*(r-1.0))+(-2.0)*(2.0*r**4.0+9.0*r**3.0-9.0*r**2.0-11.0*r+3.0)*log(2.0/r-2.0)*log(2.0/r-1.0)/(3.0*(r-1.0)**2.0)+2.0*((-2.0)*r**4.0-9.0*r**3.0+9.0*r**2.0+11.0*r-3.0)*li2(2.0-2.0/r)/(3.0*(r-1.0)**2.0)+2.0*(2.0*r**4.0+9.0*r**3.0+27.0*r**2.0-11.0*r+5.0)*li2(r/(2.0-r))/(3.0*(r-1.0)**2.0)

def c_21(r):
    b = sqrt(1.0-r)
    return  (pi**2.0*(2.0-r)*(2.0*r**2.0-20.0*r+3.0)-12.0*r*(r-1.0)**2.0)/(9.0*(r-2.0)*(r-1.0)**2.0)+(3.0*r**2.0+21.0*r-2.0)*log((1.0-b)/(1.0+b))**2.0/(3.0*(r-1.0)**2.0)+log(2.0/r-1.0)*((2.0*r**2.0-20.0*r+3.0)*log(2.0/r-1.0)-2.0*(5.0*r**2.0+r+1.0)*log(2.0/r-2.0))/(3.0*(r-1.0)**2.0)+(-4.0)*((19.0*r+3.0)*(r-2.0)**2.0*log((1.0-b)/(1.0+b))+b*(10.0*r**3.0-49.0*r**2.0+51.0*r+10.0)*log(2.0/r-2.0))/(3.0*b*(r-2.0)**2.0*(r-1.0))+(-2.0)*((5.0*r**2.0+r+1.0)*li2(2.0-2.0/r)-(2.0*r**2.0-20.0*r+3.0)*li2(r/(2.0-r)))/(3.0*(r-1.0)**2.0)

def c_22(r):
    b = sqrt(1.0-r)
    return  (-2.0)*r**2.0*(24.0*(r-1.0)**2.0+pi**2.0*(r+3.0))/(9.0*(r-1.0)**2.0)+8.0*r**2.0*(4.0*b*log(2.0/r-2.0)-(r-5.0)*log((1.0-b)/(1.0+b)))/(3.0*b*(r-1.0))+2.0*r**2.0*(log(2.0/r-1.0)*((r+3.0)*log(2.0/r-1.0)-2.0*(r-1.0)*log(2.0/r-2.0))-4.0*log((1.0-b)/(1.0+b))**2.0)/(3.0*(r-1.0)**2.0)+4.0*r**2.0*((r+3.0)*li2(r/(2.0-r))-(r-1.0)*li2(2.0-2.0/r))/(3.0*(r-1.0)**2.0)

@domain_check
def c_2(r):
    return (6.0*r**2.0*c_22(r)+3.0*r*c_21(r)+c_20(r))/(6.0*r**2.0+3.0*r+1.0)
