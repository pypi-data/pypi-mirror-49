# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: needlestack/apis/tensors.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='needlestack/apis/tensors.proto',
  package='',
  syntax='proto3',
  serialized_options=None,
  serialized_pb=_b('\n\x1eneedlestack/apis/tensors.proto\"\x87\x02\n\x07NDArray\x12\x1d\n\x05\x64type\x18\x01 \x01(\x0e\x32\x0e.NDArray.DType\x12\x11\n\x05shape\x18\x02 \x03(\rB\x02\x10\x01\x12\x15\n\rnumpy_content\x18\x03 \x01(\x0c\x12\x15\n\tfloat_val\x18\x04 \x03(\x02\x42\x02\x10\x01\x12\x16\n\ndouble_val\x18\x05 \x03(\x01\x42\x02\x10\x01\x12\x13\n\x07int_val\x18\x06 \x03(\x05\x42\x02\x10\x01\x12\x14\n\x08long_val\x18\x07 \x03(\x03\x42\x02\x10\x01\"Y\n\x05\x44Type\x12\x0b\n\x07\x46LOAT16\x10\x00\x12\x0b\n\x07\x46LOAT32\x10\x01\x12\x0b\n\x07\x46LOAT64\x10\x02\x12\x08\n\x04INT8\x10\x03\x12\t\n\x05INT16\x10\x04\x12\t\n\x05INT32\x10\x05\x12\t\n\x05INT64\x10\x06\x62\x06proto3')
)



_NDARRAY_DTYPE = _descriptor.EnumDescriptor(
  name='DType',
  full_name='NDArray.DType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='FLOAT16', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='FLOAT32', index=1, number=1,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='FLOAT64', index=2, number=2,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INT8', index=3, number=3,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INT16', index=4, number=4,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INT32', index=5, number=5,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INT64', index=6, number=6,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=209,
  serialized_end=298,
)
_sym_db.RegisterEnumDescriptor(_NDARRAY_DTYPE)


_NDARRAY = _descriptor.Descriptor(
  name='NDArray',
  full_name='NDArray',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='dtype', full_name='NDArray.dtype', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='shape', full_name='NDArray.shape', index=1,
      number=2, type=13, cpp_type=3, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\020\001'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='numpy_content', full_name='NDArray.numpy_content', index=2,
      number=3, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='float_val', full_name='NDArray.float_val', index=3,
      number=4, type=2, cpp_type=6, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\020\001'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='double_val', full_name='NDArray.double_val', index=4,
      number=5, type=1, cpp_type=5, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\020\001'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='int_val', full_name='NDArray.int_val', index=5,
      number=6, type=5, cpp_type=1, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\020\001'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='long_val', full_name='NDArray.long_val', index=6,
      number=7, type=3, cpp_type=2, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\020\001'), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _NDARRAY_DTYPE,
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=35,
  serialized_end=298,
)

_NDARRAY.fields_by_name['dtype'].enum_type = _NDARRAY_DTYPE
_NDARRAY_DTYPE.containing_type = _NDARRAY
DESCRIPTOR.message_types_by_name['NDArray'] = _NDARRAY
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

NDArray = _reflection.GeneratedProtocolMessageType('NDArray', (_message.Message,), {
  'DESCRIPTOR' : _NDARRAY,
  '__module__' : 'needlestack.apis.tensors_pb2'
  # @@protoc_insertion_point(class_scope:NDArray)
  })
_sym_db.RegisterMessage(NDArray)


_NDARRAY.fields_by_name['shape']._options = None
_NDARRAY.fields_by_name['float_val']._options = None
_NDARRAY.fields_by_name['double_val']._options = None
_NDARRAY.fields_by_name['int_val']._options = None
_NDARRAY.fields_by_name['long_val']._options = None
# @@protoc_insertion_point(module_scope)
