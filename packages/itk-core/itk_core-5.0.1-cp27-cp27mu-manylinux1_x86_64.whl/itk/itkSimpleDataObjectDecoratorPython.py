# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkSimpleDataObjectDecoratorPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkSimpleDataObjectDecoratorPython', [dirname(__file__)])
        except ImportError:
            import _itkSimpleDataObjectDecoratorPython
            return _itkSimpleDataObjectDecoratorPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkSimpleDataObjectDecoratorPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkSimpleDataObjectDecoratorPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkSimpleDataObjectDecoratorPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import stdcomplexPython
import pyBasePython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkArrayPython
import ITKCommonBasePython

def itkSimpleDataObjectDecoratorstring_New():
  return itkSimpleDataObjectDecoratorstring.New()


def itkSimpleDataObjectDecoratorCF_New():
  return itkSimpleDataObjectDecoratorCF.New()


def itkSimpleDataObjectDecoratorRGBAUC_New():
  return itkSimpleDataObjectDecoratorRGBAUC.New()


def itkSimpleDataObjectDecoratorRGBUC_New():
  return itkSimpleDataObjectDecoratorRGBUC.New()


def itkSimpleDataObjectDecoratorCVF4_New():
  return itkSimpleDataObjectDecoratorCVF4.New()


def itkSimpleDataObjectDecoratorCVF3_New():
  return itkSimpleDataObjectDecoratorCVF3.New()


def itkSimpleDataObjectDecoratorCVF2_New():
  return itkSimpleDataObjectDecoratorCVF2.New()


def itkSimpleDataObjectDecoratorVF4_New():
  return itkSimpleDataObjectDecoratorVF4.New()


def itkSimpleDataObjectDecoratorVF3_New():
  return itkSimpleDataObjectDecoratorVF3.New()


def itkSimpleDataObjectDecoratorVF2_New():
  return itkSimpleDataObjectDecoratorVF2.New()


def itkSimpleDataObjectDecoratorAUL_New():
  return itkSimpleDataObjectDecoratorAUL.New()


def itkSimpleDataObjectDecoratorAULL_New():
  return itkSimpleDataObjectDecoratorAULL.New()


def itkSimpleDataObjectDecoratorAF_New():
  return itkSimpleDataObjectDecoratorAF.New()


def itkSimpleDataObjectDecoratorAD_New():
  return itkSimpleDataObjectDecoratorAD.New()


def itkSimpleDataObjectDecoratorB_New():
  return itkSimpleDataObjectDecoratorB.New()


def itkSimpleDataObjectDecoratorSC_New():
  return itkSimpleDataObjectDecoratorSC.New()


def itkSimpleDataObjectDecoratorSS_New():
  return itkSimpleDataObjectDecoratorSS.New()


def itkSimpleDataObjectDecoratorSLL_New():
  return itkSimpleDataObjectDecoratorSLL.New()


def itkSimpleDataObjectDecoratorSL_New():
  return itkSimpleDataObjectDecoratorSL.New()


def itkSimpleDataObjectDecoratorUC_New():
  return itkSimpleDataObjectDecoratorUC.New()


def itkSimpleDataObjectDecoratorUS_New():
  return itkSimpleDataObjectDecoratorUS.New()


def itkSimpleDataObjectDecoratorULL_New():
  return itkSimpleDataObjectDecoratorULL.New()


def itkSimpleDataObjectDecoratorUL_New():
  return itkSimpleDataObjectDecoratorUL.New()


def itkSimpleDataObjectDecoratorF_New():
  return itkSimpleDataObjectDecoratorF.New()


def itkSimpleDataObjectDecoratorD_New():
  return itkSimpleDataObjectDecoratorD.New()

class itkSimpleDataObjectDecoratorAD(ITKCommonBasePython.itkDataObject):
    """


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocationg of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator

    C++ includes: itkSimpleDataObjectDecorator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSimpleDataObjectDecoratorAD_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSimpleDataObjectDecoratorAD self) -> itkSimpleDataObjectDecoratorAD_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAD_Clone(self)


    def Set(self, val):
        """
        Set(itkSimpleDataObjectDecoratorAD self, itkArrayD val)

        Set the contained object 
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAD_Set(self, val)


    def Get(self, *args):
        """
        Get(itkSimpleDataObjectDecoratorAD self) -> itkArrayD
        Get(itkSimpleDataObjectDecoratorAD self) -> itkArrayD
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAD_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorAD

    def cast(obj):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorAD"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorAD

        Create a new object of the class itkSimpleDataObjectDecoratorAD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorAD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorAD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorAD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorAD.Clone = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAD_Clone, None, itkSimpleDataObjectDecoratorAD)
itkSimpleDataObjectDecoratorAD.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAD_Set, None, itkSimpleDataObjectDecoratorAD)
itkSimpleDataObjectDecoratorAD.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAD_Get, None, itkSimpleDataObjectDecoratorAD)
itkSimpleDataObjectDecoratorAD_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAD_swigregister
itkSimpleDataObjectDecoratorAD_swigregister(itkSimpleDataObjectDecoratorAD)

def itkSimpleDataObjectDecoratorAD___New_orig__():
    """itkSimpleDataObjectDecoratorAD___New_orig__() -> itkSimpleDataObjectDecoratorAD_Pointer"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAD___New_orig__()

def itkSimpleDataObjectDecoratorAD_cast(obj):
    """itkSimpleDataObjectDecoratorAD_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorAD"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAD_cast(obj)

class itkSimpleDataObjectDecoratorAF(ITKCommonBasePython.itkDataObject):
    """


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocationg of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator

    C++ includes: itkSimpleDataObjectDecorator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSimpleDataObjectDecoratorAF_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSimpleDataObjectDecoratorAF self) -> itkSimpleDataObjectDecoratorAF_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAF_Clone(self)


    def Set(self, val):
        """
        Set(itkSimpleDataObjectDecoratorAF self, itkArrayF val)

        Set the contained object 
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAF_Set(self, val)


    def Get(self, *args):
        """
        Get(itkSimpleDataObjectDecoratorAF self) -> itkArrayF
        Get(itkSimpleDataObjectDecoratorAF self) -> itkArrayF
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAF_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorAF

    def cast(obj):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorAF"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorAF

        Create a new object of the class itkSimpleDataObjectDecoratorAF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorAF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorAF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorAF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorAF.Clone = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAF_Clone, None, itkSimpleDataObjectDecoratorAF)
itkSimpleDataObjectDecoratorAF.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAF_Set, None, itkSimpleDataObjectDecoratorAF)
itkSimpleDataObjectDecoratorAF.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAF_Get, None, itkSimpleDataObjectDecoratorAF)
itkSimpleDataObjectDecoratorAF_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAF_swigregister
itkSimpleDataObjectDecoratorAF_swigregister(itkSimpleDataObjectDecoratorAF)

def itkSimpleDataObjectDecoratorAF___New_orig__():
    """itkSimpleDataObjectDecoratorAF___New_orig__() -> itkSimpleDataObjectDecoratorAF_Pointer"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAF___New_orig__()

def itkSimpleDataObjectDecoratorAF_cast(obj):
    """itkSimpleDataObjectDecoratorAF_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorAF"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAF_cast(obj)

class itkSimpleDataObjectDecoratorAUL(ITKCommonBasePython.itkDataObject):
    """


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocationg of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator

    C++ includes: itkSimpleDataObjectDecorator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSimpleDataObjectDecoratorAUL_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAUL___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSimpleDataObjectDecoratorAUL self) -> itkSimpleDataObjectDecoratorAUL_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAUL_Clone(self)


    def Set(self, val):
        """
        Set(itkSimpleDataObjectDecoratorAUL self, itkArrayUL val)

        Set the contained object 
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAUL_Set(self, val)


    def Get(self, *args):
        """
        Get(itkSimpleDataObjectDecoratorAUL self) -> itkArrayUL
        Get(itkSimpleDataObjectDecoratorAUL self) -> itkArrayUL
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAUL_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorAUL

    def cast(obj):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorAUL"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAUL_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorAUL

        Create a new object of the class itkSimpleDataObjectDecoratorAUL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorAUL.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorAUL.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorAUL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorAUL.Clone = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAUL_Clone, None, itkSimpleDataObjectDecoratorAUL)
itkSimpleDataObjectDecoratorAUL.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAUL_Set, None, itkSimpleDataObjectDecoratorAUL)
itkSimpleDataObjectDecoratorAUL.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAUL_Get, None, itkSimpleDataObjectDecoratorAUL)
itkSimpleDataObjectDecoratorAUL_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAUL_swigregister
itkSimpleDataObjectDecoratorAUL_swigregister(itkSimpleDataObjectDecoratorAUL)

def itkSimpleDataObjectDecoratorAUL___New_orig__():
    """itkSimpleDataObjectDecoratorAUL___New_orig__() -> itkSimpleDataObjectDecoratorAUL_Pointer"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAUL___New_orig__()

def itkSimpleDataObjectDecoratorAUL_cast(obj):
    """itkSimpleDataObjectDecoratorAUL_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorAUL"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAUL_cast(obj)

class itkSimpleDataObjectDecoratorAULL(ITKCommonBasePython.itkDataObject):
    """


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocationg of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator

    C++ includes: itkSimpleDataObjectDecorator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSimpleDataObjectDecoratorAULL_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAULL___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSimpleDataObjectDecoratorAULL self) -> itkSimpleDataObjectDecoratorAULL_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAULL_Clone(self)


    def Set(self, val):
        """
        Set(itkSimpleDataObjectDecoratorAULL self, itkArrayULL val)

        Set the contained object 
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAULL_Set(self, val)


    def Get(self, *args):
        """
        Get(itkSimpleDataObjectDecoratorAULL self) -> itkArrayULL
        Get(itkSimpleDataObjectDecoratorAULL self) -> itkArrayULL
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAULL_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorAULL

    def cast(obj):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorAULL"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAULL_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorAULL

        Create a new object of the class itkSimpleDataObjectDecoratorAULL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorAULL.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorAULL.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorAULL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorAULL.Clone = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAULL_Clone, None, itkSimpleDataObjectDecoratorAULL)
itkSimpleDataObjectDecoratorAULL.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAULL_Set, None, itkSimpleDataObjectDecoratorAULL)
itkSimpleDataObjectDecoratorAULL.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAULL_Get, None, itkSimpleDataObjectDecoratorAULL)
itkSimpleDataObjectDecoratorAULL_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAULL_swigregister
itkSimpleDataObjectDecoratorAULL_swigregister(itkSimpleDataObjectDecoratorAULL)

def itkSimpleDataObjectDecoratorAULL___New_orig__():
    """itkSimpleDataObjectDecoratorAULL___New_orig__() -> itkSimpleDataObjectDecoratorAULL_Pointer"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAULL___New_orig__()

def itkSimpleDataObjectDecoratorAULL_cast(obj):
    """itkSimpleDataObjectDecoratorAULL_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorAULL"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAULL_cast(obj)

class itkSimpleDataObjectDecoratorB(ITKCommonBasePython.itkDataObject):
    """


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocationg of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator

    C++ includes: itkSimpleDataObjectDecorator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSimpleDataObjectDecoratorB_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSimpleDataObjectDecoratorB self) -> itkSimpleDataObjectDecoratorB_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_Clone(self)


    def Set(self, val):
        """
        Set(itkSimpleDataObjectDecoratorB self, bool const & val)

        Set the contained object 
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_Set(self, val)


    def Get(self, *args):
        """
        Get(itkSimpleDataObjectDecoratorB self) -> bool
        Get(itkSimpleDataObjectDecoratorB self) -> bool const &
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorB

    def cast(obj):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorB"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorB

        Create a new object of the class itkSimpleDataObjectDecoratorB and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorB.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorB.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorB.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorB.Clone = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_Clone, None, itkSimpleDataObjectDecoratorB)
itkSimpleDataObjectDecoratorB.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_Set, None, itkSimpleDataObjectDecoratorB)
itkSimpleDataObjectDecoratorB.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_Get, None, itkSimpleDataObjectDecoratorB)
itkSimpleDataObjectDecoratorB_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_swigregister
itkSimpleDataObjectDecoratorB_swigregister(itkSimpleDataObjectDecoratorB)

def itkSimpleDataObjectDecoratorB___New_orig__():
    """itkSimpleDataObjectDecoratorB___New_orig__() -> itkSimpleDataObjectDecoratorB_Pointer"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB___New_orig__()

def itkSimpleDataObjectDecoratorB_cast(obj):
    """itkSimpleDataObjectDecoratorB_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorB"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_cast(obj)

class itkSimpleDataObjectDecoratorCF(ITKCommonBasePython.itkDataObject):
    """


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocationg of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator

    C++ includes: itkSimpleDataObjectDecorator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSimpleDataObjectDecoratorCF_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSimpleDataObjectDecoratorCF self) -> itkSimpleDataObjectDecoratorCF_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCF_Clone(self)


    def Set(self, val):
        """
        Set(itkSimpleDataObjectDecoratorCF self, stdcomplexF val)

        Set the contained object 
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCF_Set(self, val)


    def Get(self, *args):
        """
        Get(itkSimpleDataObjectDecoratorCF self) -> stdcomplexF
        Get(itkSimpleDataObjectDecoratorCF self) -> stdcomplexF
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCF_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorCF

    def cast(obj):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorCF"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorCF

        Create a new object of the class itkSimpleDataObjectDecoratorCF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorCF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorCF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorCF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorCF.Clone = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCF_Clone, None, itkSimpleDataObjectDecoratorCF)
itkSimpleDataObjectDecoratorCF.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCF_Set, None, itkSimpleDataObjectDecoratorCF)
itkSimpleDataObjectDecoratorCF.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCF_Get, None, itkSimpleDataObjectDecoratorCF)
itkSimpleDataObjectDecoratorCF_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCF_swigregister
itkSimpleDataObjectDecoratorCF_swigregister(itkSimpleDataObjectDecoratorCF)

def itkSimpleDataObjectDecoratorCF___New_orig__():
    """itkSimpleDataObjectDecoratorCF___New_orig__() -> itkSimpleDataObjectDecoratorCF_Pointer"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCF___New_orig__()

def itkSimpleDataObjectDecoratorCF_cast(obj):
    """itkSimpleDataObjectDecoratorCF_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorCF"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCF_cast(obj)

class itkSimpleDataObjectDecoratorCVF2(ITKCommonBasePython.itkDataObject):
    """


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocationg of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator

    C++ includes: itkSimpleDataObjectDecorator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSimpleDataObjectDecoratorCVF2_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSimpleDataObjectDecoratorCVF2 self) -> itkSimpleDataObjectDecoratorCVF2_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF2_Clone(self)


    def Set(self, val):
        """
        Set(itkSimpleDataObjectDecoratorCVF2 self, itkCovariantVectorF2 val)

        Set the contained object 
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF2_Set(self, val)


    def Get(self, *args):
        """
        Get(itkSimpleDataObjectDecoratorCVF2 self) -> itkCovariantVectorF2
        Get(itkSimpleDataObjectDecoratorCVF2 self) -> itkCovariantVectorF2
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF2_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorCVF2

    def cast(obj):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorCVF2"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorCVF2

        Create a new object of the class itkSimpleDataObjectDecoratorCVF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorCVF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorCVF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorCVF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorCVF2.Clone = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF2_Clone, None, itkSimpleDataObjectDecoratorCVF2)
itkSimpleDataObjectDecoratorCVF2.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF2_Set, None, itkSimpleDataObjectDecoratorCVF2)
itkSimpleDataObjectDecoratorCVF2.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF2_Get, None, itkSimpleDataObjectDecoratorCVF2)
itkSimpleDataObjectDecoratorCVF2_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF2_swigregister
itkSimpleDataObjectDecoratorCVF2_swigregister(itkSimpleDataObjectDecoratorCVF2)

def itkSimpleDataObjectDecoratorCVF2___New_orig__():
    """itkSimpleDataObjectDecoratorCVF2___New_orig__() -> itkSimpleDataObjectDecoratorCVF2_Pointer"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF2___New_orig__()

def itkSimpleDataObjectDecoratorCVF2_cast(obj):
    """itkSimpleDataObjectDecoratorCVF2_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorCVF2"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF2_cast(obj)

class itkSimpleDataObjectDecoratorCVF3(ITKCommonBasePython.itkDataObject):
    """


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocationg of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator

    C++ includes: itkSimpleDataObjectDecorator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSimpleDataObjectDecoratorCVF3_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSimpleDataObjectDecoratorCVF3 self) -> itkSimpleDataObjectDecoratorCVF3_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF3_Clone(self)


    def Set(self, val):
        """
        Set(itkSimpleDataObjectDecoratorCVF3 self, itkCovariantVectorF3 val)

        Set the contained object 
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF3_Set(self, val)


    def Get(self, *args):
        """
        Get(itkSimpleDataObjectDecoratorCVF3 self) -> itkCovariantVectorF3
        Get(itkSimpleDataObjectDecoratorCVF3 self) -> itkCovariantVectorF3
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF3_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorCVF3

    def cast(obj):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorCVF3"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorCVF3

        Create a new object of the class itkSimpleDataObjectDecoratorCVF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorCVF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorCVF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorCVF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorCVF3.Clone = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF3_Clone, None, itkSimpleDataObjectDecoratorCVF3)
itkSimpleDataObjectDecoratorCVF3.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF3_Set, None, itkSimpleDataObjectDecoratorCVF3)
itkSimpleDataObjectDecoratorCVF3.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF3_Get, None, itkSimpleDataObjectDecoratorCVF3)
itkSimpleDataObjectDecoratorCVF3_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF3_swigregister
itkSimpleDataObjectDecoratorCVF3_swigregister(itkSimpleDataObjectDecoratorCVF3)

def itkSimpleDataObjectDecoratorCVF3___New_orig__():
    """itkSimpleDataObjectDecoratorCVF3___New_orig__() -> itkSimpleDataObjectDecoratorCVF3_Pointer"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF3___New_orig__()

def itkSimpleDataObjectDecoratorCVF3_cast(obj):
    """itkSimpleDataObjectDecoratorCVF3_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorCVF3"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF3_cast(obj)

class itkSimpleDataObjectDecoratorCVF4(ITKCommonBasePython.itkDataObject):
    """


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocationg of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator

    C++ includes: itkSimpleDataObjectDecorator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSimpleDataObjectDecoratorCVF4_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF4___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSimpleDataObjectDecoratorCVF4 self) -> itkSimpleDataObjectDecoratorCVF4_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF4_Clone(self)


    def Set(self, val):
        """
        Set(itkSimpleDataObjectDecoratorCVF4 self, itkCovariantVectorF4 val)

        Set the contained object 
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF4_Set(self, val)


    def Get(self, *args):
        """
        Get(itkSimpleDataObjectDecoratorCVF4 self) -> itkCovariantVectorF4
        Get(itkSimpleDataObjectDecoratorCVF4 self) -> itkCovariantVectorF4
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF4_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorCVF4

    def cast(obj):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorCVF4"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF4_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorCVF4

        Create a new object of the class itkSimpleDataObjectDecoratorCVF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorCVF4.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorCVF4.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorCVF4.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorCVF4.Clone = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF4_Clone, None, itkSimpleDataObjectDecoratorCVF4)
itkSimpleDataObjectDecoratorCVF4.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF4_Set, None, itkSimpleDataObjectDecoratorCVF4)
itkSimpleDataObjectDecoratorCVF4.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF4_Get, None, itkSimpleDataObjectDecoratorCVF4)
itkSimpleDataObjectDecoratorCVF4_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF4_swigregister
itkSimpleDataObjectDecoratorCVF4_swigregister(itkSimpleDataObjectDecoratorCVF4)

def itkSimpleDataObjectDecoratorCVF4___New_orig__():
    """itkSimpleDataObjectDecoratorCVF4___New_orig__() -> itkSimpleDataObjectDecoratorCVF4_Pointer"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF4___New_orig__()

def itkSimpleDataObjectDecoratorCVF4_cast(obj):
    """itkSimpleDataObjectDecoratorCVF4_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorCVF4"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF4_cast(obj)

class itkSimpleDataObjectDecoratorD(ITKCommonBasePython.itkDataObject):
    """


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocationg of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator

    C++ includes: itkSimpleDataObjectDecorator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSimpleDataObjectDecoratorD_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSimpleDataObjectDecoratorD self) -> itkSimpleDataObjectDecoratorD_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_Clone(self)


    def Set(self, val):
        """
        Set(itkSimpleDataObjectDecoratorD self, double const & val)

        Set the contained object 
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_Set(self, val)


    def Get(self, *args):
        """
        Get(itkSimpleDataObjectDecoratorD self) -> double
        Get(itkSimpleDataObjectDecoratorD self) -> double const &
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorD

    def cast(obj):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorD"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorD

        Create a new object of the class itkSimpleDataObjectDecoratorD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorD.Clone = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_Clone, None, itkSimpleDataObjectDecoratorD)
itkSimpleDataObjectDecoratorD.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_Set, None, itkSimpleDataObjectDecoratorD)
itkSimpleDataObjectDecoratorD.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_Get, None, itkSimpleDataObjectDecoratorD)
itkSimpleDataObjectDecoratorD_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_swigregister
itkSimpleDataObjectDecoratorD_swigregister(itkSimpleDataObjectDecoratorD)

def itkSimpleDataObjectDecoratorD___New_orig__():
    """itkSimpleDataObjectDecoratorD___New_orig__() -> itkSimpleDataObjectDecoratorD_Pointer"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD___New_orig__()

def itkSimpleDataObjectDecoratorD_cast(obj):
    """itkSimpleDataObjectDecoratorD_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorD"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_cast(obj)

class itkSimpleDataObjectDecoratorF(ITKCommonBasePython.itkDataObject):
    """


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocationg of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator

    C++ includes: itkSimpleDataObjectDecorator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSimpleDataObjectDecoratorF_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSimpleDataObjectDecoratorF self) -> itkSimpleDataObjectDecoratorF_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_Clone(self)


    def Set(self, val):
        """
        Set(itkSimpleDataObjectDecoratorF self, float const & val)

        Set the contained object 
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_Set(self, val)


    def Get(self, *args):
        """
        Get(itkSimpleDataObjectDecoratorF self) -> float
        Get(itkSimpleDataObjectDecoratorF self) -> float const &
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorF

    def cast(obj):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorF"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorF

        Create a new object of the class itkSimpleDataObjectDecoratorF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorF.Clone = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_Clone, None, itkSimpleDataObjectDecoratorF)
itkSimpleDataObjectDecoratorF.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_Set, None, itkSimpleDataObjectDecoratorF)
itkSimpleDataObjectDecoratorF.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_Get, None, itkSimpleDataObjectDecoratorF)
itkSimpleDataObjectDecoratorF_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_swigregister
itkSimpleDataObjectDecoratorF_swigregister(itkSimpleDataObjectDecoratorF)

def itkSimpleDataObjectDecoratorF___New_orig__():
    """itkSimpleDataObjectDecoratorF___New_orig__() -> itkSimpleDataObjectDecoratorF_Pointer"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF___New_orig__()

def itkSimpleDataObjectDecoratorF_cast(obj):
    """itkSimpleDataObjectDecoratorF_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorF"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_cast(obj)

class itkSimpleDataObjectDecoratorRGBAUC(ITKCommonBasePython.itkDataObject):
    """


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocationg of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator

    C++ includes: itkSimpleDataObjectDecorator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSimpleDataObjectDecoratorRGBAUC_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBAUC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSimpleDataObjectDecoratorRGBAUC self) -> itkSimpleDataObjectDecoratorRGBAUC_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBAUC_Clone(self)


    def Set(self, val):
        """
        Set(itkSimpleDataObjectDecoratorRGBAUC self, itkRGBAPixelUC val)

        Set the contained object 
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBAUC_Set(self, val)


    def Get(self, *args):
        """
        Get(itkSimpleDataObjectDecoratorRGBAUC self) -> itkRGBAPixelUC
        Get(itkSimpleDataObjectDecoratorRGBAUC self) -> itkRGBAPixelUC
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBAUC_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorRGBAUC

    def cast(obj):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorRGBAUC"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBAUC_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorRGBAUC

        Create a new object of the class itkSimpleDataObjectDecoratorRGBAUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorRGBAUC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorRGBAUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorRGBAUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorRGBAUC.Clone = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBAUC_Clone, None, itkSimpleDataObjectDecoratorRGBAUC)
itkSimpleDataObjectDecoratorRGBAUC.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBAUC_Set, None, itkSimpleDataObjectDecoratorRGBAUC)
itkSimpleDataObjectDecoratorRGBAUC.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBAUC_Get, None, itkSimpleDataObjectDecoratorRGBAUC)
itkSimpleDataObjectDecoratorRGBAUC_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBAUC_swigregister
itkSimpleDataObjectDecoratorRGBAUC_swigregister(itkSimpleDataObjectDecoratorRGBAUC)

def itkSimpleDataObjectDecoratorRGBAUC___New_orig__():
    """itkSimpleDataObjectDecoratorRGBAUC___New_orig__() -> itkSimpleDataObjectDecoratorRGBAUC_Pointer"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBAUC___New_orig__()

def itkSimpleDataObjectDecoratorRGBAUC_cast(obj):
    """itkSimpleDataObjectDecoratorRGBAUC_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorRGBAUC"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBAUC_cast(obj)

class itkSimpleDataObjectDecoratorRGBUC(ITKCommonBasePython.itkDataObject):
    """


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocationg of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator

    C++ includes: itkSimpleDataObjectDecorator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSimpleDataObjectDecoratorRGBUC_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBUC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSimpleDataObjectDecoratorRGBUC self) -> itkSimpleDataObjectDecoratorRGBUC_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBUC_Clone(self)


    def Set(self, val):
        """
        Set(itkSimpleDataObjectDecoratorRGBUC self, itkRGBPixelUC val)

        Set the contained object 
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBUC_Set(self, val)


    def Get(self, *args):
        """
        Get(itkSimpleDataObjectDecoratorRGBUC self) -> itkRGBPixelUC
        Get(itkSimpleDataObjectDecoratorRGBUC self) -> itkRGBPixelUC
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBUC_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorRGBUC

    def cast(obj):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorRGBUC"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBUC_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorRGBUC

        Create a new object of the class itkSimpleDataObjectDecoratorRGBUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorRGBUC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorRGBUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorRGBUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorRGBUC.Clone = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBUC_Clone, None, itkSimpleDataObjectDecoratorRGBUC)
itkSimpleDataObjectDecoratorRGBUC.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBUC_Set, None, itkSimpleDataObjectDecoratorRGBUC)
itkSimpleDataObjectDecoratorRGBUC.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBUC_Get, None, itkSimpleDataObjectDecoratorRGBUC)
itkSimpleDataObjectDecoratorRGBUC_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBUC_swigregister
itkSimpleDataObjectDecoratorRGBUC_swigregister(itkSimpleDataObjectDecoratorRGBUC)

def itkSimpleDataObjectDecoratorRGBUC___New_orig__():
    """itkSimpleDataObjectDecoratorRGBUC___New_orig__() -> itkSimpleDataObjectDecoratorRGBUC_Pointer"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBUC___New_orig__()

def itkSimpleDataObjectDecoratorRGBUC_cast(obj):
    """itkSimpleDataObjectDecoratorRGBUC_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorRGBUC"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBUC_cast(obj)

class itkSimpleDataObjectDecoratorSC(ITKCommonBasePython.itkDataObject):
    """


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocationg of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator

    C++ includes: itkSimpleDataObjectDecorator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSimpleDataObjectDecoratorSC_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSimpleDataObjectDecoratorSC self) -> itkSimpleDataObjectDecoratorSC_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_Clone(self)


    def Set(self, val):
        """
        Set(itkSimpleDataObjectDecoratorSC self, signed char const & val)

        Set the contained object 
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_Set(self, val)


    def Get(self, *args):
        """
        Get(itkSimpleDataObjectDecoratorSC self) -> signed char
        Get(itkSimpleDataObjectDecoratorSC self) -> signed char const &
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorSC

    def cast(obj):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorSC"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorSC

        Create a new object of the class itkSimpleDataObjectDecoratorSC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorSC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorSC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorSC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorSC.Clone = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_Clone, None, itkSimpleDataObjectDecoratorSC)
itkSimpleDataObjectDecoratorSC.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_Set, None, itkSimpleDataObjectDecoratorSC)
itkSimpleDataObjectDecoratorSC.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_Get, None, itkSimpleDataObjectDecoratorSC)
itkSimpleDataObjectDecoratorSC_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_swigregister
itkSimpleDataObjectDecoratorSC_swigregister(itkSimpleDataObjectDecoratorSC)

def itkSimpleDataObjectDecoratorSC___New_orig__():
    """itkSimpleDataObjectDecoratorSC___New_orig__() -> itkSimpleDataObjectDecoratorSC_Pointer"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC___New_orig__()

def itkSimpleDataObjectDecoratorSC_cast(obj):
    """itkSimpleDataObjectDecoratorSC_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorSC"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_cast(obj)

class itkSimpleDataObjectDecoratorSL(ITKCommonBasePython.itkDataObject):
    """


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocationg of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator

    C++ includes: itkSimpleDataObjectDecorator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSimpleDataObjectDecoratorSL_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSimpleDataObjectDecoratorSL self) -> itkSimpleDataObjectDecoratorSL_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_Clone(self)


    def Set(self, val):
        """
        Set(itkSimpleDataObjectDecoratorSL self, long const & val)

        Set the contained object 
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_Set(self, val)


    def Get(self, *args):
        """
        Get(itkSimpleDataObjectDecoratorSL self) -> long
        Get(itkSimpleDataObjectDecoratorSL self) -> long const &
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorSL

    def cast(obj):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorSL"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorSL

        Create a new object of the class itkSimpleDataObjectDecoratorSL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorSL.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorSL.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorSL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorSL.Clone = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_Clone, None, itkSimpleDataObjectDecoratorSL)
itkSimpleDataObjectDecoratorSL.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_Set, None, itkSimpleDataObjectDecoratorSL)
itkSimpleDataObjectDecoratorSL.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_Get, None, itkSimpleDataObjectDecoratorSL)
itkSimpleDataObjectDecoratorSL_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_swigregister
itkSimpleDataObjectDecoratorSL_swigregister(itkSimpleDataObjectDecoratorSL)

def itkSimpleDataObjectDecoratorSL___New_orig__():
    """itkSimpleDataObjectDecoratorSL___New_orig__() -> itkSimpleDataObjectDecoratorSL_Pointer"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL___New_orig__()

def itkSimpleDataObjectDecoratorSL_cast(obj):
    """itkSimpleDataObjectDecoratorSL_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorSL"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_cast(obj)

class itkSimpleDataObjectDecoratorSLL(ITKCommonBasePython.itkDataObject):
    """


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocationg of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator

    C++ includes: itkSimpleDataObjectDecorator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSimpleDataObjectDecoratorSLL_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSLL___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSimpleDataObjectDecoratorSLL self) -> itkSimpleDataObjectDecoratorSLL_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSLL_Clone(self)


    def Set(self, val):
        """
        Set(itkSimpleDataObjectDecoratorSLL self, long long const & val)

        Set the contained object 
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSLL_Set(self, val)


    def Get(self, *args):
        """
        Get(itkSimpleDataObjectDecoratorSLL self) -> long long
        Get(itkSimpleDataObjectDecoratorSLL self) -> long long const &
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSLL_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorSLL

    def cast(obj):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorSLL"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSLL_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorSLL

        Create a new object of the class itkSimpleDataObjectDecoratorSLL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorSLL.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorSLL.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorSLL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorSLL.Clone = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSLL_Clone, None, itkSimpleDataObjectDecoratorSLL)
itkSimpleDataObjectDecoratorSLL.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSLL_Set, None, itkSimpleDataObjectDecoratorSLL)
itkSimpleDataObjectDecoratorSLL.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSLL_Get, None, itkSimpleDataObjectDecoratorSLL)
itkSimpleDataObjectDecoratorSLL_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSLL_swigregister
itkSimpleDataObjectDecoratorSLL_swigregister(itkSimpleDataObjectDecoratorSLL)

def itkSimpleDataObjectDecoratorSLL___New_orig__():
    """itkSimpleDataObjectDecoratorSLL___New_orig__() -> itkSimpleDataObjectDecoratorSLL_Pointer"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSLL___New_orig__()

def itkSimpleDataObjectDecoratorSLL_cast(obj):
    """itkSimpleDataObjectDecoratorSLL_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorSLL"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSLL_cast(obj)

class itkSimpleDataObjectDecoratorSS(ITKCommonBasePython.itkDataObject):
    """


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocationg of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator

    C++ includes: itkSimpleDataObjectDecorator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSimpleDataObjectDecoratorSS_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSimpleDataObjectDecoratorSS self) -> itkSimpleDataObjectDecoratorSS_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_Clone(self)


    def Set(self, val):
        """
        Set(itkSimpleDataObjectDecoratorSS self, short const & val)

        Set the contained object 
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_Set(self, val)


    def Get(self, *args):
        """
        Get(itkSimpleDataObjectDecoratorSS self) -> short
        Get(itkSimpleDataObjectDecoratorSS self) -> short const &
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorSS

    def cast(obj):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorSS"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorSS

        Create a new object of the class itkSimpleDataObjectDecoratorSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorSS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorSS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorSS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorSS.Clone = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_Clone, None, itkSimpleDataObjectDecoratorSS)
itkSimpleDataObjectDecoratorSS.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_Set, None, itkSimpleDataObjectDecoratorSS)
itkSimpleDataObjectDecoratorSS.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_Get, None, itkSimpleDataObjectDecoratorSS)
itkSimpleDataObjectDecoratorSS_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_swigregister
itkSimpleDataObjectDecoratorSS_swigregister(itkSimpleDataObjectDecoratorSS)

def itkSimpleDataObjectDecoratorSS___New_orig__():
    """itkSimpleDataObjectDecoratorSS___New_orig__() -> itkSimpleDataObjectDecoratorSS_Pointer"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS___New_orig__()

def itkSimpleDataObjectDecoratorSS_cast(obj):
    """itkSimpleDataObjectDecoratorSS_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorSS"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_cast(obj)

class itkSimpleDataObjectDecoratorUC(ITKCommonBasePython.itkDataObject):
    """


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocationg of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator

    C++ includes: itkSimpleDataObjectDecorator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSimpleDataObjectDecoratorUC_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSimpleDataObjectDecoratorUC self) -> itkSimpleDataObjectDecoratorUC_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_Clone(self)


    def Set(self, val):
        """
        Set(itkSimpleDataObjectDecoratorUC self, unsigned char const & val)

        Set the contained object 
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_Set(self, val)


    def Get(self, *args):
        """
        Get(itkSimpleDataObjectDecoratorUC self) -> unsigned char
        Get(itkSimpleDataObjectDecoratorUC self) -> unsigned char const &
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorUC

    def cast(obj):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorUC"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorUC

        Create a new object of the class itkSimpleDataObjectDecoratorUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorUC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorUC.Clone = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_Clone, None, itkSimpleDataObjectDecoratorUC)
itkSimpleDataObjectDecoratorUC.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_Set, None, itkSimpleDataObjectDecoratorUC)
itkSimpleDataObjectDecoratorUC.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_Get, None, itkSimpleDataObjectDecoratorUC)
itkSimpleDataObjectDecoratorUC_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_swigregister
itkSimpleDataObjectDecoratorUC_swigregister(itkSimpleDataObjectDecoratorUC)

def itkSimpleDataObjectDecoratorUC___New_orig__():
    """itkSimpleDataObjectDecoratorUC___New_orig__() -> itkSimpleDataObjectDecoratorUC_Pointer"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC___New_orig__()

def itkSimpleDataObjectDecoratorUC_cast(obj):
    """itkSimpleDataObjectDecoratorUC_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorUC"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_cast(obj)

class itkSimpleDataObjectDecoratorUL(ITKCommonBasePython.itkDataObject):
    """


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocationg of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator

    C++ includes: itkSimpleDataObjectDecorator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSimpleDataObjectDecoratorUL_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSimpleDataObjectDecoratorUL self) -> itkSimpleDataObjectDecoratorUL_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_Clone(self)


    def Set(self, val):
        """
        Set(itkSimpleDataObjectDecoratorUL self, unsigned long const & val)

        Set the contained object 
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_Set(self, val)


    def Get(self, *args):
        """
        Get(itkSimpleDataObjectDecoratorUL self) -> unsigned long
        Get(itkSimpleDataObjectDecoratorUL self) -> unsigned long const &
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorUL

    def cast(obj):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorUL"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorUL

        Create a new object of the class itkSimpleDataObjectDecoratorUL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorUL.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorUL.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorUL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorUL.Clone = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_Clone, None, itkSimpleDataObjectDecoratorUL)
itkSimpleDataObjectDecoratorUL.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_Set, None, itkSimpleDataObjectDecoratorUL)
itkSimpleDataObjectDecoratorUL.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_Get, None, itkSimpleDataObjectDecoratorUL)
itkSimpleDataObjectDecoratorUL_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_swigregister
itkSimpleDataObjectDecoratorUL_swigregister(itkSimpleDataObjectDecoratorUL)

def itkSimpleDataObjectDecoratorUL___New_orig__():
    """itkSimpleDataObjectDecoratorUL___New_orig__() -> itkSimpleDataObjectDecoratorUL_Pointer"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL___New_orig__()

def itkSimpleDataObjectDecoratorUL_cast(obj):
    """itkSimpleDataObjectDecoratorUL_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorUL"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_cast(obj)

class itkSimpleDataObjectDecoratorULL(ITKCommonBasePython.itkDataObject):
    """


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocationg of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator

    C++ includes: itkSimpleDataObjectDecorator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSimpleDataObjectDecoratorULL_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorULL___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSimpleDataObjectDecoratorULL self) -> itkSimpleDataObjectDecoratorULL_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorULL_Clone(self)


    def Set(self, val):
        """
        Set(itkSimpleDataObjectDecoratorULL self, unsigned long long const & val)

        Set the contained object 
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorULL_Set(self, val)


    def Get(self, *args):
        """
        Get(itkSimpleDataObjectDecoratorULL self) -> unsigned long long
        Get(itkSimpleDataObjectDecoratorULL self) -> unsigned long long const &
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorULL_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorULL

    def cast(obj):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorULL"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorULL_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorULL

        Create a new object of the class itkSimpleDataObjectDecoratorULL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorULL.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorULL.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorULL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorULL.Clone = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorULL_Clone, None, itkSimpleDataObjectDecoratorULL)
itkSimpleDataObjectDecoratorULL.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorULL_Set, None, itkSimpleDataObjectDecoratorULL)
itkSimpleDataObjectDecoratorULL.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorULL_Get, None, itkSimpleDataObjectDecoratorULL)
itkSimpleDataObjectDecoratorULL_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorULL_swigregister
itkSimpleDataObjectDecoratorULL_swigregister(itkSimpleDataObjectDecoratorULL)

def itkSimpleDataObjectDecoratorULL___New_orig__():
    """itkSimpleDataObjectDecoratorULL___New_orig__() -> itkSimpleDataObjectDecoratorULL_Pointer"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorULL___New_orig__()

def itkSimpleDataObjectDecoratorULL_cast(obj):
    """itkSimpleDataObjectDecoratorULL_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorULL"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorULL_cast(obj)

class itkSimpleDataObjectDecoratorUS(ITKCommonBasePython.itkDataObject):
    """


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocationg of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator

    C++ includes: itkSimpleDataObjectDecorator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSimpleDataObjectDecoratorUS_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSimpleDataObjectDecoratorUS self) -> itkSimpleDataObjectDecoratorUS_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_Clone(self)


    def Set(self, val):
        """
        Set(itkSimpleDataObjectDecoratorUS self, unsigned short const & val)

        Set the contained object 
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_Set(self, val)


    def Get(self, *args):
        """
        Get(itkSimpleDataObjectDecoratorUS self) -> unsigned short
        Get(itkSimpleDataObjectDecoratorUS self) -> unsigned short const &
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorUS

    def cast(obj):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorUS"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorUS

        Create a new object of the class itkSimpleDataObjectDecoratorUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorUS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorUS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorUS.Clone = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_Clone, None, itkSimpleDataObjectDecoratorUS)
itkSimpleDataObjectDecoratorUS.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_Set, None, itkSimpleDataObjectDecoratorUS)
itkSimpleDataObjectDecoratorUS.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_Get, None, itkSimpleDataObjectDecoratorUS)
itkSimpleDataObjectDecoratorUS_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_swigregister
itkSimpleDataObjectDecoratorUS_swigregister(itkSimpleDataObjectDecoratorUS)

def itkSimpleDataObjectDecoratorUS___New_orig__():
    """itkSimpleDataObjectDecoratorUS___New_orig__() -> itkSimpleDataObjectDecoratorUS_Pointer"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS___New_orig__()

def itkSimpleDataObjectDecoratorUS_cast(obj):
    """itkSimpleDataObjectDecoratorUS_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorUS"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_cast(obj)

class itkSimpleDataObjectDecoratorVF2(ITKCommonBasePython.itkDataObject):
    """


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocationg of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator

    C++ includes: itkSimpleDataObjectDecorator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSimpleDataObjectDecoratorVF2_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSimpleDataObjectDecoratorVF2 self) -> itkSimpleDataObjectDecoratorVF2_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF2_Clone(self)


    def Set(self, val):
        """
        Set(itkSimpleDataObjectDecoratorVF2 self, itkVectorF2 val)

        Set the contained object 
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF2_Set(self, val)


    def Get(self, *args):
        """
        Get(itkSimpleDataObjectDecoratorVF2 self) -> itkVectorF2
        Get(itkSimpleDataObjectDecoratorVF2 self) -> itkVectorF2
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF2_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorVF2

    def cast(obj):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorVF2"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorVF2

        Create a new object of the class itkSimpleDataObjectDecoratorVF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorVF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorVF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorVF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorVF2.Clone = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF2_Clone, None, itkSimpleDataObjectDecoratorVF2)
itkSimpleDataObjectDecoratorVF2.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF2_Set, None, itkSimpleDataObjectDecoratorVF2)
itkSimpleDataObjectDecoratorVF2.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF2_Get, None, itkSimpleDataObjectDecoratorVF2)
itkSimpleDataObjectDecoratorVF2_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF2_swigregister
itkSimpleDataObjectDecoratorVF2_swigregister(itkSimpleDataObjectDecoratorVF2)

def itkSimpleDataObjectDecoratorVF2___New_orig__():
    """itkSimpleDataObjectDecoratorVF2___New_orig__() -> itkSimpleDataObjectDecoratorVF2_Pointer"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF2___New_orig__()

def itkSimpleDataObjectDecoratorVF2_cast(obj):
    """itkSimpleDataObjectDecoratorVF2_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorVF2"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF2_cast(obj)

class itkSimpleDataObjectDecoratorVF3(ITKCommonBasePython.itkDataObject):
    """


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocationg of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator

    C++ includes: itkSimpleDataObjectDecorator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSimpleDataObjectDecoratorVF3_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSimpleDataObjectDecoratorVF3 self) -> itkSimpleDataObjectDecoratorVF3_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF3_Clone(self)


    def Set(self, val):
        """
        Set(itkSimpleDataObjectDecoratorVF3 self, itkVectorF3 val)

        Set the contained object 
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF3_Set(self, val)


    def Get(self, *args):
        """
        Get(itkSimpleDataObjectDecoratorVF3 self) -> itkVectorF3
        Get(itkSimpleDataObjectDecoratorVF3 self) -> itkVectorF3
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF3_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorVF3

    def cast(obj):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorVF3"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorVF3

        Create a new object of the class itkSimpleDataObjectDecoratorVF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorVF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorVF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorVF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorVF3.Clone = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF3_Clone, None, itkSimpleDataObjectDecoratorVF3)
itkSimpleDataObjectDecoratorVF3.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF3_Set, None, itkSimpleDataObjectDecoratorVF3)
itkSimpleDataObjectDecoratorVF3.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF3_Get, None, itkSimpleDataObjectDecoratorVF3)
itkSimpleDataObjectDecoratorVF3_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF3_swigregister
itkSimpleDataObjectDecoratorVF3_swigregister(itkSimpleDataObjectDecoratorVF3)

def itkSimpleDataObjectDecoratorVF3___New_orig__():
    """itkSimpleDataObjectDecoratorVF3___New_orig__() -> itkSimpleDataObjectDecoratorVF3_Pointer"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF3___New_orig__()

def itkSimpleDataObjectDecoratorVF3_cast(obj):
    """itkSimpleDataObjectDecoratorVF3_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorVF3"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF3_cast(obj)

class itkSimpleDataObjectDecoratorVF4(ITKCommonBasePython.itkDataObject):
    """


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocationg of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator

    C++ includes: itkSimpleDataObjectDecorator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSimpleDataObjectDecoratorVF4_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF4___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSimpleDataObjectDecoratorVF4 self) -> itkSimpleDataObjectDecoratorVF4_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF4_Clone(self)


    def Set(self, val):
        """
        Set(itkSimpleDataObjectDecoratorVF4 self, itkVectorF4 val)

        Set the contained object 
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF4_Set(self, val)


    def Get(self, *args):
        """
        Get(itkSimpleDataObjectDecoratorVF4 self) -> itkVectorF4
        Get(itkSimpleDataObjectDecoratorVF4 self) -> itkVectorF4
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF4_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorVF4

    def cast(obj):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorVF4"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF4_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorVF4

        Create a new object of the class itkSimpleDataObjectDecoratorVF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorVF4.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorVF4.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorVF4.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorVF4.Clone = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF4_Clone, None, itkSimpleDataObjectDecoratorVF4)
itkSimpleDataObjectDecoratorVF4.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF4_Set, None, itkSimpleDataObjectDecoratorVF4)
itkSimpleDataObjectDecoratorVF4.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF4_Get, None, itkSimpleDataObjectDecoratorVF4)
itkSimpleDataObjectDecoratorVF4_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF4_swigregister
itkSimpleDataObjectDecoratorVF4_swigregister(itkSimpleDataObjectDecoratorVF4)

def itkSimpleDataObjectDecoratorVF4___New_orig__():
    """itkSimpleDataObjectDecoratorVF4___New_orig__() -> itkSimpleDataObjectDecoratorVF4_Pointer"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF4___New_orig__()

def itkSimpleDataObjectDecoratorVF4_cast(obj):
    """itkSimpleDataObjectDecoratorVF4_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorVF4"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF4_cast(obj)

class itkSimpleDataObjectDecoratorstring(ITKCommonBasePython.itkDataObject):
    """


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocationg of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator

    C++ includes: itkSimpleDataObjectDecorator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSimpleDataObjectDecoratorstring_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorstring___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSimpleDataObjectDecoratorstring self) -> itkSimpleDataObjectDecoratorstring_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorstring_Clone(self)


    def Set(self, val):
        """
        Set(itkSimpleDataObjectDecoratorstring self, std::string const & val)

        Set the contained object 
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorstring_Set(self, val)


    def Get(self, *args):
        """
        Get(itkSimpleDataObjectDecoratorstring self) -> std::string
        Get(itkSimpleDataObjectDecoratorstring self) -> std::string const &
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorstring_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorstring

    def cast(obj):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorstring"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorstring_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorstring

        Create a new object of the class itkSimpleDataObjectDecoratorstring and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorstring.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorstring.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorstring.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorstring.Clone = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorstring_Clone, None, itkSimpleDataObjectDecoratorstring)
itkSimpleDataObjectDecoratorstring.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorstring_Set, None, itkSimpleDataObjectDecoratorstring)
itkSimpleDataObjectDecoratorstring.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorstring_Get, None, itkSimpleDataObjectDecoratorstring)
itkSimpleDataObjectDecoratorstring_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorstring_swigregister
itkSimpleDataObjectDecoratorstring_swigregister(itkSimpleDataObjectDecoratorstring)

def itkSimpleDataObjectDecoratorstring___New_orig__():
    """itkSimpleDataObjectDecoratorstring___New_orig__() -> itkSimpleDataObjectDecoratorstring_Pointer"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorstring___New_orig__()

def itkSimpleDataObjectDecoratorstring_cast(obj):
    """itkSimpleDataObjectDecoratorstring_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorstring"""
    return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorstring_cast(obj)



