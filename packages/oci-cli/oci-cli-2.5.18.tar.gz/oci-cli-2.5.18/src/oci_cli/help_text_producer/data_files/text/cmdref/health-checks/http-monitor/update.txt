update
******


Description
===========

Updates the configuration of the specified HTTP monitor. Only the
fields specified in the request body will be updated; all other
configuration properties will remain unchanged.


Usage
=====

   oci health-checks http-monitor update [OPTIONS]


Options
=======


--monitor-id [text]
-------------------

The OCID of a monitor. [required]


--targets [complex type]
------------------------

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The --generate-param-json-input option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


--vantage-point-names [complex type]
------------------------------------

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The --generate-param-json-input option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


--port [integer]
----------------

The port on which to probe endpoints. If unspecified, probes will use
the default port of their protocol.


--timeout-in-seconds [integer]
------------------------------

The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The
probe timeout must be less than or equal to *intervalInSeconds* for
monitors.


--protocol [HTTP|HTTPS]
-----------------------


--method [GET|HEAD]
-------------------


--path [text]
-------------

The optional URL path to probe, including query parameters.


--headers [complex type]
------------------------

A dictionary of HTTP request headers.

*Note:* Monitors and probes do not support the use of the
*Authorization* HTTP header. This is a complex type whose value must
be valid JSON. The value can be provided as a string on the command
line or passed in as a file using the file://path/to/file syntax.

The --generate-param-json-input option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


--display-name [text]
---------------------

A user-friendly and mutable name suitable for display in a user
interface.


--interval-in-seconds [integer]
-------------------------------

The monitor interval in seconds. Valid values: 10, 30, and 60.


--is-enabled [boolean]
----------------------

Enables or disables the monitor. Set to 'true' to launch monitoring.


--freeform-tags [complex type]
------------------------------

Free-form tags for this resource. Each tag is a simple key-value pair
with no predefined name, type, or namespace.  For more information,
see Resource Tags. Example: *{"Department": "Finance"}* This is a
complex type whose value must be valid JSON. The value can be provided
as a string on the command line or passed in as a file using the
file://path/to/file syntax.

The --generate-param-json-input option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


--defined-tags [complex type]
-----------------------------

Defined tags for this resource. Each key is predefined and scoped to a
namespace. For more information, see Resource Tags. Example:
*{"Operations": {"CostCenter": "42"}}* This is a complex type whose
value must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The --generate-param-json-input option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


--if-match [text]
-----------------

For optimistic concurrency control. In the PUT or DELETE call for a
resource, set the *if-match* parameter to the value of the etag from a
previous GET or POST response for that resource.  The resource will be
updated or deleted only if the etag you provide matches the resource's
current etag value.


--force
-------

Perform update without prompting for confirmation.


--from-json [text]
------------------

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The --generate-full-command-json-input option can be used to generate
a sample json file to be used with this command option. The key names
are pre-populated and match the command option names (converted to
camelCase format, e.g. compartment-id --> compartmentId), while the
values of the keys need to be populated by the user before using the
sample file as an input to this command. For any command option that
accepts multiple values, the value of the key can be a JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our "using CLI with
advanced JSON options" link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions


-?, -h, --help
--------------

For detailed help on any of these individual commands, enter <command>
--help.
