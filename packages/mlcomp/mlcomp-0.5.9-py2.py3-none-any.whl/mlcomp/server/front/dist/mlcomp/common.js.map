{"version":3,"sources":["webpack:///./src/app/dag/dag-detail/code/code.component.html","webpack:///./src/app/dag/dag-detail/dag-detail/dag-detail.component.html","webpack:///./src/app/dag/dag-detail/graph/graph.component.css","webpack:///./src/app/dag/dag-detail/graph/graph.component.html","webpack:///./src/app/task/task-detail/task-detail/task-detail.component.ts","webpack:///./src/app/task/task-detail/step/step.component.ts","webpack:///./src/app/task/task-detail/task-detail-routing.module.ts","webpack:///./src/app/task/task-detail/task-detail.module.ts","webpack:///./src/app/dag/dag-detail/code/code.component.css","webpack:///./src/app/task/task-detail/step/step.component.html","webpack:///./src/app/dag/dag-detail/config/config.component.html","webpack:///./src/app/dag-detail.service.ts","webpack:///./src/app/dag/dag-detail/code/code.component.ts","webpack:///./src/app/dag/dag-detail/config/config.component.ts","webpack:///./src/app/dag/dag-detail/graph/graph.component.ts","webpack:///./src/app/dag/dag-detail/dag-detail/dag-detail.component.ts","webpack:///./src/app/dag/dag-detail/dag-detail-routing.module.ts","webpack:///./src/app/dag/dag-detail/dag-detail.module.ts","webpack:///./src/app/task/task-detail/task-detail/task-detail.component.html","webpack:///./src/app/task/task-detail/step/step.component.css","webpack:///./src/app/dag/dag-detail/config/config.component.css"],"names":["module","exports","task_detail_component_TaskDetailComponent","_super","TaskDetailComponent","tslib_es6","prototype","get_filter","res","call","this","id","parseInt","route","snapshot","paramMap","get","onActivate","component","task","Object","core","selector","template","__webpack_require__","step_component_StepComponent","StepComponent","service","location","router","iconRegistry","sanitizer","message_service","_this","flat_node_map","Map","transformer","node","level","expandable","children","length","name","content","node_flat","k","defineProperty","value","get_children","of","treeControl","esm5_tree_es5","treeFlattener","tree_es5","dataSource","hasChild","_","load","self","steps","subscribe","data","expandAll","ngOnInit","interval","setInterval","node_click","status_color","status","TypeError","color_for_log_status","count","app_settings","log_colors","status_click","init_level","ngOnDestroy","clearInterval","task_service","common","fesm5_router","icon_es5","platform_browser","app_message_service","routes","path","reports_component","log_component","task_detail_routing_module_TaskDetailRoutingModule","TaskDetailRoutingModule","imports","forChild","task_detail_module_TaskDetailModule","TaskDetailModule","shared_module","declarations","dag_detail_service_DagDetailService","DagDetailService","apply","arguments","url","API_ENDPOINT","get_config","dag_id","http","post","pipe","tap","log","catchError","handleError","models","get_code","get_graph","providedIn","code_component_CodeComponent","CodeComponent","resource_service","ngAfterViewInit","dag","prettify_lang","ext","pre","document","createElement","textContent","indexOf","split","toLowerCase","className","code_holder","getElementById","innerHTML","appendChild","window","prettyPrint","dynamicresource_service","config_component_ConfigComponent","ConfigComponent","then","graph_component_GraphComponent","GraphComponent","load_network","nodes","forEach","obj","color","status_colors","edges","vis","DataSet","container","_i","_a","item","update","_b","_c","Network","layout","hierarchical","direction","sortMethod","arrows","on","properties","ids","clickedNodes","navigate","catch","err","add","dag_detail_component_DagDetailComponent","DagDetailComponent","tasks_component","dag_detail_routing_module_DagDetailRoutingModule","DagDetailRoutingModule","dag_detail_module_DagDetailModule","DagDetailModule"],"mappings":"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","file":"common.js","sourcesContent":["module.exports = \"<link href=\\\"https://fonts.googleapis.com/icon?family=Material+Icons\\\" rel=\\\"stylesheet\\\">\\n\\n<table style=\\\"width: 70%;\\\">\\n  <td class=\\\"mat-app-background basic-container\\\" style=\\\"width: 30%\\\">\\n  <mat-tree [dataSource]=\\\"dataSource\\\" [treeControl]=\\\"treeControl\\\">\\n    <!-- This is the tree node template for leaf nodes -->\\n    <mat-tree-node *matTreeNodeDef=\\\"let node\\\" matTreeNodePadding>\\n      <!-- use a disabled button to provide padding for tree leaf -->\\n      <button mat-icon-button mat-button class=\\\"mat-icon-button\\\" (click)=\\\"node_click(node)\\\"></button>\\n      {{node.name}}\\n    </mat-tree-node>\\n     This is the tree node template for expandable nodes\\n    <mat-tree-node *matTreeNodeDef=\\\"let node;when: hasChild\\\" matTreeNodePadding>\\n      <button mat-icon-button matTreeNodeToggle\\n              [attr.aria-label]=\\\"'toggle ' + node.name\\\" class=\\\"mat-icon-button\\\">\\n        <mat-icon class=\\\"mat-icon-rtl-mirror\\\">\\n          {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\\n        </mat-icon>\\n      </button>\\n      {{node.name}}\\n     </mat-tree-node>\\n    </mat-tree>\\n  </td>\\n\\n  <td style=\\\"width: 70%\\\">\\n    <div id=\\\"codeholder\\\">\\n\\n    </div>\\n\\n  </td>\\n</table>\\n\"","module.exports = \"<div class=\\\"mat-elevation-z8\\\">\\n    <table mat-table [dataSource]=\\\"dataSource\\\" matSort>\\n\\n        <ng-container matColumnDef=\\\"id\\\">\\n            <th mat-header-cell *matHeaderCellDef  style=\\\"width: 18px\\\" mat-sort-header> Id</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\" style=\\\"width: 18px\\\">\\n                {{element.id}}\\n            </td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"name\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> Name</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\">\\n                <a class=\\\"col-1-4\\\" routerLink=\\\"/dags/dag-detail/{{element.id}}\\\">\\n                    {{element.name}}\\n                </a>\\n            </td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"task_count\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header  style=\\\"width: 18px\\\"> Tasks</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\"  style=\\\"width: 18px\\\">\\n                {{element.task_count}}\\n            </td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"created\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> Created</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\">\\n                {{element.created| date:\\\"MM.dd H:mm\\\"}}\\n            </td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"started\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> Started</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\">\\n                {{element.started| date:\\\"MM.dd H:mm\\\"}}\\n            </td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"last_activity\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> Last activity</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\">\\n                {{element.last_activity| date:\\\"MM.dd H:mm\\\"}}\\n            </td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"duration\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> Duration</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\">\\n                {{element.duration}}\\n            </td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"img_size\\\">\\n            <th mat-header-cell *matHeaderCellDef> Image size</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\" style=\\\"width: 50px\\\">\\n                {{size(element.img_size)}}\\n                <mat-icon svgIcon=\\\"remove\\\" matTooltip=\\\"Remove\\\" (click)=\\\"remove_imgs(element)\\\"></mat-icon>\\n            </td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"file_size\\\">\\n            <th mat-header-cell *matHeaderCellDef> File size</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\"  style=\\\"width: 50px\\\">\\n                {{size(element.file_size)}}\\n                <mat-icon svgIcon=\\\"remove\\\" matTooltip=\\\"Remove\\\" (click)=\\\"remove_files(element)\\\"\\n                [class.transparent]=\\\"has_unfinished(element)\\\"></mat-icon>\\n            </td>\\n        </ng-container>\\n\\n\\n        <ng-container matColumnDef=\\\"task_status\\\">\\n            <th mat-header-cell *matHeaderCellDef style=\\\"text-align: center\\\"> Task status</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\">\\n                <svg height=\\\"40\\\" width=\\\"220px\\\" style=\\\"display: block;\\\">\\n                    <g matTooltip=\\\"{{status.name}}\\\" [attr.transform]=\\\"'translate('+(16+i*30).toString()+','+'20)'\\\"\\n                       *ngFor=\\\"let status of element.task_statuses; let i = index\\\">\\n\\n                        <text fill=\\\"black\\\" text-anchor=\\\"middle\\\" vertical-align=\\\"middle\\\"\\n                              font-size=\\\"10\\\" y=\\\"3\\\">{{status.count > 0 ? status.count : ''}}</text>\\n\\n                        <circle [attr.stroke-width]=\\\"status.count>0?2:1\\\" (click)=\\\"status_click(element, status)\\\"\\n                                [attr.stroke]=\\\"color_for_task_status(status.name, status.count)\\\"\\n                                fill-opacity=\\\"0\\\" r=\\\"12.5\\\" style=\\\"cursor: pointer; opacity: 1;\\\"></circle>\\n                    </g>\\n\\n                </svg>\\n\\n            </td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"links\\\">\\n            <th mat-header-cell *matHeaderCellDef style=\\\"text-align: center; width: 14%;\\\"> Links</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\" style=\\\"padding-left: 1%;min-width: 120px\\\">\\n                <mat-icon svgIcon=\\\"config\\\" matTooltip=\\\"Config\\\"\\n                          routerLink=\\\"/dags/dag-detail/{{element.id}}/config\\\"></mat-icon>\\n                <mat-icon svgIcon=\\\"code\\\" matTooltip=\\\"Code\\\" routerLink=\\\"/dags/dag-detail/{{element.id}}/code\\\"></mat-icon>\\n                <mat-icon svgIcon=\\\"graph\\\" matTooltip=\\\"Graph\\\" routerLink=\\\"/dags/dag-detail/{{element.id}}/graph\\\"></mat-icon>\\n                <mat-icon svgIcon=\\\"stop\\\" matTooltip=\\\"Stop\\\" (click)=\\\"stop(element)\\\"\\n                          [class.transparent]=\\\"!has_unfinished(element)\\\"></mat-icon>\\n                <mat-icon svgIcon=\\\"remove\\\" matTooltip=\\\"Remove\\\" (click)=\\\"remove(element)\\\"></mat-icon>\\n                <mat-icon svgIcon=\\\"report\\\" matTooltip=\\\"Report\\\" (click)=\\\"toogle_report(element)\\\" *ngIf=\\\"report\\\"\\n                          [class.transparent]=\\\"!element.report_full\\\"></mat-icon>\\n            </td>\\n        </ng-container>\\n\\n        <tr mat-header-row *matHeaderRowDef=\\\"displayed_columns\\\"></tr>\\n        <tr mat-row *matRowDef=\\\"let row; columns: displayed_columns;\\\"></tr>\\n    </table>\\n\\n\\n</div>\\n\\n\\n<nav>\\n  <a routerLink=\\\"./\\\" routerLinkActive=\\\"active\\\">Tasks</a>\\n  <a routerLink=\\\"./config\\\" routerLinkActive=\\\"active\\\">Config</a>\\n  <a routerLink=\\\"./code\\\" routerLinkActive=\\\"active\\\">Code</a>\\n  <a routerLink=\\\"./graph\\\" routerLinkActive=\\\"active\\\">Graph</a>\\n</nav>\\n\\n<router-outlet (activate)=\\\"onActivate($event)\\\"></router-outlet>\"","module.exports = \"#mynetwork {\\n    border: 1px solid black;\\n    background: white;\\n    display: inline-block;\\n    width: 100%;\\n    height: 600px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGFnL2RhZy1kZXRhaWwvZ3JhcGgvZ3JhcGguY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLHVCQUF1QjtJQUN2QixpQkFBaUI7SUFDakIscUJBQXFCO0lBQ3JCLFdBQVc7SUFDWCxhQUFhO0FBQ2pCIiwiZmlsZSI6InNyYy9hcHAvZGFnL2RhZy1kZXRhaWwvZ3JhcGgvZ3JhcGguY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIiNteW5ldHdvcmsge1xuICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDYwMHB4O1xufSJdfQ== */\"","module.exports = \"<div id=\\\"mynetwork\\\"></div>\"","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute} from \"@angular/router\";\nimport {TasksComponent} from \"../../tasks/tasks.component\";\n\n@Component({\n    selector: 'app-task-detail',\n    templateUrl: './task-detail.component.html',\n    styleUrls: ['../../tasks/tasks.component.css']\n})\nexport class TaskDetailComponent extends TasksComponent{\n    get_filter(): any {\n        let res = super.get_filter();\n        res.id = parseInt(this.route.snapshot.paramMap.get('id'));\n        return res;\n    }\n\n    onActivate(component) {\n        component.task = parseInt(this.route.snapshot.paramMap.get('id'));\n    }\n\n}\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {Location} from \"@angular/common\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {MatIconRegistry, MatTreeFlatDataSource, MatTreeFlattener} from \"@angular/material\";\nimport {DomSanitizer} from \"@angular/platform-browser\";\nimport {MessageService} from \"../../../message.service\";\nimport {StepNode, FlatNode} from \"../../../models\";\nimport {FlatTreeControl} from \"@angular/cdk/tree\";\nimport {TaskService} from \"../../../task.service\";\nimport {AppSettings} from \"../../../app-settings\";\nimport {of as ofObservable} from 'rxjs';\n\n@Component({\n    selector: 'app-step',\n    templateUrl: './step.component.html',\n    styleUrls: ['./step.component.css']\n})\nexport class StepComponent implements OnInit, OnDestroy {\n    public task: number;\n    private interval: number;\n    flat_node_map: Map<StepNode, FlatNode> = new Map<StepNode, FlatNode>();\n\n    constructor(protected service: TaskService, protected location: Location,\n                private router: Router, private  route: ActivatedRoute,\n                iconRegistry: MatIconRegistry, sanitizer: DomSanitizer,\n                private message_service: MessageService\n    ) {\n    }\n\n    private transformer = (node: StepNode, level: number) => {\n        let res = {\n            expandable: !!node.children && node.children.length > 0,\n            name: node.name,\n            level: level,\n            content: node\n        };\n        if (node.id in this.flat_node_map) {\n            let node_flat = this.flat_node_map[node.id];\n            for (let k in res) {\n                if(res[k]!=node_flat[k]){\n                    Object.defineProperty(node_flat, k, {'value': res[k]});\n                }\n            }\n\n            return node_flat;\n        }\n        this.flat_node_map[node.id] = res;\n        return res;\n    };\n\n    get_children = node => ofObservable(node.children);\n\n    treeControl = new FlatTreeControl<FlatNode>(\n        node => node.level, node => node.expandable);\n\n    treeFlattener = new MatTreeFlattener(\n        this.transformer, node => node.level, node => node.expandable, this.get_children);\n\n    dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n    load() {\n        let self = this;\n        this.service.steps(this.task).subscribe(res => {\n            self.dataSource.data = res;\n            self.treeControl.expandAll();\n\n        });\n    }\n\n    ngOnInit() {\n        this.load();\n        this.interval = setInterval(() => this.load(), 3000);\n    }\n\n\n    node_click(node: FlatNode) {\n\n    }\n\n    hasChild = (_: number, node: FlatNode) => node.expandable;\n\n    status_color(status: string) {\n        switch (status) {\n            case 'in_progress':\n                return 'green';\n            case 'failed':\n                return 'red';\n            case 'stopped':\n                return 'orange';\n            case 'successed':\n                return 'green';\n            default:\n                throw new TypeError(\"unknown status: \" + status)\n        }\n\n    }\n\n    color_for_log_status(name: string, count: number) {\n        return count > 0 ? AppSettings.log_colors[name] : 'gainsboro'\n    }\n\n    status_click(node: any, status: string) {\n        node.content.init_level = status;\n    }\n\n    ngOnDestroy() {\n        clearInterval(this.interval);\n    }\n}\n\n\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\n\nimport {TaskDetailComponent} from \"./task-detail/task-detail.component\";\nimport {LogComponent} from \"../../log/log.component\";\nimport {ReportsComponent} from \"../../report/reports/reports.component\";\nimport {StepComponent} from \"./step/step.component\";\n\nconst routes: Routes = [\n    {\n\n        path: '',\n        component: TaskDetailComponent,\n        children: [\n            {path: 'report', component: ReportsComponent},\n            {path: 'step', component: StepComponent},\n            {path: '', component: LogComponent}\n        ]\n\n\n    }\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes)\n    ],\n    exports: [\n        RouterModule\n    ]\n})\nexport class TaskDetailRoutingModule {\n}","import {NgModule} from '@angular/core';\n\nimport {TaskDetailRoutingModule} from './task-detail-routing.module';\nimport {SharedModule} from \"../../shared.module\";\nimport {TaskDetailComponent} from \"./task-detail/task-detail.component\";\nimport { StepComponent } from './step/step.component';\n\n@NgModule({\n    imports: [\n        TaskDetailRoutingModule,\n        SharedModule\n    ],\n    declarations: [\n        TaskDetailComponent,\n        StepComponent\n    ]\n})\nexport class TaskDetailModule {\n}","module.exports = \".mat-tree-node { min-height: 20px }\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGFnL2RhZy1kZXRhaWwvY29kZS9jb2RlLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLGlCQUFpQiIsImZpbGUiOiJzcmMvYXBwL2RhZy9kYWctZGV0YWlsL2NvZGUvY29kZS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLm1hdC10cmVlLW5vZGUgeyBtaW4taGVpZ2h0OiAyMHB4IH0iXX0= */\"","module.exports = \"<mat-tree [dataSource]=\\\"dataSource\\\" [treeControl]=\\\"treeControl\\\">\\n    <!-- This is the tree node template for leaf nodes -->\\n    <mat-tree-node *matTreeNodeDef=\\\"let node\\\" matTreeNodePadding>\\n        <!-- use a disabled button to provide padding for tree leaf -->\\n        <button mat-icon-button mat-button class=\\\"mat-icon-button\\\" (click)=\\\"node_click(node)\\\"></button>\\n\\n        <mat-accordion>\\n            <mat-expansion-panel  (opened)=\\\"node.opened = true\\\" (closed)=\\\"node.opened = false\\\">\\n                <mat-expansion-panel-header>\\n                    <mat-panel-title>\\n                        <span [style.margin]=\\\"'auto'\\\">{{node.name}}</span>\\n                    </mat-panel-title>\\n                    <mat-panel-description>\\n                        <span [style.color]=\\\"status_color(node.content.status)\\\" [style.margin]=\\\"'auto'\\\">{{node.content.status}}</span>\\n\\n                        <span style=\\\"padding: 10px\\\">{{node.content.duration}}</span>\\n\\n                        <svg height=\\\"40\\\" width=\\\"220px\\\" style=\\\"display: block;\\\">\\n                            <g matTooltip=\\\"{{status.name}}\\\"\\n                               [attr.transform]=\\\"'translate('+(16+i*30).toString()+','+'20)'\\\"\\n                               *ngFor=\\\"let status of node.content.log_statuses; let i = index\\\">\\n\\n                                <text fill=\\\"black\\\" text-anchor=\\\"middle\\\" vertical-align=\\\"middle\\\"\\n                                      font-size=\\\"10\\\" y=\\\"3\\\">{{status.count > 0 ? status.count : ''}}</text>\\n\\n                                <circle [attr.stroke-width]=\\\"status.count>0?2:1\\\" (click)=\\\"status_click(node, status.name)\\\"\\n                                        [attr.stroke]=\\\"color_for_log_status(status.name, status.count)\\\"\\n                                        fill-opacity=\\\"0\\\" r=\\\"12.5\\\" style=\\\"cursor: pointer; opacity: 1;\\\"></circle>\\n                            </g>\\n\\n                        </svg>\\n\\n                    </mat-panel-description>\\n                </mat-expansion-panel-header>\\n\\n                <app-log *ngIf=\\\"node.opened\\\" [step]=\\\"node.content.id\\\" [init_level]=\\\"node.content.init_level\\\"></app-log>\\n\\n            </mat-expansion-panel>\\n        </mat-accordion>\\n\\n\\n    </mat-tree-node>\\n    This is the tree node template for expandable nodes\\n    <mat-tree-node *matTreeNodeDef=\\\"let node;when: hasChild\\\" matTreeNodePadding>\\n        <button mat-icon-button matTreeNodeToggle\\n                [attr.aria-label]=\\\"'toggle ' + node.name\\\" class=\\\"mat-icon-button\\\">\\n            <mat-icon class=\\\"mat-icon-rtl-mirror\\\">\\n\\n            </mat-icon>\\n        </button>\\n\\n            <mat-accordion>\\n            <mat-expansion-panel  (opened)=\\\"node.opened = true\\\" (closed)=\\\"node.opened = false\\\">\\n                <mat-expansion-panel-header>\\n                    <mat-panel-title>\\n                        <span [style.margin]=\\\"'auto'\\\">{{node.name}}</span>\\n                    </mat-panel-title>\\n                    <mat-panel-description>\\n                        <span [style.color]=\\\"status_color(node.content.status)\\\" [style.margin]=\\\"'auto'\\\">{{node.content.status}}</span>\\n\\n                        <span style=\\\"padding: 10px\\\">{{node.content.duration}}</span>\\n\\n                        <svg height=\\\"40\\\" width=\\\"220px\\\" style=\\\"display: block;\\\">\\n                            <g matTooltip=\\\"{{status.name}}\\\"\\n                               [attr.transform]=\\\"'translate('+(16+i*30).toString()+','+'20)'\\\"\\n                               *ngFor=\\\"let status of node.content.log_statuses; let i = index\\\">\\n\\n                                <text fill=\\\"black\\\" text-anchor=\\\"middle\\\" vertical-align=\\\"middle\\\"\\n                                      font-size=\\\"10\\\" y=\\\"3\\\">{{status.count > 0 ? status.count : ''}}</text>\\n\\n                                <circle [attr.stroke-width]=\\\"status.count>0?2:1\\\" (click)=\\\"status_click(node, status.name)\\\"\\n                                        [attr.stroke]=\\\"color_for_log_status(status.name, status.count)\\\"\\n                                        fill-opacity=\\\"0\\\" r=\\\"12.5\\\" style=\\\"cursor: pointer; opacity: 1;\\\"></circle>\\n                            </g>\\n\\n                        </svg>\\n\\n                    </mat-panel-description>\\n                </mat-expansion-panel-header>\\n\\n                <app-log *ngIf=\\\"node.opened\\\" [step]=\\\"node.content.id\\\" [init_level]=\\\"node.content.init_level\\\"></app-log>\\n\\n            </mat-expansion-panel>\\n        </mat-accordion>\\n\\n    </mat-tree-node>\\n</mat-tree>\"","module.exports = \"<div id=\\\"codeholder\\\">\\n\\n</div>\\n\"","import {Injectable} from '@angular/core';\nimport {Observable, of} from 'rxjs';\nimport {catchError, map, tap} from 'rxjs/operators';\nimport {AppSettings} from './app-settings'\nimport {CodeNode, Data, Graph} from \"./models\";\nimport {BaseService} from \"./base.service\";\n\n@Injectable({providedIn: 'root'})\nexport class DagDetailService extends BaseService{\n  protected collection_part: string;\n  protected single_part: string;\n  private url = `${AppSettings.API_ENDPOINT}`;\n\n  get_config(dag_id: number): Observable<Data<string>> {\n    return this.http.post<Data<string>>(`${this.url}config`, dag_id)\n      .pipe(\n        tap(_ => this.log('fetched config')),\n        catchError(this.handleError<Data<string>>('config', new Data<string>()))\n      );\n  }\n\n  get_code(dag_id: number): Observable<CodeNode[]> {\n     return this.http.post<CodeNode[]>(`${this.url}code`, dag_id)\n      .pipe(\n        tap(_ => this.log('fetched code')),\n        catchError(this.handleError<CodeNode[]>('config', []))\n      );\n  }\n  get_graph(dag_id: number): Observable<Graph> {\n     return this.http.post<Graph>(`${this.url}graph`, dag_id)\n      .pipe(\n        tap(_ => this.log('fetched graph')),\n        catchError(this.handleError<Graph>('graph', new Graph()))\n      );\n  }\n\n}\n","import {AfterViewInit, Component, OnInit} from '@angular/core';\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {MatTreeFlatDataSource, MatTreeFlattener} from '@angular/material/tree';\nimport {FlatNode, CodeNode} from '../../../models'\nimport {DagDetailService} from \"../../../dag-detail.service\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {MessageService} from \"../../../message.service\";\nimport {DynamicresourceService} from \"../../../dynamicresource.service\";\n\n@Component({\n    selector: 'app-code',\n    templateUrl: './code.component.html',\n    styleUrls: ['./code.component.css']\n})\n\nexport class CodeComponent implements AfterViewInit {\n\n    public dag: number;\n\n    private transformer = (node: CodeNode, level: number) => {\n        return {\n            expandable: !!node.children && node.children.length > 0,\n            name: node.name,\n            level: level,\n            content: node.content,\n        };\n    };\n\n    treeControl = new FlatTreeControl<FlatNode>(\n        node => node.level, node => node.expandable);\n\n    treeFlattener = new MatTreeFlattener(\n        this.transformer, node => node.level, node => node.expandable, node => node.children);\n\n    dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n    constructor(private service: DagDetailService, private route: ActivatedRoute,\n                private message_service: MessageService,\n                private resource_service: DynamicresourceService\n    ) {\n\n    }\n\n    ngAfterViewInit() {\n        let self = this;\n        this.service.get_code(this.dag).subscribe(res => {\n            self.dataSource.data = res;\n        });\n        this.resource_service.load('prettify', 'prettify-yaml', 'prettify-css')\n    }\n\n    prettify_lang(ext: string) {\n        switch (ext) {\n            case 'py':\n                return 'lang-py';\n            case 'yaml':\n            case 'yml':\n                return 'lang-yaml';\n            case 'json':\n                return 'lang-json';\n            default:\n                return ''\n        }\n    }\n\n    node_click(node: FlatNode) {\n        let pre = document.createElement('pre');\n        pre.textContent = node.content;\n        let ext = node.name.indexOf('.')!=-1?node.name.split('.')[1].toLowerCase():'';\n        pre.className = \"prettyprint linenums \" + this.prettify_lang(ext);\n        let code_holder = document.getElementById('codeholder');\n        code_holder.innerHTML = '';\n        code_holder.appendChild(pre);\n\n        window['PR'].prettyPrint();\n    }\n\n    hasChild = (_: number, node: FlatNode) => node.expandable;\n\n\n}\n","import {AfterViewInit, Component, OnInit} from '@angular/core';\nimport {MessageService} from '../../../message.service'\nimport {DagDetailService} from \"../../../dag-detail.service\";\nimport {DynamicresourceService} from \"../../../dynamicresource.service\";\n\n@Component({\n    selector: 'app-config',\n    templateUrl: './config.component.html',\n    styleUrls: ['./config.component.css']\n})\nexport class ConfigComponent implements AfterViewInit {\n    public dag: number;\n    config: string;\n\n    constructor(private message_service: MessageService,\n                private service: DagDetailService,\n                private resource_service: DynamicresourceService,\n    ) {\n    }\n\n    ngAfterViewInit() {\n        let self = this;\n        this.resource_service.load('prettify', 'prettify-yaml', 'prettify-css').then(() => {\n            self.service.get_config(self.dag).subscribe(res => {\n                let node = document.createElement('pre');\n                node.textContent = res.data;\n                node.className = \"prettyprint linenums lang-yaml\";\n                document.getElementById('codeholder').appendChild(node);\n                window['PR'].prettyPrint();\n            });\n        })\n    }\n\n}\n","import {AfterViewInit, Component, OnDestroy, OnInit} from '@angular/core';\nimport {MessageService} from \"../../../message.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {DagDetailService} from \"../../../dag-detail.service\";\nimport {DynamicresourceService} from \"../../../dynamicresource.service\";\nimport {AppSettings} from \"../../../app-settings\";\n\n@Component({\n    selector: 'app-graph',\n    templateUrl: './graph.component.html',\n    styleUrls: ['./graph.component.css']\n})\nexport class GraphComponent implements AfterViewInit, OnDestroy {\n\n    public dag: number;\n    interval: number;\n    data;\n\n    constructor(private message_service: MessageService, private route: ActivatedRoute,\n                private service: DagDetailService,\n                private resource_service: DynamicresourceService,\n                private router: Router\n    ) {\n    }\n\n    ngAfterViewInit() {\n        this.load_network();\n        this.interval = setInterval(() => this.load_network(), 3000);\n    }\n\n    private load_network() {\n        let self = this;\n        this.resource_service.load('vis.min.js', 'vis.min.css').then(res => {\n            this.service.get_graph(this.dag).subscribe(res => {\n                res.nodes.forEach(obj => obj.color = AppSettings.status_colors[obj.status]);\n                // res.nodes.forEach(obj => obj.color = 'green');\n                res.edges.forEach(obj => obj.color = AppSettings.status_colors[obj.status]);\n\n                let vis = window['vis'];\n                let nodes = new vis.DataSet(res.nodes);\n                // create an array with edges\n                let edges = new vis.DataSet(res.edges);\n\n                // create a network\n                let container = document.getElementById('mynetwork');\n                if (!this.data) {\n                    this.data = {\n                        nodes: nodes,\n                        edges: edges\n                    };\n\n                    let options = {\n                        layout: {\n                            hierarchical: {\n                                direction: 'LR',\n                                \"sortMethod\": \"directed\",\n\n                            },\n\n                        },\n\n                        edges: {\n                            arrows: 'to'\n                        }\n                    };\n\n                    let network = new vis.Network(container, this.data, options);\n                    network.on('doubleClick', function (properties) {\n                        var ids = properties.nodes;\n                        var clickedNodes = nodes.get(ids);\n                        self.router.navigate(['/tasks/task-detail/' + clickedNodes[0].id + '/log']);\n                    });\n                    return;\n                }\n\n                for (let item of res.nodes) {\n                    this.data.nodes.update(item)\n                }\n                for (let item of res.edges) {\n                    this.data.nodes.update(item)\n                }\n\n\n            });\n        }).catch(err => this.message_service.add(err));\n\n\n    }\n\n    ngOnDestroy(): void {\n        clearInterval(this.interval);\n    }\n}\n","import {Component} from '@angular/core';\nimport {DagFilter} from \"../../../models\";\nimport {DagsComponent} from \"../../dags/dags.component\";\n\n@Component({\n    selector: 'app-dag-detail',\n    templateUrl: './dag-detail.component.html',\n    styleUrls: ['../../dags/dags.component.css']\n})\nexport class DagDetailComponent extends DagsComponent {\n    get_filter(): any {\n        let res = super.get_filter();\n        res.id = parseInt(this.route.snapshot.paramMap.get('id'));\n        return res;\n    }\n\n    onActivate(component) {\n        component.dag = parseInt(this.route.snapshot.paramMap.get('id'));\n    }\n}\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\n\nimport {CodeComponent} from './code/code.component';\nimport {ConfigComponent} from './config/config.component';\nimport {GraphComponent} from './graph/graph.component';\nimport {DagDetailComponent} from './dag-detail/dag-detail.component';\nimport {TasksComponent} from \"../../task/tasks/tasks.component\"\n\n\nconst routes: Routes = [\n    {\n\n        path: '',\n        component: DagDetailComponent,\n        children: [\n            {path: 'code', component: CodeComponent},\n            {path: 'config', component: ConfigComponent},\n            {path: 'graph', component: GraphComponent},\n            {path: '', component: TasksComponent}\n        ]\n\n\n    }\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes)\n    ],\n    exports: [\n        RouterModule\n    ]\n})\nexport class DagDetailRoutingModule {\n}","import {NgModule} from '@angular/core';\nimport {CodeComponent} from './code/code.component';\nimport {ConfigComponent} from './config/config.component';\nimport {GraphComponent} from './graph/graph.component';\n\nimport {DagDetailRoutingModule} from './dag-detail-routing.module';\nimport { DagDetailComponent } from './dag-detail/dag-detail.component';\nimport {SharedModule} from \"../../shared.module\";\n\n@NgModule({\n    imports: [\n        DagDetailRoutingModule,\n        SharedModule\n    ],\n    declarations: [\n        CodeComponent,\n        ConfigComponent,\n        GraphComponent,\n        DagDetailComponent\n    ]\n})\nexport class DagDetailModule {\n}","module.exports = \"<div class=\\\"mat-elevation-z8\\\">\\n    <table mat-table [dataSource]=\\\"dataSource\\\" matSort>\\n\\n        <ng-container matColumnDef=\\\"id\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\\\"width: 3%\\\"> Id</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\">\\n                {{element.id}}\\n            </td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"name\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\\\"min-width: 100px\\\"> Name</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\">\\n                <a class=\\\"col-1-4\\\" routerLink=\\\"/tasks/task-detail/{{element.id}}\\\">\\n                    {{element.name}}\\n                </a>\\n\\n            </td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"created\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> Created</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\">\\n                {{element.dag_rel.created| date:\\\"MM.dd H:mm\\\"}}\\n            </td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"started\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> Started</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\">\\n                {{element.started| date:\\\"MM.dd H:mm\\\"}}\\n            </td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"last_activity\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> Last activity</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\">\\n                {{element.last_activity| date:\\\"MM.dd H:mm\\\"}}\\n            </td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"duration\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> Duration</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\">\\n                {{element.duration}}\\n            </td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"status\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> Status</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\" [style.color]=\\\"status_color(element.status)\\\">\\n                {{element.status}}\\n            </td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"executor\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> Executor</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\">\\n                {{element.executor}}\\n            </td>\\n        </ng-container>\\n\\n\\n        <ng-container matColumnDef=\\\"dag\\\">\\n            <th mat-header-cell *matHeaderCellDef> Dag</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\">\\n                <a class=\\\"col-1-4\\\" routerLink=\\\"/dags/dag-detail/{{element.dag_rel.id}}\\\">\\n                    {{element.dag_rel.name}}({{element.dag_rel.id}})\\n                </a>\\n            </td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"computer\\\">\\n            <th mat-header-cell *matHeaderCellDef> Computer/assigned</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\">\\n                {{element.computer}}/{{element.computer_assigned}}\\n            </td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"requirements\\\">\\n            <th mat-header-cell *matHeaderCellDef style=\\\"width: 100px\\\"> Requirements</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\">\\n                <svg height=\\\"40\\\" width=\\\"100px\\\" style=\\\"display: block;\\\">\\n                    <g matTooltip=\\\"gpu\\\" transform=\\\"translate(20, 20)\\\">\\n\\n                        <text fill=\\\"black\\\" text-anchor=\\\"middle\\\" vertical-align=\\\"middle\\\" font-size=\\\"10\\\"\\n                              y=\\\"3\\\">{{element.gpu > 0 ? element.gpu : ''}}</text>\\n\\n                        <circle [attr.stroke-width]=\\\"element.gpu>0?2:1\\\"\\n                                [attr.stroke]=\\\"element.gpu>0?'green':'gainsboro'\\\" fill-opacity=\\\"0\\\" r=\\\"12.5\\\"></circle>\\n                    </g>\\n\\n                    <g matTooltip=\\\"cpu\\\" transform=\\\"translate(50, 20)\\\">\\n\\n                        <text fill=\\\"black\\\" text-anchor=\\\"middle\\\" vertical-align=\\\"middle\\\" font-size=\\\"10\\\"\\n                              y=\\\"3\\\">{{element.cpu > 1 ? element.cpu : ''}}</text>\\n\\n                        <circle [attr.stroke-width]=\\\"element.cpu>1?2:1\\\"\\n                                [attr.stroke]=\\\"element.cpu>1?'OrangeRed':'gainsboro'\\\" fill-opacity=\\\"0\\\" r=\\\"12.5\\\"></circle>\\n                    </g>\\n\\n                    <g matTooltip=\\\"memory\\\" transform=\\\"translate(80, 20)\\\">\\n\\n                        <text fill=\\\"black\\\" text-anchor=\\\"middle\\\" vertical-align=\\\"middle\\\" font-size=\\\"10\\\"\\n                              y=\\\"3\\\">{{element.memory > 0.1 ? element.memory : ''}}</text>\\n\\n                        <circle [attr.stroke-width]=\\\"element.memory>0.1?2:1\\\"\\n                                [attr.stroke]=\\\"element.memory>0.1?'blue':'gainsboro'\\\" fill-opacity=\\\"0\\\" r=\\\"12.5\\\"></circle>\\n                    </g>\\n                </svg>\\n            </td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"steps\\\">\\n            <th mat-header-cell *matHeaderCellDef style=\\\"width: 60px\\\"> Steps</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\">\\n                {{element.current_step}}<span *ngIf=\\\"element.steps>0\\\">/{{element.steps}}</span>\\n            </td>\\n        </ng-container>\\n\\n\\n        <ng-container matColumnDef=\\\"links\\\">\\n            <th mat-header-cell *matHeaderCellDef style=\\\"width: 60px\\\"> Links</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\" style=\\\"min-width: 100px\\\">\\n                <mat-icon svgIcon=\\\"stop\\\" matTooltip=\\\"Stop\\\" (click)=\\\"stop(element)\\\" [class.transparent]=\\\"!unfinished(element)\\\"></mat-icon>\\n                <mat-icon svgIcon=\\\"report\\\" matTooltip=\\\"Report\\\" (click)=\\\"toogle_report(element)\\\" *ngIf=\\\"report\\\"\\n                          [class.transparent]=\\\"!element.report_full\\\"></mat-icon>\\n            </td>\\n        </ng-container>\\n\\n        <tr mat-header-row *matHeaderRowDef=\\\"displayed_columns\\\"></tr>\\n        <tr mat-row *matRowDef=\\\"let row; columns: displayed_columns;\\\"></tr>\\n    </table>\\n\\n</div>\\n\\n\\n<nav>\\n    <a routerLink=\\\"./\\\" routerLinkActive=\\\"active\\\" [routerLinkActiveOptions]=\\\"{ exact: true }\\\">Logs</a>\\n    <a routerLink=\\\"./step\\\" routerLinkActive=\\\"active\\\">Steps</a>\\n    <a routerLink=\\\"./report\\\" routerLinkActive=\\\"active\\\">Reports</a>\\n</nav>\\n\\n<router-outlet (activate)=\\\"onActivate($event)\\\"></router-outlet>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Rhc2svdGFzay1kZXRhaWwvc3RlcC9zdGVwLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2RhZy9kYWctZGV0YWlsL2NvbmZpZy9jb25maWcuY29tcG9uZW50LmNzcyJ9 */\""],"sourceRoot":""}