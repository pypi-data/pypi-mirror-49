{"version":3,"sources":["webpack:///./app/views/groupDetails/organization/groupEvents.jsx"],"names":["GroupEvents","createReactClass","displayName","propTypes","group","SentryTypes","Group","isRequired","mixins","ApiMixin","OrganizationState","getInitialState","eventList","loading","error","pageLinks","query","this","props","location","componentWillMount","fetchData","componentWillReceiveProps","nextProps","search","queryParams","setState","handleSearch","targetQueryParams","_babel_runtime_helpers_objectSpread__WEBPACK_IMPORTED_MODULE_0___default","_this$props$params","params","groupId","orgId","browserHistory","push","pathname","concat","_this","lodash_pick__WEBPACK_IMPORTED_MODULE_1___default","limit","state","api","request","method","success","data","_","jqXHR","getResponseHeader","err","parseApiError","renderNoQueryResults","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","app_components_emptyStateWarning__WEBPACK_IMPORTED_MODULE_9__","t","renderEmpty","renderResults","tagList","tags","filter","tag","key","app_components_eventsTable_eventsTable__WEBPACK_IMPORTED_MODULE_10__","events","renderBody","app_components_loadingIndicator__WEBPACK_IMPORTED_MODULE_13__","app_components_loadingError__WEBPACK_IMPORTED_MODULE_12__","message","onRetry","length","render","style","marginBottom","app_components_searchBar__WEBPACK_IMPORTED_MODULE_15__","defaultQuery","placeholder","onSearch","app_components_panels__WEBPACK_IMPORTED_MODULE_6__","className","app_components_pagination__WEBPACK_IMPORTED_MODULE_14__"],"mappings":"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","file":"OrganizationGroupEvents.js","sourcesContent":["import {browserHistory} from 'react-router';\nimport React from 'react';\nimport createReactClass from 'create-react-class';\nimport {pick} from 'lodash';\n\nimport SentryTypes from 'app/sentryTypes';\nimport {Panel, PanelBody} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport ApiMixin from 'app/mixins/apiMixin';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport EventsTable from 'app/components/eventsTable/eventsTable';\nimport OrganizationState from 'app/mixins/organizationState';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport Pagination from 'app/components/pagination';\nimport SearchBar from 'app/components/searchBar';\nimport parseApiError from 'app/utils/parseApiError';\n\nconst GroupEvents = createReactClass({\n  displayName: 'GroupEvents',\n\n  propTypes: {\n    group: SentryTypes.Group.isRequired,\n  },\n\n  mixins: [ApiMixin, OrganizationState],\n\n  getInitialState() {\n    const queryParams = this.props.location.query;\n\n    const initialState = {\n      eventList: [],\n      loading: true,\n      error: false,\n      pageLinks: '',\n      query: queryParams.query || '',\n    };\n\n    return initialState;\n  },\n\n  componentWillMount() {\n    this.fetchData();\n  },\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.location.search !== nextProps.location.search) {\n      const queryParams = nextProps.location.query;\n\n      this.setState(\n        {\n          query: queryParams.query,\n        },\n        this.fetchData\n      );\n    }\n  },\n\n  handleSearch(query) {\n    const targetQueryParams = {...this.props.location.query};\n    targetQueryParams.query = query;\n    const {groupId, orgId} = this.props.params;\n\n    browserHistory.push({\n      pathname: `/organizations/${orgId}/issues/${groupId}/events/`,\n      query: targetQueryParams,\n    });\n  },\n\n  fetchData() {\n    this.setState({\n      loading: true,\n      error: false,\n    });\n\n    const query = {\n      ...pick(this.props.location.query, ['cursor', 'environment']),\n      limit: 50,\n      query: this.state.query,\n    };\n\n    this.api.request(`/issues/${this.props.params.groupId}/events/`, {\n      query,\n      method: 'GET',\n      success: (data, _, jqXHR) => {\n        this.setState({\n          eventList: data,\n          error: false,\n          loading: false,\n          pageLinks: jqXHR.getResponseHeader('Link'),\n        });\n      },\n      error: err => {\n        this.setState({\n          error: parseApiError(err),\n          loading: false,\n        });\n      },\n    });\n  },\n\n  renderNoQueryResults() {\n    return (\n      <EmptyStateWarning>\n        <p>{t('Sorry, no events match your search query.')}</p>\n      </EmptyStateWarning>\n    );\n  },\n\n  renderEmpty() {\n    return (\n      <EmptyStateWarning>\n        <p>{t(\"There don't seem to be any events yet.\")}</p>\n      </EmptyStateWarning>\n    );\n  },\n\n  renderResults() {\n    const group = this.props.group;\n    const tagList = group.tags.filter(tag => tag.key !== 'user') || [];\n\n    return (\n      <EventsTable\n        tagList={tagList}\n        events={this.state.eventList}\n        params={this.props.params}\n      />\n    );\n  },\n\n  renderBody() {\n    let body;\n\n    if (this.state.loading) {\n      body = <LoadingIndicator />;\n    } else if (this.state.error) {\n      body = <LoadingError message={this.state.error} onRetry={this.fetchData} />;\n    } else if (this.state.eventList.length > 0) {\n      body = this.renderResults();\n    } else if (this.state.query && this.state.query !== '') {\n      body = this.renderNoQueryResults();\n    } else {\n      body = this.renderEmpty();\n    }\n\n    return body;\n  },\n\n  render() {\n    return (\n      <div>\n        <div style={{marginBottom: 20}}>\n          <SearchBar\n            defaultQuery=\"\"\n            placeholder={t('search event id, message, or tags')}\n            query={this.state.query}\n            onSearch={this.handleSearch}\n          />\n        </div>\n        <Panel className=\"event-list\">\n          <PanelBody>{this.renderBody()}</PanelBody>\n        </Panel>\n        <Pagination pageLinks={this.state.pageLinks} />\n      </div>\n    );\n  },\n});\n\nexport default GroupEvents;\n"],"sourceRoot":""}