# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class Y(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, numeric_value=None, text_value=None, image_value=None, input_image_value=None):
        """
        Y - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'numeric_value': 'float',
            'text_value': 'str',
            'image_value': 'OutputImage',
            'input_image_value': 'InputImage'
        }

        self.attribute_map = {
            'numeric_value': 'numericValue',
            'text_value': 'textValue',
            'image_value': 'imageValue',
            'input_image_value': 'inputImageValue'
        }

        self._numeric_value = numeric_value
        self._text_value = text_value
        self._image_value = image_value
        self._input_image_value = input_image_value

    @property
    def numeric_value(self):
        """
        Gets the numeric_value of this Y.


        :return: The numeric_value of this Y.
        :rtype: float
        """
        return self._numeric_value

    @numeric_value.setter
    def numeric_value(self, numeric_value):
        """
        Sets the numeric_value of this Y.


        :param numeric_value: The numeric_value of this Y.
        :type: float
        """
        
        self._numeric_value = numeric_value

    @property
    def text_value(self):
        """
        Gets the text_value of this Y.


        :return: The text_value of this Y.
        :rtype: str
        """
        return self._text_value

    @text_value.setter
    def text_value(self, text_value):
        """
        Sets the text_value of this Y.


        :param text_value: The text_value of this Y.
        :type: str
        """
        
        self._text_value = text_value

    @property
    def image_value(self):
        """
        Gets the image_value of this Y.


        :return: The image_value of this Y.
        :rtype: OutputImage
        """
        return self._image_value

    @image_value.setter
    def image_value(self, image_value):
        """
        Sets the image_value of this Y.


        :param image_value: The image_value of this Y.
        :type: OutputImage
        """
        
        self._image_value = image_value

    @property
    def input_image_value(self):
        """
        Gets the input_image_value of this Y.


        :return: The input_image_value of this Y.
        :rtype: InputImage
        """
        return self._input_image_value

    @input_image_value.setter
    def input_image_value(self, input_image_value):
        """
        Sets the input_image_value of this Y.


        :param input_image_value: The input_image_value of this Y.
        :type: InputImage
        """
        
        self._input_image_value = input_image_value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




