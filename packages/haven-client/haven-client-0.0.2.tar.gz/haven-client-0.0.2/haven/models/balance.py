# coding: utf-8

"""
    Haven Money API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Balance(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'current': 'str',
        'available': 'str',
        'limit': 'str'
    }

    attribute_map = {
        'current': 'current',
        'available': 'available',
        'limit': 'limit'
    }

    def __init__(self, current=None, available=None, limit=None):  # noqa: E501
        """Balance - a model defined in OpenAPI"""  # noqa: E501

        self._current = None
        self._available = None
        self._limit = None
        self.discriminator = None

        self.current = current
        if available is not None:
            self.available = available
        if limit is not None:
            self.limit = limit

    @property
    def current(self):
        """Gets the current of this Balance.  # noqa: E501


        :return: The current of this Balance.  # noqa: E501
        :rtype: str
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this Balance.


        :param current: The current of this Balance.  # noqa: E501
        :type: str
        """
        if current is None:
            raise ValueError("Invalid value for `current`, must not be `None`")  # noqa: E501

        self._current = current

    @property
    def available(self):
        """Gets the available of this Balance.  # noqa: E501


        :return: The available of this Balance.  # noqa: E501
        :rtype: str
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this Balance.


        :param available: The available of this Balance.  # noqa: E501
        :type: str
        """

        self._available = available

    @property
    def limit(self):
        """Gets the limit of this Balance.  # noqa: E501


        :return: The limit of this Balance.  # noqa: E501
        :rtype: str
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this Balance.


        :param limit: The limit of this Balance.  # noqa: E501
        :type: str
        """

        self._limit = limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Balance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
