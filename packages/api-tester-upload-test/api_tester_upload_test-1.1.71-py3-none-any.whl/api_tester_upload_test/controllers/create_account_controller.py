# -*- coding: utf-8 -*-

"""
    api_tester_upload_test

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from api_tester_upload_test.api_helper import APIHelper
from api_tester_upload_test.configuration import Configuration
from api_tester_upload_test.controllers.base_controller import BaseController
from api_tester_upload_test.http.auth.o_auth_2 import OAuth2
from api_tester_upload_test.models.get_profile_response import GetProfileResponse

class CreateAccountController(BaseController):

    """A Controller to access Endpoints in the api_tester_upload_test API."""


    def create_account(self,
                       date,
                       username,
                       password,
                       authorization,
                       email=None,
                       first_name=None,
                       last_name=None):
        """Does a POST request to /v2/admin/cloudfs/customers/.

        create new user 

        Args:
            date (datetime): TODO: type description here. Example: 
            username (string): TODO: type description here. Example: 
            password (string): TODO: type description here. Example: 
            authorization (string): BCS
                client_application_id:request_signature
            email (string, optional): TODO: type description here. Example: 
            first_name (string, optional): TODO: type description here.
                Example: 
            last_name (string, optional): TODO: type description here.
                Example: 

        Returns:
            GetProfileResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v2/admin/cloudfs/customers/'
        _query_builder = Configuration.base_uri.format(Configuration.account_id)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Date': APIHelper.when_defined(APIHelper.RFC3339DateTime, date),
            'Authorization': authorization
        }

        # Prepare form parameters
        _form_parameters = {
            'username': username,
            'password': password,
            'email': email,
            'first_name': first_name,
            'last_name': last_name
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, GetProfileResponse.from_dictionary)
