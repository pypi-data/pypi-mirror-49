# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class UpdateTagsParams(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, experiment_ids=None, groups_ids=None, tags_to_add=None, tags_to_delete=None):
        """
        UpdateTagsParams - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'experiment_ids': 'list[str]',
            'groups_ids': 'list[str]',
            'tags_to_add': 'list[str]',
            'tags_to_delete': 'list[str]'
        }

        self.attribute_map = {
            'experiment_ids': 'experimentIds',
            'groups_ids': 'groupsIds',
            'tags_to_add': 'tagsToAdd',
            'tags_to_delete': 'tagsToDelete'
        }

        self._experiment_ids = experiment_ids
        self._groups_ids = groups_ids
        self._tags_to_add = tags_to_add
        self._tags_to_delete = tags_to_delete

    @property
    def experiment_ids(self):
        """
        Gets the experiment_ids of this UpdateTagsParams.


        :return: The experiment_ids of this UpdateTagsParams.
        :rtype: list[str]
        """
        return self._experiment_ids

    @experiment_ids.setter
    def experiment_ids(self, experiment_ids):
        """
        Sets the experiment_ids of this UpdateTagsParams.


        :param experiment_ids: The experiment_ids of this UpdateTagsParams.
        :type: list[str]
        """
        
        self._experiment_ids = experiment_ids

    @property
    def groups_ids(self):
        """
        Gets the groups_ids of this UpdateTagsParams.


        :return: The groups_ids of this UpdateTagsParams.
        :rtype: list[str]
        """
        return self._groups_ids

    @groups_ids.setter
    def groups_ids(self, groups_ids):
        """
        Sets the groups_ids of this UpdateTagsParams.


        :param groups_ids: The groups_ids of this UpdateTagsParams.
        :type: list[str]
        """
        
        self._groups_ids = groups_ids

    @property
    def tags_to_add(self):
        """
        Gets the tags_to_add of this UpdateTagsParams.


        :return: The tags_to_add of this UpdateTagsParams.
        :rtype: list[str]
        """
        return self._tags_to_add

    @tags_to_add.setter
    def tags_to_add(self, tags_to_add):
        """
        Sets the tags_to_add of this UpdateTagsParams.


        :param tags_to_add: The tags_to_add of this UpdateTagsParams.
        :type: list[str]
        """
        
        self._tags_to_add = tags_to_add

    @property
    def tags_to_delete(self):
        """
        Gets the tags_to_delete of this UpdateTagsParams.


        :return: The tags_to_delete of this UpdateTagsParams.
        :rtype: list[str]
        """
        return self._tags_to_delete

    @tags_to_delete.setter
    def tags_to_delete(self, tags_to_delete):
        """
        Sets the tags_to_delete of this UpdateTagsParams.


        :param tags_to_delete: The tags_to_delete of this UpdateTagsParams.
        :type: list[str]
        """
        
        self._tags_to_delete = tags_to_delete

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




