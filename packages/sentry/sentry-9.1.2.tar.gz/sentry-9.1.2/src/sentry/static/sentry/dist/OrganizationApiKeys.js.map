{"version":3,"sources":["webpack:///./app/views/settings/organizationApiKeys/organizationApiKeysList.jsx","webpack:///./app/views/settings/organizationApiKeys/index.jsx"],"names":["OrganizationApiKeysList","_this$props","this","props","params","routes","keys","busy","onAddApiKey","onRemove","hasKeys","length","action","react_default","a","createElement","components_button","priority","size","icon","disabled","onClick","t","settingsPageHeader","title","textBlock","tct","api","externalLink","href","className","tokens","components_link","to","panels","disablePadding","align","index_es","flex","px","w","emptyMessage","map","_ref","id","key","label","apiDetailsUrl","recreateRoute","concat","p","py","linkWithConfirmation","onConfirm","e","message","React","Component","propTypes","PropTypes","array","bool","func","OrganizationApiKeys","handleRemove","Client","request","_this","orgId","method","data","success","setState","state","filter","error","handleAddApiKey","browserHistory","push","addSuccessMessage","org","context","organization","name","organizationApiKeysList","extends_default","AsyncView","contextTypes","SentryTypes","Organization"],"mappings":"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","file":"OrganizationApiKeys.js","sourcesContent":["import {Box, Flex} from 'grid-emotion';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {t, tct} from 'app/locale';\nimport Button from 'app/components/button';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport ExternalLink from 'app/components/externalLink';\nimport Link from 'app/components/link';\nimport LinkWithConfirmation from 'app/components/linkWithConfirmation';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport recreateRoute from 'app/utils/recreateRoute';\n\nclass OrganizationApiKeysList extends React.Component {\n  static propTypes = {\n    routes: PropTypes.array,\n    keys: PropTypes.array,\n    busy: PropTypes.bool,\n    onRemove: PropTypes.func,\n    onAddApiKey: PropTypes.func,\n  };\n\n  render() {\n    const {params, routes, keys, busy, onAddApiKey, onRemove} = this.props;\n    const hasKeys = keys && keys.length;\n\n    const action = (\n      <Button\n        priority=\"primary\"\n        size=\"small\"\n        icon=\"icon-circle-add\"\n        busy={busy}\n        disabled={busy}\n        onClick={onAddApiKey}\n      >\n        {t('New API Key')}\n      </Button>\n    );\n    return (\n      <div>\n        <SettingsPageHeader title={t('API Keys')} action={action} />\n\n        <TextBlock>\n          {tct(\n            `API keys grant access to the [api:developer web API].\n          If you're looking to configure a Sentry client, you'll need a\n          client key which is available in your project settings.`,\n            {\n              api: <ExternalLink href=\"https://docs.sentry.io/hosted/api/\" />,\n            }\n          )}\n        </TextBlock>\n\n        <div className=\"alert alert-block alert-info\">\n          {tct(\n            'psst. Until Sentry supports OAuth, you might want to switch to using [tokens:Auth Tokens] instead.',\n            {\n              tokens: <Link to=\"/settings/account/api/auth-tokens/\" />,\n            }\n          )}\n        </div>\n\n        <Panel>\n          <PanelHeader disablePadding={true} align=\"center\">\n            <Flex align=\"center\" flex=\"1\">\n              <Box px={2} flex=\"1\">\n                {t('Name')}\n              </Box>\n              <Box px={2} flex=\"2\">\n                {t('Key')}\n              </Box>\n            </Flex>\n\n            <Box px={2} w={100}>\n              {t('Actions')}\n            </Box>\n          </PanelHeader>\n\n          <PanelBody>\n            {!hasKeys && (\n              <EmptyMessage>{t('No API keys for this organization')}</EmptyMessage>\n            )}\n\n            {keys &&\n              keys.map(({id, key, label}) => {\n                const apiDetailsUrl = recreateRoute(`${id}/`, {\n                  params,\n                  routes,\n                });\n\n                return (\n                  <PanelItem align=\"center\" p={0} py={1} key={id}>\n                    <Flex align=\"center\" flex=\"1\">\n                      <Box px={2} flex=\"1\" align=\"center\">\n                        <Link to={apiDetailsUrl}>{label}</Link>\n                      </Box>\n                      <Box px={2} flex=\"2\">\n                        <div className=\"form-control disabled auto-select\">{key}</div>\n                      </Box>\n                    </Flex>\n\n                    <Box px={2} w={100}>\n                      <LinkWithConfirmation\n                        className=\"btn btn-default btn-sm\"\n                        onConfirm={e => onRemove(id, e)}\n                        message={t('Are you sure you want to remove this API key?')}\n                        title={t('Remove API Key?')}\n                      >\n                        <span className=\"icon-trash\" />\n                      </LinkWithConfirmation>\n                    </Box>\n                  </PanelItem>\n                );\n              })}\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nexport default OrganizationApiKeysList;\n","import {browserHistory} from 'react-router';\nimport React from 'react';\n\nimport {Client} from 'app/api';\nimport {addSuccessMessage} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport SentryTypes from 'app/sentryTypes';\nimport recreateRoute from 'app/utils/recreateRoute';\n\nimport OrganizationApiKeysList from './organizationApiKeysList';\n\nclass OrganizationApiKeys extends AsyncView {\n  static contextTypes = {\n    organization: SentryTypes.Organization,\n  };\n\n  getEndpoints() {\n    return [['keys', `/organizations/${this.props.params.orgId}/api-keys/`]];\n  }\n\n  getTitle() {\n    const org = this.context.organization;\n    return `${org.name} API Keys`;\n  }\n\n  handleRemove = (id, e) => {\n    const api = new Client();\n    api.request(`/organizations/${this.props.params.orgId}/api-keys/${id}/`, {\n      method: 'DELETE',\n      data: {},\n      success: data => {\n        this.setState(state => ({\n          keys: state.keys.filter(({id: existingId}) => existingId !== id),\n        }));\n      },\n      error: () => {\n        this.setState({busy: false});\n      },\n    });\n  };\n\n  handleAddApiKey = () => {\n    const api = new Client();\n    this.setState({\n      busy: true,\n    });\n    api.request(`/organizations/${this.props.params.orgId}/api-keys/`, {\n      method: 'POST',\n      data: {},\n      success: data => {\n        this.setState({busy: false});\n        browserHistory.push(\n          recreateRoute(`${data.id}/`, {\n            params: this.props.params,\n            routes: this.props.routes,\n          })\n        );\n        addSuccessMessage(t(`Created a new API key \"${data.label}\"`));\n      },\n      error: () => {\n        this.setState({busy: false});\n      },\n    });\n  };\n\n  renderBody() {\n    return (\n      <OrganizationApiKeysList\n        busy={this.state.busy}\n        keys={this.state.keys}\n        organization={this.context.organization}\n        onRemove={this.handleRemove}\n        onAddApiKey={this.handleAddApiKey}\n        {...this.props}\n      />\n    );\n  }\n}\n\nexport default OrganizationApiKeys;\n"],"sourceRoot":""}