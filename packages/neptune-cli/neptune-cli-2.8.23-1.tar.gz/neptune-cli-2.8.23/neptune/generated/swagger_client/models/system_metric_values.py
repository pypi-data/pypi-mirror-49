# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class SystemMetricValues(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, metric_id=None, series_name=None, level=None, values=None):
        """
        SystemMetricValues - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'metric_id': 'str',
            'series_name': 'str',
            'level': 'int',
            'values': 'list[SystemMetricPoint]'
        }

        self.attribute_map = {
            'metric_id': 'metricId',
            'series_name': 'seriesName',
            'level': 'level',
            'values': 'values'
        }

        self._metric_id = metric_id
        self._series_name = series_name
        self._level = level
        self._values = values

    @property
    def metric_id(self):
        """
        Gets the metric_id of this SystemMetricValues.


        :return: The metric_id of this SystemMetricValues.
        :rtype: str
        """
        return self._metric_id

    @metric_id.setter
    def metric_id(self, metric_id):
        """
        Sets the metric_id of this SystemMetricValues.


        :param metric_id: The metric_id of this SystemMetricValues.
        :type: str
        """
        
        self._metric_id = metric_id

    @property
    def series_name(self):
        """
        Gets the series_name of this SystemMetricValues.


        :return: The series_name of this SystemMetricValues.
        :rtype: str
        """
        return self._series_name

    @series_name.setter
    def series_name(self, series_name):
        """
        Sets the series_name of this SystemMetricValues.


        :param series_name: The series_name of this SystemMetricValues.
        :type: str
        """
        
        self._series_name = series_name

    @property
    def level(self):
        """
        Gets the level of this SystemMetricValues.


        :return: The level of this SystemMetricValues.
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """
        Sets the level of this SystemMetricValues.


        :param level: The level of this SystemMetricValues.
        :type: int
        """
        
        self._level = level

    @property
    def values(self):
        """
        Gets the values of this SystemMetricValues.


        :return: The values of this SystemMetricValues.
        :rtype: list[SystemMetricPoint]
        """
        return self._values

    @values.setter
    def values(self, values):
        """
        Sets the values of this SystemMetricValues.


        :param values: The values of this SystemMetricValues.
        :type: list[SystemMetricPoint]
        """
        
        self._values = values

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




