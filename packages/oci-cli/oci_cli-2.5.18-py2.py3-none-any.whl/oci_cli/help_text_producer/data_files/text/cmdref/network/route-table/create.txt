create
******


Description
===========

Creates a new route table for the specified VCN. In the request you
must also include at least one route rule for the new route table. For
information on the number of rules you can have in a route table, see
Service Limits. For general information about route tables in your VCN
and the types of targets you can use in route rules, see Route Tables.

For the purposes of access control, you must provide the OCID of the
compartment where you want the route table to reside. Notice that the
route table doesn't have to be in the same compartment as the VCN,
subnets, or other Networking Service components. If you're not sure
which compartment to use, put the route table in the same compartment
as the VCN. For more information about compartments and access
control, see Overview of the IAM Service. For information about OCIDs,
see Resource Identifiers.

You may optionally specify a *display name* for the route table,
otherwise a default is provided. It does not have to be unique, and
you can change it. Avoid entering confidential information.


Usage
=====

   oci network route-table create [OPTIONS]


Options
=======


--compartment-id, -c [text]
---------------------------

The OCID of the compartment to contain the route table. [required]


--route-rules [complex type]
----------------------------

The collection of rules used for routing destination IPs to network
devices. This is a complex type whose value must be valid JSON. The
value can be provided as a string on the command line or passed in as
a file using the file://path/to/file syntax.

The --generate-param-json-input option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

   [required]

Example: '[{"cidrBlock":"0.0.0.0/0","networkEntityId":"ocid1.internet
gateway.oc1.phx.aaaaaaaaxtfqb2srw7hoi5cmdum4n6ow2xm2zhrzqqypmlteiiebt
mvl75ya"}]'


--vcn-id [text]
---------------

The OCID of the VCN the route table belongs to. [required]


--defined-tags [complex type]
-----------------------------

Defined tags for this resource. Each key is predefined and scoped to a
namespace. For more information, see Resource Tags.

Example: *{"Operations": {"CostCenter": "42"}}* This is a complex type
whose value must be valid JSON. The value can be provided as a string
on the command line or passed in as a file using the
file://path/to/file syntax.

The --generate-param-json-input option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


--display-name [text]
---------------------

A user-friendly name. Does not have to be unique, and it's changeable.
Avoid entering confidential information.


--freeform-tags [complex type]
------------------------------

Free-form tags for this resource. Each tag is a simple key-value pair
with no predefined name, type, or namespace. For more information, see
Resource Tags.

Example: *{"Department": "Finance"}* This is a complex type whose
value must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The --generate-param-json-input option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


--wait-for-state [PROVISIONING|AVAILABLE|TERMINATING|TERMINATED]
----------------------------------------------------------------

This operation creates, modifies or deletes a resource that has a
defined lifecycle state. Specify this option to perform the action and
then wait until the resource reaches a given lifecycle state. If
timeout is reached, a return code of 2 is returned. For any other
error, a return code of 1 is returned.


--max-wait-seconds [integer]
----------------------------

The maximum time to wait for the resource to reach the lifecycle state
defined by --wait-for-state. Defaults to 1200 seconds.


--wait-interval-seconds [integer]
---------------------------------

Check every --wait-interval-seconds to see whether the resource to see
if it has reached the lifecycle state defined by --wait-for-state.
Defaults to 30 seconds.


--from-json [text]
------------------

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The --generate-full-command-json-input option can be used to generate
a sample json file to be used with this command option. The key names
are pre-populated and match the command option names (converted to
camelCase format, e.g. compartment-id --> compartmentId), while the
values of the keys need to be populated by the user before using the
sample file as an input to this command. For any command option that
accepts multiple values, the value of the key can be a JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our "using CLI with
advanced JSON options" link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions


-?, -h, --help
--------------

For detailed help on any of these individual commands, enter <command>
--help.
