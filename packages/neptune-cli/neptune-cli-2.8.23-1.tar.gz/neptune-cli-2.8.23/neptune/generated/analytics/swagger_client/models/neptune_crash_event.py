# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class NeptuneCrashEvent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, component=None, current_url=None, experiment_id=None, logs=None):
        """
        NeptuneCrashEvent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'component': 'str',
            'current_url': 'str',
            'experiment_id': 'str',
            'logs': 'str'
        }

        self.attribute_map = {
            'component': 'component',
            'current_url': 'currentUrl',
            'experiment_id': 'experimentId',
            'logs': 'logs'
        }

        self._component = component
        self._current_url = current_url
        self._experiment_id = experiment_id
        self._logs = logs

    @property
    def component(self):
        """
        Gets the component of this NeptuneCrashEvent.


        :return: The component of this NeptuneCrashEvent.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """
        Sets the component of this NeptuneCrashEvent.


        :param component: The component of this NeptuneCrashEvent.
        :type: str
        """
        allowed_values = ["BACKEND", "FRONTEND", "CLI"]
        if component not in allowed_values:
            raise ValueError(
                "Invalid value for `component`, must be one of {0}"
                .format(allowed_values)
            )

        self._component = component

    @property
    def current_url(self):
        """
        Gets the current_url of this NeptuneCrashEvent.


        :return: The current_url of this NeptuneCrashEvent.
        :rtype: str
        """
        return self._current_url

    @current_url.setter
    def current_url(self, current_url):
        """
        Sets the current_url of this NeptuneCrashEvent.


        :param current_url: The current_url of this NeptuneCrashEvent.
        :type: str
        """
        
        self._current_url = current_url

    @property
    def experiment_id(self):
        """
        Gets the experiment_id of this NeptuneCrashEvent.


        :return: The experiment_id of this NeptuneCrashEvent.
        :rtype: str
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id):
        """
        Sets the experiment_id of this NeptuneCrashEvent.


        :param experiment_id: The experiment_id of this NeptuneCrashEvent.
        :type: str
        """
        
        self._experiment_id = experiment_id

    @property
    def logs(self):
        """
        Gets the logs of this NeptuneCrashEvent.


        :return: The logs of this NeptuneCrashEvent.
        :rtype: str
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """
        Sets the logs of this NeptuneCrashEvent.


        :param logs: The logs of this NeptuneCrashEvent.
        :type: str
        """
        
        self._logs = logs

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




