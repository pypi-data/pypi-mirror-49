# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class QueuedRemoteExperimentParams(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, string_params=None, inputs=None, worker_type=None, token=None, environment=None):
        """
        QueuedRemoteExperimentParams - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'string_params': 'list[StringParam]',
            'inputs': 'list[InputPath]',
            'worker_type': 'str',
            'token': 'str',
            'environment': 'str'
        }

        self.attribute_map = {
            'string_params': 'stringParams',
            'inputs': 'inputs',
            'worker_type': 'workerType',
            'token': 'token',
            'environment': 'environment'
        }

        self._string_params = string_params
        self._inputs = inputs
        self._worker_type = worker_type
        self._token = token
        self._environment = environment

    @property
    def string_params(self):
        """
        Gets the string_params of this QueuedRemoteExperimentParams.


        :return: The string_params of this QueuedRemoteExperimentParams.
        :rtype: list[StringParam]
        """
        return self._string_params

    @string_params.setter
    def string_params(self, string_params):
        """
        Sets the string_params of this QueuedRemoteExperimentParams.


        :param string_params: The string_params of this QueuedRemoteExperimentParams.
        :type: list[StringParam]
        """
        
        self._string_params = string_params

    @property
    def inputs(self):
        """
        Gets the inputs of this QueuedRemoteExperimentParams.


        :return: The inputs of this QueuedRemoteExperimentParams.
        :rtype: list[InputPath]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """
        Sets the inputs of this QueuedRemoteExperimentParams.


        :param inputs: The inputs of this QueuedRemoteExperimentParams.
        :type: list[InputPath]
        """
        
        self._inputs = inputs

    @property
    def worker_type(self):
        """
        Gets the worker_type of this QueuedRemoteExperimentParams.


        :return: The worker_type of this QueuedRemoteExperimentParams.
        :rtype: str
        """
        return self._worker_type

    @worker_type.setter
    def worker_type(self, worker_type):
        """
        Sets the worker_type of this QueuedRemoteExperimentParams.


        :param worker_type: The worker_type of this QueuedRemoteExperimentParams.
        :type: str
        """
        
        self._worker_type = worker_type

    @property
    def token(self):
        """
        Gets the token of this QueuedRemoteExperimentParams.


        :return: The token of this QueuedRemoteExperimentParams.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """
        Sets the token of this QueuedRemoteExperimentParams.


        :param token: The token of this QueuedRemoteExperimentParams.
        :type: str
        """
        
        self._token = token

    @property
    def environment(self):
        """
        Gets the environment of this QueuedRemoteExperimentParams.


        :return: The environment of this QueuedRemoteExperimentParams.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """
        Sets the environment of this QueuedRemoteExperimentParams.


        :param environment: The environment of this QueuedRemoteExperimentParams.
        :type: str
        """
        
        self._environment = environment

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




