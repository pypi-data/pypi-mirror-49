{"version":3,"sources":["webpack:///./app/components/circleIndicator.jsx","webpack:///./app/views/settings/account/accountSecurity/components/confirmHeader.jsx","webpack:///./app/views/settings/account/accountSecurity/components/removeConfirm.jsx","webpack:///./app/views/settings/account/accountSecurity/components/recoveryCodes.jsx","webpack:///./app/views/settings/account/accountSecurity/components/u2fEnrolledDetails.jsx","webpack:///./app/views/settings/account/accountSecurity/accountSecurityDetails.jsx"],"names":["getBackgroundColor","p","color","concat","enabled","theme","success","error","getSize","size","Circle","styled","target","CircleIndicator","props","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default","this","_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3___default","call","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","React","Component","propTypes","PropTypes","bool","isRequired","number","string","defaultProps","react_emotion__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","ConfirmHeader","RemoveConfirm","react__WEBPACK_IMPORTED_MODULE_6___default","app_components_confirm__WEBPACK_IMPORTED_MODULE_9__","_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0___default","message","Fragment","app_views_settings_account_accountSecurity_components_confirmHeader__WEBPACK_IMPORTED_MODULE_8__","t","app_views_settings_components_text_textBlock__WEBPACK_IMPORTED_MODULE_10__","Code","react_default","panels","extends_default","text","familyMono","RecoveryCodes","printCodes","iframe","window","frames","printable","document","write","_this","codes","join","print","close","_this$props","isEnrolled","formattedCodes","className","Object","index_es","marginTop","hasButtons","dist_index_es","align","ml","clipboard","hideUnsupported","value","components_button","inlineSvg","src","onClick","download","href","components_confirm","onConfirm","onRegenerateBackupCodes","priority","type","flex","length","map","code","key","emptyMessage","name","display","arrayOf","func","U2fEnrolledDetails","devices","id","onRemoveU2fDevice","hasDevices","isLastDevice","device","pr","fontSize","opacity","dateTime","date","timestamp","disabled","confirmHeader","textBlock","tooltip","title","justify","to","shape","any","ENDPOINT","DateLabel","Phone","AuthenticatorDate","label","mb","AccountSecurityDetails","_getPrototypeOf2","classCallCheck_default","_len","arguments","args","Array","_key","possibleConstructorReturn_default","getPrototypeOf_default","apply","handleRemove","authenticator","state","authId","isRemovingU2fDevice","deviceId","key_handle","setState","loading","api","requestPromise","method","then","router","push","deviceName","addSuccessMessage","addError","handleRemoveU2fDevice","_form","params","addErrorMessage","_this$props2","deleteDisabled","settingsPageHeader","circleIndicator","marginLeft","action","removeButton","removeConfirm","description","accountSecurityDetails_AuthenticatorDate","createdAt","lastUsedAt","u2fEnrolledDetails","phone","recoveryCodes","AsyncView","withRouter"],"mappings":"uNAIMA,EAAqB,SAAAC,GACzB,OAAIA,EAAEC,MACJ,eAAAC,OAAsBF,EAAEC,MAAxB,KAGF,eAAAC,OAAsBF,EAAEG,QAAUH,EAAEI,MAAMC,QAAUL,EAAEI,MAAME,MAA5D,MAGIC,EAAU,SAAAP,GAAC,qBAAAE,OACLF,EAAEQ,KADG,kBAAAN,OAENF,EAAEQ,KAFI,UAKXC,EAASC,kBAAH,OAAAC,OAAA,YAAGD,CAAH,4DAIRH,EAJQ,IAKRR,EALQ,KAQNa,cAYJ,SAAAA,EAAYC,GAAO,OAAAC,IAAAC,KAAAH,GAAAI,IAAAD,KAAAE,IAAAL,GAAAM,KAAAH,KACXF,0DAIN,OAAOM,EAAAC,EAAAC,cAACZ,EAAWM,KAAKF,cAjBES,IAAMC,WAA9BX,EACGY,UAAY,CACjBrB,QAASsB,IAAUC,KAAKC,WACxBnB,KAAMiB,IAAUG,OAAOD,WACvB1B,MAAOwB,IAAUI,QAJfjB,EAOGkB,aAAe,CACpB3B,SAAS,EACTK,KAAM,IAYKI,yCC9Cf,IAAAmB,EAAAC,EAAA,GAEMC,EAAgBvB,kBAAH,OAAAC,OAAA,YAAGD,CAAH,uCAKJuB,iMCATC,2IAEF,OACEC,EAAAf,EAAAC,cAACe,EAAA,QAADC,IAAA,CACEC,QACEH,EAAAf,EAAAC,cAACc,EAAAf,EAAMmB,SAAP,KACEJ,EAAAf,EAAAC,cAACmB,EAAA,EAAD,KAAgBC,YAAE,uCAClBN,EAAAf,EAAAC,cAACqB,EAAA,QAAD,KACGD,YACC,iGAKJ1B,KAAKF,eAdWS,IAAMC,WAoBnBW,kTCRTS,EAAOjC,kBAAO,SAAAG,GAAK,OAAI+B,EAAAxB,EAAAC,cAACwB,EAAA,EAADC,IAAA,CAAW9C,EAAG,GAAOa,KAAxC,CAAAF,OAAA,aAAGD,CAAH,eACO,SAAAV,GAAC,OAAIA,EAAEI,MAAM2C,KAAKC,YADzB,KAIJC,qLAOJC,WAAa,WACX,IAAMC,EAASC,OAAOC,OAAOC,UAC7BH,EAAOI,SAASC,MAAMC,EAAK5C,MAAM6C,MAAMC,KAAK,SAC5CR,EAAOS,QACPT,EAAOI,SAASM,iEAGT,IAAAC,EACqB/C,KAAKF,MAA1BkD,EADAD,EACAC,WAAYL,EADZI,EACYJ,MAEnB,IAAKK,IAAeL,EAClB,OAAO,KAGT,IAAMM,EAAiBN,EAAMC,KAAK,OAElC,OACEf,EAAAxB,EAAAC,cAACwB,EAAA,EAAD,CAAAoB,UAAAC,OAAAC,EAAA,IAAAD,CAAY,CAACE,UAAW,MACtBxB,EAAAxB,EAAAC,cAACwB,EAAA,EAAD,CAAawB,YAAU,GACrBzB,EAAAxB,EAAAC,cAACiD,EAAA,KAAD,CAAMC,MAAM,UACV3B,EAAAxB,EAAAC,cAACiD,EAAA,IAAD,KAAM7B,YAAE,kBAEVG,EAAAxB,EAAAC,cAACiD,EAAA,KAAD,KACE1B,EAAAxB,EAAAC,cAACiD,EAAA,IAAD,CAAKE,GAAI,GACP5B,EAAAxB,EAAAC,cAACoD,EAAA,EAAD,CAAWC,iBAAe,EAACC,MAAOX,GAChCpB,EAAAxB,EAAAC,cAACuD,EAAA,QAAD,CAAQpE,KAAK,SACXoC,EAAAxB,EAAAC,cAACwD,EAAA,QAAD,CAAWC,IAAI,iBAIrBlC,EAAAxB,EAAAC,cAACiD,EAAA,IAAD,CAAKE,GAAI,GACP5B,EAAAxB,EAAAC,cAACuD,EAAA,QAAD,CAAQpE,KAAK,QAAQuE,QAAShE,KAAKmC,YACjCN,EAAAxB,EAAAC,cAACwD,EAAA,QAAD,CAAWC,IAAI,iBAGnBlC,EAAAxB,EAAAC,cAACiD,EAAA,IAAD,CAAKE,GAAI,GACP5B,EAAAxB,EAAAC,cAACuD,EAAA,QAAD,CACEpE,KAAK,QACLwE,SAAS,4BACTC,KAAI,iCAAA/E,OAAmC8D,IAEvCpB,EAAAxB,EAAAC,cAACwD,EAAA,QAAD,CAAWC,IAAI,oBAGnBlC,EAAAxB,EAAAC,cAACiD,EAAA,IAAD,CAAKE,GAAI,GACP5B,EAAAxB,EAAAC,cAAC6D,EAAA,QAAD,CACEC,UAAWpE,KAAKF,MAAMuE,wBACtB9C,QAASG,YACP,4FAGFG,EAAAxB,EAAAC,cAACuD,EAAA,QAAD,CAAQS,SAAS,SAAS7E,KAAK,SAC5BiC,YAAE,yBAMbG,EAAAxB,EAAAC,cAACwB,EAAA,EAAD,KACED,EAAAxB,EAAAC,cAACwB,EAAA,EAAD,CAAYyC,KAAK,WACf1C,EAAAxB,EAAAC,cAACiD,EAAA,KAAD,CAAMC,MAAM,SAASC,GAAI,EAAGe,KAAK,KAC9B9C,YACC,qFAING,EAAAxB,EAAAC,cAACiD,EAAA,IAAD,OAAQZ,EAAM8B,QAAU9B,EAAM+B,IAAI,SAAAC,GAAI,OAAI9C,EAAAxB,EAAAC,cAACsB,EAAD,CAAMgD,IAAKD,GAAOA,OAC1DhC,EAAM8B,QACN5C,EAAAxB,EAAAC,cAACuE,EAAA,QAAD,KAAenD,YAAE,4CAGrBG,EAAAxB,EAAAC,cAAA,UAAQwE,KAAK,YAAb5B,UAAAC,OAAAC,EAAA,IAAAD,CAA8B,CAAC4B,QAAS,mBA9EpBxE,IAAMC,WAA5B0B,EACGzB,UAAY,CACjBuC,WAAYtC,IAAUC,KACtBgC,MAAOjC,IAAUsE,QAAQtE,IAAUI,QACnCuD,wBAAyB3D,IAAUuE,KAAKrE,YAgF7BsB,qDC1FTgD,2IAaK,IAAAnC,EAC8C/C,KAAKF,MAAnDkD,EADAD,EACAC,WAAYmC,EADZpC,EACYoC,QAASC,EADrBrC,EACqBqC,GAAIC,EADzBtC,EACyBsC,kBAEhC,GAAW,QAAPD,IAAiBpC,EACnB,OAAO,KAGT,IAAMsC,EAAaH,GAAWA,EAAQV,OAEhCc,EAA8B,IAAfD,EAErB,OACEzD,EAAAxB,EAAAC,cAACwB,EAAA,EAAD,CAAAoB,UAAAC,OAAAC,EAAA,IAAAD,CAAY,CAACE,UAAW,MACtBxB,EAAAxB,EAAAC,cAACwB,EAAA,EAAD,KAAcJ,YAAE,gBAEhBG,EAAAxB,EAAAC,cAACwB,EAAA,EAAD,MACIwD,GACAzD,EAAAxB,EAAAC,cAACuE,EAAA,QAAD,KAAenD,YAAE,uCAElB4D,GACCH,EAAQT,IAAI,SAAAc,GAAM,OAChB3D,EAAAxB,EAAAC,cAACwB,EAAA,EAAD,CAAW7C,EAAG,EAAG2F,IAAKY,EAAOV,MAC3BjD,EAAAxB,EAAAC,cAACiD,EAAA,KAAD,CAAMtE,EAAG,EAAGwG,GAAI,EAAGjC,MAAM,SAASgB,KAAK,KACrC3C,EAAAxB,EAAAC,cAACiD,EAAA,IAAD,CAAKiB,KAAK,KAAKgB,EAAOV,MACtBjD,EAAAxB,EAAAC,cAAA,OAAA4C,UAAAC,OAAAC,EAAA,IAAAD,CAAU,CAACuC,SAAU,QAASC,QAAS,MACrC9D,EAAAxB,EAAAC,cAACsF,EAAA,QAAD,CAAUC,KAAML,EAAOM,cAI3BjE,EAAAxB,EAAAC,cAACiD,EAAA,IAAD,CAAKtE,EAAG,GACN4C,EAAAxB,EAAAC,cAAC6D,EAAA,QAAD,CACEC,UAAW,kBAAMiB,EAAkBG,IACnCO,SAAUR,EACVhE,QACEM,EAAAxB,EAAAC,cAACuB,EAAAxB,EAAMmB,SAAP,KACEK,EAAAxB,EAAAC,cAAC0F,EAAA,EAAD,KACGtE,YAAE,sCAELG,EAAAxB,EAAAC,cAAC2F,EAAA,QAAD,KACGvE,YAAC,mDAAAvC,OACmDqG,EAAOV,KAD1D,UAORjD,EAAAxB,EAAAC,cAACuD,EAAA,QAAD,CAAQpE,KAAK,QAAQ6E,SAAS,UAC5BzC,EAAAxB,EAAAC,cAAC4F,EAAA,QAAD,CACEH,UAAWR,EACXY,MAAOzE,YAAE,mCAETG,EAAAxB,EAAAC,cAAA,QAAM4C,UAAU,2BAO9BrB,EAAAxB,EAAAC,cAACwB,EAAA,EAAD,CAAWsE,QAAQ,WAAWnH,EAAG,GAC/B4C,EAAAxB,EAAAC,cAACuD,EAAA,QAAD,CAAQU,KAAK,SAAS8B,GAAG,8CACtB3E,YAAE,iCAzEgBnB,IAAMC,WAAjC0E,EACGzE,UAAY,CACjBuC,WAAYtC,IAAUC,KACtByE,GAAI1E,IAAUI,OACdqE,QAASzE,IAAUsE,QACjBtE,IAAU4F,MAAM,CACdxB,KAAMpE,IAAUI,OAChBgF,UAAWpF,IAAU6F,OAGzBlB,kBAAmB3E,IAAUuE,KAAKrE,YAwEvBsE,QC1ETsB,EAAW,4BAEXC,EAAY9G,kBAAH,QAAAC,OAAA,aAAGD,CAAH,kDAMT+G,EAAQ/G,kBAAH,QAAAC,OAAA,aAAGD,CAAH,qCAKLgH,2IASK,IAAA5D,EACe/C,KAAKF,MAApB8G,EADA7D,EACA6D,MAAOf,EADP9C,EACO8C,KAEd,OACEhE,EAAAxB,EAAAC,cAACiD,EAAA,KAAD,CAAMsD,GAAI,GACRhF,EAAAxB,EAAAC,cAACmG,EAAD,KAAYG,GACZ/E,EAAAxB,EAAAC,cAACiD,EAAA,IAAD,CAAKiB,KAAK,KAAKqB,EAAOhE,EAAAxB,EAAAC,cAACsF,EAAA,QAAD,CAAUC,KAAMA,IAAWnE,YAAE,kBAf3BnB,IAAMC,WAAhCmG,EACGlG,UAAY,CACjBmG,MAAOlG,IAAUI,OAKjB+E,KAAMnF,IAAUI,YAcdgG,cAKJ,SAAAA,IAAqB,IAAAC,EAAArE,EAAAsE,IAAAhH,KAAA8G,GAAA,QAAAG,EAAAC,UAAAzC,OAAN0C,EAAM,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAANF,EAAME,GAAAH,UAAAG,GAAA,OACnB3E,EAAA4E,IAAAtH,MAAA+G,EAAAQ,IAAAT,IAAA3G,KAAAqH,MAAAT,EAAA,CAAA/G,MAAAb,OAASgI,MAiBXM,aAAe,SAAAjC,GAAU,IAChBkC,EAAiBhF,EAAKiF,MAAtBD,cAEP,GAAKA,GAAkBA,EAAcE,OAArC,CAGA,IAAMC,IAAwBrC,EACxBsC,EAAWD,EAAmB,GAAA1I,OAAMqG,EAAOuC,WAAb,KAA6B,GAEjErF,EAAKsF,SACH,CACEC,SAAS,GAEX,kBACEvF,EAAKwF,IACFC,eADH,GAAAhJ,OACqBqH,GADrBrH,OACgCuI,EAAcE,OAD9C,KAAAzI,OACwD2I,GAAY,CAChEM,OAAQ,WAETC,KACC,WACE3F,EAAK5C,MAAMwI,OAAOC,KAAK,8BACvB,IAAMC,EAAaX,EAAsBrC,EAAOV,KAAO,gBACvD2D,4BAAkB/G,YAAE,sBAAuB8G,KAE7C,WAEE,IAAMA,EAAaX,EAAsBrC,EAAOV,KAAO,gBACvDpC,EAAKgG,SAAShH,YAAE,oBAAqB8G,UA7C5B9F,EAmDrBiG,sBAAwB,aAjDtBjG,EAAKkG,MAAQ,GAFMlG,0DAMnB,OAAOhB,YAAE,mDAIT,MAAO,CAAC,CAAC,gBAAD,GAAAvC,OAAqBqH,GAArBrH,OAAgCa,KAAKF,MAAM+I,OAAOjB,OAAlD,wCAGDrG,GACPvB,KAAKgI,SAAS,CAACC,SAAS,IACxBa,0BAAgBvH,wCAwCL,IACJmG,EAAiB1H,KAAK2H,MAAtBD,cADIqB,EAEuC/I,KAAKF,MAAhDkJ,EAFID,EAEJC,eAAgB3E,EAFZ0E,EAEY1E,wBAEvB,OACExC,EAAAxB,EAAAC,cAAA,WACEuB,EAAAxB,EAAAC,cAAC2I,EAAA,QAAD,CACE9C,MACEtE,EAAAxB,EAAAC,cAACuB,EAAAxB,EAAMmB,SAAP,KACEK,EAAAxB,EAAAC,cAAA,YAAOoH,EAAc5C,MACrBjD,EAAAxB,EAAAC,cAAC4I,EAAA,EAAD,CAAAhG,UAAAC,OAAAC,EAAA,IAAAD,CAAsB,CAACgG,WAAY,IAAI/J,QAASsI,EAAc1E,cAGlEoG,OACE1B,EAAc1E,YACd0E,EAAc2B,cACZxH,EAAAxB,EAAAC,cAAC4F,EAAA,QAAD,CACEC,MAAOzE,YACL,2FAEFqE,UAAWiD,GAEXnH,EAAAxB,EAAAC,cAACgJ,EAAA,EAAD,CAAelF,UAAWpE,KAAKyH,aAAc1B,SAAUiD,GACrDnH,EAAAxB,EAAAC,cAACuD,EAAA,QAAD,CAAQS,SAAS,UAAUoD,EAAc2B,kBAOnDxH,EAAAxB,EAAAC,cAAC2F,EAAA,QAAD,KAAYyB,EAAc6B,aAC1B1H,EAAAxB,EAAAC,cAACkJ,EAAD,CAAmB5C,MAAOlF,YAAE,cAAemE,KAAM6B,EAAc+B,YAC/D5H,EAAAxB,EAAAC,cAACkJ,EAAD,CAAmB5C,MAAOlF,YAAE,aAAcmE,KAAM6B,EAAcgC,aAE9D7H,EAAAxB,EAAAC,cAACqJ,EAAD,CACE3G,WAAY0E,EAAc1E,WAC1BoC,GAAIsC,EAActC,GAClBD,QAASuC,EAAcvC,QACvBE,kBAAmBrF,KAAKyH,eAGzBC,EAAc1E,YACb0E,EAAckC,OACZ/H,EAAAxB,EAAAC,cAAA,OAAA4C,UAAAC,OAAAC,EAAA,IAAAD,CAAU,CAACE,UAAW,MACnB3B,YAAE,6DADL,IAEEG,EAAAxB,EAAAC,cAACoG,EAAD,KAAQgB,EAAckC,QAI5B/H,EAAAxB,EAAAC,cAACuJ,EAAD,CACExF,wBAAyBA,EACzBrB,WAAY0E,EAAc1E,WAC1BL,MAAO+E,EAAc/E,gBAhHMmH,WAA/BhD,EACGpG,UAAY,CACjBsI,eAAgBtI,IAAUC,KAAKC,WAC/ByD,wBAAyB3D,IAAUuE,KAAKrE,YAoH7BmJ,+BAAWjD","file":"AccountSecurityDetails.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'react-emotion';\n\nconst getBackgroundColor = p => {\n  if (p.color) {\n    return `background: ${p.color};`;\n  }\n\n  return `background: ${p.enabled ? p.theme.success : p.theme.error};`;\n};\n\nconst getSize = p => `\n  height: ${p.size}px;\n  width: ${p.size}px;\n`;\n\nconst Circle = styled.div`\n  display: inline-block;\n  position: relative;\n  border-radius: 50%;\n  ${getSize};\n  ${getBackgroundColor};\n`;\n\nclass CircleIndicator extends React.Component {\n  static propTypes = {\n    enabled: PropTypes.bool.isRequired,\n    size: PropTypes.number.isRequired,\n    color: PropTypes.string,\n  };\n\n  static defaultProps = {\n    enabled: true,\n    size: 14,\n  };\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return <Circle {...this.props} />;\n  }\n}\n\nexport default CircleIndicator;\n","import styled from 'react-emotion';\n\nconst ConfirmHeader = styled.div`\n  font-size: 1.2em;\n  margin-bottom: 10px;\n`;\n\nexport default ConfirmHeader;\n","import React from 'react';\n\nimport {t} from 'app/locale';\nimport ConfirmHeader from 'app/views/settings/account/accountSecurity/components/confirmHeader';\nimport Confirm from 'app/components/confirm';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nclass RemoveConfirm extends React.Component {\n  render() {\n    return (\n      <Confirm\n        message={\n          <React.Fragment>\n            <ConfirmHeader>{t('Do you want to remove this method?')}</ConfirmHeader>\n            <TextBlock>\n              {t(\n                'Removing the last authentication method will disable two-factor authentication completely.'\n              )}\n            </TextBlock>\n          </React.Fragment>\n        }\n        {...this.props}\n      />\n    );\n  }\n}\n\nexport default RemoveConfirm;\n","import {Box, Flex} from 'grid-emotion';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport {t} from 'app/locale';\nimport Button from 'app/components/button';\nimport Clipboard from 'app/components/clipboard';\nimport Confirm from 'app/components/confirm';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport InlineSvg from 'app/components/inlineSvg';\nimport {\n  Panel,\n  PanelBody,\n  PanelHeader,\n  PanelItem,\n  PanelAlert,\n} from 'app/components/panels';\n\nconst Code = styled(props => <PanelItem p={2} {...props} />)`\n  font-family: ${p => p.theme.text.familyMono};\n`;\n\nclass RecoveryCodes extends React.Component {\n  static propTypes = {\n    isEnrolled: PropTypes.bool,\n    codes: PropTypes.arrayOf(PropTypes.string),\n    onRegenerateBackupCodes: PropTypes.func.isRequired,\n  };\n\n  printCodes = () => {\n    const iframe = window.frames.printable;\n    iframe.document.write(this.props.codes.join('<br>'));\n    iframe.print();\n    iframe.document.close();\n  };\n\n  render() {\n    const {isEnrolled, codes} = this.props;\n\n    if (!isEnrolled || !codes) {\n      return null;\n    }\n\n    const formattedCodes = codes.join(' \\n');\n\n    return (\n      <Panel css={{marginTop: 30}}>\n        <PanelHeader hasButtons>\n          <Flex align=\"center\">\n            <Box>{t('Unused Codes')}</Box>\n          </Flex>\n          <Flex>\n            <Box ml={1}>\n              <Clipboard hideUnsupported value={formattedCodes}>\n                <Button size=\"small\">\n                  <InlineSvg src=\"icon-copy\" />\n                </Button>\n              </Clipboard>\n            </Box>\n            <Box ml={1}>\n              <Button size=\"small\" onClick={this.printCodes}>\n                <InlineSvg src=\"icon-print\" />\n              </Button>\n            </Box>\n            <Box ml={1}>\n              <Button\n                size=\"small\"\n                download=\"sentry-recovery-codes.txt\"\n                href={`data:text/plain;charset=utf-8,${formattedCodes}`}\n              >\n                <InlineSvg src=\"icon-download\" />\n              </Button>\n            </Box>\n            <Box ml={1}>\n              <Confirm\n                onConfirm={this.props.onRegenerateBackupCodes}\n                message={t(\n                  'Are you sure you want to regenerate recovery codes? Your old codes will no longer work.'\n                )}\n              >\n                <Button priority=\"danger\" size=\"small\">\n                  {t('Regenerate Codes')}\n                </Button>\n              </Confirm>\n            </Box>\n          </Flex>\n        </PanelHeader>\n        <PanelBody>\n          <PanelAlert type=\"warning\">\n            <Flex align=\"center\" ml={1} flex=\"1\">\n              {t(\n                'Make sure to save a copy of your recovery codes and store them in a safe place.'\n              )}\n            </Flex>\n          </PanelAlert>\n          <Box>{!!codes.length && codes.map(code => <Code key={code}>{code}</Code>)}</Box>\n          {!codes.length && (\n            <EmptyMessage>{t('You have no more recovery codes to use')}</EmptyMessage>\n          )}\n        </PanelBody>\n        <iframe name=\"printable\" css={{display: 'none'}} />\n      </Panel>\n    );\n  }\n}\n\nexport default RecoveryCodes;\n","import {Box, Flex} from 'grid-emotion';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {t} from 'app/locale';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport ConfirmHeader from 'app/views/settings/account/accountSecurity/components/confirmHeader';\nimport DateTime from 'app/components/dateTime';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport Tooltip from 'app/components/tooltip';\n\n/**\n * List u2f devices w/ ability to remove a single device\n */\nclass U2fEnrolledDetails extends React.Component {\n  static propTypes = {\n    isEnrolled: PropTypes.bool,\n    id: PropTypes.string,\n    devices: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        timestamp: PropTypes.any,\n      })\n    ),\n    onRemoveU2fDevice: PropTypes.func.isRequired,\n  };\n\n  render() {\n    const {isEnrolled, devices, id, onRemoveU2fDevice} = this.props;\n\n    if (id !== 'u2f' || !isEnrolled) {\n      return null;\n    }\n\n    const hasDevices = devices && devices.length;\n    // Note Tooltip doesn't work because of bootstrap(?) pointer events for disabled buttons\n    const isLastDevice = hasDevices === 1;\n\n    return (\n      <Panel css={{marginTop: 30}}>\n        <PanelHeader>{t('Device name')}</PanelHeader>\n\n        <PanelBody>\n          {!hasDevices && (\n            <EmptyMessage>{t('You have not added any U2F devices')}</EmptyMessage>\n          )}\n          {hasDevices &&\n            devices.map(device => (\n              <PanelItem p={0} key={device.name}>\n                <Flex p={2} pr={0} align=\"center\" flex=\"1\">\n                  <Box flex=\"1\">{device.name}</Box>\n                  <div css={{fontSize: '0.8em', opacity: 0.6}}>\n                    <DateTime date={device.timestamp} />\n                  </div>\n                </Flex>\n\n                <Box p={2}>\n                  <Confirm\n                    onConfirm={() => onRemoveU2fDevice(device)}\n                    disabled={isLastDevice}\n                    message={\n                      <React.Fragment>\n                        <ConfirmHeader>\n                          {t('Do you want to remove U2F device?')}\n                        </ConfirmHeader>\n                        <TextBlock>\n                          {t(\n                            `Are you sure you want to remove the U2F device \"${device.name}\"?`\n                          )}\n                        </TextBlock>\n                      </React.Fragment>\n                    }\n                  >\n                    <Button size=\"small\" priority=\"danger\">\n                      <Tooltip\n                        disabled={!isLastDevice}\n                        title={t('Can not remove last U2F device')}\n                      >\n                        <span className=\"icon icon-trash\" />\n                      </Tooltip>\n                    </Button>\n                  </Confirm>\n                </Box>\n              </PanelItem>\n            ))}\n          <PanelItem justify=\"flex-end\" p={2}>\n            <Button type=\"button\" to=\"/settings/account/security/mfa/u2f/enroll/\">\n              {t('Add Another Device')}\n            </Button>\n          </PanelItem>\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\nexport default U2fEnrolledDetails;\n","/**\n * AccountSecurityDetails is only displayed when user is enrolled in the 2fa method.\n * It displays created + last used time of the 2fa method.\n *\n * Also displays 2fa method specific details.\n */\nimport {Box, Flex} from 'grid-emotion';\nimport {withRouter} from 'react-router';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport Button from 'app/components/button';\nimport CircleIndicator from 'app/components/circleIndicator';\nimport DateTime from 'app/components/dateTime';\nimport RecoveryCodes from 'app/views/settings/account/accountSecurity/components/recoveryCodes';\nimport RemoveConfirm from 'app/views/settings/account/accountSecurity/components/removeConfirm';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport Tooltip from 'app/components/tooltip';\nimport U2fEnrolledDetails from 'app/views/settings/account/accountSecurity/components/u2fEnrolledDetails';\n\nconst ENDPOINT = '/users/me/authenticators/';\n\nconst DateLabel = styled.span`\n  font-weight: bold;\n  margin-right: 6px;\n  width: 100px;\n`;\n\nconst Phone = styled.span`\n  font-weight: bold;\n  margin-left: 6px;\n`;\n\nclass AuthenticatorDate extends React.Component {\n  static propTypes = {\n    label: PropTypes.string,\n    /**\n     * Can be null or a Date object.\n     * Component will have value \"never\" if it is null\n     */\n    date: PropTypes.string,\n  };\n  render() {\n    const {label, date} = this.props;\n\n    return (\n      <Flex mb={1}>\n        <DateLabel>{label}</DateLabel>\n        <Box flex=\"1\">{date ? <DateTime date={date} /> : t('never')}</Box>\n      </Flex>\n    );\n  }\n}\n\nclass AccountSecurityDetails extends AsyncView {\n  static PropTypes = {\n    deleteDisabled: PropTypes.bool.isRequired,\n    onRegenerateBackupCodes: PropTypes.func.isRequired,\n  };\n  constructor(...args) {\n    super(...args);\n    this._form = {};\n  }\n\n  getTitle() {\n    return t('Security');\n  }\n\n  getEndpoints() {\n    return [['authenticator', `${ENDPOINT}${this.props.params.authId}/`]];\n  }\n\n  addError(message) {\n    this.setState({loading: false});\n    addErrorMessage(message);\n  }\n\n  handleRemove = device => {\n    const {authenticator} = this.state;\n\n    if (!authenticator || !authenticator.authId) {\n      return;\n    }\n    const isRemovingU2fDevice = !!device;\n    const deviceId = isRemovingU2fDevice ? `${device.key_handle}/` : '';\n\n    this.setState(\n      {\n        loading: true,\n      },\n      () =>\n        this.api\n          .requestPromise(`${ENDPOINT}${authenticator.authId}/${deviceId}`, {\n            method: 'DELETE',\n          })\n          .then(\n            () => {\n              this.props.router.push('/settings/account/security');\n              const deviceName = isRemovingU2fDevice ? device.name : 'Authenticator';\n              addSuccessMessage(t('%s has been removed', deviceName));\n            },\n            () => {\n              // Error deleting authenticator\n              const deviceName = isRemovingU2fDevice ? device.name : 'authenticator';\n              this.addError(t('Error removing %s', deviceName));\n            }\n          )\n    );\n  };\n\n  handleRemoveU2fDevice = () => {\n    // TODO(billy): Implement me\n  };\n\n  renderBody() {\n    const {authenticator} = this.state;\n    const {deleteDisabled, onRegenerateBackupCodes} = this.props;\n\n    return (\n      <div>\n        <SettingsPageHeader\n          title={\n            <React.Fragment>\n              <span>{authenticator.name}</span>\n              <CircleIndicator css={{marginLeft: 6}} enabled={authenticator.isEnrolled} />\n            </React.Fragment>\n          }\n          action={\n            authenticator.isEnrolled &&\n            authenticator.removeButton && (\n              <Tooltip\n                title={t(\n                  \"Two-factor authentication is required for at least one organization you're a member of.\"\n                )}\n                disabled={!deleteDisabled}\n              >\n                <RemoveConfirm onConfirm={this.handleRemove} disabled={deleteDisabled}>\n                  <Button priority=\"danger\">{authenticator.removeButton}</Button>\n                </RemoveConfirm>\n              </Tooltip>\n            )\n          }\n        />\n\n        <TextBlock>{authenticator.description}</TextBlock>\n        <AuthenticatorDate label={t('Created at')} date={authenticator.createdAt} />\n        <AuthenticatorDate label={t('Last used')} date={authenticator.lastUsedAt} />\n\n        <U2fEnrolledDetails\n          isEnrolled={authenticator.isEnrolled}\n          id={authenticator.id}\n          devices={authenticator.devices}\n          onRemoveU2fDevice={this.handleRemove}\n        />\n\n        {authenticator.isEnrolled &&\n          authenticator.phone && (\n            <div css={{marginTop: 30}}>\n              {t('Confirmation codes are sent to the following phone number')}:\n              <Phone>{authenticator.phone}</Phone>\n            </div>\n          )}\n\n        <RecoveryCodes\n          onRegenerateBackupCodes={onRegenerateBackupCodes}\n          isEnrolled={authenticator.isEnrolled}\n          codes={authenticator.codes}\n        />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(AccountSecurityDetails);\n"],"sourceRoot":""}