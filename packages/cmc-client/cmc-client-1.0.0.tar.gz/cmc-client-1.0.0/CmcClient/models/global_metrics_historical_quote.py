# coding: utf-8

"""
    Coinmarketcap API Swagger Implementation

    Define coinmarketcap's api in swagger 2.0 openapi standard  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GlobalMetricsHistoricalQuote(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_market_cap': 'float',
        'total_volume_24h': 'float',
        'timestamp': 'datetime'
    }

    attribute_map = {
        'total_market_cap': 'total_market_cap',
        'total_volume_24h': 'total_volume_24h',
        'timestamp': 'timestamp'
    }

    def __init__(self, total_market_cap=None, total_volume_24h=None, timestamp=None):  # noqa: E501
        """GlobalMetricsHistoricalQuote - a model defined in Swagger"""  # noqa: E501

        self._total_market_cap = None
        self._total_volume_24h = None
        self._timestamp = None
        self.discriminator = None

        if total_market_cap is not None:
            self.total_market_cap = total_market_cap
        if total_volume_24h is not None:
            self.total_volume_24h = total_volume_24h
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def total_market_cap(self):
        """Gets the total_market_cap of this GlobalMetricsHistoricalQuote.  # noqa: E501


        :return: The total_market_cap of this GlobalMetricsHistoricalQuote.  # noqa: E501
        :rtype: float
        """
        return self._total_market_cap

    @total_market_cap.setter
    def total_market_cap(self, total_market_cap):
        """Sets the total_market_cap of this GlobalMetricsHistoricalQuote.


        :param total_market_cap: The total_market_cap of this GlobalMetricsHistoricalQuote.  # noqa: E501
        :type: float
        """

        self._total_market_cap = total_market_cap

    @property
    def total_volume_24h(self):
        """Gets the total_volume_24h of this GlobalMetricsHistoricalQuote.  # noqa: E501


        :return: The total_volume_24h of this GlobalMetricsHistoricalQuote.  # noqa: E501
        :rtype: float
        """
        return self._total_volume_24h

    @total_volume_24h.setter
    def total_volume_24h(self, total_volume_24h):
        """Sets the total_volume_24h of this GlobalMetricsHistoricalQuote.


        :param total_volume_24h: The total_volume_24h of this GlobalMetricsHistoricalQuote.  # noqa: E501
        :type: float
        """

        self._total_volume_24h = total_volume_24h

    @property
    def timestamp(self):
        """Gets the timestamp of this GlobalMetricsHistoricalQuote.  # noqa: E501


        :return: The timestamp of this GlobalMetricsHistoricalQuote.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this GlobalMetricsHistoricalQuote.


        :param timestamp: The timestamp of this GlobalMetricsHistoricalQuote.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GlobalMetricsHistoricalQuote, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GlobalMetricsHistoricalQuote):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
