# coding: utf-8

"""
    Coinmarketcap API Swagger Implementation

    Define coinmarketcap's api in swagger 2.0 openapi standard  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CryptocurrencyInfoUrls(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'website': 'list[str]',
        'explorer': 'list[str]',
        'source_code': 'list[str]',
        'message_board': 'list[str]',
        'chat': 'list[str]',
        'announcement': 'list[str]',
        'reddit': 'list[str]',
        'twitter': 'list[str]'
    }

    attribute_map = {
        'website': 'website',
        'explorer': 'explorer',
        'source_code': 'source_code',
        'message_board': 'message_board',
        'chat': 'chat',
        'announcement': 'announcement',
        'reddit': 'reddit',
        'twitter': 'twitter'
    }

    def __init__(self, website=None, explorer=None, source_code=None, message_board=None, chat=None, announcement=None, reddit=None, twitter=None):  # noqa: E501
        """CryptocurrencyInfoUrls - a model defined in Swagger"""  # noqa: E501

        self._website = None
        self._explorer = None
        self._source_code = None
        self._message_board = None
        self._chat = None
        self._announcement = None
        self._reddit = None
        self._twitter = None
        self.discriminator = None

        if website is not None:
            self.website = website
        if explorer is not None:
            self.explorer = explorer
        if source_code is not None:
            self.source_code = source_code
        if message_board is not None:
            self.message_board = message_board
        if chat is not None:
            self.chat = chat
        if announcement is not None:
            self.announcement = announcement
        if reddit is not None:
            self.reddit = reddit
        if twitter is not None:
            self.twitter = twitter

    @property
    def website(self):
        """Gets the website of this CryptocurrencyInfoUrls.  # noqa: E501


        :return: The website of this CryptocurrencyInfoUrls.  # noqa: E501
        :rtype: list[str]
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this CryptocurrencyInfoUrls.


        :param website: The website of this CryptocurrencyInfoUrls.  # noqa: E501
        :type: list[str]
        """

        self._website = website

    @property
    def explorer(self):
        """Gets the explorer of this CryptocurrencyInfoUrls.  # noqa: E501


        :return: The explorer of this CryptocurrencyInfoUrls.  # noqa: E501
        :rtype: list[str]
        """
        return self._explorer

    @explorer.setter
    def explorer(self, explorer):
        """Sets the explorer of this CryptocurrencyInfoUrls.


        :param explorer: The explorer of this CryptocurrencyInfoUrls.  # noqa: E501
        :type: list[str]
        """

        self._explorer = explorer

    @property
    def source_code(self):
        """Gets the source_code of this CryptocurrencyInfoUrls.  # noqa: E501


        :return: The source_code of this CryptocurrencyInfoUrls.  # noqa: E501
        :rtype: list[str]
        """
        return self._source_code

    @source_code.setter
    def source_code(self, source_code):
        """Sets the source_code of this CryptocurrencyInfoUrls.


        :param source_code: The source_code of this CryptocurrencyInfoUrls.  # noqa: E501
        :type: list[str]
        """

        self._source_code = source_code

    @property
    def message_board(self):
        """Gets the message_board of this CryptocurrencyInfoUrls.  # noqa: E501


        :return: The message_board of this CryptocurrencyInfoUrls.  # noqa: E501
        :rtype: list[str]
        """
        return self._message_board

    @message_board.setter
    def message_board(self, message_board):
        """Sets the message_board of this CryptocurrencyInfoUrls.


        :param message_board: The message_board of this CryptocurrencyInfoUrls.  # noqa: E501
        :type: list[str]
        """

        self._message_board = message_board

    @property
    def chat(self):
        """Gets the chat of this CryptocurrencyInfoUrls.  # noqa: E501


        :return: The chat of this CryptocurrencyInfoUrls.  # noqa: E501
        :rtype: list[str]
        """
        return self._chat

    @chat.setter
    def chat(self, chat):
        """Sets the chat of this CryptocurrencyInfoUrls.


        :param chat: The chat of this CryptocurrencyInfoUrls.  # noqa: E501
        :type: list[str]
        """

        self._chat = chat

    @property
    def announcement(self):
        """Gets the announcement of this CryptocurrencyInfoUrls.  # noqa: E501


        :return: The announcement of this CryptocurrencyInfoUrls.  # noqa: E501
        :rtype: list[str]
        """
        return self._announcement

    @announcement.setter
    def announcement(self, announcement):
        """Sets the announcement of this CryptocurrencyInfoUrls.


        :param announcement: The announcement of this CryptocurrencyInfoUrls.  # noqa: E501
        :type: list[str]
        """

        self._announcement = announcement

    @property
    def reddit(self):
        """Gets the reddit of this CryptocurrencyInfoUrls.  # noqa: E501


        :return: The reddit of this CryptocurrencyInfoUrls.  # noqa: E501
        :rtype: list[str]
        """
        return self._reddit

    @reddit.setter
    def reddit(self, reddit):
        """Sets the reddit of this CryptocurrencyInfoUrls.


        :param reddit: The reddit of this CryptocurrencyInfoUrls.  # noqa: E501
        :type: list[str]
        """

        self._reddit = reddit

    @property
    def twitter(self):
        """Gets the twitter of this CryptocurrencyInfoUrls.  # noqa: E501


        :return: The twitter of this CryptocurrencyInfoUrls.  # noqa: E501
        :rtype: list[str]
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """Sets the twitter of this CryptocurrencyInfoUrls.


        :param twitter: The twitter of this CryptocurrencyInfoUrls.  # noqa: E501
        :type: list[str]
        """

        self._twitter = twitter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CryptocurrencyInfoUrls, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CryptocurrencyInfoUrls):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
