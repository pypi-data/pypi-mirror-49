# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ExperimentStates(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, preempted=None, queued=None, running=None, failed=None, crashed=None, succeeded=None, aborted=None, initializing=None, creating=None, not_responding=None, waiting=None, cleaning=None):
        """
        ExperimentStates - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'preempted': 'int',
            'queued': 'int',
            'running': 'int',
            'failed': 'int',
            'crashed': 'int',
            'succeeded': 'int',
            'aborted': 'int',
            'initializing': 'int',
            'creating': 'int',
            'not_responding': 'int',
            'waiting': 'int',
            'cleaning': 'int'
        }

        self.attribute_map = {
            'preempted': 'preempted',
            'queued': 'queued',
            'running': 'running',
            'failed': 'failed',
            'crashed': 'crashed',
            'succeeded': 'succeeded',
            'aborted': 'aborted',
            'initializing': 'initializing',
            'creating': 'creating',
            'not_responding': 'notResponding',
            'waiting': 'waiting',
            'cleaning': 'cleaning'
        }

        self._preempted = preempted
        self._queued = queued
        self._running = running
        self._failed = failed
        self._crashed = crashed
        self._succeeded = succeeded
        self._aborted = aborted
        self._initializing = initializing
        self._creating = creating
        self._not_responding = not_responding
        self._waiting = waiting
        self._cleaning = cleaning

    @property
    def preempted(self):
        """
        Gets the preempted of this ExperimentStates.


        :return: The preempted of this ExperimentStates.
        :rtype: int
        """
        return self._preempted

    @preempted.setter
    def preempted(self, preempted):
        """
        Sets the preempted of this ExperimentStates.


        :param preempted: The preempted of this ExperimentStates.
        :type: int
        """
        
        self._preempted = preempted

    @property
    def queued(self):
        """
        Gets the queued of this ExperimentStates.


        :return: The queued of this ExperimentStates.
        :rtype: int
        """
        return self._queued

    @queued.setter
    def queued(self, queued):
        """
        Sets the queued of this ExperimentStates.


        :param queued: The queued of this ExperimentStates.
        :type: int
        """
        
        self._queued = queued

    @property
    def running(self):
        """
        Gets the running of this ExperimentStates.


        :return: The running of this ExperimentStates.
        :rtype: int
        """
        return self._running

    @running.setter
    def running(self, running):
        """
        Sets the running of this ExperimentStates.


        :param running: The running of this ExperimentStates.
        :type: int
        """
        
        self._running = running

    @property
    def failed(self):
        """
        Gets the failed of this ExperimentStates.


        :return: The failed of this ExperimentStates.
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """
        Sets the failed of this ExperimentStates.


        :param failed: The failed of this ExperimentStates.
        :type: int
        """
        
        self._failed = failed

    @property
    def crashed(self):
        """
        Gets the crashed of this ExperimentStates.


        :return: The crashed of this ExperimentStates.
        :rtype: int
        """
        return self._crashed

    @crashed.setter
    def crashed(self, crashed):
        """
        Sets the crashed of this ExperimentStates.


        :param crashed: The crashed of this ExperimentStates.
        :type: int
        """
        
        self._crashed = crashed

    @property
    def succeeded(self):
        """
        Gets the succeeded of this ExperimentStates.


        :return: The succeeded of this ExperimentStates.
        :rtype: int
        """
        return self._succeeded

    @succeeded.setter
    def succeeded(self, succeeded):
        """
        Sets the succeeded of this ExperimentStates.


        :param succeeded: The succeeded of this ExperimentStates.
        :type: int
        """
        
        self._succeeded = succeeded

    @property
    def aborted(self):
        """
        Gets the aborted of this ExperimentStates.


        :return: The aborted of this ExperimentStates.
        :rtype: int
        """
        return self._aborted

    @aborted.setter
    def aborted(self, aborted):
        """
        Sets the aborted of this ExperimentStates.


        :param aborted: The aborted of this ExperimentStates.
        :type: int
        """
        
        self._aborted = aborted

    @property
    def initializing(self):
        """
        Gets the initializing of this ExperimentStates.


        :return: The initializing of this ExperimentStates.
        :rtype: int
        """
        return self._initializing

    @initializing.setter
    def initializing(self, initializing):
        """
        Sets the initializing of this ExperimentStates.


        :param initializing: The initializing of this ExperimentStates.
        :type: int
        """
        
        self._initializing = initializing

    @property
    def creating(self):
        """
        Gets the creating of this ExperimentStates.


        :return: The creating of this ExperimentStates.
        :rtype: int
        """
        return self._creating

    @creating.setter
    def creating(self, creating):
        """
        Sets the creating of this ExperimentStates.


        :param creating: The creating of this ExperimentStates.
        :type: int
        """
        
        self._creating = creating

    @property
    def not_responding(self):
        """
        Gets the not_responding of this ExperimentStates.


        :return: The not_responding of this ExperimentStates.
        :rtype: int
        """
        return self._not_responding

    @not_responding.setter
    def not_responding(self, not_responding):
        """
        Sets the not_responding of this ExperimentStates.


        :param not_responding: The not_responding of this ExperimentStates.
        :type: int
        """
        
        self._not_responding = not_responding

    @property
    def waiting(self):
        """
        Gets the waiting of this ExperimentStates.


        :return: The waiting of this ExperimentStates.
        :rtype: int
        """
        return self._waiting

    @waiting.setter
    def waiting(self, waiting):
        """
        Sets the waiting of this ExperimentStates.


        :param waiting: The waiting of this ExperimentStates.
        :type: int
        """
        
        self._waiting = waiting

    @property
    def cleaning(self):
        """
        Gets the cleaning of this ExperimentStates.


        :return: The cleaning of this ExperimentStates.
        :rtype: int
        """
        return self._cleaning

    @cleaning.setter
    def cleaning(self, cleaning):
        """
        Sets the cleaning of this ExperimentStates.


        :param cleaning: The cleaning of this ExperimentStates.
        :type: int
        """
        
        self._cleaning = cleaning

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




