# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import mission_pb2 as mission__pb2


class MissionServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.UploadMission = channel.unary_unary(
        '/mavsdk.rpc.mission.MissionService/UploadMission',
        request_serializer=mission__pb2.UploadMissionRequest.SerializeToString,
        response_deserializer=mission__pb2.UploadMissionResponse.FromString,
        )
    self.CancelMissionUpload = channel.unary_unary(
        '/mavsdk.rpc.mission.MissionService/CancelMissionUpload',
        request_serializer=mission__pb2.CancelMissionUploadRequest.SerializeToString,
        response_deserializer=mission__pb2.CancelMissionUploadResponse.FromString,
        )
    self.DownloadMission = channel.unary_unary(
        '/mavsdk.rpc.mission.MissionService/DownloadMission',
        request_serializer=mission__pb2.DownloadMissionRequest.SerializeToString,
        response_deserializer=mission__pb2.DownloadMissionResponse.FromString,
        )
    self.CancelMissionDownload = channel.unary_unary(
        '/mavsdk.rpc.mission.MissionService/CancelMissionDownload',
        request_serializer=mission__pb2.CancelMissionDownloadRequest.SerializeToString,
        response_deserializer=mission__pb2.CancelMissionDownloadResponse.FromString,
        )
    self.StartMission = channel.unary_unary(
        '/mavsdk.rpc.mission.MissionService/StartMission',
        request_serializer=mission__pb2.StartMissionRequest.SerializeToString,
        response_deserializer=mission__pb2.StartMissionResponse.FromString,
        )
    self.PauseMission = channel.unary_unary(
        '/mavsdk.rpc.mission.MissionService/PauseMission',
        request_serializer=mission__pb2.PauseMissionRequest.SerializeToString,
        response_deserializer=mission__pb2.PauseMissionResponse.FromString,
        )
    self.SetCurrentMissionItemIndex = channel.unary_unary(
        '/mavsdk.rpc.mission.MissionService/SetCurrentMissionItemIndex',
        request_serializer=mission__pb2.SetCurrentMissionItemIndexRequest.SerializeToString,
        response_deserializer=mission__pb2.SetCurrentMissionItemIndexResponse.FromString,
        )
    self.IsMissionFinished = channel.unary_unary(
        '/mavsdk.rpc.mission.MissionService/IsMissionFinished',
        request_serializer=mission__pb2.IsMissionFinishedRequest.SerializeToString,
        response_deserializer=mission__pb2.IsMissionFinishedResponse.FromString,
        )
    self.SubscribeMissionProgress = channel.unary_stream(
        '/mavsdk.rpc.mission.MissionService/SubscribeMissionProgress',
        request_serializer=mission__pb2.SubscribeMissionProgressRequest.SerializeToString,
        response_deserializer=mission__pb2.MissionProgressResponse.FromString,
        )
    self.GetReturnToLaunchAfterMission = channel.unary_unary(
        '/mavsdk.rpc.mission.MissionService/GetReturnToLaunchAfterMission',
        request_serializer=mission__pb2.GetReturnToLaunchAfterMissionRequest.SerializeToString,
        response_deserializer=mission__pb2.GetReturnToLaunchAfterMissionResponse.FromString,
        )
    self.SetReturnToLaunchAfterMission = channel.unary_unary(
        '/mavsdk.rpc.mission.MissionService/SetReturnToLaunchAfterMission',
        request_serializer=mission__pb2.SetReturnToLaunchAfterMissionRequest.SerializeToString,
        response_deserializer=mission__pb2.SetReturnToLaunchAfterMissionResponse.FromString,
        )


class MissionServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def UploadMission(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CancelMissionUpload(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DownloadMission(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CancelMissionDownload(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StartMission(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PauseMission(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetCurrentMissionItemIndex(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def IsMissionFinished(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SubscribeMissionProgress(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetReturnToLaunchAfterMission(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetReturnToLaunchAfterMission(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MissionServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'UploadMission': grpc.unary_unary_rpc_method_handler(
          servicer.UploadMission,
          request_deserializer=mission__pb2.UploadMissionRequest.FromString,
          response_serializer=mission__pb2.UploadMissionResponse.SerializeToString,
      ),
      'CancelMissionUpload': grpc.unary_unary_rpc_method_handler(
          servicer.CancelMissionUpload,
          request_deserializer=mission__pb2.CancelMissionUploadRequest.FromString,
          response_serializer=mission__pb2.CancelMissionUploadResponse.SerializeToString,
      ),
      'DownloadMission': grpc.unary_unary_rpc_method_handler(
          servicer.DownloadMission,
          request_deserializer=mission__pb2.DownloadMissionRequest.FromString,
          response_serializer=mission__pb2.DownloadMissionResponse.SerializeToString,
      ),
      'CancelMissionDownload': grpc.unary_unary_rpc_method_handler(
          servicer.CancelMissionDownload,
          request_deserializer=mission__pb2.CancelMissionDownloadRequest.FromString,
          response_serializer=mission__pb2.CancelMissionDownloadResponse.SerializeToString,
      ),
      'StartMission': grpc.unary_unary_rpc_method_handler(
          servicer.StartMission,
          request_deserializer=mission__pb2.StartMissionRequest.FromString,
          response_serializer=mission__pb2.StartMissionResponse.SerializeToString,
      ),
      'PauseMission': grpc.unary_unary_rpc_method_handler(
          servicer.PauseMission,
          request_deserializer=mission__pb2.PauseMissionRequest.FromString,
          response_serializer=mission__pb2.PauseMissionResponse.SerializeToString,
      ),
      'SetCurrentMissionItemIndex': grpc.unary_unary_rpc_method_handler(
          servicer.SetCurrentMissionItemIndex,
          request_deserializer=mission__pb2.SetCurrentMissionItemIndexRequest.FromString,
          response_serializer=mission__pb2.SetCurrentMissionItemIndexResponse.SerializeToString,
      ),
      'IsMissionFinished': grpc.unary_unary_rpc_method_handler(
          servicer.IsMissionFinished,
          request_deserializer=mission__pb2.IsMissionFinishedRequest.FromString,
          response_serializer=mission__pb2.IsMissionFinishedResponse.SerializeToString,
      ),
      'SubscribeMissionProgress': grpc.unary_stream_rpc_method_handler(
          servicer.SubscribeMissionProgress,
          request_deserializer=mission__pb2.SubscribeMissionProgressRequest.FromString,
          response_serializer=mission__pb2.MissionProgressResponse.SerializeToString,
      ),
      'GetReturnToLaunchAfterMission': grpc.unary_unary_rpc_method_handler(
          servicer.GetReturnToLaunchAfterMission,
          request_deserializer=mission__pb2.GetReturnToLaunchAfterMissionRequest.FromString,
          response_serializer=mission__pb2.GetReturnToLaunchAfterMissionResponse.SerializeToString,
      ),
      'SetReturnToLaunchAfterMission': grpc.unary_unary_rpc_method_handler(
          servicer.SetReturnToLaunchAfterMission,
          request_deserializer=mission__pb2.SetReturnToLaunchAfterMissionRequest.FromString,
          response_serializer=mission__pb2.SetReturnToLaunchAfterMissionResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'mavsdk.rpc.mission.MissionService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
