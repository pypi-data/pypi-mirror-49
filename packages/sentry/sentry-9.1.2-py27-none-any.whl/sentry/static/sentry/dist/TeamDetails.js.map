{"version":3,"sources":["webpack:///./app/views/settings/organizationTeams/teamDetails.jsx"],"names":["TeamDetails","createReactClass","displayName","propTypes","routes","PropTypes","array","mixins","ApiMixin","Reflux","listenTo","TeamStore","getInitialState","team","getBySlug","this","props","params","teamId","loading","initialized","error","componentWillReceiveProps","nextProps","orgId","setState","fetchData","onTeamStoreUpdate","fetchTeamDetails","api","onTeamChange","data","state","slug","browserHistory","push","concat","_babel_runtime_helpers_objectSpread__WEBPACK_IMPORTED_MODULE_0___default","render","_this$props","children","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","app_components_loadingIndicator__WEBPACK_IMPORTED_MODULE_12__","app_components_loadingError__WEBPACK_IMPORTED_MODULE_11__","onRetry","routePrefix","recreateRoute","stepBack","app_components_idBadge__WEBPACK_IMPORTED_MODULE_9__","hideAvatar","avatarSize","app_components_navTabs__WEBPACK_IMPORTED_MODULE_13__","underlined","app_components_listLink__WEBPACK_IMPORTED_MODULE_10__","to","t","React","cloneElement"],"mappings":"uRAiBMA,EAAcC,IAAiB,CACnCC,YAAa,cAEbC,UAAW,CACTC,OAAQC,IAAUC,OAGpBC,OAAQ,CAACC,UAAUC,IAAOC,SAASC,IAAW,sBAE9CC,gBATmC,WAUjC,IAAMC,EAAOF,IAAUG,UAAUC,KAAKC,MAAMC,OAAOC,QAEnD,MAAO,CACLC,SAAUR,IAAUS,YACpBC,OAAO,EACPR,SAIJS,0BAnBmC,SAmBTC,GACxB,IAAMN,EAASF,KAAKC,MAAMC,OAExBM,EAAUN,OAAOC,SAAWD,EAAOC,QACnCK,EAAUN,OAAOO,QAAUP,EAAOO,OAElCT,KAAKU,SACH,CACEN,SAAS,EACTE,OAAO,GAETN,KAAKW,YAKXC,kBAnCmC,WAoCjC,IAAMd,EAAOF,IAAUG,UAAUC,KAAKC,MAAMC,OAAOC,QAC7CC,GAAWR,IAAUS,YACrBC,GAASF,IAAYN,EAC3BE,KAAKU,SAAS,CACZZ,OACAQ,QACAF,aAIJO,UA9CmC,WA+CjCE,YAAiBb,KAAKc,IAAKd,KAAKC,MAAMC,SAGxCa,aAlDmC,SAkDtBC,GACX,IAAMlB,EAAOE,KAAKiB,MAAMnB,KACxB,GAAIkB,EAAKE,OAASpB,EAAKoB,KAAM,CAC3B,IAAMT,EAAQT,KAAKC,MAAMC,OAAOO,MAChCU,iBAAeC,KAAf,kBAAAC,OAAsCZ,EAAtC,WAAAY,OAAqDL,EAAKE,KAA1D,oBAEAlB,KAAKU,SAAS,CACZZ,KAAMwB,IAAA,GACDxB,EACAkB,MAMXO,OAjEmC,WAiE1B,IAAAC,EAC4BxB,KAAKC,MAAjCC,EADAsB,EACAtB,OAAQb,EADRmC,EACQnC,OAAQoC,EADhBD,EACgBC,SACjB3B,EAAOE,KAAKiB,MAAMnB,KAExB,GAAIE,KAAKiB,MAAMb,QACb,OAAOsB,EAAAC,EAAAC,cAACC,EAAA,QAAD,MACF,IAAK/B,GAAQE,KAAKiB,MAAMX,MAC7B,OAAOoB,EAAAC,EAAAC,cAACE,EAAA,QAAD,CAAcC,QAAS/B,KAAKW,YAGrC,IAAMqB,EAAcC,YAAc,GAAI,CAAC5C,SAAQa,SAAQgC,UAAW,IAElE,OACER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAASC,YAAU,EAACtC,KAAMA,EAAMuC,WAAY,MAG9CX,EAAAC,EAAAC,cAACU,EAAA,QAAD,CAASC,YAAY,GACnBb,EAAAC,EAAAC,cAACY,EAAA,QAAD,CAAUC,GAAE,GAAApB,OAAKW,EAAL,aAA6BU,YAAE,YAC3ChB,EAAAC,EAAAC,cAACY,EAAA,QAAD,CAAUC,GAAE,GAAApB,OAAKW,EAAL,cAA8BU,YAAE,aAC5ChB,EAAAC,EAAAC,cAACY,EAAA,QAAD,CAAUC,GAAE,GAAApB,OAAKW,EAAL,cAA8BU,YAAE,cAG7CjB,GACCkB,IAAMC,aAAanB,EAAU,CAC3B3B,OACAiB,aAAcf,KAAKe,mBAOhB9B","file":"TeamDetails.js","sourcesContent":["import {browserHistory} from 'react-router';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport {fetchTeamDetails} from 'app/actionCreators/teams';\nimport {t} from 'app/locale';\nimport ApiMixin from 'app/mixins/apiMixin';\nimport IdBadge from 'app/components/idBadge';\nimport ListLink from 'app/components/listLink';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport NavTabs from 'app/components/navTabs';\nimport TeamStore from 'app/stores/teamStore';\nimport recreateRoute from 'app/utils/recreateRoute';\n\nconst TeamDetails = createReactClass({\n  displayName: 'TeamDetails',\n\n  propTypes: {\n    routes: PropTypes.array,\n  },\n\n  mixins: [ApiMixin, Reflux.listenTo(TeamStore, 'onTeamStoreUpdate')],\n\n  getInitialState() {\n    const team = TeamStore.getBySlug(this.props.params.teamId);\n\n    return {\n      loading: !TeamStore.initialized,\n      error: false,\n      team,\n    };\n  },\n\n  componentWillReceiveProps(nextProps) {\n    const params = this.props.params;\n    if (\n      nextProps.params.teamId !== params.teamId ||\n      nextProps.params.orgId !== params.orgId\n    ) {\n      this.setState(\n        {\n          loading: true,\n          error: false,\n        },\n        this.fetchData\n      );\n    }\n  },\n\n  onTeamStoreUpdate(...args) {\n    const team = TeamStore.getBySlug(this.props.params.teamId);\n    const loading = !TeamStore.initialized;\n    const error = !loading && !team;\n    this.setState({\n      team,\n      error,\n      loading,\n    });\n  },\n\n  fetchData() {\n    fetchTeamDetails(this.api, this.props.params);\n  },\n\n  onTeamChange(data) {\n    const team = this.state.team;\n    if (data.slug !== team.slug) {\n      const orgId = this.props.params.orgId;\n      browserHistory.push(`/organizations/${orgId}/teams/${data.slug}/settings/`);\n    } else {\n      this.setState({\n        team: {\n          ...team,\n          ...data,\n        },\n      });\n    }\n  },\n\n  render() {\n    const {params, routes, children} = this.props;\n    const team = this.state.team;\n\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    } else if (!team || this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    const routePrefix = recreateRoute('', {routes, params, stepBack: -1}); //`/organizations/${orgId}/teams/${teamId}`;\n\n    return (\n      <div>\n        <h3>\n          <IdBadge hideAvatar team={team} avatarSize={36} />\n        </h3>\n\n        <NavTabs underlined={true}>\n          <ListLink to={`${routePrefix}members/`}>{t('Members')}</ListLink>\n          <ListLink to={`${routePrefix}projects/`}>{t('Projects')}</ListLink>\n          <ListLink to={`${routePrefix}settings/`}>{t('Settings')}</ListLink>\n        </NavTabs>\n\n        {children &&\n          React.cloneElement(children, {\n            team,\n            onTeamChange: this.onTeamChange,\n          })}\n      </div>\n    );\n  },\n});\n\nexport default TeamDetails;\n"],"sourceRoot":""}