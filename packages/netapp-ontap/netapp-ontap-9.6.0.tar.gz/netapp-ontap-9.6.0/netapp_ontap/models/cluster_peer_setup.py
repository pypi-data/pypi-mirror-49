# pylint: disable=trailing-newlines
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=unused-import
# pylint: disable=invalid-name

r"""
Copyright &copy; 2019 NetApp Inc.
All rights reserved.


"""

from marshmallow import EXCLUDE, fields  # type: ignore
from netapp_ontap.resource import Resource, ResourceSchema


__all__ = ["ClusterPeerSetup", "ClusterPeerSetupSchema"]
__pdoc__ = {
    "ClusterPeerSetupSchema.resource": False,
    "ClusterPeerSetup": False,
}


class ClusterPeerSetupSchema(ResourceSchema):
    """The fields of the ClusterPeerSetup object"""

    links = fields.Nested("SelfLinkSchema", unknown=EXCLUDE)
    r""" The links field of the cluster_peer_setup.
 """
    authentication = fields.Nested("ClusterPeerSetupResponseAuthenticationSchema", unknown=EXCLUDE)
    r""" The authentication field of the cluster_peer_setup.
 """
    ip_address = fields.Str()
    r""" A local intercluster IP address that a remote cluster can use, together with the passphrase, to create a cluster peer relationship with the local cluster.
 """
    name = fields.Str()
    r""" Optional name for the cluster peer relationship. By default it is the name of the remote cluster, or a temporary name may be autogenerated for anonymous cluster peer offers.

Example: cluster2 """

    @property
    def resource(self):
        return ClusterPeerSetup

    @property
    def patchable_fields(self):
        return [
            "ip_address",
            "name",
        ]

    @property
    def postable_fields(self):
        return [
            "links",
            "authentication",
            "ip_address",
            "name",
        ]


class ClusterPeerSetup(Resource):  # pylint: disable=missing-docstring

    _schema = ClusterPeerSetupSchema
