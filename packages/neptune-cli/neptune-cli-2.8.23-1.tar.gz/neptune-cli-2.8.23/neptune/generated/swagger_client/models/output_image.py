# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class OutputImage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, description=None, image_url=None, thumbnail_url=None):
        """
        OutputImage - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'description': 'str',
            'image_url': 'str',
            'thumbnail_url': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'image_url': 'imageUrl',
            'thumbnail_url': 'thumbnailUrl'
        }

        self._name = name
        self._description = description
        self._image_url = image_url
        self._thumbnail_url = thumbnail_url

    @property
    def name(self):
        """
        Gets the name of this OutputImage.


        :return: The name of this OutputImage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this OutputImage.


        :param name: The name of this OutputImage.
        :type: str
        """
        
        self._name = name

    @property
    def description(self):
        """
        Gets the description of this OutputImage.


        :return: The description of this OutputImage.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this OutputImage.


        :param description: The description of this OutputImage.
        :type: str
        """
        
        self._description = description

    @property
    def image_url(self):
        """
        Gets the image_url of this OutputImage.


        :return: The image_url of this OutputImage.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """
        Sets the image_url of this OutputImage.


        :param image_url: The image_url of this OutputImage.
        :type: str
        """
        
        self._image_url = image_url

    @property
    def thumbnail_url(self):
        """
        Gets the thumbnail_url of this OutputImage.


        :return: The thumbnail_url of this OutputImage.
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """
        Sets the thumbnail_url of this OutputImage.


        :param thumbnail_url: The thumbnail_url of this OutputImage.
        :type: str
        """
        
        self._thumbnail_url = thumbnail_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




