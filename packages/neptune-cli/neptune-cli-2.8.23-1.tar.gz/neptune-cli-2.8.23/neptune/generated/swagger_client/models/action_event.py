# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ActionEvent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, event_type=None, name=None, timestamp=None, action_id=None, data=None, action_invocation_id=None):
        """
        ActionEvent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'event_type': 'ActionEventType',
            'name': 'str',
            'timestamp': 'datetime',
            'action_id': 'str',
            'data': 'str',
            'action_invocation_id': 'str'
        }

        self.attribute_map = {
            'event_type': 'eventType',
            'name': 'name',
            'timestamp': 'timestamp',
            'action_id': 'actionId',
            'data': 'data',
            'action_invocation_id': 'actionInvocationId'
        }

        self._event_type = event_type
        self._name = name
        self._timestamp = timestamp
        self._action_id = action_id
        self._data = data
        self._action_invocation_id = action_invocation_id

    @property
    def event_type(self):
        """
        Gets the event_type of this ActionEvent.


        :return: The event_type of this ActionEvent.
        :rtype: ActionEventType
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """
        Sets the event_type of this ActionEvent.


        :param event_type: The event_type of this ActionEvent.
        :type: ActionEventType
        """
        
        self._event_type = event_type

    @property
    def name(self):
        """
        Gets the name of this ActionEvent.


        :return: The name of this ActionEvent.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ActionEvent.


        :param name: The name of this ActionEvent.
        :type: str
        """
        
        self._name = name

    @property
    def timestamp(self):
        """
        Gets the timestamp of this ActionEvent.


        :return: The timestamp of this ActionEvent.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this ActionEvent.


        :param timestamp: The timestamp of this ActionEvent.
        :type: datetime
        """
        
        self._timestamp = timestamp

    @property
    def action_id(self):
        """
        Gets the action_id of this ActionEvent.


        :return: The action_id of this ActionEvent.
        :rtype: str
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """
        Sets the action_id of this ActionEvent.


        :param action_id: The action_id of this ActionEvent.
        :type: str
        """
        
        self._action_id = action_id

    @property
    def data(self):
        """
        Gets the data of this ActionEvent.


        :return: The data of this ActionEvent.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this ActionEvent.


        :param data: The data of this ActionEvent.
        :type: str
        """
        
        self._data = data

    @property
    def action_invocation_id(self):
        """
        Gets the action_invocation_id of this ActionEvent.


        :return: The action_invocation_id of this ActionEvent.
        :rtype: str
        """
        return self._action_invocation_id

    @action_invocation_id.setter
    def action_invocation_id(self, action_invocation_id):
        """
        Sets the action_invocation_id of this ActionEvent.


        :param action_invocation_id: The action_invocation_id of this ActionEvent.
        :type: str
        """
        
        self._action_invocation_id = action_invocation_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




