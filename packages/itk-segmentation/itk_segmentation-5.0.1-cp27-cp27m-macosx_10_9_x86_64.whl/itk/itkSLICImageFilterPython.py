# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkSLICImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkSLICImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkSLICImageFilterPython
            return _itkSLICImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkSLICImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkSLICImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkSLICImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImagePython
import stdcomplexPython
import pyBasePython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import ITKCommonBasePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkRGBAPixelPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython

def itkSLICImageFilterVIF3IUS3_New():
  return itkSLICImageFilterVIF3IUS3.New()


def itkSLICImageFilterVIF3IUS3_Superclass_New():
  return itkSLICImageFilterVIF3IUS3_Superclass.New()


def itkSLICImageFilterVIF3IUL3_New():
  return itkSLICImageFilterVIF3IUL3.New()


def itkSLICImageFilterVIF3IUL3_Superclass_New():
  return itkSLICImageFilterVIF3IUL3_Superclass.New()


def itkSLICImageFilterVIUS3IUS3_New():
  return itkSLICImageFilterVIUS3IUS3.New()


def itkSLICImageFilterVIUS3IUS3_Superclass_New():
  return itkSLICImageFilterVIUS3IUS3_Superclass.New()


def itkSLICImageFilterVIUS3IUL3_New():
  return itkSLICImageFilterVIUS3IUL3.New()


def itkSLICImageFilterVIUS3IUL3_Superclass_New():
  return itkSLICImageFilterVIUS3IUL3_Superclass.New()


def itkSLICImageFilterVIUC3IUS3_New():
  return itkSLICImageFilterVIUC3IUS3.New()


def itkSLICImageFilterVIUC3IUS3_Superclass_New():
  return itkSLICImageFilterVIUC3IUS3_Superclass.New()


def itkSLICImageFilterVIUC3IUL3_New():
  return itkSLICImageFilterVIUC3IUL3.New()


def itkSLICImageFilterVIUC3IUL3_Superclass_New():
  return itkSLICImageFilterVIUC3IUL3_Superclass.New()


def itkSLICImageFilterVISS3IUS3_New():
  return itkSLICImageFilterVISS3IUS3.New()


def itkSLICImageFilterVISS3IUS3_Superclass_New():
  return itkSLICImageFilterVISS3IUS3_Superclass.New()


def itkSLICImageFilterVISS3IUL3_New():
  return itkSLICImageFilterVISS3IUL3.New()


def itkSLICImageFilterVISS3IUL3_Superclass_New():
  return itkSLICImageFilterVISS3IUL3_Superclass.New()


def itkSLICImageFilterVIF2IUS2_New():
  return itkSLICImageFilterVIF2IUS2.New()


def itkSLICImageFilterVIF2IUS2_Superclass_New():
  return itkSLICImageFilterVIF2IUS2_Superclass.New()


def itkSLICImageFilterVIF2IUL2_New():
  return itkSLICImageFilterVIF2IUL2.New()


def itkSLICImageFilterVIF2IUL2_Superclass_New():
  return itkSLICImageFilterVIF2IUL2_Superclass.New()


def itkSLICImageFilterVIUS2IUS2_New():
  return itkSLICImageFilterVIUS2IUS2.New()


def itkSLICImageFilterVIUS2IUS2_Superclass_New():
  return itkSLICImageFilterVIUS2IUS2_Superclass.New()


def itkSLICImageFilterVIUS2IUL2_New():
  return itkSLICImageFilterVIUS2IUL2.New()


def itkSLICImageFilterVIUS2IUL2_Superclass_New():
  return itkSLICImageFilterVIUS2IUL2_Superclass.New()


def itkSLICImageFilterVIUC2IUS2_New():
  return itkSLICImageFilterVIUC2IUS2.New()


def itkSLICImageFilterVIUC2IUS2_Superclass_New():
  return itkSLICImageFilterVIUC2IUS2_Superclass.New()


def itkSLICImageFilterVIUC2IUL2_New():
  return itkSLICImageFilterVIUC2IUL2.New()


def itkSLICImageFilterVIUC2IUL2_Superclass_New():
  return itkSLICImageFilterVIUC2IUL2_Superclass.New()


def itkSLICImageFilterVISS2IUS2_New():
  return itkSLICImageFilterVISS2IUS2.New()


def itkSLICImageFilterVISS2IUS2_Superclass_New():
  return itkSLICImageFilterVISS2IUS2_Superclass.New()


def itkSLICImageFilterVISS2IUL2_New():
  return itkSLICImageFilterVISS2IUL2.New()


def itkSLICImageFilterVISS2IUL2_Superclass_New():
  return itkSLICImageFilterVISS2IUL2_Superclass.New()


def itkSLICImageFilterIF3IUS3_New():
  return itkSLICImageFilterIF3IUS3.New()


def itkSLICImageFilterIF3IUS3_Superclass_New():
  return itkSLICImageFilterIF3IUS3_Superclass.New()


def itkSLICImageFilterIF2IUS2_New():
  return itkSLICImageFilterIF2IUS2.New()


def itkSLICImageFilterIF2IUS2_Superclass_New():
  return itkSLICImageFilterIF2IUS2_Superclass.New()


def itkSLICImageFilterIF3IUL3_New():
  return itkSLICImageFilterIF3IUL3.New()


def itkSLICImageFilterIF3IUL3_Superclass_New():
  return itkSLICImageFilterIF3IUL3_Superclass.New()


def itkSLICImageFilterIF2IUL2_New():
  return itkSLICImageFilterIF2IUL2.New()


def itkSLICImageFilterIF2IUL2_Superclass_New():
  return itkSLICImageFilterIF2IUL2_Superclass.New()


def itkSLICImageFilterIUS3IUS3_New():
  return itkSLICImageFilterIUS3IUS3.New()


def itkSLICImageFilterIUS3IUS3_Superclass_New():
  return itkSLICImageFilterIUS3IUS3_Superclass.New()


def itkSLICImageFilterIUS2IUS2_New():
  return itkSLICImageFilterIUS2IUS2.New()


def itkSLICImageFilterIUS2IUS2_Superclass_New():
  return itkSLICImageFilterIUS2IUS2_Superclass.New()


def itkSLICImageFilterIUS3IUL3_New():
  return itkSLICImageFilterIUS3IUL3.New()


def itkSLICImageFilterIUS3IUL3_Superclass_New():
  return itkSLICImageFilterIUS3IUL3_Superclass.New()


def itkSLICImageFilterIUS2IUL2_New():
  return itkSLICImageFilterIUS2IUL2.New()


def itkSLICImageFilterIUS2IUL2_Superclass_New():
  return itkSLICImageFilterIUS2IUL2_Superclass.New()


def itkSLICImageFilterIUC3IUS3_New():
  return itkSLICImageFilterIUC3IUS3.New()


def itkSLICImageFilterIUC3IUS3_Superclass_New():
  return itkSLICImageFilterIUC3IUS3_Superclass.New()


def itkSLICImageFilterIUC2IUS2_New():
  return itkSLICImageFilterIUC2IUS2.New()


def itkSLICImageFilterIUC2IUS2_Superclass_New():
  return itkSLICImageFilterIUC2IUS2_Superclass.New()


def itkSLICImageFilterIUC3IUL3_New():
  return itkSLICImageFilterIUC3IUL3.New()


def itkSLICImageFilterIUC3IUL3_Superclass_New():
  return itkSLICImageFilterIUC3IUL3_Superclass.New()


def itkSLICImageFilterIUC2IUL2_New():
  return itkSLICImageFilterIUC2IUL2.New()


def itkSLICImageFilterIUC2IUL2_Superclass_New():
  return itkSLICImageFilterIUC2IUL2_Superclass.New()


def itkSLICImageFilterISS3IUS3_New():
  return itkSLICImageFilterISS3IUS3.New()


def itkSLICImageFilterISS3IUS3_Superclass_New():
  return itkSLICImageFilterISS3IUS3_Superclass.New()


def itkSLICImageFilterISS2IUS2_New():
  return itkSLICImageFilterISS2IUS2.New()


def itkSLICImageFilterISS2IUS2_Superclass_New():
  return itkSLICImageFilterISS2IUS2_Superclass.New()


def itkSLICImageFilterISS3IUL3_New():
  return itkSLICImageFilterISS3IUL3.New()


def itkSLICImageFilterISS3IUL3_Superclass_New():
  return itkSLICImageFilterISS3IUL3_Superclass.New()


def itkSLICImageFilterISS2IUL2_New():
  return itkSLICImageFilterISS2IUL2.New()


def itkSLICImageFilterISS2IUL2_Superclass_New():
  return itkSLICImageFilterISS2IUL2_Superclass.New()

class itkSLICImageFilterIF2IUL2_Superclass(itkImageSourcePython.itkImageSourceIUL2):
    """Proxy of C++ itkSLICImageFilterIF2IUL2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterIF2IUL2_Superclass self, itkImageF2 image)
        SetInput(itkSLICImageFilterIF2IUL2_Superclass self, unsigned int arg0, itkImageF2 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterIF2IUL2_Superclass self) -> itkImageF2
        GetInput(itkSLICImageFilterIF2IUL2_Superclass self, unsigned int idx) -> itkImageF2
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterIF2IUL2_Superclass self, itkImageF2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterIF2IUL2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterIF2IUL2_Superclass self, itkImageF2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterIF2IUL2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterIF2IUL2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterIF2IUL2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterIF2IUL2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterIF2IUL2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF2IUL2_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterIF2IUL2_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIF2IUL2_Superclass

        Create a new object of the class itkSLICImageFilterIF2IUL2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIF2IUL2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIF2IUL2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterIF2IUL2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterIF2IUL2_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_SetInput, None, itkSLICImageFilterIF2IUL2_Superclass)
itkSLICImageFilterIF2IUL2_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_GetInput, None, itkSLICImageFilterIF2IUL2_Superclass)
itkSLICImageFilterIF2IUL2_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_PushBackInput, None, itkSLICImageFilterIF2IUL2_Superclass)
itkSLICImageFilterIF2IUL2_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_PopBackInput, None, itkSLICImageFilterIF2IUL2_Superclass)
itkSLICImageFilterIF2IUL2_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_PushFrontInput, None, itkSLICImageFilterIF2IUL2_Superclass)
itkSLICImageFilterIF2IUL2_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_PopFrontInput, None, itkSLICImageFilterIF2IUL2_Superclass)
itkSLICImageFilterIF2IUL2_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterIF2IUL2_Superclass)
itkSLICImageFilterIF2IUL2_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterIF2IUL2_Superclass)
itkSLICImageFilterIF2IUL2_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_SetDirectionTolerance, None, itkSLICImageFilterIF2IUL2_Superclass)
itkSLICImageFilterIF2IUL2_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_GetDirectionTolerance, None, itkSLICImageFilterIF2IUL2_Superclass)
itkSLICImageFilterIF2IUL2_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_swigregister
itkSLICImageFilterIF2IUL2_Superclass_swigregister(itkSLICImageFilterIF2IUL2_Superclass)

def itkSLICImageFilterIF2IUL2_Superclass_cast(obj):
    """itkSLICImageFilterIF2IUL2_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterIF2IUL2_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_cast(obj)

class itkSLICImageFilterIF2IUS2_Superclass(itkImageSourcePython.itkImageSourceIUS2):
    """Proxy of C++ itkSLICImageFilterIF2IUS2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterIF2IUS2_Superclass self, itkImageF2 image)
        SetInput(itkSLICImageFilterIF2IUS2_Superclass self, unsigned int arg0, itkImageF2 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterIF2IUS2_Superclass self) -> itkImageF2
        GetInput(itkSLICImageFilterIF2IUS2_Superclass self, unsigned int idx) -> itkImageF2
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterIF2IUS2_Superclass self, itkImageF2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterIF2IUS2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterIF2IUS2_Superclass self, itkImageF2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterIF2IUS2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterIF2IUS2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterIF2IUS2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterIF2IUS2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterIF2IUS2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF2IUS2_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterIF2IUS2_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIF2IUS2_Superclass

        Create a new object of the class itkSLICImageFilterIF2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIF2IUS2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIF2IUS2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterIF2IUS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterIF2IUS2_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_SetInput, None, itkSLICImageFilterIF2IUS2_Superclass)
itkSLICImageFilterIF2IUS2_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_GetInput, None, itkSLICImageFilterIF2IUS2_Superclass)
itkSLICImageFilterIF2IUS2_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_PushBackInput, None, itkSLICImageFilterIF2IUS2_Superclass)
itkSLICImageFilterIF2IUS2_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_PopBackInput, None, itkSLICImageFilterIF2IUS2_Superclass)
itkSLICImageFilterIF2IUS2_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_PushFrontInput, None, itkSLICImageFilterIF2IUS2_Superclass)
itkSLICImageFilterIF2IUS2_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_PopFrontInput, None, itkSLICImageFilterIF2IUS2_Superclass)
itkSLICImageFilterIF2IUS2_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterIF2IUS2_Superclass)
itkSLICImageFilterIF2IUS2_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterIF2IUS2_Superclass)
itkSLICImageFilterIF2IUS2_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_SetDirectionTolerance, None, itkSLICImageFilterIF2IUS2_Superclass)
itkSLICImageFilterIF2IUS2_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_GetDirectionTolerance, None, itkSLICImageFilterIF2IUS2_Superclass)
itkSLICImageFilterIF2IUS2_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_swigregister
itkSLICImageFilterIF2IUS2_Superclass_swigregister(itkSLICImageFilterIF2IUS2_Superclass)

def itkSLICImageFilterIF2IUS2_Superclass_cast(obj):
    """itkSLICImageFilterIF2IUS2_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterIF2IUS2_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_cast(obj)

class itkSLICImageFilterIF3IUL3_Superclass(itkImageSourcePython.itkImageSourceIUL3):
    """Proxy of C++ itkSLICImageFilterIF3IUL3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterIF3IUL3_Superclass self, itkImageF3 image)
        SetInput(itkSLICImageFilterIF3IUL3_Superclass self, unsigned int arg0, itkImageF3 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterIF3IUL3_Superclass self) -> itkImageF3
        GetInput(itkSLICImageFilterIF3IUL3_Superclass self, unsigned int idx) -> itkImageF3
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterIF3IUL3_Superclass self, itkImageF3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterIF3IUL3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterIF3IUL3_Superclass self, itkImageF3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterIF3IUL3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterIF3IUL3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterIF3IUL3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterIF3IUL3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterIF3IUL3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF3IUL3_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterIF3IUL3_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIF3IUL3_Superclass

        Create a new object of the class itkSLICImageFilterIF3IUL3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIF3IUL3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIF3IUL3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterIF3IUL3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterIF3IUL3_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_SetInput, None, itkSLICImageFilterIF3IUL3_Superclass)
itkSLICImageFilterIF3IUL3_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_GetInput, None, itkSLICImageFilterIF3IUL3_Superclass)
itkSLICImageFilterIF3IUL3_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_PushBackInput, None, itkSLICImageFilterIF3IUL3_Superclass)
itkSLICImageFilterIF3IUL3_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_PopBackInput, None, itkSLICImageFilterIF3IUL3_Superclass)
itkSLICImageFilterIF3IUL3_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_PushFrontInput, None, itkSLICImageFilterIF3IUL3_Superclass)
itkSLICImageFilterIF3IUL3_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_PopFrontInput, None, itkSLICImageFilterIF3IUL3_Superclass)
itkSLICImageFilterIF3IUL3_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterIF3IUL3_Superclass)
itkSLICImageFilterIF3IUL3_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterIF3IUL3_Superclass)
itkSLICImageFilterIF3IUL3_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_SetDirectionTolerance, None, itkSLICImageFilterIF3IUL3_Superclass)
itkSLICImageFilterIF3IUL3_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_GetDirectionTolerance, None, itkSLICImageFilterIF3IUL3_Superclass)
itkSLICImageFilterIF3IUL3_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_swigregister
itkSLICImageFilterIF3IUL3_Superclass_swigregister(itkSLICImageFilterIF3IUL3_Superclass)

def itkSLICImageFilterIF3IUL3_Superclass_cast(obj):
    """itkSLICImageFilterIF3IUL3_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterIF3IUL3_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_cast(obj)

class itkSLICImageFilterIF3IUS3_Superclass(itkImageSourcePython.itkImageSourceIUS3):
    """Proxy of C++ itkSLICImageFilterIF3IUS3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterIF3IUS3_Superclass self, itkImageF3 image)
        SetInput(itkSLICImageFilterIF3IUS3_Superclass self, unsigned int arg0, itkImageF3 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterIF3IUS3_Superclass self) -> itkImageF3
        GetInput(itkSLICImageFilterIF3IUS3_Superclass self, unsigned int idx) -> itkImageF3
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterIF3IUS3_Superclass self, itkImageF3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterIF3IUS3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterIF3IUS3_Superclass self, itkImageF3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterIF3IUS3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterIF3IUS3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterIF3IUS3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterIF3IUS3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterIF3IUS3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF3IUS3_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterIF3IUS3_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIF3IUS3_Superclass

        Create a new object of the class itkSLICImageFilterIF3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIF3IUS3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIF3IUS3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterIF3IUS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterIF3IUS3_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_SetInput, None, itkSLICImageFilterIF3IUS3_Superclass)
itkSLICImageFilterIF3IUS3_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_GetInput, None, itkSLICImageFilterIF3IUS3_Superclass)
itkSLICImageFilterIF3IUS3_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_PushBackInput, None, itkSLICImageFilterIF3IUS3_Superclass)
itkSLICImageFilterIF3IUS3_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_PopBackInput, None, itkSLICImageFilterIF3IUS3_Superclass)
itkSLICImageFilterIF3IUS3_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_PushFrontInput, None, itkSLICImageFilterIF3IUS3_Superclass)
itkSLICImageFilterIF3IUS3_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_PopFrontInput, None, itkSLICImageFilterIF3IUS3_Superclass)
itkSLICImageFilterIF3IUS3_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterIF3IUS3_Superclass)
itkSLICImageFilterIF3IUS3_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterIF3IUS3_Superclass)
itkSLICImageFilterIF3IUS3_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_SetDirectionTolerance, None, itkSLICImageFilterIF3IUS3_Superclass)
itkSLICImageFilterIF3IUS3_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_GetDirectionTolerance, None, itkSLICImageFilterIF3IUS3_Superclass)
itkSLICImageFilterIF3IUS3_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_swigregister
itkSLICImageFilterIF3IUS3_Superclass_swigregister(itkSLICImageFilterIF3IUS3_Superclass)

def itkSLICImageFilterIF3IUS3_Superclass_cast(obj):
    """itkSLICImageFilterIF3IUS3_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterIF3IUS3_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_cast(obj)

class itkSLICImageFilterISS2IUL2_Superclass(itkImageSourcePython.itkImageSourceIUL2):
    """Proxy of C++ itkSLICImageFilterISS2IUL2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterISS2IUL2_Superclass self, itkImageSS2 image)
        SetInput(itkSLICImageFilterISS2IUL2_Superclass self, unsigned int arg0, itkImageSS2 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterISS2IUL2_Superclass self) -> itkImageSS2
        GetInput(itkSLICImageFilterISS2IUL2_Superclass self, unsigned int idx) -> itkImageSS2
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterISS2IUL2_Superclass self, itkImageSS2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterISS2IUL2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterISS2IUL2_Superclass self, itkImageSS2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterISS2IUL2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterISS2IUL2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterISS2IUL2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterISS2IUL2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterISS2IUL2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS2IUL2_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterISS2IUL2_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterISS2IUL2_Superclass

        Create a new object of the class itkSLICImageFilterISS2IUL2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterISS2IUL2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterISS2IUL2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterISS2IUL2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterISS2IUL2_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_SetInput, None, itkSLICImageFilterISS2IUL2_Superclass)
itkSLICImageFilterISS2IUL2_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_GetInput, None, itkSLICImageFilterISS2IUL2_Superclass)
itkSLICImageFilterISS2IUL2_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_PushBackInput, None, itkSLICImageFilterISS2IUL2_Superclass)
itkSLICImageFilterISS2IUL2_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_PopBackInput, None, itkSLICImageFilterISS2IUL2_Superclass)
itkSLICImageFilterISS2IUL2_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_PushFrontInput, None, itkSLICImageFilterISS2IUL2_Superclass)
itkSLICImageFilterISS2IUL2_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_PopFrontInput, None, itkSLICImageFilterISS2IUL2_Superclass)
itkSLICImageFilterISS2IUL2_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterISS2IUL2_Superclass)
itkSLICImageFilterISS2IUL2_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterISS2IUL2_Superclass)
itkSLICImageFilterISS2IUL2_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_SetDirectionTolerance, None, itkSLICImageFilterISS2IUL2_Superclass)
itkSLICImageFilterISS2IUL2_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_GetDirectionTolerance, None, itkSLICImageFilterISS2IUL2_Superclass)
itkSLICImageFilterISS2IUL2_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_swigregister
itkSLICImageFilterISS2IUL2_Superclass_swigregister(itkSLICImageFilterISS2IUL2_Superclass)

def itkSLICImageFilterISS2IUL2_Superclass_cast(obj):
    """itkSLICImageFilterISS2IUL2_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterISS2IUL2_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_cast(obj)

class itkSLICImageFilterISS2IUS2_Superclass(itkImageSourcePython.itkImageSourceIUS2):
    """Proxy of C++ itkSLICImageFilterISS2IUS2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterISS2IUS2_Superclass self, itkImageSS2 image)
        SetInput(itkSLICImageFilterISS2IUS2_Superclass self, unsigned int arg0, itkImageSS2 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterISS2IUS2_Superclass self) -> itkImageSS2
        GetInput(itkSLICImageFilterISS2IUS2_Superclass self, unsigned int idx) -> itkImageSS2
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterISS2IUS2_Superclass self, itkImageSS2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterISS2IUS2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterISS2IUS2_Superclass self, itkImageSS2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterISS2IUS2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterISS2IUS2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterISS2IUS2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterISS2IUS2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterISS2IUS2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS2IUS2_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterISS2IUS2_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterISS2IUS2_Superclass

        Create a new object of the class itkSLICImageFilterISS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterISS2IUS2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterISS2IUS2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterISS2IUS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterISS2IUS2_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_SetInput, None, itkSLICImageFilterISS2IUS2_Superclass)
itkSLICImageFilterISS2IUS2_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_GetInput, None, itkSLICImageFilterISS2IUS2_Superclass)
itkSLICImageFilterISS2IUS2_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_PushBackInput, None, itkSLICImageFilterISS2IUS2_Superclass)
itkSLICImageFilterISS2IUS2_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_PopBackInput, None, itkSLICImageFilterISS2IUS2_Superclass)
itkSLICImageFilterISS2IUS2_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_PushFrontInput, None, itkSLICImageFilterISS2IUS2_Superclass)
itkSLICImageFilterISS2IUS2_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_PopFrontInput, None, itkSLICImageFilterISS2IUS2_Superclass)
itkSLICImageFilterISS2IUS2_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterISS2IUS2_Superclass)
itkSLICImageFilterISS2IUS2_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterISS2IUS2_Superclass)
itkSLICImageFilterISS2IUS2_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_SetDirectionTolerance, None, itkSLICImageFilterISS2IUS2_Superclass)
itkSLICImageFilterISS2IUS2_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_GetDirectionTolerance, None, itkSLICImageFilterISS2IUS2_Superclass)
itkSLICImageFilterISS2IUS2_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_swigregister
itkSLICImageFilterISS2IUS2_Superclass_swigregister(itkSLICImageFilterISS2IUS2_Superclass)

def itkSLICImageFilterISS2IUS2_Superclass_cast(obj):
    """itkSLICImageFilterISS2IUS2_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterISS2IUS2_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_cast(obj)

class itkSLICImageFilterISS3IUL3_Superclass(itkImageSourcePython.itkImageSourceIUL3):
    """Proxy of C++ itkSLICImageFilterISS3IUL3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterISS3IUL3_Superclass self, itkImageSS3 image)
        SetInput(itkSLICImageFilterISS3IUL3_Superclass self, unsigned int arg0, itkImageSS3 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterISS3IUL3_Superclass self) -> itkImageSS3
        GetInput(itkSLICImageFilterISS3IUL3_Superclass self, unsigned int idx) -> itkImageSS3
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterISS3IUL3_Superclass self, itkImageSS3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterISS3IUL3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterISS3IUL3_Superclass self, itkImageSS3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterISS3IUL3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterISS3IUL3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterISS3IUL3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterISS3IUL3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterISS3IUL3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS3IUL3_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterISS3IUL3_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterISS3IUL3_Superclass

        Create a new object of the class itkSLICImageFilterISS3IUL3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterISS3IUL3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterISS3IUL3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterISS3IUL3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterISS3IUL3_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_SetInput, None, itkSLICImageFilterISS3IUL3_Superclass)
itkSLICImageFilterISS3IUL3_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_GetInput, None, itkSLICImageFilterISS3IUL3_Superclass)
itkSLICImageFilterISS3IUL3_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_PushBackInput, None, itkSLICImageFilterISS3IUL3_Superclass)
itkSLICImageFilterISS3IUL3_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_PopBackInput, None, itkSLICImageFilterISS3IUL3_Superclass)
itkSLICImageFilterISS3IUL3_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_PushFrontInput, None, itkSLICImageFilterISS3IUL3_Superclass)
itkSLICImageFilterISS3IUL3_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_PopFrontInput, None, itkSLICImageFilterISS3IUL3_Superclass)
itkSLICImageFilterISS3IUL3_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterISS3IUL3_Superclass)
itkSLICImageFilterISS3IUL3_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterISS3IUL3_Superclass)
itkSLICImageFilterISS3IUL3_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_SetDirectionTolerance, None, itkSLICImageFilterISS3IUL3_Superclass)
itkSLICImageFilterISS3IUL3_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_GetDirectionTolerance, None, itkSLICImageFilterISS3IUL3_Superclass)
itkSLICImageFilterISS3IUL3_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_swigregister
itkSLICImageFilterISS3IUL3_Superclass_swigregister(itkSLICImageFilterISS3IUL3_Superclass)

def itkSLICImageFilterISS3IUL3_Superclass_cast(obj):
    """itkSLICImageFilterISS3IUL3_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterISS3IUL3_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_cast(obj)

class itkSLICImageFilterISS3IUS3_Superclass(itkImageSourcePython.itkImageSourceIUS3):
    """Proxy of C++ itkSLICImageFilterISS3IUS3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterISS3IUS3_Superclass self, itkImageSS3 image)
        SetInput(itkSLICImageFilterISS3IUS3_Superclass self, unsigned int arg0, itkImageSS3 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterISS3IUS3_Superclass self) -> itkImageSS3
        GetInput(itkSLICImageFilterISS3IUS3_Superclass self, unsigned int idx) -> itkImageSS3
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterISS3IUS3_Superclass self, itkImageSS3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterISS3IUS3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterISS3IUS3_Superclass self, itkImageSS3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterISS3IUS3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterISS3IUS3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterISS3IUS3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterISS3IUS3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterISS3IUS3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS3IUS3_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterISS3IUS3_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterISS3IUS3_Superclass

        Create a new object of the class itkSLICImageFilterISS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterISS3IUS3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterISS3IUS3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterISS3IUS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterISS3IUS3_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_SetInput, None, itkSLICImageFilterISS3IUS3_Superclass)
itkSLICImageFilterISS3IUS3_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_GetInput, None, itkSLICImageFilterISS3IUS3_Superclass)
itkSLICImageFilterISS3IUS3_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_PushBackInput, None, itkSLICImageFilterISS3IUS3_Superclass)
itkSLICImageFilterISS3IUS3_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_PopBackInput, None, itkSLICImageFilterISS3IUS3_Superclass)
itkSLICImageFilterISS3IUS3_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_PushFrontInput, None, itkSLICImageFilterISS3IUS3_Superclass)
itkSLICImageFilterISS3IUS3_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_PopFrontInput, None, itkSLICImageFilterISS3IUS3_Superclass)
itkSLICImageFilterISS3IUS3_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterISS3IUS3_Superclass)
itkSLICImageFilterISS3IUS3_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterISS3IUS3_Superclass)
itkSLICImageFilterISS3IUS3_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_SetDirectionTolerance, None, itkSLICImageFilterISS3IUS3_Superclass)
itkSLICImageFilterISS3IUS3_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_GetDirectionTolerance, None, itkSLICImageFilterISS3IUS3_Superclass)
itkSLICImageFilterISS3IUS3_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_swigregister
itkSLICImageFilterISS3IUS3_Superclass_swigregister(itkSLICImageFilterISS3IUS3_Superclass)

def itkSLICImageFilterISS3IUS3_Superclass_cast(obj):
    """itkSLICImageFilterISS3IUS3_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterISS3IUS3_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_cast(obj)

class itkSLICImageFilterIUC2IUL2_Superclass(itkImageSourcePython.itkImageSourceIUL2):
    """Proxy of C++ itkSLICImageFilterIUC2IUL2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterIUC2IUL2_Superclass self, itkImageUC2 image)
        SetInput(itkSLICImageFilterIUC2IUL2_Superclass self, unsigned int arg0, itkImageUC2 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterIUC2IUL2_Superclass self) -> itkImageUC2
        GetInput(itkSLICImageFilterIUC2IUL2_Superclass self, unsigned int idx) -> itkImageUC2
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterIUC2IUL2_Superclass self, itkImageUC2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterIUC2IUL2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterIUC2IUL2_Superclass self, itkImageUC2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterIUC2IUL2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterIUC2IUL2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterIUC2IUL2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterIUC2IUL2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterIUC2IUL2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC2IUL2_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterIUC2IUL2_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUC2IUL2_Superclass

        Create a new object of the class itkSLICImageFilterIUC2IUL2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUC2IUL2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUC2IUL2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterIUC2IUL2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterIUC2IUL2_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_SetInput, None, itkSLICImageFilterIUC2IUL2_Superclass)
itkSLICImageFilterIUC2IUL2_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_GetInput, None, itkSLICImageFilterIUC2IUL2_Superclass)
itkSLICImageFilterIUC2IUL2_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_PushBackInput, None, itkSLICImageFilterIUC2IUL2_Superclass)
itkSLICImageFilterIUC2IUL2_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_PopBackInput, None, itkSLICImageFilterIUC2IUL2_Superclass)
itkSLICImageFilterIUC2IUL2_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_PushFrontInput, None, itkSLICImageFilterIUC2IUL2_Superclass)
itkSLICImageFilterIUC2IUL2_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_PopFrontInput, None, itkSLICImageFilterIUC2IUL2_Superclass)
itkSLICImageFilterIUC2IUL2_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterIUC2IUL2_Superclass)
itkSLICImageFilterIUC2IUL2_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterIUC2IUL2_Superclass)
itkSLICImageFilterIUC2IUL2_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_SetDirectionTolerance, None, itkSLICImageFilterIUC2IUL2_Superclass)
itkSLICImageFilterIUC2IUL2_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_GetDirectionTolerance, None, itkSLICImageFilterIUC2IUL2_Superclass)
itkSLICImageFilterIUC2IUL2_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_swigregister
itkSLICImageFilterIUC2IUL2_Superclass_swigregister(itkSLICImageFilterIUC2IUL2_Superclass)

def itkSLICImageFilterIUC2IUL2_Superclass_cast(obj):
    """itkSLICImageFilterIUC2IUL2_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterIUC2IUL2_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_cast(obj)

class itkSLICImageFilterIUC2IUS2_Superclass(itkImageSourcePython.itkImageSourceIUS2):
    """Proxy of C++ itkSLICImageFilterIUC2IUS2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterIUC2IUS2_Superclass self, itkImageUC2 image)
        SetInput(itkSLICImageFilterIUC2IUS2_Superclass self, unsigned int arg0, itkImageUC2 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterIUC2IUS2_Superclass self) -> itkImageUC2
        GetInput(itkSLICImageFilterIUC2IUS2_Superclass self, unsigned int idx) -> itkImageUC2
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterIUC2IUS2_Superclass self, itkImageUC2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterIUC2IUS2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterIUC2IUS2_Superclass self, itkImageUC2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterIUC2IUS2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterIUC2IUS2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterIUC2IUS2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterIUC2IUS2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterIUC2IUS2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC2IUS2_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterIUC2IUS2_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUC2IUS2_Superclass

        Create a new object of the class itkSLICImageFilterIUC2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUC2IUS2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUC2IUS2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterIUC2IUS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterIUC2IUS2_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_SetInput, None, itkSLICImageFilterIUC2IUS2_Superclass)
itkSLICImageFilterIUC2IUS2_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_GetInput, None, itkSLICImageFilterIUC2IUS2_Superclass)
itkSLICImageFilterIUC2IUS2_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_PushBackInput, None, itkSLICImageFilterIUC2IUS2_Superclass)
itkSLICImageFilterIUC2IUS2_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_PopBackInput, None, itkSLICImageFilterIUC2IUS2_Superclass)
itkSLICImageFilterIUC2IUS2_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_PushFrontInput, None, itkSLICImageFilterIUC2IUS2_Superclass)
itkSLICImageFilterIUC2IUS2_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_PopFrontInput, None, itkSLICImageFilterIUC2IUS2_Superclass)
itkSLICImageFilterIUC2IUS2_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterIUC2IUS2_Superclass)
itkSLICImageFilterIUC2IUS2_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterIUC2IUS2_Superclass)
itkSLICImageFilterIUC2IUS2_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_SetDirectionTolerance, None, itkSLICImageFilterIUC2IUS2_Superclass)
itkSLICImageFilterIUC2IUS2_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_GetDirectionTolerance, None, itkSLICImageFilterIUC2IUS2_Superclass)
itkSLICImageFilterIUC2IUS2_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_swigregister
itkSLICImageFilterIUC2IUS2_Superclass_swigregister(itkSLICImageFilterIUC2IUS2_Superclass)

def itkSLICImageFilterIUC2IUS2_Superclass_cast(obj):
    """itkSLICImageFilterIUC2IUS2_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterIUC2IUS2_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_cast(obj)

class itkSLICImageFilterIUC3IUL3_Superclass(itkImageSourcePython.itkImageSourceIUL3):
    """Proxy of C++ itkSLICImageFilterIUC3IUL3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterIUC3IUL3_Superclass self, itkImageUC3 image)
        SetInput(itkSLICImageFilterIUC3IUL3_Superclass self, unsigned int arg0, itkImageUC3 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterIUC3IUL3_Superclass self) -> itkImageUC3
        GetInput(itkSLICImageFilterIUC3IUL3_Superclass self, unsigned int idx) -> itkImageUC3
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterIUC3IUL3_Superclass self, itkImageUC3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterIUC3IUL3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterIUC3IUL3_Superclass self, itkImageUC3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterIUC3IUL3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterIUC3IUL3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterIUC3IUL3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterIUC3IUL3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterIUC3IUL3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC3IUL3_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterIUC3IUL3_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUC3IUL3_Superclass

        Create a new object of the class itkSLICImageFilterIUC3IUL3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUC3IUL3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUC3IUL3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterIUC3IUL3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterIUC3IUL3_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_SetInput, None, itkSLICImageFilterIUC3IUL3_Superclass)
itkSLICImageFilterIUC3IUL3_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_GetInput, None, itkSLICImageFilterIUC3IUL3_Superclass)
itkSLICImageFilterIUC3IUL3_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_PushBackInput, None, itkSLICImageFilterIUC3IUL3_Superclass)
itkSLICImageFilterIUC3IUL3_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_PopBackInput, None, itkSLICImageFilterIUC3IUL3_Superclass)
itkSLICImageFilterIUC3IUL3_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_PushFrontInput, None, itkSLICImageFilterIUC3IUL3_Superclass)
itkSLICImageFilterIUC3IUL3_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_PopFrontInput, None, itkSLICImageFilterIUC3IUL3_Superclass)
itkSLICImageFilterIUC3IUL3_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterIUC3IUL3_Superclass)
itkSLICImageFilterIUC3IUL3_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterIUC3IUL3_Superclass)
itkSLICImageFilterIUC3IUL3_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_SetDirectionTolerance, None, itkSLICImageFilterIUC3IUL3_Superclass)
itkSLICImageFilterIUC3IUL3_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_GetDirectionTolerance, None, itkSLICImageFilterIUC3IUL3_Superclass)
itkSLICImageFilterIUC3IUL3_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_swigregister
itkSLICImageFilterIUC3IUL3_Superclass_swigregister(itkSLICImageFilterIUC3IUL3_Superclass)

def itkSLICImageFilterIUC3IUL3_Superclass_cast(obj):
    """itkSLICImageFilterIUC3IUL3_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterIUC3IUL3_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_cast(obj)

class itkSLICImageFilterIUC3IUS3_Superclass(itkImageSourcePython.itkImageSourceIUS3):
    """Proxy of C++ itkSLICImageFilterIUC3IUS3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterIUC3IUS3_Superclass self, itkImageUC3 image)
        SetInput(itkSLICImageFilterIUC3IUS3_Superclass self, unsigned int arg0, itkImageUC3 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterIUC3IUS3_Superclass self) -> itkImageUC3
        GetInput(itkSLICImageFilterIUC3IUS3_Superclass self, unsigned int idx) -> itkImageUC3
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterIUC3IUS3_Superclass self, itkImageUC3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterIUC3IUS3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterIUC3IUS3_Superclass self, itkImageUC3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterIUC3IUS3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterIUC3IUS3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterIUC3IUS3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterIUC3IUS3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterIUC3IUS3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC3IUS3_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterIUC3IUS3_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUC3IUS3_Superclass

        Create a new object of the class itkSLICImageFilterIUC3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUC3IUS3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUC3IUS3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterIUC3IUS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterIUC3IUS3_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_SetInput, None, itkSLICImageFilterIUC3IUS3_Superclass)
itkSLICImageFilterIUC3IUS3_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_GetInput, None, itkSLICImageFilterIUC3IUS3_Superclass)
itkSLICImageFilterIUC3IUS3_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_PushBackInput, None, itkSLICImageFilterIUC3IUS3_Superclass)
itkSLICImageFilterIUC3IUS3_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_PopBackInput, None, itkSLICImageFilterIUC3IUS3_Superclass)
itkSLICImageFilterIUC3IUS3_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_PushFrontInput, None, itkSLICImageFilterIUC3IUS3_Superclass)
itkSLICImageFilterIUC3IUS3_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_PopFrontInput, None, itkSLICImageFilterIUC3IUS3_Superclass)
itkSLICImageFilterIUC3IUS3_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterIUC3IUS3_Superclass)
itkSLICImageFilterIUC3IUS3_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterIUC3IUS3_Superclass)
itkSLICImageFilterIUC3IUS3_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_SetDirectionTolerance, None, itkSLICImageFilterIUC3IUS3_Superclass)
itkSLICImageFilterIUC3IUS3_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_GetDirectionTolerance, None, itkSLICImageFilterIUC3IUS3_Superclass)
itkSLICImageFilterIUC3IUS3_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_swigregister
itkSLICImageFilterIUC3IUS3_Superclass_swigregister(itkSLICImageFilterIUC3IUS3_Superclass)

def itkSLICImageFilterIUC3IUS3_Superclass_cast(obj):
    """itkSLICImageFilterIUC3IUS3_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterIUC3IUS3_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_cast(obj)

class itkSLICImageFilterIUS2IUL2_Superclass(itkImageSourcePython.itkImageSourceIUL2):
    """Proxy of C++ itkSLICImageFilterIUS2IUL2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterIUS2IUL2_Superclass self, itkImageUS2 image)
        SetInput(itkSLICImageFilterIUS2IUL2_Superclass self, unsigned int arg0, itkImageUS2 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterIUS2IUL2_Superclass self) -> itkImageUS2
        GetInput(itkSLICImageFilterIUS2IUL2_Superclass self, unsigned int idx) -> itkImageUS2
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterIUS2IUL2_Superclass self, itkImageUS2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterIUS2IUL2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterIUS2IUL2_Superclass self, itkImageUS2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterIUS2IUL2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterIUS2IUL2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterIUS2IUL2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterIUS2IUL2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterIUS2IUL2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS2IUL2_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterIUS2IUL2_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUS2IUL2_Superclass

        Create a new object of the class itkSLICImageFilterIUS2IUL2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUS2IUL2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUS2IUL2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterIUS2IUL2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterIUS2IUL2_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_SetInput, None, itkSLICImageFilterIUS2IUL2_Superclass)
itkSLICImageFilterIUS2IUL2_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_GetInput, None, itkSLICImageFilterIUS2IUL2_Superclass)
itkSLICImageFilterIUS2IUL2_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_PushBackInput, None, itkSLICImageFilterIUS2IUL2_Superclass)
itkSLICImageFilterIUS2IUL2_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_PopBackInput, None, itkSLICImageFilterIUS2IUL2_Superclass)
itkSLICImageFilterIUS2IUL2_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_PushFrontInput, None, itkSLICImageFilterIUS2IUL2_Superclass)
itkSLICImageFilterIUS2IUL2_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_PopFrontInput, None, itkSLICImageFilterIUS2IUL2_Superclass)
itkSLICImageFilterIUS2IUL2_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterIUS2IUL2_Superclass)
itkSLICImageFilterIUS2IUL2_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterIUS2IUL2_Superclass)
itkSLICImageFilterIUS2IUL2_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_SetDirectionTolerance, None, itkSLICImageFilterIUS2IUL2_Superclass)
itkSLICImageFilterIUS2IUL2_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_GetDirectionTolerance, None, itkSLICImageFilterIUS2IUL2_Superclass)
itkSLICImageFilterIUS2IUL2_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_swigregister
itkSLICImageFilterIUS2IUL2_Superclass_swigregister(itkSLICImageFilterIUS2IUL2_Superclass)

def itkSLICImageFilterIUS2IUL2_Superclass_cast(obj):
    """itkSLICImageFilterIUS2IUL2_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterIUS2IUL2_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_cast(obj)

class itkSLICImageFilterIUS2IUS2_Superclass(itkImageSourcePython.itkImageSourceIUS2):
    """Proxy of C++ itkSLICImageFilterIUS2IUS2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterIUS2IUS2_Superclass self, itkImageUS2 image)
        SetInput(itkSLICImageFilterIUS2IUS2_Superclass self, unsigned int arg0, itkImageUS2 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterIUS2IUS2_Superclass self) -> itkImageUS2
        GetInput(itkSLICImageFilterIUS2IUS2_Superclass self, unsigned int idx) -> itkImageUS2
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterIUS2IUS2_Superclass self, itkImageUS2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterIUS2IUS2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterIUS2IUS2_Superclass self, itkImageUS2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterIUS2IUS2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterIUS2IUS2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterIUS2IUS2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterIUS2IUS2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterIUS2IUS2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS2IUS2_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterIUS2IUS2_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUS2IUS2_Superclass

        Create a new object of the class itkSLICImageFilterIUS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUS2IUS2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUS2IUS2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterIUS2IUS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterIUS2IUS2_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_SetInput, None, itkSLICImageFilterIUS2IUS2_Superclass)
itkSLICImageFilterIUS2IUS2_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_GetInput, None, itkSLICImageFilterIUS2IUS2_Superclass)
itkSLICImageFilterIUS2IUS2_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_PushBackInput, None, itkSLICImageFilterIUS2IUS2_Superclass)
itkSLICImageFilterIUS2IUS2_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_PopBackInput, None, itkSLICImageFilterIUS2IUS2_Superclass)
itkSLICImageFilterIUS2IUS2_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_PushFrontInput, None, itkSLICImageFilterIUS2IUS2_Superclass)
itkSLICImageFilterIUS2IUS2_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_PopFrontInput, None, itkSLICImageFilterIUS2IUS2_Superclass)
itkSLICImageFilterIUS2IUS2_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterIUS2IUS2_Superclass)
itkSLICImageFilterIUS2IUS2_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterIUS2IUS2_Superclass)
itkSLICImageFilterIUS2IUS2_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_SetDirectionTolerance, None, itkSLICImageFilterIUS2IUS2_Superclass)
itkSLICImageFilterIUS2IUS2_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_GetDirectionTolerance, None, itkSLICImageFilterIUS2IUS2_Superclass)
itkSLICImageFilterIUS2IUS2_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_swigregister
itkSLICImageFilterIUS2IUS2_Superclass_swigregister(itkSLICImageFilterIUS2IUS2_Superclass)

def itkSLICImageFilterIUS2IUS2_Superclass_cast(obj):
    """itkSLICImageFilterIUS2IUS2_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterIUS2IUS2_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_cast(obj)

class itkSLICImageFilterIUS3IUL3_Superclass(itkImageSourcePython.itkImageSourceIUL3):
    """Proxy of C++ itkSLICImageFilterIUS3IUL3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterIUS3IUL3_Superclass self, itkImageUS3 image)
        SetInput(itkSLICImageFilterIUS3IUL3_Superclass self, unsigned int arg0, itkImageUS3 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterIUS3IUL3_Superclass self) -> itkImageUS3
        GetInput(itkSLICImageFilterIUS3IUL3_Superclass self, unsigned int idx) -> itkImageUS3
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterIUS3IUL3_Superclass self, itkImageUS3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterIUS3IUL3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterIUS3IUL3_Superclass self, itkImageUS3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterIUS3IUL3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterIUS3IUL3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterIUS3IUL3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterIUS3IUL3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterIUS3IUL3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS3IUL3_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterIUS3IUL3_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUS3IUL3_Superclass

        Create a new object of the class itkSLICImageFilterIUS3IUL3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUS3IUL3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUS3IUL3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterIUS3IUL3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterIUS3IUL3_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_SetInput, None, itkSLICImageFilterIUS3IUL3_Superclass)
itkSLICImageFilterIUS3IUL3_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_GetInput, None, itkSLICImageFilterIUS3IUL3_Superclass)
itkSLICImageFilterIUS3IUL3_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_PushBackInput, None, itkSLICImageFilterIUS3IUL3_Superclass)
itkSLICImageFilterIUS3IUL3_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_PopBackInput, None, itkSLICImageFilterIUS3IUL3_Superclass)
itkSLICImageFilterIUS3IUL3_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_PushFrontInput, None, itkSLICImageFilterIUS3IUL3_Superclass)
itkSLICImageFilterIUS3IUL3_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_PopFrontInput, None, itkSLICImageFilterIUS3IUL3_Superclass)
itkSLICImageFilterIUS3IUL3_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterIUS3IUL3_Superclass)
itkSLICImageFilterIUS3IUL3_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterIUS3IUL3_Superclass)
itkSLICImageFilterIUS3IUL3_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_SetDirectionTolerance, None, itkSLICImageFilterIUS3IUL3_Superclass)
itkSLICImageFilterIUS3IUL3_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_GetDirectionTolerance, None, itkSLICImageFilterIUS3IUL3_Superclass)
itkSLICImageFilterIUS3IUL3_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_swigregister
itkSLICImageFilterIUS3IUL3_Superclass_swigregister(itkSLICImageFilterIUS3IUL3_Superclass)

def itkSLICImageFilterIUS3IUL3_Superclass_cast(obj):
    """itkSLICImageFilterIUS3IUL3_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterIUS3IUL3_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_cast(obj)

class itkSLICImageFilterIUS3IUS3_Superclass(itkImageSourcePython.itkImageSourceIUS3):
    """Proxy of C++ itkSLICImageFilterIUS3IUS3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterIUS3IUS3_Superclass self, itkImageUS3 image)
        SetInput(itkSLICImageFilterIUS3IUS3_Superclass self, unsigned int arg0, itkImageUS3 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterIUS3IUS3_Superclass self) -> itkImageUS3
        GetInput(itkSLICImageFilterIUS3IUS3_Superclass self, unsigned int idx) -> itkImageUS3
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterIUS3IUS3_Superclass self, itkImageUS3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterIUS3IUS3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterIUS3IUS3_Superclass self, itkImageUS3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterIUS3IUS3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterIUS3IUS3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterIUS3IUS3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterIUS3IUS3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterIUS3IUS3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS3IUS3_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterIUS3IUS3_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUS3IUS3_Superclass

        Create a new object of the class itkSLICImageFilterIUS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUS3IUS3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUS3IUS3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterIUS3IUS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterIUS3IUS3_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_SetInput, None, itkSLICImageFilterIUS3IUS3_Superclass)
itkSLICImageFilterIUS3IUS3_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_GetInput, None, itkSLICImageFilterIUS3IUS3_Superclass)
itkSLICImageFilterIUS3IUS3_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_PushBackInput, None, itkSLICImageFilterIUS3IUS3_Superclass)
itkSLICImageFilterIUS3IUS3_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_PopBackInput, None, itkSLICImageFilterIUS3IUS3_Superclass)
itkSLICImageFilterIUS3IUS3_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_PushFrontInput, None, itkSLICImageFilterIUS3IUS3_Superclass)
itkSLICImageFilterIUS3IUS3_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_PopFrontInput, None, itkSLICImageFilterIUS3IUS3_Superclass)
itkSLICImageFilterIUS3IUS3_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterIUS3IUS3_Superclass)
itkSLICImageFilterIUS3IUS3_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterIUS3IUS3_Superclass)
itkSLICImageFilterIUS3IUS3_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_SetDirectionTolerance, None, itkSLICImageFilterIUS3IUS3_Superclass)
itkSLICImageFilterIUS3IUS3_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_GetDirectionTolerance, None, itkSLICImageFilterIUS3IUS3_Superclass)
itkSLICImageFilterIUS3IUS3_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_swigregister
itkSLICImageFilterIUS3IUS3_Superclass_swigregister(itkSLICImageFilterIUS3IUS3_Superclass)

def itkSLICImageFilterIUS3IUS3_Superclass_cast(obj):
    """itkSLICImageFilterIUS3IUS3_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterIUS3IUS3_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_cast(obj)

class itkSLICImageFilterVIF2IUL2_Superclass(itkImageSourcePython.itkImageSourceIUL2):
    """Proxy of C++ itkSLICImageFilterVIF2IUL2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterVIF2IUL2_Superclass self, itkVectorImageF2 image)
        SetInput(itkSLICImageFilterVIF2IUL2_Superclass self, unsigned int arg0, itkVectorImageF2 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterVIF2IUL2_Superclass self) -> itkVectorImageF2
        GetInput(itkSLICImageFilterVIF2IUL2_Superclass self, unsigned int idx) -> itkVectorImageF2
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterVIF2IUL2_Superclass self, itkVectorImageF2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterVIF2IUL2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterVIF2IUL2_Superclass self, itkVectorImageF2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterVIF2IUL2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterVIF2IUL2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterVIF2IUL2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterVIF2IUL2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterVIF2IUL2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF2IUL2_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVIF2IUL2_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIF2IUL2_Superclass

        Create a new object of the class itkSLICImageFilterVIF2IUL2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIF2IUL2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIF2IUL2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVIF2IUL2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVIF2IUL2_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_SetInput, None, itkSLICImageFilterVIF2IUL2_Superclass)
itkSLICImageFilterVIF2IUL2_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_GetInput, None, itkSLICImageFilterVIF2IUL2_Superclass)
itkSLICImageFilterVIF2IUL2_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_PushBackInput, None, itkSLICImageFilterVIF2IUL2_Superclass)
itkSLICImageFilterVIF2IUL2_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_PopBackInput, None, itkSLICImageFilterVIF2IUL2_Superclass)
itkSLICImageFilterVIF2IUL2_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_PushFrontInput, None, itkSLICImageFilterVIF2IUL2_Superclass)
itkSLICImageFilterVIF2IUL2_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_PopFrontInput, None, itkSLICImageFilterVIF2IUL2_Superclass)
itkSLICImageFilterVIF2IUL2_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterVIF2IUL2_Superclass)
itkSLICImageFilterVIF2IUL2_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterVIF2IUL2_Superclass)
itkSLICImageFilterVIF2IUL2_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_SetDirectionTolerance, None, itkSLICImageFilterVIF2IUL2_Superclass)
itkSLICImageFilterVIF2IUL2_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_GetDirectionTolerance, None, itkSLICImageFilterVIF2IUL2_Superclass)
itkSLICImageFilterVIF2IUL2_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_swigregister
itkSLICImageFilterVIF2IUL2_Superclass_swigregister(itkSLICImageFilterVIF2IUL2_Superclass)

def itkSLICImageFilterVIF2IUL2_Superclass_cast(obj):
    """itkSLICImageFilterVIF2IUL2_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterVIF2IUL2_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_cast(obj)

class itkSLICImageFilterVIF2IUS2_Superclass(itkImageSourcePython.itkImageSourceIUS2):
    """Proxy of C++ itkSLICImageFilterVIF2IUS2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterVIF2IUS2_Superclass self, itkVectorImageF2 image)
        SetInput(itkSLICImageFilterVIF2IUS2_Superclass self, unsigned int arg0, itkVectorImageF2 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterVIF2IUS2_Superclass self) -> itkVectorImageF2
        GetInput(itkSLICImageFilterVIF2IUS2_Superclass self, unsigned int idx) -> itkVectorImageF2
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterVIF2IUS2_Superclass self, itkVectorImageF2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterVIF2IUS2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterVIF2IUS2_Superclass self, itkVectorImageF2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterVIF2IUS2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterVIF2IUS2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterVIF2IUS2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterVIF2IUS2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterVIF2IUS2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF2IUS2_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVIF2IUS2_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIF2IUS2_Superclass

        Create a new object of the class itkSLICImageFilterVIF2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIF2IUS2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIF2IUS2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVIF2IUS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVIF2IUS2_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_SetInput, None, itkSLICImageFilterVIF2IUS2_Superclass)
itkSLICImageFilterVIF2IUS2_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_GetInput, None, itkSLICImageFilterVIF2IUS2_Superclass)
itkSLICImageFilterVIF2IUS2_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_PushBackInput, None, itkSLICImageFilterVIF2IUS2_Superclass)
itkSLICImageFilterVIF2IUS2_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_PopBackInput, None, itkSLICImageFilterVIF2IUS2_Superclass)
itkSLICImageFilterVIF2IUS2_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_PushFrontInput, None, itkSLICImageFilterVIF2IUS2_Superclass)
itkSLICImageFilterVIF2IUS2_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_PopFrontInput, None, itkSLICImageFilterVIF2IUS2_Superclass)
itkSLICImageFilterVIF2IUS2_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterVIF2IUS2_Superclass)
itkSLICImageFilterVIF2IUS2_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterVIF2IUS2_Superclass)
itkSLICImageFilterVIF2IUS2_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_SetDirectionTolerance, None, itkSLICImageFilterVIF2IUS2_Superclass)
itkSLICImageFilterVIF2IUS2_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_GetDirectionTolerance, None, itkSLICImageFilterVIF2IUS2_Superclass)
itkSLICImageFilterVIF2IUS2_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_swigregister
itkSLICImageFilterVIF2IUS2_Superclass_swigregister(itkSLICImageFilterVIF2IUS2_Superclass)

def itkSLICImageFilterVIF2IUS2_Superclass_cast(obj):
    """itkSLICImageFilterVIF2IUS2_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterVIF2IUS2_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_cast(obj)

class itkSLICImageFilterVIF3IUL3_Superclass(itkImageSourcePython.itkImageSourceIUL3):
    """Proxy of C++ itkSLICImageFilterVIF3IUL3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterVIF3IUL3_Superclass self, itkVectorImageF3 image)
        SetInput(itkSLICImageFilterVIF3IUL3_Superclass self, unsigned int arg0, itkVectorImageF3 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterVIF3IUL3_Superclass self) -> itkVectorImageF3
        GetInput(itkSLICImageFilterVIF3IUL3_Superclass self, unsigned int idx) -> itkVectorImageF3
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterVIF3IUL3_Superclass self, itkVectorImageF3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterVIF3IUL3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterVIF3IUL3_Superclass self, itkVectorImageF3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterVIF3IUL3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterVIF3IUL3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterVIF3IUL3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterVIF3IUL3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterVIF3IUL3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF3IUL3_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVIF3IUL3_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIF3IUL3_Superclass

        Create a new object of the class itkSLICImageFilterVIF3IUL3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIF3IUL3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIF3IUL3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVIF3IUL3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVIF3IUL3_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_SetInput, None, itkSLICImageFilterVIF3IUL3_Superclass)
itkSLICImageFilterVIF3IUL3_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_GetInput, None, itkSLICImageFilterVIF3IUL3_Superclass)
itkSLICImageFilterVIF3IUL3_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_PushBackInput, None, itkSLICImageFilterVIF3IUL3_Superclass)
itkSLICImageFilterVIF3IUL3_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_PopBackInput, None, itkSLICImageFilterVIF3IUL3_Superclass)
itkSLICImageFilterVIF3IUL3_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_PushFrontInput, None, itkSLICImageFilterVIF3IUL3_Superclass)
itkSLICImageFilterVIF3IUL3_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_PopFrontInput, None, itkSLICImageFilterVIF3IUL3_Superclass)
itkSLICImageFilterVIF3IUL3_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterVIF3IUL3_Superclass)
itkSLICImageFilterVIF3IUL3_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterVIF3IUL3_Superclass)
itkSLICImageFilterVIF3IUL3_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_SetDirectionTolerance, None, itkSLICImageFilterVIF3IUL3_Superclass)
itkSLICImageFilterVIF3IUL3_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_GetDirectionTolerance, None, itkSLICImageFilterVIF3IUL3_Superclass)
itkSLICImageFilterVIF3IUL3_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_swigregister
itkSLICImageFilterVIF3IUL3_Superclass_swigregister(itkSLICImageFilterVIF3IUL3_Superclass)

def itkSLICImageFilterVIF3IUL3_Superclass_cast(obj):
    """itkSLICImageFilterVIF3IUL3_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterVIF3IUL3_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_cast(obj)

class itkSLICImageFilterVIF3IUS3_Superclass(itkImageSourcePython.itkImageSourceIUS3):
    """Proxy of C++ itkSLICImageFilterVIF3IUS3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterVIF3IUS3_Superclass self, itkVectorImageF3 image)
        SetInput(itkSLICImageFilterVIF3IUS3_Superclass self, unsigned int arg0, itkVectorImageF3 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterVIF3IUS3_Superclass self) -> itkVectorImageF3
        GetInput(itkSLICImageFilterVIF3IUS3_Superclass self, unsigned int idx) -> itkVectorImageF3
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterVIF3IUS3_Superclass self, itkVectorImageF3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterVIF3IUS3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterVIF3IUS3_Superclass self, itkVectorImageF3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterVIF3IUS3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterVIF3IUS3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterVIF3IUS3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterVIF3IUS3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterVIF3IUS3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF3IUS3_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVIF3IUS3_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIF3IUS3_Superclass

        Create a new object of the class itkSLICImageFilterVIF3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIF3IUS3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIF3IUS3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVIF3IUS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVIF3IUS3_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_SetInput, None, itkSLICImageFilterVIF3IUS3_Superclass)
itkSLICImageFilterVIF3IUS3_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_GetInput, None, itkSLICImageFilterVIF3IUS3_Superclass)
itkSLICImageFilterVIF3IUS3_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_PushBackInput, None, itkSLICImageFilterVIF3IUS3_Superclass)
itkSLICImageFilterVIF3IUS3_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_PopBackInput, None, itkSLICImageFilterVIF3IUS3_Superclass)
itkSLICImageFilterVIF3IUS3_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_PushFrontInput, None, itkSLICImageFilterVIF3IUS3_Superclass)
itkSLICImageFilterVIF3IUS3_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_PopFrontInput, None, itkSLICImageFilterVIF3IUS3_Superclass)
itkSLICImageFilterVIF3IUS3_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterVIF3IUS3_Superclass)
itkSLICImageFilterVIF3IUS3_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterVIF3IUS3_Superclass)
itkSLICImageFilterVIF3IUS3_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_SetDirectionTolerance, None, itkSLICImageFilterVIF3IUS3_Superclass)
itkSLICImageFilterVIF3IUS3_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_GetDirectionTolerance, None, itkSLICImageFilterVIF3IUS3_Superclass)
itkSLICImageFilterVIF3IUS3_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_swigregister
itkSLICImageFilterVIF3IUS3_Superclass_swigregister(itkSLICImageFilterVIF3IUS3_Superclass)

def itkSLICImageFilterVIF3IUS3_Superclass_cast(obj):
    """itkSLICImageFilterVIF3IUS3_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterVIF3IUS3_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_cast(obj)

class itkSLICImageFilterVISS2IUL2_Superclass(itkImageSourcePython.itkImageSourceIUL2):
    """Proxy of C++ itkSLICImageFilterVISS2IUL2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterVISS2IUL2_Superclass self, itkVectorImageSS2 image)
        SetInput(itkSLICImageFilterVISS2IUL2_Superclass self, unsigned int arg0, itkVectorImageSS2 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterVISS2IUL2_Superclass self) -> itkVectorImageSS2
        GetInput(itkSLICImageFilterVISS2IUL2_Superclass self, unsigned int idx) -> itkVectorImageSS2
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterVISS2IUL2_Superclass self, itkVectorImageSS2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterVISS2IUL2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterVISS2IUL2_Superclass self, itkVectorImageSS2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterVISS2IUL2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterVISS2IUL2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterVISS2IUL2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterVISS2IUL2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterVISS2IUL2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS2IUL2_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVISS2IUL2_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVISS2IUL2_Superclass

        Create a new object of the class itkSLICImageFilterVISS2IUL2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVISS2IUL2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVISS2IUL2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVISS2IUL2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVISS2IUL2_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_SetInput, None, itkSLICImageFilterVISS2IUL2_Superclass)
itkSLICImageFilterVISS2IUL2_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_GetInput, None, itkSLICImageFilterVISS2IUL2_Superclass)
itkSLICImageFilterVISS2IUL2_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_PushBackInput, None, itkSLICImageFilterVISS2IUL2_Superclass)
itkSLICImageFilterVISS2IUL2_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_PopBackInput, None, itkSLICImageFilterVISS2IUL2_Superclass)
itkSLICImageFilterVISS2IUL2_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_PushFrontInput, None, itkSLICImageFilterVISS2IUL2_Superclass)
itkSLICImageFilterVISS2IUL2_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_PopFrontInput, None, itkSLICImageFilterVISS2IUL2_Superclass)
itkSLICImageFilterVISS2IUL2_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterVISS2IUL2_Superclass)
itkSLICImageFilterVISS2IUL2_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterVISS2IUL2_Superclass)
itkSLICImageFilterVISS2IUL2_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_SetDirectionTolerance, None, itkSLICImageFilterVISS2IUL2_Superclass)
itkSLICImageFilterVISS2IUL2_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_GetDirectionTolerance, None, itkSLICImageFilterVISS2IUL2_Superclass)
itkSLICImageFilterVISS2IUL2_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_swigregister
itkSLICImageFilterVISS2IUL2_Superclass_swigregister(itkSLICImageFilterVISS2IUL2_Superclass)

def itkSLICImageFilterVISS2IUL2_Superclass_cast(obj):
    """itkSLICImageFilterVISS2IUL2_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterVISS2IUL2_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_cast(obj)

class itkSLICImageFilterVISS2IUS2_Superclass(itkImageSourcePython.itkImageSourceIUS2):
    """Proxy of C++ itkSLICImageFilterVISS2IUS2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterVISS2IUS2_Superclass self, itkVectorImageSS2 image)
        SetInput(itkSLICImageFilterVISS2IUS2_Superclass self, unsigned int arg0, itkVectorImageSS2 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterVISS2IUS2_Superclass self) -> itkVectorImageSS2
        GetInput(itkSLICImageFilterVISS2IUS2_Superclass self, unsigned int idx) -> itkVectorImageSS2
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterVISS2IUS2_Superclass self, itkVectorImageSS2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterVISS2IUS2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterVISS2IUS2_Superclass self, itkVectorImageSS2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterVISS2IUS2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterVISS2IUS2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterVISS2IUS2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterVISS2IUS2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterVISS2IUS2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS2IUS2_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVISS2IUS2_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVISS2IUS2_Superclass

        Create a new object of the class itkSLICImageFilterVISS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVISS2IUS2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVISS2IUS2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVISS2IUS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVISS2IUS2_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_SetInput, None, itkSLICImageFilterVISS2IUS2_Superclass)
itkSLICImageFilterVISS2IUS2_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_GetInput, None, itkSLICImageFilterVISS2IUS2_Superclass)
itkSLICImageFilterVISS2IUS2_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_PushBackInput, None, itkSLICImageFilterVISS2IUS2_Superclass)
itkSLICImageFilterVISS2IUS2_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_PopBackInput, None, itkSLICImageFilterVISS2IUS2_Superclass)
itkSLICImageFilterVISS2IUS2_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_PushFrontInput, None, itkSLICImageFilterVISS2IUS2_Superclass)
itkSLICImageFilterVISS2IUS2_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_PopFrontInput, None, itkSLICImageFilterVISS2IUS2_Superclass)
itkSLICImageFilterVISS2IUS2_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterVISS2IUS2_Superclass)
itkSLICImageFilterVISS2IUS2_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterVISS2IUS2_Superclass)
itkSLICImageFilterVISS2IUS2_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_SetDirectionTolerance, None, itkSLICImageFilterVISS2IUS2_Superclass)
itkSLICImageFilterVISS2IUS2_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_GetDirectionTolerance, None, itkSLICImageFilterVISS2IUS2_Superclass)
itkSLICImageFilterVISS2IUS2_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_swigregister
itkSLICImageFilterVISS2IUS2_Superclass_swigregister(itkSLICImageFilterVISS2IUS2_Superclass)

def itkSLICImageFilterVISS2IUS2_Superclass_cast(obj):
    """itkSLICImageFilterVISS2IUS2_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterVISS2IUS2_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_cast(obj)

class itkSLICImageFilterVISS3IUL3_Superclass(itkImageSourcePython.itkImageSourceIUL3):
    """Proxy of C++ itkSLICImageFilterVISS3IUL3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterVISS3IUL3_Superclass self, itkVectorImageSS3 image)
        SetInput(itkSLICImageFilterVISS3IUL3_Superclass self, unsigned int arg0, itkVectorImageSS3 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterVISS3IUL3_Superclass self) -> itkVectorImageSS3
        GetInput(itkSLICImageFilterVISS3IUL3_Superclass self, unsigned int idx) -> itkVectorImageSS3
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterVISS3IUL3_Superclass self, itkVectorImageSS3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterVISS3IUL3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterVISS3IUL3_Superclass self, itkVectorImageSS3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterVISS3IUL3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterVISS3IUL3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterVISS3IUL3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterVISS3IUL3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterVISS3IUL3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS3IUL3_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVISS3IUL3_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVISS3IUL3_Superclass

        Create a new object of the class itkSLICImageFilterVISS3IUL3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVISS3IUL3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVISS3IUL3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVISS3IUL3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVISS3IUL3_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_SetInput, None, itkSLICImageFilterVISS3IUL3_Superclass)
itkSLICImageFilterVISS3IUL3_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_GetInput, None, itkSLICImageFilterVISS3IUL3_Superclass)
itkSLICImageFilterVISS3IUL3_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_PushBackInput, None, itkSLICImageFilterVISS3IUL3_Superclass)
itkSLICImageFilterVISS3IUL3_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_PopBackInput, None, itkSLICImageFilterVISS3IUL3_Superclass)
itkSLICImageFilterVISS3IUL3_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_PushFrontInput, None, itkSLICImageFilterVISS3IUL3_Superclass)
itkSLICImageFilterVISS3IUL3_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_PopFrontInput, None, itkSLICImageFilterVISS3IUL3_Superclass)
itkSLICImageFilterVISS3IUL3_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterVISS3IUL3_Superclass)
itkSLICImageFilterVISS3IUL3_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterVISS3IUL3_Superclass)
itkSLICImageFilterVISS3IUL3_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_SetDirectionTolerance, None, itkSLICImageFilterVISS3IUL3_Superclass)
itkSLICImageFilterVISS3IUL3_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_GetDirectionTolerance, None, itkSLICImageFilterVISS3IUL3_Superclass)
itkSLICImageFilterVISS3IUL3_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_swigregister
itkSLICImageFilterVISS3IUL3_Superclass_swigregister(itkSLICImageFilterVISS3IUL3_Superclass)

def itkSLICImageFilterVISS3IUL3_Superclass_cast(obj):
    """itkSLICImageFilterVISS3IUL3_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterVISS3IUL3_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_cast(obj)

class itkSLICImageFilterVISS3IUS3_Superclass(itkImageSourcePython.itkImageSourceIUS3):
    """Proxy of C++ itkSLICImageFilterVISS3IUS3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterVISS3IUS3_Superclass self, itkVectorImageSS3 image)
        SetInput(itkSLICImageFilterVISS3IUS3_Superclass self, unsigned int arg0, itkVectorImageSS3 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterVISS3IUS3_Superclass self) -> itkVectorImageSS3
        GetInput(itkSLICImageFilterVISS3IUS3_Superclass self, unsigned int idx) -> itkVectorImageSS3
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterVISS3IUS3_Superclass self, itkVectorImageSS3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterVISS3IUS3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterVISS3IUS3_Superclass self, itkVectorImageSS3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterVISS3IUS3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterVISS3IUS3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterVISS3IUS3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterVISS3IUS3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterVISS3IUS3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS3IUS3_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVISS3IUS3_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVISS3IUS3_Superclass

        Create a new object of the class itkSLICImageFilterVISS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVISS3IUS3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVISS3IUS3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVISS3IUS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVISS3IUS3_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_SetInput, None, itkSLICImageFilterVISS3IUS3_Superclass)
itkSLICImageFilterVISS3IUS3_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_GetInput, None, itkSLICImageFilterVISS3IUS3_Superclass)
itkSLICImageFilterVISS3IUS3_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_PushBackInput, None, itkSLICImageFilterVISS3IUS3_Superclass)
itkSLICImageFilterVISS3IUS3_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_PopBackInput, None, itkSLICImageFilterVISS3IUS3_Superclass)
itkSLICImageFilterVISS3IUS3_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_PushFrontInput, None, itkSLICImageFilterVISS3IUS3_Superclass)
itkSLICImageFilterVISS3IUS3_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_PopFrontInput, None, itkSLICImageFilterVISS3IUS3_Superclass)
itkSLICImageFilterVISS3IUS3_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterVISS3IUS3_Superclass)
itkSLICImageFilterVISS3IUS3_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterVISS3IUS3_Superclass)
itkSLICImageFilterVISS3IUS3_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_SetDirectionTolerance, None, itkSLICImageFilterVISS3IUS3_Superclass)
itkSLICImageFilterVISS3IUS3_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_GetDirectionTolerance, None, itkSLICImageFilterVISS3IUS3_Superclass)
itkSLICImageFilterVISS3IUS3_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_swigregister
itkSLICImageFilterVISS3IUS3_Superclass_swigregister(itkSLICImageFilterVISS3IUS3_Superclass)

def itkSLICImageFilterVISS3IUS3_Superclass_cast(obj):
    """itkSLICImageFilterVISS3IUS3_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterVISS3IUS3_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_cast(obj)

class itkSLICImageFilterVIUC2IUL2_Superclass(itkImageSourcePython.itkImageSourceIUL2):
    """Proxy of C++ itkSLICImageFilterVIUC2IUL2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterVIUC2IUL2_Superclass self, itkVectorImageUC2 image)
        SetInput(itkSLICImageFilterVIUC2IUL2_Superclass self, unsigned int arg0, itkVectorImageUC2 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterVIUC2IUL2_Superclass self) -> itkVectorImageUC2
        GetInput(itkSLICImageFilterVIUC2IUL2_Superclass self, unsigned int idx) -> itkVectorImageUC2
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterVIUC2IUL2_Superclass self, itkVectorImageUC2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterVIUC2IUL2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterVIUC2IUL2_Superclass self, itkVectorImageUC2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterVIUC2IUL2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterVIUC2IUL2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterVIUC2IUL2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterVIUC2IUL2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterVIUC2IUL2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC2IUL2_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVIUC2IUL2_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUC2IUL2_Superclass

        Create a new object of the class itkSLICImageFilterVIUC2IUL2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUC2IUL2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUC2IUL2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVIUC2IUL2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVIUC2IUL2_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_SetInput, None, itkSLICImageFilterVIUC2IUL2_Superclass)
itkSLICImageFilterVIUC2IUL2_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_GetInput, None, itkSLICImageFilterVIUC2IUL2_Superclass)
itkSLICImageFilterVIUC2IUL2_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_PushBackInput, None, itkSLICImageFilterVIUC2IUL2_Superclass)
itkSLICImageFilterVIUC2IUL2_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_PopBackInput, None, itkSLICImageFilterVIUC2IUL2_Superclass)
itkSLICImageFilterVIUC2IUL2_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_PushFrontInput, None, itkSLICImageFilterVIUC2IUL2_Superclass)
itkSLICImageFilterVIUC2IUL2_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_PopFrontInput, None, itkSLICImageFilterVIUC2IUL2_Superclass)
itkSLICImageFilterVIUC2IUL2_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterVIUC2IUL2_Superclass)
itkSLICImageFilterVIUC2IUL2_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterVIUC2IUL2_Superclass)
itkSLICImageFilterVIUC2IUL2_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_SetDirectionTolerance, None, itkSLICImageFilterVIUC2IUL2_Superclass)
itkSLICImageFilterVIUC2IUL2_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_GetDirectionTolerance, None, itkSLICImageFilterVIUC2IUL2_Superclass)
itkSLICImageFilterVIUC2IUL2_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_swigregister
itkSLICImageFilterVIUC2IUL2_Superclass_swigregister(itkSLICImageFilterVIUC2IUL2_Superclass)

def itkSLICImageFilterVIUC2IUL2_Superclass_cast(obj):
    """itkSLICImageFilterVIUC2IUL2_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterVIUC2IUL2_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_cast(obj)

class itkSLICImageFilterVIUC2IUS2_Superclass(itkImageSourcePython.itkImageSourceIUS2):
    """Proxy of C++ itkSLICImageFilterVIUC2IUS2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterVIUC2IUS2_Superclass self, itkVectorImageUC2 image)
        SetInput(itkSLICImageFilterVIUC2IUS2_Superclass self, unsigned int arg0, itkVectorImageUC2 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterVIUC2IUS2_Superclass self) -> itkVectorImageUC2
        GetInput(itkSLICImageFilterVIUC2IUS2_Superclass self, unsigned int idx) -> itkVectorImageUC2
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterVIUC2IUS2_Superclass self, itkVectorImageUC2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterVIUC2IUS2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterVIUC2IUS2_Superclass self, itkVectorImageUC2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterVIUC2IUS2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterVIUC2IUS2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterVIUC2IUS2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterVIUC2IUS2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterVIUC2IUS2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC2IUS2_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVIUC2IUS2_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUC2IUS2_Superclass

        Create a new object of the class itkSLICImageFilterVIUC2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUC2IUS2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUC2IUS2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVIUC2IUS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVIUC2IUS2_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_SetInput, None, itkSLICImageFilterVIUC2IUS2_Superclass)
itkSLICImageFilterVIUC2IUS2_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_GetInput, None, itkSLICImageFilterVIUC2IUS2_Superclass)
itkSLICImageFilterVIUC2IUS2_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_PushBackInput, None, itkSLICImageFilterVIUC2IUS2_Superclass)
itkSLICImageFilterVIUC2IUS2_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_PopBackInput, None, itkSLICImageFilterVIUC2IUS2_Superclass)
itkSLICImageFilterVIUC2IUS2_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_PushFrontInput, None, itkSLICImageFilterVIUC2IUS2_Superclass)
itkSLICImageFilterVIUC2IUS2_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_PopFrontInput, None, itkSLICImageFilterVIUC2IUS2_Superclass)
itkSLICImageFilterVIUC2IUS2_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterVIUC2IUS2_Superclass)
itkSLICImageFilterVIUC2IUS2_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterVIUC2IUS2_Superclass)
itkSLICImageFilterVIUC2IUS2_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_SetDirectionTolerance, None, itkSLICImageFilterVIUC2IUS2_Superclass)
itkSLICImageFilterVIUC2IUS2_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_GetDirectionTolerance, None, itkSLICImageFilterVIUC2IUS2_Superclass)
itkSLICImageFilterVIUC2IUS2_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_swigregister
itkSLICImageFilterVIUC2IUS2_Superclass_swigregister(itkSLICImageFilterVIUC2IUS2_Superclass)

def itkSLICImageFilterVIUC2IUS2_Superclass_cast(obj):
    """itkSLICImageFilterVIUC2IUS2_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterVIUC2IUS2_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_cast(obj)

class itkSLICImageFilterVIUC3IUL3_Superclass(itkImageSourcePython.itkImageSourceIUL3):
    """Proxy of C++ itkSLICImageFilterVIUC3IUL3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterVIUC3IUL3_Superclass self, itkVectorImageUC3 image)
        SetInput(itkSLICImageFilterVIUC3IUL3_Superclass self, unsigned int arg0, itkVectorImageUC3 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterVIUC3IUL3_Superclass self) -> itkVectorImageUC3
        GetInput(itkSLICImageFilterVIUC3IUL3_Superclass self, unsigned int idx) -> itkVectorImageUC3
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterVIUC3IUL3_Superclass self, itkVectorImageUC3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterVIUC3IUL3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterVIUC3IUL3_Superclass self, itkVectorImageUC3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterVIUC3IUL3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterVIUC3IUL3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterVIUC3IUL3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterVIUC3IUL3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterVIUC3IUL3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC3IUL3_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVIUC3IUL3_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUC3IUL3_Superclass

        Create a new object of the class itkSLICImageFilterVIUC3IUL3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUC3IUL3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUC3IUL3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVIUC3IUL3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVIUC3IUL3_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_SetInput, None, itkSLICImageFilterVIUC3IUL3_Superclass)
itkSLICImageFilterVIUC3IUL3_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_GetInput, None, itkSLICImageFilterVIUC3IUL3_Superclass)
itkSLICImageFilterVIUC3IUL3_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_PushBackInput, None, itkSLICImageFilterVIUC3IUL3_Superclass)
itkSLICImageFilterVIUC3IUL3_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_PopBackInput, None, itkSLICImageFilterVIUC3IUL3_Superclass)
itkSLICImageFilterVIUC3IUL3_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_PushFrontInput, None, itkSLICImageFilterVIUC3IUL3_Superclass)
itkSLICImageFilterVIUC3IUL3_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_PopFrontInput, None, itkSLICImageFilterVIUC3IUL3_Superclass)
itkSLICImageFilterVIUC3IUL3_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterVIUC3IUL3_Superclass)
itkSLICImageFilterVIUC3IUL3_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterVIUC3IUL3_Superclass)
itkSLICImageFilterVIUC3IUL3_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_SetDirectionTolerance, None, itkSLICImageFilterVIUC3IUL3_Superclass)
itkSLICImageFilterVIUC3IUL3_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_GetDirectionTolerance, None, itkSLICImageFilterVIUC3IUL3_Superclass)
itkSLICImageFilterVIUC3IUL3_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_swigregister
itkSLICImageFilterVIUC3IUL3_Superclass_swigregister(itkSLICImageFilterVIUC3IUL3_Superclass)

def itkSLICImageFilterVIUC3IUL3_Superclass_cast(obj):
    """itkSLICImageFilterVIUC3IUL3_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterVIUC3IUL3_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_cast(obj)

class itkSLICImageFilterVIUC3IUS3_Superclass(itkImageSourcePython.itkImageSourceIUS3):
    """Proxy of C++ itkSLICImageFilterVIUC3IUS3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterVIUC3IUS3_Superclass self, itkVectorImageUC3 image)
        SetInput(itkSLICImageFilterVIUC3IUS3_Superclass self, unsigned int arg0, itkVectorImageUC3 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterVIUC3IUS3_Superclass self) -> itkVectorImageUC3
        GetInput(itkSLICImageFilterVIUC3IUS3_Superclass self, unsigned int idx) -> itkVectorImageUC3
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterVIUC3IUS3_Superclass self, itkVectorImageUC3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterVIUC3IUS3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterVIUC3IUS3_Superclass self, itkVectorImageUC3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterVIUC3IUS3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterVIUC3IUS3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterVIUC3IUS3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterVIUC3IUS3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterVIUC3IUS3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC3IUS3_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVIUC3IUS3_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUC3IUS3_Superclass

        Create a new object of the class itkSLICImageFilterVIUC3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUC3IUS3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUC3IUS3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVIUC3IUS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVIUC3IUS3_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_SetInput, None, itkSLICImageFilterVIUC3IUS3_Superclass)
itkSLICImageFilterVIUC3IUS3_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_GetInput, None, itkSLICImageFilterVIUC3IUS3_Superclass)
itkSLICImageFilterVIUC3IUS3_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_PushBackInput, None, itkSLICImageFilterVIUC3IUS3_Superclass)
itkSLICImageFilterVIUC3IUS3_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_PopBackInput, None, itkSLICImageFilterVIUC3IUS3_Superclass)
itkSLICImageFilterVIUC3IUS3_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_PushFrontInput, None, itkSLICImageFilterVIUC3IUS3_Superclass)
itkSLICImageFilterVIUC3IUS3_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_PopFrontInput, None, itkSLICImageFilterVIUC3IUS3_Superclass)
itkSLICImageFilterVIUC3IUS3_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterVIUC3IUS3_Superclass)
itkSLICImageFilterVIUC3IUS3_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterVIUC3IUS3_Superclass)
itkSLICImageFilterVIUC3IUS3_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_SetDirectionTolerance, None, itkSLICImageFilterVIUC3IUS3_Superclass)
itkSLICImageFilterVIUC3IUS3_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_GetDirectionTolerance, None, itkSLICImageFilterVIUC3IUS3_Superclass)
itkSLICImageFilterVIUC3IUS3_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_swigregister
itkSLICImageFilterVIUC3IUS3_Superclass_swigregister(itkSLICImageFilterVIUC3IUS3_Superclass)

def itkSLICImageFilterVIUC3IUS3_Superclass_cast(obj):
    """itkSLICImageFilterVIUC3IUS3_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterVIUC3IUS3_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_cast(obj)

class itkSLICImageFilterVIUS2IUL2_Superclass(itkImageSourcePython.itkImageSourceIUL2):
    """Proxy of C++ itkSLICImageFilterVIUS2IUL2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterVIUS2IUL2_Superclass self, itkVectorImageUS2 image)
        SetInput(itkSLICImageFilterVIUS2IUL2_Superclass self, unsigned int arg0, itkVectorImageUS2 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterVIUS2IUL2_Superclass self) -> itkVectorImageUS2
        GetInput(itkSLICImageFilterVIUS2IUL2_Superclass self, unsigned int idx) -> itkVectorImageUS2
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterVIUS2IUL2_Superclass self, itkVectorImageUS2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterVIUS2IUL2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterVIUS2IUL2_Superclass self, itkVectorImageUS2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterVIUS2IUL2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterVIUS2IUL2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterVIUS2IUL2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterVIUS2IUL2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterVIUS2IUL2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS2IUL2_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVIUS2IUL2_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUS2IUL2_Superclass

        Create a new object of the class itkSLICImageFilterVIUS2IUL2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUS2IUL2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUS2IUL2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVIUS2IUL2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVIUS2IUL2_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_SetInput, None, itkSLICImageFilterVIUS2IUL2_Superclass)
itkSLICImageFilterVIUS2IUL2_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_GetInput, None, itkSLICImageFilterVIUS2IUL2_Superclass)
itkSLICImageFilterVIUS2IUL2_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_PushBackInput, None, itkSLICImageFilterVIUS2IUL2_Superclass)
itkSLICImageFilterVIUS2IUL2_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_PopBackInput, None, itkSLICImageFilterVIUS2IUL2_Superclass)
itkSLICImageFilterVIUS2IUL2_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_PushFrontInput, None, itkSLICImageFilterVIUS2IUL2_Superclass)
itkSLICImageFilterVIUS2IUL2_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_PopFrontInput, None, itkSLICImageFilterVIUS2IUL2_Superclass)
itkSLICImageFilterVIUS2IUL2_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterVIUS2IUL2_Superclass)
itkSLICImageFilterVIUS2IUL2_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterVIUS2IUL2_Superclass)
itkSLICImageFilterVIUS2IUL2_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_SetDirectionTolerance, None, itkSLICImageFilterVIUS2IUL2_Superclass)
itkSLICImageFilterVIUS2IUL2_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_GetDirectionTolerance, None, itkSLICImageFilterVIUS2IUL2_Superclass)
itkSLICImageFilterVIUS2IUL2_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_swigregister
itkSLICImageFilterVIUS2IUL2_Superclass_swigregister(itkSLICImageFilterVIUS2IUL2_Superclass)

def itkSLICImageFilterVIUS2IUL2_Superclass_cast(obj):
    """itkSLICImageFilterVIUS2IUL2_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterVIUS2IUL2_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_cast(obj)

class itkSLICImageFilterVIUS2IUS2_Superclass(itkImageSourcePython.itkImageSourceIUS2):
    """Proxy of C++ itkSLICImageFilterVIUS2IUS2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterVIUS2IUS2_Superclass self, itkVectorImageUS2 image)
        SetInput(itkSLICImageFilterVIUS2IUS2_Superclass self, unsigned int arg0, itkVectorImageUS2 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterVIUS2IUS2_Superclass self) -> itkVectorImageUS2
        GetInput(itkSLICImageFilterVIUS2IUS2_Superclass self, unsigned int idx) -> itkVectorImageUS2
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterVIUS2IUS2_Superclass self, itkVectorImageUS2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterVIUS2IUS2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterVIUS2IUS2_Superclass self, itkVectorImageUS2 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterVIUS2IUS2_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterVIUS2IUS2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterVIUS2IUS2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterVIUS2IUS2_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterVIUS2IUS2_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS2IUS2_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVIUS2IUS2_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUS2IUS2_Superclass

        Create a new object of the class itkSLICImageFilterVIUS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUS2IUS2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUS2IUS2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVIUS2IUS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVIUS2IUS2_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_SetInput, None, itkSLICImageFilterVIUS2IUS2_Superclass)
itkSLICImageFilterVIUS2IUS2_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_GetInput, None, itkSLICImageFilterVIUS2IUS2_Superclass)
itkSLICImageFilterVIUS2IUS2_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_PushBackInput, None, itkSLICImageFilterVIUS2IUS2_Superclass)
itkSLICImageFilterVIUS2IUS2_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_PopBackInput, None, itkSLICImageFilterVIUS2IUS2_Superclass)
itkSLICImageFilterVIUS2IUS2_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_PushFrontInput, None, itkSLICImageFilterVIUS2IUS2_Superclass)
itkSLICImageFilterVIUS2IUS2_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_PopFrontInput, None, itkSLICImageFilterVIUS2IUS2_Superclass)
itkSLICImageFilterVIUS2IUS2_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterVIUS2IUS2_Superclass)
itkSLICImageFilterVIUS2IUS2_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterVIUS2IUS2_Superclass)
itkSLICImageFilterVIUS2IUS2_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_SetDirectionTolerance, None, itkSLICImageFilterVIUS2IUS2_Superclass)
itkSLICImageFilterVIUS2IUS2_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_GetDirectionTolerance, None, itkSLICImageFilterVIUS2IUS2_Superclass)
itkSLICImageFilterVIUS2IUS2_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_swigregister
itkSLICImageFilterVIUS2IUS2_Superclass_swigregister(itkSLICImageFilterVIUS2IUS2_Superclass)

def itkSLICImageFilterVIUS2IUS2_Superclass_cast(obj):
    """itkSLICImageFilterVIUS2IUS2_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterVIUS2IUS2_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_cast(obj)

class itkSLICImageFilterVIUS3IUL3_Superclass(itkImageSourcePython.itkImageSourceIUL3):
    """Proxy of C++ itkSLICImageFilterVIUS3IUL3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterVIUS3IUL3_Superclass self, itkVectorImageUS3 image)
        SetInput(itkSLICImageFilterVIUS3IUL3_Superclass self, unsigned int arg0, itkVectorImageUS3 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterVIUS3IUL3_Superclass self) -> itkVectorImageUS3
        GetInput(itkSLICImageFilterVIUS3IUL3_Superclass self, unsigned int idx) -> itkVectorImageUS3
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterVIUS3IUL3_Superclass self, itkVectorImageUS3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterVIUS3IUL3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterVIUS3IUL3_Superclass self, itkVectorImageUS3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterVIUS3IUL3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterVIUS3IUL3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterVIUS3IUL3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterVIUS3IUL3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterVIUS3IUL3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS3IUL3_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVIUS3IUL3_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUS3IUL3_Superclass

        Create a new object of the class itkSLICImageFilterVIUS3IUL3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUS3IUL3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUS3IUL3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVIUS3IUL3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVIUS3IUL3_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_SetInput, None, itkSLICImageFilterVIUS3IUL3_Superclass)
itkSLICImageFilterVIUS3IUL3_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_GetInput, None, itkSLICImageFilterVIUS3IUL3_Superclass)
itkSLICImageFilterVIUS3IUL3_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_PushBackInput, None, itkSLICImageFilterVIUS3IUL3_Superclass)
itkSLICImageFilterVIUS3IUL3_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_PopBackInput, None, itkSLICImageFilterVIUS3IUL3_Superclass)
itkSLICImageFilterVIUS3IUL3_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_PushFrontInput, None, itkSLICImageFilterVIUS3IUL3_Superclass)
itkSLICImageFilterVIUS3IUL3_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_PopFrontInput, None, itkSLICImageFilterVIUS3IUL3_Superclass)
itkSLICImageFilterVIUS3IUL3_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterVIUS3IUL3_Superclass)
itkSLICImageFilterVIUS3IUL3_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterVIUS3IUL3_Superclass)
itkSLICImageFilterVIUS3IUL3_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_SetDirectionTolerance, None, itkSLICImageFilterVIUS3IUL3_Superclass)
itkSLICImageFilterVIUS3IUL3_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_GetDirectionTolerance, None, itkSLICImageFilterVIUS3IUL3_Superclass)
itkSLICImageFilterVIUS3IUL3_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_swigregister
itkSLICImageFilterVIUS3IUL3_Superclass_swigregister(itkSLICImageFilterVIUS3IUL3_Superclass)

def itkSLICImageFilterVIUS3IUL3_Superclass_cast(obj):
    """itkSLICImageFilterVIUS3IUL3_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterVIUS3IUL3_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_cast(obj)

class itkSLICImageFilterVIUS3IUS3_Superclass(itkImageSourcePython.itkImageSourceIUS3):
    """Proxy of C++ itkSLICImageFilterVIUS3IUS3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkSLICImageFilterVIUS3IUS3_Superclass self, itkVectorImageUS3 image)
        SetInput(itkSLICImageFilterVIUS3IUS3_Superclass self, unsigned int arg0, itkVectorImageUS3 image)
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkSLICImageFilterVIUS3IUS3_Superclass self) -> itkVectorImageUS3
        GetInput(itkSLICImageFilterVIUS3IUS3_Superclass self, unsigned int idx) -> itkVectorImageUS3
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkSLICImageFilterVIUS3IUS3_Superclass self, itkVectorImageUS3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkSLICImageFilterVIUS3IUS3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkSLICImageFilterVIUS3IUS3_Superclass self, itkVectorImageUS3 image)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkSLICImageFilterVIUS3IUS3_Superclass self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkSLICImageFilterVIUS3IUS3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkSLICImageFilterVIUS3IUS3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkSLICImageFilterVIUS3IUS3_Superclass self, double const _arg)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkSLICImageFilterVIUS3IUS3_Superclass self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_GetDirectionTolerance(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS3IUS3_Superclass

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVIUS3IUS3_Superclass"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUS3IUS3_Superclass

        Create a new object of the class itkSLICImageFilterVIUS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUS3IUS3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUS3IUS3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVIUS3IUS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVIUS3IUS3_Superclass.SetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_SetInput, None, itkSLICImageFilterVIUS3IUS3_Superclass)
itkSLICImageFilterVIUS3IUS3_Superclass.GetInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_GetInput, None, itkSLICImageFilterVIUS3IUS3_Superclass)
itkSLICImageFilterVIUS3IUS3_Superclass.PushBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_PushBackInput, None, itkSLICImageFilterVIUS3IUS3_Superclass)
itkSLICImageFilterVIUS3IUS3_Superclass.PopBackInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_PopBackInput, None, itkSLICImageFilterVIUS3IUS3_Superclass)
itkSLICImageFilterVIUS3IUS3_Superclass.PushFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_PushFrontInput, None, itkSLICImageFilterVIUS3IUS3_Superclass)
itkSLICImageFilterVIUS3IUS3_Superclass.PopFrontInput = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_PopFrontInput, None, itkSLICImageFilterVIUS3IUS3_Superclass)
itkSLICImageFilterVIUS3IUS3_Superclass.SetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_SetCoordinateTolerance, None, itkSLICImageFilterVIUS3IUS3_Superclass)
itkSLICImageFilterVIUS3IUS3_Superclass.GetCoordinateTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_GetCoordinateTolerance, None, itkSLICImageFilterVIUS3IUS3_Superclass)
itkSLICImageFilterVIUS3IUS3_Superclass.SetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_SetDirectionTolerance, None, itkSLICImageFilterVIUS3IUS3_Superclass)
itkSLICImageFilterVIUS3IUS3_Superclass.GetDirectionTolerance = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_GetDirectionTolerance, None, itkSLICImageFilterVIUS3IUS3_Superclass)
itkSLICImageFilterVIUS3IUS3_Superclass_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_swigregister
itkSLICImageFilterVIUS3IUS3_Superclass_swigregister(itkSLICImageFilterVIUS3IUS3_Superclass)

def itkSLICImageFilterVIUS3IUS3_Superclass_cast(obj):
    """itkSLICImageFilterVIUS3IUS3_Superclass_cast(itkLightObject obj) -> itkSLICImageFilterVIUS3IUS3_Superclass"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_cast(obj)

class itkSLICImageFilterIF2IUL2(itkSLICImageFilterIF2IUL2_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterIF2IUL2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterIF2IUL2 self) -> itkSLICImageFilterIF2IUL2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterIF2IUL2 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterIF2IUL2 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterIF2IUL2 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterIF2IUL2 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterIF2IUL2 self) -> itkFixedArrayUI2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterIF2IUL2 self, itkFixedArrayUI2 _arg)
        SetSuperGridSize(itkSLICImageFilterIF2IUL2 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterIF2IUL2 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterIF2IUL2 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterIF2IUL2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterIF2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterIF2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterIF2IUL2 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterIF2IUL2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterIF2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterIF2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterIF2IUL2 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF2IUL2

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterIF2IUL2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIF2IUL2

        Create a new object of the class itkSLICImageFilterIF2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIF2IUL2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIF2IUL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterIF2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterIF2IUL2.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Clone, None, itkSLICImageFilterIF2IUL2)
itkSLICImageFilterIF2IUL2.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_SetSpatialProximityWeight, None, itkSLICImageFilterIF2IUL2)
itkSLICImageFilterIF2IUL2.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_GetSpatialProximityWeight, None, itkSLICImageFilterIF2IUL2)
itkSLICImageFilterIF2IUL2.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_SetMaximumNumberOfIterations, None, itkSLICImageFilterIF2IUL2)
itkSLICImageFilterIF2IUL2.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_GetMaximumNumberOfIterations, None, itkSLICImageFilterIF2IUL2)
itkSLICImageFilterIF2IUL2.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_GetSuperGridSize, None, itkSLICImageFilterIF2IUL2)
itkSLICImageFilterIF2IUL2.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_SetSuperGridSize, None, itkSLICImageFilterIF2IUL2)
itkSLICImageFilterIF2IUL2.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_SetInitializationPerturbation, None, itkSLICImageFilterIF2IUL2)
itkSLICImageFilterIF2IUL2.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_GetInitializationPerturbation, None, itkSLICImageFilterIF2IUL2)
itkSLICImageFilterIF2IUL2.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_InitializationPerturbationOn, None, itkSLICImageFilterIF2IUL2)
itkSLICImageFilterIF2IUL2.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_InitializationPerturbationOff, None, itkSLICImageFilterIF2IUL2)
itkSLICImageFilterIF2IUL2.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_SetEnforceConnectivity, None, itkSLICImageFilterIF2IUL2)
itkSLICImageFilterIF2IUL2.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_GetEnforceConnectivity, None, itkSLICImageFilterIF2IUL2)
itkSLICImageFilterIF2IUL2.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_EnforceConnectivityOn, None, itkSLICImageFilterIF2IUL2)
itkSLICImageFilterIF2IUL2.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_EnforceConnectivityOff, None, itkSLICImageFilterIF2IUL2)
itkSLICImageFilterIF2IUL2.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_GetAverageResidual, None, itkSLICImageFilterIF2IUL2)
itkSLICImageFilterIF2IUL2_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_swigregister
itkSLICImageFilterIF2IUL2_swigregister(itkSLICImageFilterIF2IUL2)

def itkSLICImageFilterIF2IUL2___New_orig__():
    """itkSLICImageFilterIF2IUL2___New_orig__() -> itkSLICImageFilterIF2IUL2_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2___New_orig__()

def itkSLICImageFilterIF2IUL2_cast(obj):
    """itkSLICImageFilterIF2IUL2_cast(itkLightObject obj) -> itkSLICImageFilterIF2IUL2"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_cast(obj)

class itkSLICImageFilterIF2IUS2(itkSLICImageFilterIF2IUS2_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterIF2IUS2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterIF2IUS2 self) -> itkSLICImageFilterIF2IUS2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterIF2IUS2 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterIF2IUS2 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterIF2IUS2 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterIF2IUS2 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterIF2IUS2 self) -> itkFixedArrayUI2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterIF2IUS2 self, itkFixedArrayUI2 _arg)
        SetSuperGridSize(itkSLICImageFilterIF2IUS2 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterIF2IUS2 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterIF2IUS2 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterIF2IUS2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterIF2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterIF2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterIF2IUS2 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterIF2IUS2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterIF2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterIF2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterIF2IUS2 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF2IUS2

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterIF2IUS2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIF2IUS2

        Create a new object of the class itkSLICImageFilterIF2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIF2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIF2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterIF2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterIF2IUS2.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Clone, None, itkSLICImageFilterIF2IUS2)
itkSLICImageFilterIF2IUS2.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_SetSpatialProximityWeight, None, itkSLICImageFilterIF2IUS2)
itkSLICImageFilterIF2IUS2.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetSpatialProximityWeight, None, itkSLICImageFilterIF2IUS2)
itkSLICImageFilterIF2IUS2.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_SetMaximumNumberOfIterations, None, itkSLICImageFilterIF2IUS2)
itkSLICImageFilterIF2IUS2.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetMaximumNumberOfIterations, None, itkSLICImageFilterIF2IUS2)
itkSLICImageFilterIF2IUS2.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetSuperGridSize, None, itkSLICImageFilterIF2IUS2)
itkSLICImageFilterIF2IUS2.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_SetSuperGridSize, None, itkSLICImageFilterIF2IUS2)
itkSLICImageFilterIF2IUS2.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_SetInitializationPerturbation, None, itkSLICImageFilterIF2IUS2)
itkSLICImageFilterIF2IUS2.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetInitializationPerturbation, None, itkSLICImageFilterIF2IUS2)
itkSLICImageFilterIF2IUS2.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_InitializationPerturbationOn, None, itkSLICImageFilterIF2IUS2)
itkSLICImageFilterIF2IUS2.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_InitializationPerturbationOff, None, itkSLICImageFilterIF2IUS2)
itkSLICImageFilterIF2IUS2.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_SetEnforceConnectivity, None, itkSLICImageFilterIF2IUS2)
itkSLICImageFilterIF2IUS2.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetEnforceConnectivity, None, itkSLICImageFilterIF2IUS2)
itkSLICImageFilterIF2IUS2.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_EnforceConnectivityOn, None, itkSLICImageFilterIF2IUS2)
itkSLICImageFilterIF2IUS2.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_EnforceConnectivityOff, None, itkSLICImageFilterIF2IUS2)
itkSLICImageFilterIF2IUS2.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetAverageResidual, None, itkSLICImageFilterIF2IUS2)
itkSLICImageFilterIF2IUS2_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_swigregister
itkSLICImageFilterIF2IUS2_swigregister(itkSLICImageFilterIF2IUS2)

def itkSLICImageFilterIF2IUS2___New_orig__():
    """itkSLICImageFilterIF2IUS2___New_orig__() -> itkSLICImageFilterIF2IUS2_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2___New_orig__()

def itkSLICImageFilterIF2IUS2_cast(obj):
    """itkSLICImageFilterIF2IUS2_cast(itkLightObject obj) -> itkSLICImageFilterIF2IUS2"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_cast(obj)

class itkSLICImageFilterIF3IUL3(itkSLICImageFilterIF3IUL3_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterIF3IUL3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterIF3IUL3 self) -> itkSLICImageFilterIF3IUL3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterIF3IUL3 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterIF3IUL3 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterIF3IUL3 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterIF3IUL3 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterIF3IUL3 self) -> itkFixedArrayUI3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterIF3IUL3 self, itkFixedArrayUI3 _arg)
        SetSuperGridSize(itkSLICImageFilterIF3IUL3 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterIF3IUL3 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterIF3IUL3 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterIF3IUL3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterIF3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterIF3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterIF3IUL3 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterIF3IUL3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterIF3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterIF3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterIF3IUL3 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF3IUL3

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterIF3IUL3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIF3IUL3

        Create a new object of the class itkSLICImageFilterIF3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIF3IUL3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIF3IUL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterIF3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterIF3IUL3.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Clone, None, itkSLICImageFilterIF3IUL3)
itkSLICImageFilterIF3IUL3.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_SetSpatialProximityWeight, None, itkSLICImageFilterIF3IUL3)
itkSLICImageFilterIF3IUL3.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_GetSpatialProximityWeight, None, itkSLICImageFilterIF3IUL3)
itkSLICImageFilterIF3IUL3.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_SetMaximumNumberOfIterations, None, itkSLICImageFilterIF3IUL3)
itkSLICImageFilterIF3IUL3.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_GetMaximumNumberOfIterations, None, itkSLICImageFilterIF3IUL3)
itkSLICImageFilterIF3IUL3.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_GetSuperGridSize, None, itkSLICImageFilterIF3IUL3)
itkSLICImageFilterIF3IUL3.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_SetSuperGridSize, None, itkSLICImageFilterIF3IUL3)
itkSLICImageFilterIF3IUL3.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_SetInitializationPerturbation, None, itkSLICImageFilterIF3IUL3)
itkSLICImageFilterIF3IUL3.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_GetInitializationPerturbation, None, itkSLICImageFilterIF3IUL3)
itkSLICImageFilterIF3IUL3.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_InitializationPerturbationOn, None, itkSLICImageFilterIF3IUL3)
itkSLICImageFilterIF3IUL3.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_InitializationPerturbationOff, None, itkSLICImageFilterIF3IUL3)
itkSLICImageFilterIF3IUL3.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_SetEnforceConnectivity, None, itkSLICImageFilterIF3IUL3)
itkSLICImageFilterIF3IUL3.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_GetEnforceConnectivity, None, itkSLICImageFilterIF3IUL3)
itkSLICImageFilterIF3IUL3.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_EnforceConnectivityOn, None, itkSLICImageFilterIF3IUL3)
itkSLICImageFilterIF3IUL3.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_EnforceConnectivityOff, None, itkSLICImageFilterIF3IUL3)
itkSLICImageFilterIF3IUL3.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_GetAverageResidual, None, itkSLICImageFilterIF3IUL3)
itkSLICImageFilterIF3IUL3_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_swigregister
itkSLICImageFilterIF3IUL3_swigregister(itkSLICImageFilterIF3IUL3)

def itkSLICImageFilterIF3IUL3___New_orig__():
    """itkSLICImageFilterIF3IUL3___New_orig__() -> itkSLICImageFilterIF3IUL3_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3___New_orig__()

def itkSLICImageFilterIF3IUL3_cast(obj):
    """itkSLICImageFilterIF3IUL3_cast(itkLightObject obj) -> itkSLICImageFilterIF3IUL3"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_cast(obj)

class itkSLICImageFilterIF3IUS3(itkSLICImageFilterIF3IUS3_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterIF3IUS3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterIF3IUS3 self) -> itkSLICImageFilterIF3IUS3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterIF3IUS3 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterIF3IUS3 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterIF3IUS3 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterIF3IUS3 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterIF3IUS3 self) -> itkFixedArrayUI3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterIF3IUS3 self, itkFixedArrayUI3 _arg)
        SetSuperGridSize(itkSLICImageFilterIF3IUS3 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterIF3IUS3 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterIF3IUS3 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterIF3IUS3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterIF3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterIF3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterIF3IUS3 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterIF3IUS3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterIF3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterIF3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterIF3IUS3 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF3IUS3

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterIF3IUS3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIF3IUS3

        Create a new object of the class itkSLICImageFilterIF3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIF3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIF3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterIF3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterIF3IUS3.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Clone, None, itkSLICImageFilterIF3IUS3)
itkSLICImageFilterIF3IUS3.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_SetSpatialProximityWeight, None, itkSLICImageFilterIF3IUS3)
itkSLICImageFilterIF3IUS3.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetSpatialProximityWeight, None, itkSLICImageFilterIF3IUS3)
itkSLICImageFilterIF3IUS3.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_SetMaximumNumberOfIterations, None, itkSLICImageFilterIF3IUS3)
itkSLICImageFilterIF3IUS3.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetMaximumNumberOfIterations, None, itkSLICImageFilterIF3IUS3)
itkSLICImageFilterIF3IUS3.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetSuperGridSize, None, itkSLICImageFilterIF3IUS3)
itkSLICImageFilterIF3IUS3.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_SetSuperGridSize, None, itkSLICImageFilterIF3IUS3)
itkSLICImageFilterIF3IUS3.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_SetInitializationPerturbation, None, itkSLICImageFilterIF3IUS3)
itkSLICImageFilterIF3IUS3.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetInitializationPerturbation, None, itkSLICImageFilterIF3IUS3)
itkSLICImageFilterIF3IUS3.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_InitializationPerturbationOn, None, itkSLICImageFilterIF3IUS3)
itkSLICImageFilterIF3IUS3.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_InitializationPerturbationOff, None, itkSLICImageFilterIF3IUS3)
itkSLICImageFilterIF3IUS3.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_SetEnforceConnectivity, None, itkSLICImageFilterIF3IUS3)
itkSLICImageFilterIF3IUS3.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetEnforceConnectivity, None, itkSLICImageFilterIF3IUS3)
itkSLICImageFilterIF3IUS3.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_EnforceConnectivityOn, None, itkSLICImageFilterIF3IUS3)
itkSLICImageFilterIF3IUS3.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_EnforceConnectivityOff, None, itkSLICImageFilterIF3IUS3)
itkSLICImageFilterIF3IUS3.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetAverageResidual, None, itkSLICImageFilterIF3IUS3)
itkSLICImageFilterIF3IUS3_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_swigregister
itkSLICImageFilterIF3IUS3_swigregister(itkSLICImageFilterIF3IUS3)

def itkSLICImageFilterIF3IUS3___New_orig__():
    """itkSLICImageFilterIF3IUS3___New_orig__() -> itkSLICImageFilterIF3IUS3_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3___New_orig__()

def itkSLICImageFilterIF3IUS3_cast(obj):
    """itkSLICImageFilterIF3IUS3_cast(itkLightObject obj) -> itkSLICImageFilterIF3IUS3"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_cast(obj)

class itkSLICImageFilterISS2IUL2(itkSLICImageFilterISS2IUL2_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterISS2IUL2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterISS2IUL2 self) -> itkSLICImageFilterISS2IUL2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterISS2IUL2 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterISS2IUL2 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterISS2IUL2 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterISS2IUL2 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterISS2IUL2 self) -> itkFixedArrayUI2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterISS2IUL2 self, itkFixedArrayUI2 _arg)
        SetSuperGridSize(itkSLICImageFilterISS2IUL2 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterISS2IUL2 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterISS2IUL2 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterISS2IUL2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterISS2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterISS2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterISS2IUL2 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterISS2IUL2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterISS2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterISS2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterISS2IUL2 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS2IUL2

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterISS2IUL2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterISS2IUL2

        Create a new object of the class itkSLICImageFilterISS2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterISS2IUL2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterISS2IUL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterISS2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterISS2IUL2.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Clone, None, itkSLICImageFilterISS2IUL2)
itkSLICImageFilterISS2IUL2.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_SetSpatialProximityWeight, None, itkSLICImageFilterISS2IUL2)
itkSLICImageFilterISS2IUL2.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_GetSpatialProximityWeight, None, itkSLICImageFilterISS2IUL2)
itkSLICImageFilterISS2IUL2.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_SetMaximumNumberOfIterations, None, itkSLICImageFilterISS2IUL2)
itkSLICImageFilterISS2IUL2.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_GetMaximumNumberOfIterations, None, itkSLICImageFilterISS2IUL2)
itkSLICImageFilterISS2IUL2.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_GetSuperGridSize, None, itkSLICImageFilterISS2IUL2)
itkSLICImageFilterISS2IUL2.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_SetSuperGridSize, None, itkSLICImageFilterISS2IUL2)
itkSLICImageFilterISS2IUL2.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_SetInitializationPerturbation, None, itkSLICImageFilterISS2IUL2)
itkSLICImageFilterISS2IUL2.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_GetInitializationPerturbation, None, itkSLICImageFilterISS2IUL2)
itkSLICImageFilterISS2IUL2.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_InitializationPerturbationOn, None, itkSLICImageFilterISS2IUL2)
itkSLICImageFilterISS2IUL2.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_InitializationPerturbationOff, None, itkSLICImageFilterISS2IUL2)
itkSLICImageFilterISS2IUL2.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_SetEnforceConnectivity, None, itkSLICImageFilterISS2IUL2)
itkSLICImageFilterISS2IUL2.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_GetEnforceConnectivity, None, itkSLICImageFilterISS2IUL2)
itkSLICImageFilterISS2IUL2.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_EnforceConnectivityOn, None, itkSLICImageFilterISS2IUL2)
itkSLICImageFilterISS2IUL2.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_EnforceConnectivityOff, None, itkSLICImageFilterISS2IUL2)
itkSLICImageFilterISS2IUL2.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_GetAverageResidual, None, itkSLICImageFilterISS2IUL2)
itkSLICImageFilterISS2IUL2_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_swigregister
itkSLICImageFilterISS2IUL2_swigregister(itkSLICImageFilterISS2IUL2)

def itkSLICImageFilterISS2IUL2___New_orig__():
    """itkSLICImageFilterISS2IUL2___New_orig__() -> itkSLICImageFilterISS2IUL2_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2___New_orig__()

def itkSLICImageFilterISS2IUL2_cast(obj):
    """itkSLICImageFilterISS2IUL2_cast(itkLightObject obj) -> itkSLICImageFilterISS2IUL2"""
    return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_cast(obj)

class itkSLICImageFilterISS2IUS2(itkSLICImageFilterISS2IUS2_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterISS2IUS2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterISS2IUS2 self) -> itkSLICImageFilterISS2IUS2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterISS2IUS2 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterISS2IUS2 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterISS2IUS2 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterISS2IUS2 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterISS2IUS2 self) -> itkFixedArrayUI2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterISS2IUS2 self, itkFixedArrayUI2 _arg)
        SetSuperGridSize(itkSLICImageFilterISS2IUS2 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterISS2IUS2 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterISS2IUS2 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterISS2IUS2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterISS2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterISS2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterISS2IUS2 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterISS2IUS2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterISS2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterISS2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterISS2IUS2 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS2IUS2

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterISS2IUS2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterISS2IUS2

        Create a new object of the class itkSLICImageFilterISS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterISS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterISS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterISS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterISS2IUS2.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Clone, None, itkSLICImageFilterISS2IUS2)
itkSLICImageFilterISS2IUS2.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_SetSpatialProximityWeight, None, itkSLICImageFilterISS2IUS2)
itkSLICImageFilterISS2IUS2.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetSpatialProximityWeight, None, itkSLICImageFilterISS2IUS2)
itkSLICImageFilterISS2IUS2.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_SetMaximumNumberOfIterations, None, itkSLICImageFilterISS2IUS2)
itkSLICImageFilterISS2IUS2.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetMaximumNumberOfIterations, None, itkSLICImageFilterISS2IUS2)
itkSLICImageFilterISS2IUS2.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetSuperGridSize, None, itkSLICImageFilterISS2IUS2)
itkSLICImageFilterISS2IUS2.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_SetSuperGridSize, None, itkSLICImageFilterISS2IUS2)
itkSLICImageFilterISS2IUS2.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_SetInitializationPerturbation, None, itkSLICImageFilterISS2IUS2)
itkSLICImageFilterISS2IUS2.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetInitializationPerturbation, None, itkSLICImageFilterISS2IUS2)
itkSLICImageFilterISS2IUS2.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_InitializationPerturbationOn, None, itkSLICImageFilterISS2IUS2)
itkSLICImageFilterISS2IUS2.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_InitializationPerturbationOff, None, itkSLICImageFilterISS2IUS2)
itkSLICImageFilterISS2IUS2.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_SetEnforceConnectivity, None, itkSLICImageFilterISS2IUS2)
itkSLICImageFilterISS2IUS2.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetEnforceConnectivity, None, itkSLICImageFilterISS2IUS2)
itkSLICImageFilterISS2IUS2.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_EnforceConnectivityOn, None, itkSLICImageFilterISS2IUS2)
itkSLICImageFilterISS2IUS2.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_EnforceConnectivityOff, None, itkSLICImageFilterISS2IUS2)
itkSLICImageFilterISS2IUS2.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetAverageResidual, None, itkSLICImageFilterISS2IUS2)
itkSLICImageFilterISS2IUS2_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_swigregister
itkSLICImageFilterISS2IUS2_swigregister(itkSLICImageFilterISS2IUS2)

def itkSLICImageFilterISS2IUS2___New_orig__():
    """itkSLICImageFilterISS2IUS2___New_orig__() -> itkSLICImageFilterISS2IUS2_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2___New_orig__()

def itkSLICImageFilterISS2IUS2_cast(obj):
    """itkSLICImageFilterISS2IUS2_cast(itkLightObject obj) -> itkSLICImageFilterISS2IUS2"""
    return _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_cast(obj)

class itkSLICImageFilterISS3IUL3(itkSLICImageFilterISS3IUL3_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterISS3IUL3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterISS3IUL3 self) -> itkSLICImageFilterISS3IUL3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterISS3IUL3 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterISS3IUL3 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterISS3IUL3 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterISS3IUL3 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterISS3IUL3 self) -> itkFixedArrayUI3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterISS3IUL3 self, itkFixedArrayUI3 _arg)
        SetSuperGridSize(itkSLICImageFilterISS3IUL3 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterISS3IUL3 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterISS3IUL3 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterISS3IUL3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterISS3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterISS3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterISS3IUL3 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterISS3IUL3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterISS3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterISS3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterISS3IUL3 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS3IUL3

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterISS3IUL3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterISS3IUL3

        Create a new object of the class itkSLICImageFilterISS3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterISS3IUL3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterISS3IUL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterISS3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterISS3IUL3.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Clone, None, itkSLICImageFilterISS3IUL3)
itkSLICImageFilterISS3IUL3.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_SetSpatialProximityWeight, None, itkSLICImageFilterISS3IUL3)
itkSLICImageFilterISS3IUL3.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_GetSpatialProximityWeight, None, itkSLICImageFilterISS3IUL3)
itkSLICImageFilterISS3IUL3.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_SetMaximumNumberOfIterations, None, itkSLICImageFilterISS3IUL3)
itkSLICImageFilterISS3IUL3.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_GetMaximumNumberOfIterations, None, itkSLICImageFilterISS3IUL3)
itkSLICImageFilterISS3IUL3.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_GetSuperGridSize, None, itkSLICImageFilterISS3IUL3)
itkSLICImageFilterISS3IUL3.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_SetSuperGridSize, None, itkSLICImageFilterISS3IUL3)
itkSLICImageFilterISS3IUL3.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_SetInitializationPerturbation, None, itkSLICImageFilterISS3IUL3)
itkSLICImageFilterISS3IUL3.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_GetInitializationPerturbation, None, itkSLICImageFilterISS3IUL3)
itkSLICImageFilterISS3IUL3.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_InitializationPerturbationOn, None, itkSLICImageFilterISS3IUL3)
itkSLICImageFilterISS3IUL3.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_InitializationPerturbationOff, None, itkSLICImageFilterISS3IUL3)
itkSLICImageFilterISS3IUL3.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_SetEnforceConnectivity, None, itkSLICImageFilterISS3IUL3)
itkSLICImageFilterISS3IUL3.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_GetEnforceConnectivity, None, itkSLICImageFilterISS3IUL3)
itkSLICImageFilterISS3IUL3.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_EnforceConnectivityOn, None, itkSLICImageFilterISS3IUL3)
itkSLICImageFilterISS3IUL3.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_EnforceConnectivityOff, None, itkSLICImageFilterISS3IUL3)
itkSLICImageFilterISS3IUL3.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_GetAverageResidual, None, itkSLICImageFilterISS3IUL3)
itkSLICImageFilterISS3IUL3_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_swigregister
itkSLICImageFilterISS3IUL3_swigregister(itkSLICImageFilterISS3IUL3)

def itkSLICImageFilterISS3IUL3___New_orig__():
    """itkSLICImageFilterISS3IUL3___New_orig__() -> itkSLICImageFilterISS3IUL3_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3___New_orig__()

def itkSLICImageFilterISS3IUL3_cast(obj):
    """itkSLICImageFilterISS3IUL3_cast(itkLightObject obj) -> itkSLICImageFilterISS3IUL3"""
    return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_cast(obj)

class itkSLICImageFilterISS3IUS3(itkSLICImageFilterISS3IUS3_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterISS3IUS3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterISS3IUS3 self) -> itkSLICImageFilterISS3IUS3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterISS3IUS3 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterISS3IUS3 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterISS3IUS3 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterISS3IUS3 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterISS3IUS3 self) -> itkFixedArrayUI3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterISS3IUS3 self, itkFixedArrayUI3 _arg)
        SetSuperGridSize(itkSLICImageFilterISS3IUS3 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterISS3IUS3 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterISS3IUS3 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterISS3IUS3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterISS3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterISS3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterISS3IUS3 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterISS3IUS3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterISS3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterISS3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterISS3IUS3 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS3IUS3

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterISS3IUS3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterISS3IUS3

        Create a new object of the class itkSLICImageFilterISS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterISS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterISS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterISS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterISS3IUS3.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Clone, None, itkSLICImageFilterISS3IUS3)
itkSLICImageFilterISS3IUS3.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_SetSpatialProximityWeight, None, itkSLICImageFilterISS3IUS3)
itkSLICImageFilterISS3IUS3.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetSpatialProximityWeight, None, itkSLICImageFilterISS3IUS3)
itkSLICImageFilterISS3IUS3.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_SetMaximumNumberOfIterations, None, itkSLICImageFilterISS3IUS3)
itkSLICImageFilterISS3IUS3.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetMaximumNumberOfIterations, None, itkSLICImageFilterISS3IUS3)
itkSLICImageFilterISS3IUS3.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetSuperGridSize, None, itkSLICImageFilterISS3IUS3)
itkSLICImageFilterISS3IUS3.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_SetSuperGridSize, None, itkSLICImageFilterISS3IUS3)
itkSLICImageFilterISS3IUS3.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_SetInitializationPerturbation, None, itkSLICImageFilterISS3IUS3)
itkSLICImageFilterISS3IUS3.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetInitializationPerturbation, None, itkSLICImageFilterISS3IUS3)
itkSLICImageFilterISS3IUS3.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_InitializationPerturbationOn, None, itkSLICImageFilterISS3IUS3)
itkSLICImageFilterISS3IUS3.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_InitializationPerturbationOff, None, itkSLICImageFilterISS3IUS3)
itkSLICImageFilterISS3IUS3.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_SetEnforceConnectivity, None, itkSLICImageFilterISS3IUS3)
itkSLICImageFilterISS3IUS3.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetEnforceConnectivity, None, itkSLICImageFilterISS3IUS3)
itkSLICImageFilterISS3IUS3.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_EnforceConnectivityOn, None, itkSLICImageFilterISS3IUS3)
itkSLICImageFilterISS3IUS3.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_EnforceConnectivityOff, None, itkSLICImageFilterISS3IUS3)
itkSLICImageFilterISS3IUS3.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetAverageResidual, None, itkSLICImageFilterISS3IUS3)
itkSLICImageFilterISS3IUS3_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_swigregister
itkSLICImageFilterISS3IUS3_swigregister(itkSLICImageFilterISS3IUS3)

def itkSLICImageFilterISS3IUS3___New_orig__():
    """itkSLICImageFilterISS3IUS3___New_orig__() -> itkSLICImageFilterISS3IUS3_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3___New_orig__()

def itkSLICImageFilterISS3IUS3_cast(obj):
    """itkSLICImageFilterISS3IUS3_cast(itkLightObject obj) -> itkSLICImageFilterISS3IUS3"""
    return _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_cast(obj)

class itkSLICImageFilterIUC2IUL2(itkSLICImageFilterIUC2IUL2_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterIUC2IUL2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterIUC2IUL2 self) -> itkSLICImageFilterIUC2IUL2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterIUC2IUL2 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterIUC2IUL2 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterIUC2IUL2 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterIUC2IUL2 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterIUC2IUL2 self) -> itkFixedArrayUI2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterIUC2IUL2 self, itkFixedArrayUI2 _arg)
        SetSuperGridSize(itkSLICImageFilterIUC2IUL2 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterIUC2IUL2 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterIUC2IUL2 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterIUC2IUL2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterIUC2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterIUC2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterIUC2IUL2 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterIUC2IUL2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterIUC2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterIUC2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterIUC2IUL2 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC2IUL2

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterIUC2IUL2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUC2IUL2

        Create a new object of the class itkSLICImageFilterIUC2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUC2IUL2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUC2IUL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterIUC2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterIUC2IUL2.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Clone, None, itkSLICImageFilterIUC2IUL2)
itkSLICImageFilterIUC2IUL2.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_SetSpatialProximityWeight, None, itkSLICImageFilterIUC2IUL2)
itkSLICImageFilterIUC2IUL2.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_GetSpatialProximityWeight, None, itkSLICImageFilterIUC2IUL2)
itkSLICImageFilterIUC2IUL2.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_SetMaximumNumberOfIterations, None, itkSLICImageFilterIUC2IUL2)
itkSLICImageFilterIUC2IUL2.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_GetMaximumNumberOfIterations, None, itkSLICImageFilterIUC2IUL2)
itkSLICImageFilterIUC2IUL2.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_GetSuperGridSize, None, itkSLICImageFilterIUC2IUL2)
itkSLICImageFilterIUC2IUL2.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_SetSuperGridSize, None, itkSLICImageFilterIUC2IUL2)
itkSLICImageFilterIUC2IUL2.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_SetInitializationPerturbation, None, itkSLICImageFilterIUC2IUL2)
itkSLICImageFilterIUC2IUL2.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_GetInitializationPerturbation, None, itkSLICImageFilterIUC2IUL2)
itkSLICImageFilterIUC2IUL2.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_InitializationPerturbationOn, None, itkSLICImageFilterIUC2IUL2)
itkSLICImageFilterIUC2IUL2.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_InitializationPerturbationOff, None, itkSLICImageFilterIUC2IUL2)
itkSLICImageFilterIUC2IUL2.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_SetEnforceConnectivity, None, itkSLICImageFilterIUC2IUL2)
itkSLICImageFilterIUC2IUL2.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_GetEnforceConnectivity, None, itkSLICImageFilterIUC2IUL2)
itkSLICImageFilterIUC2IUL2.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_EnforceConnectivityOn, None, itkSLICImageFilterIUC2IUL2)
itkSLICImageFilterIUC2IUL2.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_EnforceConnectivityOff, None, itkSLICImageFilterIUC2IUL2)
itkSLICImageFilterIUC2IUL2.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_GetAverageResidual, None, itkSLICImageFilterIUC2IUL2)
itkSLICImageFilterIUC2IUL2_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_swigregister
itkSLICImageFilterIUC2IUL2_swigregister(itkSLICImageFilterIUC2IUL2)

def itkSLICImageFilterIUC2IUL2___New_orig__():
    """itkSLICImageFilterIUC2IUL2___New_orig__() -> itkSLICImageFilterIUC2IUL2_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2___New_orig__()

def itkSLICImageFilterIUC2IUL2_cast(obj):
    """itkSLICImageFilterIUC2IUL2_cast(itkLightObject obj) -> itkSLICImageFilterIUC2IUL2"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_cast(obj)

class itkSLICImageFilterIUC2IUS2(itkSLICImageFilterIUC2IUS2_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterIUC2IUS2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterIUC2IUS2 self) -> itkSLICImageFilterIUC2IUS2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterIUC2IUS2 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterIUC2IUS2 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterIUC2IUS2 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterIUC2IUS2 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterIUC2IUS2 self) -> itkFixedArrayUI2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterIUC2IUS2 self, itkFixedArrayUI2 _arg)
        SetSuperGridSize(itkSLICImageFilterIUC2IUS2 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterIUC2IUS2 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterIUC2IUS2 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterIUC2IUS2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterIUC2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterIUC2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterIUC2IUS2 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterIUC2IUS2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterIUC2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterIUC2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterIUC2IUS2 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC2IUS2

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterIUC2IUS2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUC2IUS2

        Create a new object of the class itkSLICImageFilterIUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUC2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUC2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterIUC2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterIUC2IUS2.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Clone, None, itkSLICImageFilterIUC2IUS2)
itkSLICImageFilterIUC2IUS2.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_SetSpatialProximityWeight, None, itkSLICImageFilterIUC2IUS2)
itkSLICImageFilterIUC2IUS2.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetSpatialProximityWeight, None, itkSLICImageFilterIUC2IUS2)
itkSLICImageFilterIUC2IUS2.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_SetMaximumNumberOfIterations, None, itkSLICImageFilterIUC2IUS2)
itkSLICImageFilterIUC2IUS2.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetMaximumNumberOfIterations, None, itkSLICImageFilterIUC2IUS2)
itkSLICImageFilterIUC2IUS2.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetSuperGridSize, None, itkSLICImageFilterIUC2IUS2)
itkSLICImageFilterIUC2IUS2.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_SetSuperGridSize, None, itkSLICImageFilterIUC2IUS2)
itkSLICImageFilterIUC2IUS2.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_SetInitializationPerturbation, None, itkSLICImageFilterIUC2IUS2)
itkSLICImageFilterIUC2IUS2.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetInitializationPerturbation, None, itkSLICImageFilterIUC2IUS2)
itkSLICImageFilterIUC2IUS2.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_InitializationPerturbationOn, None, itkSLICImageFilterIUC2IUS2)
itkSLICImageFilterIUC2IUS2.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_InitializationPerturbationOff, None, itkSLICImageFilterIUC2IUS2)
itkSLICImageFilterIUC2IUS2.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_SetEnforceConnectivity, None, itkSLICImageFilterIUC2IUS2)
itkSLICImageFilterIUC2IUS2.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetEnforceConnectivity, None, itkSLICImageFilterIUC2IUS2)
itkSLICImageFilterIUC2IUS2.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_EnforceConnectivityOn, None, itkSLICImageFilterIUC2IUS2)
itkSLICImageFilterIUC2IUS2.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_EnforceConnectivityOff, None, itkSLICImageFilterIUC2IUS2)
itkSLICImageFilterIUC2IUS2.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetAverageResidual, None, itkSLICImageFilterIUC2IUS2)
itkSLICImageFilterIUC2IUS2_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_swigregister
itkSLICImageFilterIUC2IUS2_swigregister(itkSLICImageFilterIUC2IUS2)

def itkSLICImageFilterIUC2IUS2___New_orig__():
    """itkSLICImageFilterIUC2IUS2___New_orig__() -> itkSLICImageFilterIUC2IUS2_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2___New_orig__()

def itkSLICImageFilterIUC2IUS2_cast(obj):
    """itkSLICImageFilterIUC2IUS2_cast(itkLightObject obj) -> itkSLICImageFilterIUC2IUS2"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_cast(obj)

class itkSLICImageFilterIUC3IUL3(itkSLICImageFilterIUC3IUL3_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterIUC3IUL3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterIUC3IUL3 self) -> itkSLICImageFilterIUC3IUL3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterIUC3IUL3 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterIUC3IUL3 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterIUC3IUL3 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterIUC3IUL3 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterIUC3IUL3 self) -> itkFixedArrayUI3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterIUC3IUL3 self, itkFixedArrayUI3 _arg)
        SetSuperGridSize(itkSLICImageFilterIUC3IUL3 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterIUC3IUL3 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterIUC3IUL3 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterIUC3IUL3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterIUC3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterIUC3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterIUC3IUL3 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterIUC3IUL3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterIUC3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterIUC3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterIUC3IUL3 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC3IUL3

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterIUC3IUL3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUC3IUL3

        Create a new object of the class itkSLICImageFilterIUC3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUC3IUL3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUC3IUL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterIUC3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterIUC3IUL3.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Clone, None, itkSLICImageFilterIUC3IUL3)
itkSLICImageFilterIUC3IUL3.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_SetSpatialProximityWeight, None, itkSLICImageFilterIUC3IUL3)
itkSLICImageFilterIUC3IUL3.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_GetSpatialProximityWeight, None, itkSLICImageFilterIUC3IUL3)
itkSLICImageFilterIUC3IUL3.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_SetMaximumNumberOfIterations, None, itkSLICImageFilterIUC3IUL3)
itkSLICImageFilterIUC3IUL3.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_GetMaximumNumberOfIterations, None, itkSLICImageFilterIUC3IUL3)
itkSLICImageFilterIUC3IUL3.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_GetSuperGridSize, None, itkSLICImageFilterIUC3IUL3)
itkSLICImageFilterIUC3IUL3.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_SetSuperGridSize, None, itkSLICImageFilterIUC3IUL3)
itkSLICImageFilterIUC3IUL3.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_SetInitializationPerturbation, None, itkSLICImageFilterIUC3IUL3)
itkSLICImageFilterIUC3IUL3.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_GetInitializationPerturbation, None, itkSLICImageFilterIUC3IUL3)
itkSLICImageFilterIUC3IUL3.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_InitializationPerturbationOn, None, itkSLICImageFilterIUC3IUL3)
itkSLICImageFilterIUC3IUL3.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_InitializationPerturbationOff, None, itkSLICImageFilterIUC3IUL3)
itkSLICImageFilterIUC3IUL3.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_SetEnforceConnectivity, None, itkSLICImageFilterIUC3IUL3)
itkSLICImageFilterIUC3IUL3.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_GetEnforceConnectivity, None, itkSLICImageFilterIUC3IUL3)
itkSLICImageFilterIUC3IUL3.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_EnforceConnectivityOn, None, itkSLICImageFilterIUC3IUL3)
itkSLICImageFilterIUC3IUL3.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_EnforceConnectivityOff, None, itkSLICImageFilterIUC3IUL3)
itkSLICImageFilterIUC3IUL3.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_GetAverageResidual, None, itkSLICImageFilterIUC3IUL3)
itkSLICImageFilterIUC3IUL3_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_swigregister
itkSLICImageFilterIUC3IUL3_swigregister(itkSLICImageFilterIUC3IUL3)

def itkSLICImageFilterIUC3IUL3___New_orig__():
    """itkSLICImageFilterIUC3IUL3___New_orig__() -> itkSLICImageFilterIUC3IUL3_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3___New_orig__()

def itkSLICImageFilterIUC3IUL3_cast(obj):
    """itkSLICImageFilterIUC3IUL3_cast(itkLightObject obj) -> itkSLICImageFilterIUC3IUL3"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_cast(obj)

class itkSLICImageFilterIUC3IUS3(itkSLICImageFilterIUC3IUS3_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterIUC3IUS3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterIUC3IUS3 self) -> itkSLICImageFilterIUC3IUS3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterIUC3IUS3 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterIUC3IUS3 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterIUC3IUS3 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterIUC3IUS3 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterIUC3IUS3 self) -> itkFixedArrayUI3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterIUC3IUS3 self, itkFixedArrayUI3 _arg)
        SetSuperGridSize(itkSLICImageFilterIUC3IUS3 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterIUC3IUS3 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterIUC3IUS3 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterIUC3IUS3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterIUC3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterIUC3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterIUC3IUS3 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterIUC3IUS3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterIUC3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterIUC3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterIUC3IUS3 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC3IUS3

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterIUC3IUS3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUC3IUS3

        Create a new object of the class itkSLICImageFilterIUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUC3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUC3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterIUC3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterIUC3IUS3.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Clone, None, itkSLICImageFilterIUC3IUS3)
itkSLICImageFilterIUC3IUS3.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_SetSpatialProximityWeight, None, itkSLICImageFilterIUC3IUS3)
itkSLICImageFilterIUC3IUS3.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetSpatialProximityWeight, None, itkSLICImageFilterIUC3IUS3)
itkSLICImageFilterIUC3IUS3.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_SetMaximumNumberOfIterations, None, itkSLICImageFilterIUC3IUS3)
itkSLICImageFilterIUC3IUS3.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetMaximumNumberOfIterations, None, itkSLICImageFilterIUC3IUS3)
itkSLICImageFilterIUC3IUS3.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetSuperGridSize, None, itkSLICImageFilterIUC3IUS3)
itkSLICImageFilterIUC3IUS3.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_SetSuperGridSize, None, itkSLICImageFilterIUC3IUS3)
itkSLICImageFilterIUC3IUS3.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_SetInitializationPerturbation, None, itkSLICImageFilterIUC3IUS3)
itkSLICImageFilterIUC3IUS3.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetInitializationPerturbation, None, itkSLICImageFilterIUC3IUS3)
itkSLICImageFilterIUC3IUS3.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_InitializationPerturbationOn, None, itkSLICImageFilterIUC3IUS3)
itkSLICImageFilterIUC3IUS3.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_InitializationPerturbationOff, None, itkSLICImageFilterIUC3IUS3)
itkSLICImageFilterIUC3IUS3.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_SetEnforceConnectivity, None, itkSLICImageFilterIUC3IUS3)
itkSLICImageFilterIUC3IUS3.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetEnforceConnectivity, None, itkSLICImageFilterIUC3IUS3)
itkSLICImageFilterIUC3IUS3.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_EnforceConnectivityOn, None, itkSLICImageFilterIUC3IUS3)
itkSLICImageFilterIUC3IUS3.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_EnforceConnectivityOff, None, itkSLICImageFilterIUC3IUS3)
itkSLICImageFilterIUC3IUS3.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetAverageResidual, None, itkSLICImageFilterIUC3IUS3)
itkSLICImageFilterIUC3IUS3_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_swigregister
itkSLICImageFilterIUC3IUS3_swigregister(itkSLICImageFilterIUC3IUS3)

def itkSLICImageFilterIUC3IUS3___New_orig__():
    """itkSLICImageFilterIUC3IUS3___New_orig__() -> itkSLICImageFilterIUC3IUS3_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3___New_orig__()

def itkSLICImageFilterIUC3IUS3_cast(obj):
    """itkSLICImageFilterIUC3IUS3_cast(itkLightObject obj) -> itkSLICImageFilterIUC3IUS3"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_cast(obj)

class itkSLICImageFilterIUS2IUL2(itkSLICImageFilterIUS2IUL2_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterIUS2IUL2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterIUS2IUL2 self) -> itkSLICImageFilterIUS2IUL2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterIUS2IUL2 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterIUS2IUL2 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterIUS2IUL2 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterIUS2IUL2 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterIUS2IUL2 self) -> itkFixedArrayUI2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterIUS2IUL2 self, itkFixedArrayUI2 _arg)
        SetSuperGridSize(itkSLICImageFilterIUS2IUL2 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterIUS2IUL2 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterIUS2IUL2 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterIUS2IUL2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterIUS2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterIUS2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterIUS2IUL2 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterIUS2IUL2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterIUS2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterIUS2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterIUS2IUL2 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS2IUL2

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterIUS2IUL2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUS2IUL2

        Create a new object of the class itkSLICImageFilterIUS2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUS2IUL2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUS2IUL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterIUS2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterIUS2IUL2.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Clone, None, itkSLICImageFilterIUS2IUL2)
itkSLICImageFilterIUS2IUL2.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_SetSpatialProximityWeight, None, itkSLICImageFilterIUS2IUL2)
itkSLICImageFilterIUS2IUL2.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_GetSpatialProximityWeight, None, itkSLICImageFilterIUS2IUL2)
itkSLICImageFilterIUS2IUL2.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_SetMaximumNumberOfIterations, None, itkSLICImageFilterIUS2IUL2)
itkSLICImageFilterIUS2IUL2.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_GetMaximumNumberOfIterations, None, itkSLICImageFilterIUS2IUL2)
itkSLICImageFilterIUS2IUL2.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_GetSuperGridSize, None, itkSLICImageFilterIUS2IUL2)
itkSLICImageFilterIUS2IUL2.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_SetSuperGridSize, None, itkSLICImageFilterIUS2IUL2)
itkSLICImageFilterIUS2IUL2.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_SetInitializationPerturbation, None, itkSLICImageFilterIUS2IUL2)
itkSLICImageFilterIUS2IUL2.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_GetInitializationPerturbation, None, itkSLICImageFilterIUS2IUL2)
itkSLICImageFilterIUS2IUL2.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_InitializationPerturbationOn, None, itkSLICImageFilterIUS2IUL2)
itkSLICImageFilterIUS2IUL2.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_InitializationPerturbationOff, None, itkSLICImageFilterIUS2IUL2)
itkSLICImageFilterIUS2IUL2.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_SetEnforceConnectivity, None, itkSLICImageFilterIUS2IUL2)
itkSLICImageFilterIUS2IUL2.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_GetEnforceConnectivity, None, itkSLICImageFilterIUS2IUL2)
itkSLICImageFilterIUS2IUL2.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_EnforceConnectivityOn, None, itkSLICImageFilterIUS2IUL2)
itkSLICImageFilterIUS2IUL2.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_EnforceConnectivityOff, None, itkSLICImageFilterIUS2IUL2)
itkSLICImageFilterIUS2IUL2.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_GetAverageResidual, None, itkSLICImageFilterIUS2IUL2)
itkSLICImageFilterIUS2IUL2_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_swigregister
itkSLICImageFilterIUS2IUL2_swigregister(itkSLICImageFilterIUS2IUL2)

def itkSLICImageFilterIUS2IUL2___New_orig__():
    """itkSLICImageFilterIUS2IUL2___New_orig__() -> itkSLICImageFilterIUS2IUL2_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2___New_orig__()

def itkSLICImageFilterIUS2IUL2_cast(obj):
    """itkSLICImageFilterIUS2IUL2_cast(itkLightObject obj) -> itkSLICImageFilterIUS2IUL2"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_cast(obj)

class itkSLICImageFilterIUS2IUS2(itkSLICImageFilterIUS2IUS2_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterIUS2IUS2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterIUS2IUS2 self) -> itkSLICImageFilterIUS2IUS2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterIUS2IUS2 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterIUS2IUS2 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterIUS2IUS2 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterIUS2IUS2 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterIUS2IUS2 self) -> itkFixedArrayUI2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterIUS2IUS2 self, itkFixedArrayUI2 _arg)
        SetSuperGridSize(itkSLICImageFilterIUS2IUS2 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterIUS2IUS2 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterIUS2IUS2 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterIUS2IUS2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterIUS2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterIUS2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterIUS2IUS2 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterIUS2IUS2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterIUS2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterIUS2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterIUS2IUS2 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS2IUS2

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterIUS2IUS2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUS2IUS2

        Create a new object of the class itkSLICImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterIUS2IUS2.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Clone, None, itkSLICImageFilterIUS2IUS2)
itkSLICImageFilterIUS2IUS2.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_SetSpatialProximityWeight, None, itkSLICImageFilterIUS2IUS2)
itkSLICImageFilterIUS2IUS2.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetSpatialProximityWeight, None, itkSLICImageFilterIUS2IUS2)
itkSLICImageFilterIUS2IUS2.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_SetMaximumNumberOfIterations, None, itkSLICImageFilterIUS2IUS2)
itkSLICImageFilterIUS2IUS2.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetMaximumNumberOfIterations, None, itkSLICImageFilterIUS2IUS2)
itkSLICImageFilterIUS2IUS2.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetSuperGridSize, None, itkSLICImageFilterIUS2IUS2)
itkSLICImageFilterIUS2IUS2.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_SetSuperGridSize, None, itkSLICImageFilterIUS2IUS2)
itkSLICImageFilterIUS2IUS2.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_SetInitializationPerturbation, None, itkSLICImageFilterIUS2IUS2)
itkSLICImageFilterIUS2IUS2.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetInitializationPerturbation, None, itkSLICImageFilterIUS2IUS2)
itkSLICImageFilterIUS2IUS2.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_InitializationPerturbationOn, None, itkSLICImageFilterIUS2IUS2)
itkSLICImageFilterIUS2IUS2.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_InitializationPerturbationOff, None, itkSLICImageFilterIUS2IUS2)
itkSLICImageFilterIUS2IUS2.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_SetEnforceConnectivity, None, itkSLICImageFilterIUS2IUS2)
itkSLICImageFilterIUS2IUS2.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetEnforceConnectivity, None, itkSLICImageFilterIUS2IUS2)
itkSLICImageFilterIUS2IUS2.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_EnforceConnectivityOn, None, itkSLICImageFilterIUS2IUS2)
itkSLICImageFilterIUS2IUS2.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_EnforceConnectivityOff, None, itkSLICImageFilterIUS2IUS2)
itkSLICImageFilterIUS2IUS2.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetAverageResidual, None, itkSLICImageFilterIUS2IUS2)
itkSLICImageFilterIUS2IUS2_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_swigregister
itkSLICImageFilterIUS2IUS2_swigregister(itkSLICImageFilterIUS2IUS2)

def itkSLICImageFilterIUS2IUS2___New_orig__():
    """itkSLICImageFilterIUS2IUS2___New_orig__() -> itkSLICImageFilterIUS2IUS2_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2___New_orig__()

def itkSLICImageFilterIUS2IUS2_cast(obj):
    """itkSLICImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkSLICImageFilterIUS2IUS2"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_cast(obj)

class itkSLICImageFilterIUS3IUL3(itkSLICImageFilterIUS3IUL3_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterIUS3IUL3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterIUS3IUL3 self) -> itkSLICImageFilterIUS3IUL3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterIUS3IUL3 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterIUS3IUL3 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterIUS3IUL3 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterIUS3IUL3 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterIUS3IUL3 self) -> itkFixedArrayUI3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterIUS3IUL3 self, itkFixedArrayUI3 _arg)
        SetSuperGridSize(itkSLICImageFilterIUS3IUL3 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterIUS3IUL3 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterIUS3IUL3 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterIUS3IUL3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterIUS3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterIUS3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterIUS3IUL3 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterIUS3IUL3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterIUS3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterIUS3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterIUS3IUL3 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS3IUL3

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterIUS3IUL3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUS3IUL3

        Create a new object of the class itkSLICImageFilterIUS3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUS3IUL3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUS3IUL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterIUS3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterIUS3IUL3.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Clone, None, itkSLICImageFilterIUS3IUL3)
itkSLICImageFilterIUS3IUL3.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_SetSpatialProximityWeight, None, itkSLICImageFilterIUS3IUL3)
itkSLICImageFilterIUS3IUL3.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_GetSpatialProximityWeight, None, itkSLICImageFilterIUS3IUL3)
itkSLICImageFilterIUS3IUL3.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_SetMaximumNumberOfIterations, None, itkSLICImageFilterIUS3IUL3)
itkSLICImageFilterIUS3IUL3.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_GetMaximumNumberOfIterations, None, itkSLICImageFilterIUS3IUL3)
itkSLICImageFilterIUS3IUL3.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_GetSuperGridSize, None, itkSLICImageFilterIUS3IUL3)
itkSLICImageFilterIUS3IUL3.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_SetSuperGridSize, None, itkSLICImageFilterIUS3IUL3)
itkSLICImageFilterIUS3IUL3.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_SetInitializationPerturbation, None, itkSLICImageFilterIUS3IUL3)
itkSLICImageFilterIUS3IUL3.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_GetInitializationPerturbation, None, itkSLICImageFilterIUS3IUL3)
itkSLICImageFilterIUS3IUL3.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_InitializationPerturbationOn, None, itkSLICImageFilterIUS3IUL3)
itkSLICImageFilterIUS3IUL3.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_InitializationPerturbationOff, None, itkSLICImageFilterIUS3IUL3)
itkSLICImageFilterIUS3IUL3.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_SetEnforceConnectivity, None, itkSLICImageFilterIUS3IUL3)
itkSLICImageFilterIUS3IUL3.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_GetEnforceConnectivity, None, itkSLICImageFilterIUS3IUL3)
itkSLICImageFilterIUS3IUL3.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_EnforceConnectivityOn, None, itkSLICImageFilterIUS3IUL3)
itkSLICImageFilterIUS3IUL3.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_EnforceConnectivityOff, None, itkSLICImageFilterIUS3IUL3)
itkSLICImageFilterIUS3IUL3.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_GetAverageResidual, None, itkSLICImageFilterIUS3IUL3)
itkSLICImageFilterIUS3IUL3_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_swigregister
itkSLICImageFilterIUS3IUL3_swigregister(itkSLICImageFilterIUS3IUL3)

def itkSLICImageFilterIUS3IUL3___New_orig__():
    """itkSLICImageFilterIUS3IUL3___New_orig__() -> itkSLICImageFilterIUS3IUL3_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3___New_orig__()

def itkSLICImageFilterIUS3IUL3_cast(obj):
    """itkSLICImageFilterIUS3IUL3_cast(itkLightObject obj) -> itkSLICImageFilterIUS3IUL3"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_cast(obj)

class itkSLICImageFilterIUS3IUS3(itkSLICImageFilterIUS3IUS3_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterIUS3IUS3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterIUS3IUS3 self) -> itkSLICImageFilterIUS3IUS3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterIUS3IUS3 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterIUS3IUS3 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterIUS3IUS3 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterIUS3IUS3 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterIUS3IUS3 self) -> itkFixedArrayUI3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterIUS3IUS3 self, itkFixedArrayUI3 _arg)
        SetSuperGridSize(itkSLICImageFilterIUS3IUS3 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterIUS3IUS3 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterIUS3IUS3 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterIUS3IUS3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterIUS3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterIUS3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterIUS3IUS3 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterIUS3IUS3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterIUS3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterIUS3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterIUS3IUS3 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS3IUS3

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterIUS3IUS3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUS3IUS3

        Create a new object of the class itkSLICImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterIUS3IUS3.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Clone, None, itkSLICImageFilterIUS3IUS3)
itkSLICImageFilterIUS3IUS3.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_SetSpatialProximityWeight, None, itkSLICImageFilterIUS3IUS3)
itkSLICImageFilterIUS3IUS3.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetSpatialProximityWeight, None, itkSLICImageFilterIUS3IUS3)
itkSLICImageFilterIUS3IUS3.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_SetMaximumNumberOfIterations, None, itkSLICImageFilterIUS3IUS3)
itkSLICImageFilterIUS3IUS3.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetMaximumNumberOfIterations, None, itkSLICImageFilterIUS3IUS3)
itkSLICImageFilterIUS3IUS3.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetSuperGridSize, None, itkSLICImageFilterIUS3IUS3)
itkSLICImageFilterIUS3IUS3.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_SetSuperGridSize, None, itkSLICImageFilterIUS3IUS3)
itkSLICImageFilterIUS3IUS3.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_SetInitializationPerturbation, None, itkSLICImageFilterIUS3IUS3)
itkSLICImageFilterIUS3IUS3.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetInitializationPerturbation, None, itkSLICImageFilterIUS3IUS3)
itkSLICImageFilterIUS3IUS3.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_InitializationPerturbationOn, None, itkSLICImageFilterIUS3IUS3)
itkSLICImageFilterIUS3IUS3.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_InitializationPerturbationOff, None, itkSLICImageFilterIUS3IUS3)
itkSLICImageFilterIUS3IUS3.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_SetEnforceConnectivity, None, itkSLICImageFilterIUS3IUS3)
itkSLICImageFilterIUS3IUS3.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetEnforceConnectivity, None, itkSLICImageFilterIUS3IUS3)
itkSLICImageFilterIUS3IUS3.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_EnforceConnectivityOn, None, itkSLICImageFilterIUS3IUS3)
itkSLICImageFilterIUS3IUS3.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_EnforceConnectivityOff, None, itkSLICImageFilterIUS3IUS3)
itkSLICImageFilterIUS3IUS3.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetAverageResidual, None, itkSLICImageFilterIUS3IUS3)
itkSLICImageFilterIUS3IUS3_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_swigregister
itkSLICImageFilterIUS3IUS3_swigregister(itkSLICImageFilterIUS3IUS3)

def itkSLICImageFilterIUS3IUS3___New_orig__():
    """itkSLICImageFilterIUS3IUS3___New_orig__() -> itkSLICImageFilterIUS3IUS3_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3___New_orig__()

def itkSLICImageFilterIUS3IUS3_cast(obj):
    """itkSLICImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkSLICImageFilterIUS3IUS3"""
    return _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_cast(obj)

class itkSLICImageFilterVIF2IUL2(itkSLICImageFilterVIF2IUL2_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterVIF2IUL2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterVIF2IUL2 self) -> itkSLICImageFilterVIF2IUL2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterVIF2IUL2 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterVIF2IUL2 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterVIF2IUL2 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterVIF2IUL2 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterVIF2IUL2 self) -> itkFixedArrayUI2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterVIF2IUL2 self, itkFixedArrayUI2 _arg)
        SetSuperGridSize(itkSLICImageFilterVIF2IUL2 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterVIF2IUL2 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterVIF2IUL2 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterVIF2IUL2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterVIF2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterVIF2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterVIF2IUL2 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterVIF2IUL2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterVIF2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterVIF2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterVIF2IUL2 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF2IUL2

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVIF2IUL2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIF2IUL2

        Create a new object of the class itkSLICImageFilterVIF2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIF2IUL2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIF2IUL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVIF2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVIF2IUL2.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Clone, None, itkSLICImageFilterVIF2IUL2)
itkSLICImageFilterVIF2IUL2.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_SetSpatialProximityWeight, None, itkSLICImageFilterVIF2IUL2)
itkSLICImageFilterVIF2IUL2.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_GetSpatialProximityWeight, None, itkSLICImageFilterVIF2IUL2)
itkSLICImageFilterVIF2IUL2.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_SetMaximumNumberOfIterations, None, itkSLICImageFilterVIF2IUL2)
itkSLICImageFilterVIF2IUL2.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_GetMaximumNumberOfIterations, None, itkSLICImageFilterVIF2IUL2)
itkSLICImageFilterVIF2IUL2.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_GetSuperGridSize, None, itkSLICImageFilterVIF2IUL2)
itkSLICImageFilterVIF2IUL2.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_SetSuperGridSize, None, itkSLICImageFilterVIF2IUL2)
itkSLICImageFilterVIF2IUL2.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_SetInitializationPerturbation, None, itkSLICImageFilterVIF2IUL2)
itkSLICImageFilterVIF2IUL2.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_GetInitializationPerturbation, None, itkSLICImageFilterVIF2IUL2)
itkSLICImageFilterVIF2IUL2.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_InitializationPerturbationOn, None, itkSLICImageFilterVIF2IUL2)
itkSLICImageFilterVIF2IUL2.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_InitializationPerturbationOff, None, itkSLICImageFilterVIF2IUL2)
itkSLICImageFilterVIF2IUL2.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_SetEnforceConnectivity, None, itkSLICImageFilterVIF2IUL2)
itkSLICImageFilterVIF2IUL2.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_GetEnforceConnectivity, None, itkSLICImageFilterVIF2IUL2)
itkSLICImageFilterVIF2IUL2.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_EnforceConnectivityOn, None, itkSLICImageFilterVIF2IUL2)
itkSLICImageFilterVIF2IUL2.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_EnforceConnectivityOff, None, itkSLICImageFilterVIF2IUL2)
itkSLICImageFilterVIF2IUL2.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_GetAverageResidual, None, itkSLICImageFilterVIF2IUL2)
itkSLICImageFilterVIF2IUL2_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_swigregister
itkSLICImageFilterVIF2IUL2_swigregister(itkSLICImageFilterVIF2IUL2)

def itkSLICImageFilterVIF2IUL2___New_orig__():
    """itkSLICImageFilterVIF2IUL2___New_orig__() -> itkSLICImageFilterVIF2IUL2_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2___New_orig__()

def itkSLICImageFilterVIF2IUL2_cast(obj):
    """itkSLICImageFilterVIF2IUL2_cast(itkLightObject obj) -> itkSLICImageFilterVIF2IUL2"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_cast(obj)

class itkSLICImageFilterVIF2IUS2(itkSLICImageFilterVIF2IUS2_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterVIF2IUS2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterVIF2IUS2 self) -> itkSLICImageFilterVIF2IUS2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterVIF2IUS2 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterVIF2IUS2 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterVIF2IUS2 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterVIF2IUS2 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterVIF2IUS2 self) -> itkFixedArrayUI2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterVIF2IUS2 self, itkFixedArrayUI2 _arg)
        SetSuperGridSize(itkSLICImageFilterVIF2IUS2 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterVIF2IUS2 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterVIF2IUS2 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterVIF2IUS2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterVIF2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterVIF2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterVIF2IUS2 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterVIF2IUS2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterVIF2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterVIF2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterVIF2IUS2 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF2IUS2

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVIF2IUS2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIF2IUS2

        Create a new object of the class itkSLICImageFilterVIF2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIF2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIF2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVIF2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVIF2IUS2.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Clone, None, itkSLICImageFilterVIF2IUS2)
itkSLICImageFilterVIF2IUS2.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_SetSpatialProximityWeight, None, itkSLICImageFilterVIF2IUS2)
itkSLICImageFilterVIF2IUS2.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetSpatialProximityWeight, None, itkSLICImageFilterVIF2IUS2)
itkSLICImageFilterVIF2IUS2.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_SetMaximumNumberOfIterations, None, itkSLICImageFilterVIF2IUS2)
itkSLICImageFilterVIF2IUS2.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetMaximumNumberOfIterations, None, itkSLICImageFilterVIF2IUS2)
itkSLICImageFilterVIF2IUS2.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetSuperGridSize, None, itkSLICImageFilterVIF2IUS2)
itkSLICImageFilterVIF2IUS2.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_SetSuperGridSize, None, itkSLICImageFilterVIF2IUS2)
itkSLICImageFilterVIF2IUS2.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_SetInitializationPerturbation, None, itkSLICImageFilterVIF2IUS2)
itkSLICImageFilterVIF2IUS2.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetInitializationPerturbation, None, itkSLICImageFilterVIF2IUS2)
itkSLICImageFilterVIF2IUS2.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_InitializationPerturbationOn, None, itkSLICImageFilterVIF2IUS2)
itkSLICImageFilterVIF2IUS2.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_InitializationPerturbationOff, None, itkSLICImageFilterVIF2IUS2)
itkSLICImageFilterVIF2IUS2.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_SetEnforceConnectivity, None, itkSLICImageFilterVIF2IUS2)
itkSLICImageFilterVIF2IUS2.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetEnforceConnectivity, None, itkSLICImageFilterVIF2IUS2)
itkSLICImageFilterVIF2IUS2.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_EnforceConnectivityOn, None, itkSLICImageFilterVIF2IUS2)
itkSLICImageFilterVIF2IUS2.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_EnforceConnectivityOff, None, itkSLICImageFilterVIF2IUS2)
itkSLICImageFilterVIF2IUS2.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetAverageResidual, None, itkSLICImageFilterVIF2IUS2)
itkSLICImageFilterVIF2IUS2_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_swigregister
itkSLICImageFilterVIF2IUS2_swigregister(itkSLICImageFilterVIF2IUS2)

def itkSLICImageFilterVIF2IUS2___New_orig__():
    """itkSLICImageFilterVIF2IUS2___New_orig__() -> itkSLICImageFilterVIF2IUS2_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2___New_orig__()

def itkSLICImageFilterVIF2IUS2_cast(obj):
    """itkSLICImageFilterVIF2IUS2_cast(itkLightObject obj) -> itkSLICImageFilterVIF2IUS2"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_cast(obj)

class itkSLICImageFilterVIF3IUL3(itkSLICImageFilterVIF3IUL3_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterVIF3IUL3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterVIF3IUL3 self) -> itkSLICImageFilterVIF3IUL3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterVIF3IUL3 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterVIF3IUL3 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterVIF3IUL3 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterVIF3IUL3 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterVIF3IUL3 self) -> itkFixedArrayUI3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterVIF3IUL3 self, itkFixedArrayUI3 _arg)
        SetSuperGridSize(itkSLICImageFilterVIF3IUL3 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterVIF3IUL3 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterVIF3IUL3 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterVIF3IUL3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterVIF3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterVIF3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterVIF3IUL3 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterVIF3IUL3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterVIF3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterVIF3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterVIF3IUL3 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF3IUL3

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVIF3IUL3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIF3IUL3

        Create a new object of the class itkSLICImageFilterVIF3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIF3IUL3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIF3IUL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVIF3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVIF3IUL3.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Clone, None, itkSLICImageFilterVIF3IUL3)
itkSLICImageFilterVIF3IUL3.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_SetSpatialProximityWeight, None, itkSLICImageFilterVIF3IUL3)
itkSLICImageFilterVIF3IUL3.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_GetSpatialProximityWeight, None, itkSLICImageFilterVIF3IUL3)
itkSLICImageFilterVIF3IUL3.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_SetMaximumNumberOfIterations, None, itkSLICImageFilterVIF3IUL3)
itkSLICImageFilterVIF3IUL3.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_GetMaximumNumberOfIterations, None, itkSLICImageFilterVIF3IUL3)
itkSLICImageFilterVIF3IUL3.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_GetSuperGridSize, None, itkSLICImageFilterVIF3IUL3)
itkSLICImageFilterVIF3IUL3.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_SetSuperGridSize, None, itkSLICImageFilterVIF3IUL3)
itkSLICImageFilterVIF3IUL3.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_SetInitializationPerturbation, None, itkSLICImageFilterVIF3IUL3)
itkSLICImageFilterVIF3IUL3.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_GetInitializationPerturbation, None, itkSLICImageFilterVIF3IUL3)
itkSLICImageFilterVIF3IUL3.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_InitializationPerturbationOn, None, itkSLICImageFilterVIF3IUL3)
itkSLICImageFilterVIF3IUL3.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_InitializationPerturbationOff, None, itkSLICImageFilterVIF3IUL3)
itkSLICImageFilterVIF3IUL3.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_SetEnforceConnectivity, None, itkSLICImageFilterVIF3IUL3)
itkSLICImageFilterVIF3IUL3.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_GetEnforceConnectivity, None, itkSLICImageFilterVIF3IUL3)
itkSLICImageFilterVIF3IUL3.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_EnforceConnectivityOn, None, itkSLICImageFilterVIF3IUL3)
itkSLICImageFilterVIF3IUL3.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_EnforceConnectivityOff, None, itkSLICImageFilterVIF3IUL3)
itkSLICImageFilterVIF3IUL3.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_GetAverageResidual, None, itkSLICImageFilterVIF3IUL3)
itkSLICImageFilterVIF3IUL3_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_swigregister
itkSLICImageFilterVIF3IUL3_swigregister(itkSLICImageFilterVIF3IUL3)

def itkSLICImageFilterVIF3IUL3___New_orig__():
    """itkSLICImageFilterVIF3IUL3___New_orig__() -> itkSLICImageFilterVIF3IUL3_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3___New_orig__()

def itkSLICImageFilterVIF3IUL3_cast(obj):
    """itkSLICImageFilterVIF3IUL3_cast(itkLightObject obj) -> itkSLICImageFilterVIF3IUL3"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_cast(obj)

class itkSLICImageFilterVIF3IUS3(itkSLICImageFilterVIF3IUS3_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterVIF3IUS3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterVIF3IUS3 self) -> itkSLICImageFilterVIF3IUS3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterVIF3IUS3 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterVIF3IUS3 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterVIF3IUS3 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterVIF3IUS3 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterVIF3IUS3 self) -> itkFixedArrayUI3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterVIF3IUS3 self, itkFixedArrayUI3 _arg)
        SetSuperGridSize(itkSLICImageFilterVIF3IUS3 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterVIF3IUS3 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterVIF3IUS3 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterVIF3IUS3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterVIF3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterVIF3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterVIF3IUS3 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterVIF3IUS3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterVIF3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterVIF3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterVIF3IUS3 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF3IUS3

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVIF3IUS3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIF3IUS3

        Create a new object of the class itkSLICImageFilterVIF3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIF3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIF3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVIF3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVIF3IUS3.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Clone, None, itkSLICImageFilterVIF3IUS3)
itkSLICImageFilterVIF3IUS3.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_SetSpatialProximityWeight, None, itkSLICImageFilterVIF3IUS3)
itkSLICImageFilterVIF3IUS3.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetSpatialProximityWeight, None, itkSLICImageFilterVIF3IUS3)
itkSLICImageFilterVIF3IUS3.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_SetMaximumNumberOfIterations, None, itkSLICImageFilterVIF3IUS3)
itkSLICImageFilterVIF3IUS3.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetMaximumNumberOfIterations, None, itkSLICImageFilterVIF3IUS3)
itkSLICImageFilterVIF3IUS3.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetSuperGridSize, None, itkSLICImageFilterVIF3IUS3)
itkSLICImageFilterVIF3IUS3.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_SetSuperGridSize, None, itkSLICImageFilterVIF3IUS3)
itkSLICImageFilterVIF3IUS3.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_SetInitializationPerturbation, None, itkSLICImageFilterVIF3IUS3)
itkSLICImageFilterVIF3IUS3.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetInitializationPerturbation, None, itkSLICImageFilterVIF3IUS3)
itkSLICImageFilterVIF3IUS3.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_InitializationPerturbationOn, None, itkSLICImageFilterVIF3IUS3)
itkSLICImageFilterVIF3IUS3.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_InitializationPerturbationOff, None, itkSLICImageFilterVIF3IUS3)
itkSLICImageFilterVIF3IUS3.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_SetEnforceConnectivity, None, itkSLICImageFilterVIF3IUS3)
itkSLICImageFilterVIF3IUS3.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetEnforceConnectivity, None, itkSLICImageFilterVIF3IUS3)
itkSLICImageFilterVIF3IUS3.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_EnforceConnectivityOn, None, itkSLICImageFilterVIF3IUS3)
itkSLICImageFilterVIF3IUS3.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_EnforceConnectivityOff, None, itkSLICImageFilterVIF3IUS3)
itkSLICImageFilterVIF3IUS3.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetAverageResidual, None, itkSLICImageFilterVIF3IUS3)
itkSLICImageFilterVIF3IUS3_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_swigregister
itkSLICImageFilterVIF3IUS3_swigregister(itkSLICImageFilterVIF3IUS3)

def itkSLICImageFilterVIF3IUS3___New_orig__():
    """itkSLICImageFilterVIF3IUS3___New_orig__() -> itkSLICImageFilterVIF3IUS3_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3___New_orig__()

def itkSLICImageFilterVIF3IUS3_cast(obj):
    """itkSLICImageFilterVIF3IUS3_cast(itkLightObject obj) -> itkSLICImageFilterVIF3IUS3"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_cast(obj)

class itkSLICImageFilterVISS2IUL2(itkSLICImageFilterVISS2IUL2_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterVISS2IUL2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterVISS2IUL2 self) -> itkSLICImageFilterVISS2IUL2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterVISS2IUL2 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterVISS2IUL2 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterVISS2IUL2 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterVISS2IUL2 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterVISS2IUL2 self) -> itkFixedArrayUI2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterVISS2IUL2 self, itkFixedArrayUI2 _arg)
        SetSuperGridSize(itkSLICImageFilterVISS2IUL2 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterVISS2IUL2 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterVISS2IUL2 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterVISS2IUL2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterVISS2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterVISS2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterVISS2IUL2 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterVISS2IUL2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterVISS2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterVISS2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterVISS2IUL2 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS2IUL2

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVISS2IUL2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVISS2IUL2

        Create a new object of the class itkSLICImageFilterVISS2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVISS2IUL2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVISS2IUL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVISS2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVISS2IUL2.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Clone, None, itkSLICImageFilterVISS2IUL2)
itkSLICImageFilterVISS2IUL2.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_SetSpatialProximityWeight, None, itkSLICImageFilterVISS2IUL2)
itkSLICImageFilterVISS2IUL2.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_GetSpatialProximityWeight, None, itkSLICImageFilterVISS2IUL2)
itkSLICImageFilterVISS2IUL2.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_SetMaximumNumberOfIterations, None, itkSLICImageFilterVISS2IUL2)
itkSLICImageFilterVISS2IUL2.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_GetMaximumNumberOfIterations, None, itkSLICImageFilterVISS2IUL2)
itkSLICImageFilterVISS2IUL2.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_GetSuperGridSize, None, itkSLICImageFilterVISS2IUL2)
itkSLICImageFilterVISS2IUL2.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_SetSuperGridSize, None, itkSLICImageFilterVISS2IUL2)
itkSLICImageFilterVISS2IUL2.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_SetInitializationPerturbation, None, itkSLICImageFilterVISS2IUL2)
itkSLICImageFilterVISS2IUL2.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_GetInitializationPerturbation, None, itkSLICImageFilterVISS2IUL2)
itkSLICImageFilterVISS2IUL2.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_InitializationPerturbationOn, None, itkSLICImageFilterVISS2IUL2)
itkSLICImageFilterVISS2IUL2.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_InitializationPerturbationOff, None, itkSLICImageFilterVISS2IUL2)
itkSLICImageFilterVISS2IUL2.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_SetEnforceConnectivity, None, itkSLICImageFilterVISS2IUL2)
itkSLICImageFilterVISS2IUL2.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_GetEnforceConnectivity, None, itkSLICImageFilterVISS2IUL2)
itkSLICImageFilterVISS2IUL2.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_EnforceConnectivityOn, None, itkSLICImageFilterVISS2IUL2)
itkSLICImageFilterVISS2IUL2.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_EnforceConnectivityOff, None, itkSLICImageFilterVISS2IUL2)
itkSLICImageFilterVISS2IUL2.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_GetAverageResidual, None, itkSLICImageFilterVISS2IUL2)
itkSLICImageFilterVISS2IUL2_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_swigregister
itkSLICImageFilterVISS2IUL2_swigregister(itkSLICImageFilterVISS2IUL2)

def itkSLICImageFilterVISS2IUL2___New_orig__():
    """itkSLICImageFilterVISS2IUL2___New_orig__() -> itkSLICImageFilterVISS2IUL2_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2___New_orig__()

def itkSLICImageFilterVISS2IUL2_cast(obj):
    """itkSLICImageFilterVISS2IUL2_cast(itkLightObject obj) -> itkSLICImageFilterVISS2IUL2"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_cast(obj)

class itkSLICImageFilterVISS2IUS2(itkSLICImageFilterVISS2IUS2_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterVISS2IUS2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterVISS2IUS2 self) -> itkSLICImageFilterVISS2IUS2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterVISS2IUS2 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterVISS2IUS2 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterVISS2IUS2 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterVISS2IUS2 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterVISS2IUS2 self) -> itkFixedArrayUI2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterVISS2IUS2 self, itkFixedArrayUI2 _arg)
        SetSuperGridSize(itkSLICImageFilterVISS2IUS2 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterVISS2IUS2 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterVISS2IUS2 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterVISS2IUS2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterVISS2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterVISS2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterVISS2IUS2 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterVISS2IUS2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterVISS2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterVISS2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterVISS2IUS2 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS2IUS2

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVISS2IUS2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVISS2IUS2

        Create a new object of the class itkSLICImageFilterVISS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVISS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVISS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVISS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVISS2IUS2.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Clone, None, itkSLICImageFilterVISS2IUS2)
itkSLICImageFilterVISS2IUS2.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_SetSpatialProximityWeight, None, itkSLICImageFilterVISS2IUS2)
itkSLICImageFilterVISS2IUS2.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetSpatialProximityWeight, None, itkSLICImageFilterVISS2IUS2)
itkSLICImageFilterVISS2IUS2.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_SetMaximumNumberOfIterations, None, itkSLICImageFilterVISS2IUS2)
itkSLICImageFilterVISS2IUS2.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetMaximumNumberOfIterations, None, itkSLICImageFilterVISS2IUS2)
itkSLICImageFilterVISS2IUS2.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetSuperGridSize, None, itkSLICImageFilterVISS2IUS2)
itkSLICImageFilterVISS2IUS2.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_SetSuperGridSize, None, itkSLICImageFilterVISS2IUS2)
itkSLICImageFilterVISS2IUS2.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_SetInitializationPerturbation, None, itkSLICImageFilterVISS2IUS2)
itkSLICImageFilterVISS2IUS2.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetInitializationPerturbation, None, itkSLICImageFilterVISS2IUS2)
itkSLICImageFilterVISS2IUS2.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_InitializationPerturbationOn, None, itkSLICImageFilterVISS2IUS2)
itkSLICImageFilterVISS2IUS2.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_InitializationPerturbationOff, None, itkSLICImageFilterVISS2IUS2)
itkSLICImageFilterVISS2IUS2.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_SetEnforceConnectivity, None, itkSLICImageFilterVISS2IUS2)
itkSLICImageFilterVISS2IUS2.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetEnforceConnectivity, None, itkSLICImageFilterVISS2IUS2)
itkSLICImageFilterVISS2IUS2.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_EnforceConnectivityOn, None, itkSLICImageFilterVISS2IUS2)
itkSLICImageFilterVISS2IUS2.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_EnforceConnectivityOff, None, itkSLICImageFilterVISS2IUS2)
itkSLICImageFilterVISS2IUS2.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetAverageResidual, None, itkSLICImageFilterVISS2IUS2)
itkSLICImageFilterVISS2IUS2_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_swigregister
itkSLICImageFilterVISS2IUS2_swigregister(itkSLICImageFilterVISS2IUS2)

def itkSLICImageFilterVISS2IUS2___New_orig__():
    """itkSLICImageFilterVISS2IUS2___New_orig__() -> itkSLICImageFilterVISS2IUS2_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2___New_orig__()

def itkSLICImageFilterVISS2IUS2_cast(obj):
    """itkSLICImageFilterVISS2IUS2_cast(itkLightObject obj) -> itkSLICImageFilterVISS2IUS2"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_cast(obj)

class itkSLICImageFilterVISS3IUL3(itkSLICImageFilterVISS3IUL3_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterVISS3IUL3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterVISS3IUL3 self) -> itkSLICImageFilterVISS3IUL3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterVISS3IUL3 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterVISS3IUL3 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterVISS3IUL3 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterVISS3IUL3 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterVISS3IUL3 self) -> itkFixedArrayUI3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterVISS3IUL3 self, itkFixedArrayUI3 _arg)
        SetSuperGridSize(itkSLICImageFilterVISS3IUL3 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterVISS3IUL3 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterVISS3IUL3 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterVISS3IUL3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterVISS3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterVISS3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterVISS3IUL3 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterVISS3IUL3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterVISS3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterVISS3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterVISS3IUL3 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS3IUL3

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVISS3IUL3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVISS3IUL3

        Create a new object of the class itkSLICImageFilterVISS3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVISS3IUL3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVISS3IUL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVISS3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVISS3IUL3.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Clone, None, itkSLICImageFilterVISS3IUL3)
itkSLICImageFilterVISS3IUL3.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_SetSpatialProximityWeight, None, itkSLICImageFilterVISS3IUL3)
itkSLICImageFilterVISS3IUL3.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_GetSpatialProximityWeight, None, itkSLICImageFilterVISS3IUL3)
itkSLICImageFilterVISS3IUL3.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_SetMaximumNumberOfIterations, None, itkSLICImageFilterVISS3IUL3)
itkSLICImageFilterVISS3IUL3.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_GetMaximumNumberOfIterations, None, itkSLICImageFilterVISS3IUL3)
itkSLICImageFilterVISS3IUL3.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_GetSuperGridSize, None, itkSLICImageFilterVISS3IUL3)
itkSLICImageFilterVISS3IUL3.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_SetSuperGridSize, None, itkSLICImageFilterVISS3IUL3)
itkSLICImageFilterVISS3IUL3.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_SetInitializationPerturbation, None, itkSLICImageFilterVISS3IUL3)
itkSLICImageFilterVISS3IUL3.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_GetInitializationPerturbation, None, itkSLICImageFilterVISS3IUL3)
itkSLICImageFilterVISS3IUL3.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_InitializationPerturbationOn, None, itkSLICImageFilterVISS3IUL3)
itkSLICImageFilterVISS3IUL3.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_InitializationPerturbationOff, None, itkSLICImageFilterVISS3IUL3)
itkSLICImageFilterVISS3IUL3.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_SetEnforceConnectivity, None, itkSLICImageFilterVISS3IUL3)
itkSLICImageFilterVISS3IUL3.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_GetEnforceConnectivity, None, itkSLICImageFilterVISS3IUL3)
itkSLICImageFilterVISS3IUL3.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_EnforceConnectivityOn, None, itkSLICImageFilterVISS3IUL3)
itkSLICImageFilterVISS3IUL3.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_EnforceConnectivityOff, None, itkSLICImageFilterVISS3IUL3)
itkSLICImageFilterVISS3IUL3.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_GetAverageResidual, None, itkSLICImageFilterVISS3IUL3)
itkSLICImageFilterVISS3IUL3_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_swigregister
itkSLICImageFilterVISS3IUL3_swigregister(itkSLICImageFilterVISS3IUL3)

def itkSLICImageFilterVISS3IUL3___New_orig__():
    """itkSLICImageFilterVISS3IUL3___New_orig__() -> itkSLICImageFilterVISS3IUL3_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3___New_orig__()

def itkSLICImageFilterVISS3IUL3_cast(obj):
    """itkSLICImageFilterVISS3IUL3_cast(itkLightObject obj) -> itkSLICImageFilterVISS3IUL3"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_cast(obj)

class itkSLICImageFilterVISS3IUS3(itkSLICImageFilterVISS3IUS3_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterVISS3IUS3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterVISS3IUS3 self) -> itkSLICImageFilterVISS3IUS3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterVISS3IUS3 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterVISS3IUS3 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterVISS3IUS3 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterVISS3IUS3 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterVISS3IUS3 self) -> itkFixedArrayUI3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterVISS3IUS3 self, itkFixedArrayUI3 _arg)
        SetSuperGridSize(itkSLICImageFilterVISS3IUS3 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterVISS3IUS3 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterVISS3IUS3 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterVISS3IUS3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterVISS3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterVISS3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterVISS3IUS3 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterVISS3IUS3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterVISS3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterVISS3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterVISS3IUS3 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS3IUS3

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVISS3IUS3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVISS3IUS3

        Create a new object of the class itkSLICImageFilterVISS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVISS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVISS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVISS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVISS3IUS3.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Clone, None, itkSLICImageFilterVISS3IUS3)
itkSLICImageFilterVISS3IUS3.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_SetSpatialProximityWeight, None, itkSLICImageFilterVISS3IUS3)
itkSLICImageFilterVISS3IUS3.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetSpatialProximityWeight, None, itkSLICImageFilterVISS3IUS3)
itkSLICImageFilterVISS3IUS3.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_SetMaximumNumberOfIterations, None, itkSLICImageFilterVISS3IUS3)
itkSLICImageFilterVISS3IUS3.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetMaximumNumberOfIterations, None, itkSLICImageFilterVISS3IUS3)
itkSLICImageFilterVISS3IUS3.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetSuperGridSize, None, itkSLICImageFilterVISS3IUS3)
itkSLICImageFilterVISS3IUS3.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_SetSuperGridSize, None, itkSLICImageFilterVISS3IUS3)
itkSLICImageFilterVISS3IUS3.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_SetInitializationPerturbation, None, itkSLICImageFilterVISS3IUS3)
itkSLICImageFilterVISS3IUS3.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetInitializationPerturbation, None, itkSLICImageFilterVISS3IUS3)
itkSLICImageFilterVISS3IUS3.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_InitializationPerturbationOn, None, itkSLICImageFilterVISS3IUS3)
itkSLICImageFilterVISS3IUS3.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_InitializationPerturbationOff, None, itkSLICImageFilterVISS3IUS3)
itkSLICImageFilterVISS3IUS3.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_SetEnforceConnectivity, None, itkSLICImageFilterVISS3IUS3)
itkSLICImageFilterVISS3IUS3.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetEnforceConnectivity, None, itkSLICImageFilterVISS3IUS3)
itkSLICImageFilterVISS3IUS3.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_EnforceConnectivityOn, None, itkSLICImageFilterVISS3IUS3)
itkSLICImageFilterVISS3IUS3.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_EnforceConnectivityOff, None, itkSLICImageFilterVISS3IUS3)
itkSLICImageFilterVISS3IUS3.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetAverageResidual, None, itkSLICImageFilterVISS3IUS3)
itkSLICImageFilterVISS3IUS3_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_swigregister
itkSLICImageFilterVISS3IUS3_swigregister(itkSLICImageFilterVISS3IUS3)

def itkSLICImageFilterVISS3IUS3___New_orig__():
    """itkSLICImageFilterVISS3IUS3___New_orig__() -> itkSLICImageFilterVISS3IUS3_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3___New_orig__()

def itkSLICImageFilterVISS3IUS3_cast(obj):
    """itkSLICImageFilterVISS3IUS3_cast(itkLightObject obj) -> itkSLICImageFilterVISS3IUS3"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_cast(obj)

class itkSLICImageFilterVIUC2IUL2(itkSLICImageFilterVIUC2IUL2_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterVIUC2IUL2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterVIUC2IUL2 self) -> itkSLICImageFilterVIUC2IUL2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterVIUC2IUL2 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterVIUC2IUL2 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterVIUC2IUL2 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterVIUC2IUL2 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterVIUC2IUL2 self) -> itkFixedArrayUI2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterVIUC2IUL2 self, itkFixedArrayUI2 _arg)
        SetSuperGridSize(itkSLICImageFilterVIUC2IUL2 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterVIUC2IUL2 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterVIUC2IUL2 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterVIUC2IUL2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterVIUC2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterVIUC2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterVIUC2IUL2 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterVIUC2IUL2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterVIUC2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterVIUC2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterVIUC2IUL2 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC2IUL2

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVIUC2IUL2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUC2IUL2

        Create a new object of the class itkSLICImageFilterVIUC2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUC2IUL2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUC2IUL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVIUC2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVIUC2IUL2.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Clone, None, itkSLICImageFilterVIUC2IUL2)
itkSLICImageFilterVIUC2IUL2.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_SetSpatialProximityWeight, None, itkSLICImageFilterVIUC2IUL2)
itkSLICImageFilterVIUC2IUL2.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_GetSpatialProximityWeight, None, itkSLICImageFilterVIUC2IUL2)
itkSLICImageFilterVIUC2IUL2.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_SetMaximumNumberOfIterations, None, itkSLICImageFilterVIUC2IUL2)
itkSLICImageFilterVIUC2IUL2.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_GetMaximumNumberOfIterations, None, itkSLICImageFilterVIUC2IUL2)
itkSLICImageFilterVIUC2IUL2.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_GetSuperGridSize, None, itkSLICImageFilterVIUC2IUL2)
itkSLICImageFilterVIUC2IUL2.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_SetSuperGridSize, None, itkSLICImageFilterVIUC2IUL2)
itkSLICImageFilterVIUC2IUL2.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_SetInitializationPerturbation, None, itkSLICImageFilterVIUC2IUL2)
itkSLICImageFilterVIUC2IUL2.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_GetInitializationPerturbation, None, itkSLICImageFilterVIUC2IUL2)
itkSLICImageFilterVIUC2IUL2.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_InitializationPerturbationOn, None, itkSLICImageFilterVIUC2IUL2)
itkSLICImageFilterVIUC2IUL2.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_InitializationPerturbationOff, None, itkSLICImageFilterVIUC2IUL2)
itkSLICImageFilterVIUC2IUL2.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_SetEnforceConnectivity, None, itkSLICImageFilterVIUC2IUL2)
itkSLICImageFilterVIUC2IUL2.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_GetEnforceConnectivity, None, itkSLICImageFilterVIUC2IUL2)
itkSLICImageFilterVIUC2IUL2.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_EnforceConnectivityOn, None, itkSLICImageFilterVIUC2IUL2)
itkSLICImageFilterVIUC2IUL2.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_EnforceConnectivityOff, None, itkSLICImageFilterVIUC2IUL2)
itkSLICImageFilterVIUC2IUL2.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_GetAverageResidual, None, itkSLICImageFilterVIUC2IUL2)
itkSLICImageFilterVIUC2IUL2_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_swigregister
itkSLICImageFilterVIUC2IUL2_swigregister(itkSLICImageFilterVIUC2IUL2)

def itkSLICImageFilterVIUC2IUL2___New_orig__():
    """itkSLICImageFilterVIUC2IUL2___New_orig__() -> itkSLICImageFilterVIUC2IUL2_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2___New_orig__()

def itkSLICImageFilterVIUC2IUL2_cast(obj):
    """itkSLICImageFilterVIUC2IUL2_cast(itkLightObject obj) -> itkSLICImageFilterVIUC2IUL2"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_cast(obj)

class itkSLICImageFilterVIUC2IUS2(itkSLICImageFilterVIUC2IUS2_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterVIUC2IUS2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterVIUC2IUS2 self) -> itkSLICImageFilterVIUC2IUS2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterVIUC2IUS2 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterVIUC2IUS2 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterVIUC2IUS2 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterVIUC2IUS2 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterVIUC2IUS2 self) -> itkFixedArrayUI2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterVIUC2IUS2 self, itkFixedArrayUI2 _arg)
        SetSuperGridSize(itkSLICImageFilterVIUC2IUS2 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterVIUC2IUS2 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterVIUC2IUS2 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterVIUC2IUS2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterVIUC2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterVIUC2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterVIUC2IUS2 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterVIUC2IUS2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterVIUC2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterVIUC2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterVIUC2IUS2 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC2IUS2

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVIUC2IUS2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUC2IUS2

        Create a new object of the class itkSLICImageFilterVIUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUC2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUC2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVIUC2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVIUC2IUS2.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Clone, None, itkSLICImageFilterVIUC2IUS2)
itkSLICImageFilterVIUC2IUS2.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_SetSpatialProximityWeight, None, itkSLICImageFilterVIUC2IUS2)
itkSLICImageFilterVIUC2IUS2.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetSpatialProximityWeight, None, itkSLICImageFilterVIUC2IUS2)
itkSLICImageFilterVIUC2IUS2.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_SetMaximumNumberOfIterations, None, itkSLICImageFilterVIUC2IUS2)
itkSLICImageFilterVIUC2IUS2.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetMaximumNumberOfIterations, None, itkSLICImageFilterVIUC2IUS2)
itkSLICImageFilterVIUC2IUS2.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetSuperGridSize, None, itkSLICImageFilterVIUC2IUS2)
itkSLICImageFilterVIUC2IUS2.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_SetSuperGridSize, None, itkSLICImageFilterVIUC2IUS2)
itkSLICImageFilterVIUC2IUS2.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_SetInitializationPerturbation, None, itkSLICImageFilterVIUC2IUS2)
itkSLICImageFilterVIUC2IUS2.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetInitializationPerturbation, None, itkSLICImageFilterVIUC2IUS2)
itkSLICImageFilterVIUC2IUS2.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_InitializationPerturbationOn, None, itkSLICImageFilterVIUC2IUS2)
itkSLICImageFilterVIUC2IUS2.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_InitializationPerturbationOff, None, itkSLICImageFilterVIUC2IUS2)
itkSLICImageFilterVIUC2IUS2.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_SetEnforceConnectivity, None, itkSLICImageFilterVIUC2IUS2)
itkSLICImageFilterVIUC2IUS2.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetEnforceConnectivity, None, itkSLICImageFilterVIUC2IUS2)
itkSLICImageFilterVIUC2IUS2.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_EnforceConnectivityOn, None, itkSLICImageFilterVIUC2IUS2)
itkSLICImageFilterVIUC2IUS2.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_EnforceConnectivityOff, None, itkSLICImageFilterVIUC2IUS2)
itkSLICImageFilterVIUC2IUS2.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetAverageResidual, None, itkSLICImageFilterVIUC2IUS2)
itkSLICImageFilterVIUC2IUS2_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_swigregister
itkSLICImageFilterVIUC2IUS2_swigregister(itkSLICImageFilterVIUC2IUS2)

def itkSLICImageFilterVIUC2IUS2___New_orig__():
    """itkSLICImageFilterVIUC2IUS2___New_orig__() -> itkSLICImageFilterVIUC2IUS2_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2___New_orig__()

def itkSLICImageFilterVIUC2IUS2_cast(obj):
    """itkSLICImageFilterVIUC2IUS2_cast(itkLightObject obj) -> itkSLICImageFilterVIUC2IUS2"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_cast(obj)

class itkSLICImageFilterVIUC3IUL3(itkSLICImageFilterVIUC3IUL3_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterVIUC3IUL3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterVIUC3IUL3 self) -> itkSLICImageFilterVIUC3IUL3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterVIUC3IUL3 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterVIUC3IUL3 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterVIUC3IUL3 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterVIUC3IUL3 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterVIUC3IUL3 self) -> itkFixedArrayUI3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterVIUC3IUL3 self, itkFixedArrayUI3 _arg)
        SetSuperGridSize(itkSLICImageFilterVIUC3IUL3 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterVIUC3IUL3 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterVIUC3IUL3 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterVIUC3IUL3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterVIUC3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterVIUC3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterVIUC3IUL3 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterVIUC3IUL3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterVIUC3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterVIUC3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterVIUC3IUL3 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC3IUL3

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVIUC3IUL3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUC3IUL3

        Create a new object of the class itkSLICImageFilterVIUC3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUC3IUL3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUC3IUL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVIUC3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVIUC3IUL3.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Clone, None, itkSLICImageFilterVIUC3IUL3)
itkSLICImageFilterVIUC3IUL3.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_SetSpatialProximityWeight, None, itkSLICImageFilterVIUC3IUL3)
itkSLICImageFilterVIUC3IUL3.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_GetSpatialProximityWeight, None, itkSLICImageFilterVIUC3IUL3)
itkSLICImageFilterVIUC3IUL3.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_SetMaximumNumberOfIterations, None, itkSLICImageFilterVIUC3IUL3)
itkSLICImageFilterVIUC3IUL3.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_GetMaximumNumberOfIterations, None, itkSLICImageFilterVIUC3IUL3)
itkSLICImageFilterVIUC3IUL3.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_GetSuperGridSize, None, itkSLICImageFilterVIUC3IUL3)
itkSLICImageFilterVIUC3IUL3.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_SetSuperGridSize, None, itkSLICImageFilterVIUC3IUL3)
itkSLICImageFilterVIUC3IUL3.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_SetInitializationPerturbation, None, itkSLICImageFilterVIUC3IUL3)
itkSLICImageFilterVIUC3IUL3.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_GetInitializationPerturbation, None, itkSLICImageFilterVIUC3IUL3)
itkSLICImageFilterVIUC3IUL3.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_InitializationPerturbationOn, None, itkSLICImageFilterVIUC3IUL3)
itkSLICImageFilterVIUC3IUL3.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_InitializationPerturbationOff, None, itkSLICImageFilterVIUC3IUL3)
itkSLICImageFilterVIUC3IUL3.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_SetEnforceConnectivity, None, itkSLICImageFilterVIUC3IUL3)
itkSLICImageFilterVIUC3IUL3.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_GetEnforceConnectivity, None, itkSLICImageFilterVIUC3IUL3)
itkSLICImageFilterVIUC3IUL3.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_EnforceConnectivityOn, None, itkSLICImageFilterVIUC3IUL3)
itkSLICImageFilterVIUC3IUL3.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_EnforceConnectivityOff, None, itkSLICImageFilterVIUC3IUL3)
itkSLICImageFilterVIUC3IUL3.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_GetAverageResidual, None, itkSLICImageFilterVIUC3IUL3)
itkSLICImageFilterVIUC3IUL3_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_swigregister
itkSLICImageFilterVIUC3IUL3_swigregister(itkSLICImageFilterVIUC3IUL3)

def itkSLICImageFilterVIUC3IUL3___New_orig__():
    """itkSLICImageFilterVIUC3IUL3___New_orig__() -> itkSLICImageFilterVIUC3IUL3_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3___New_orig__()

def itkSLICImageFilterVIUC3IUL3_cast(obj):
    """itkSLICImageFilterVIUC3IUL3_cast(itkLightObject obj) -> itkSLICImageFilterVIUC3IUL3"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_cast(obj)

class itkSLICImageFilterVIUC3IUS3(itkSLICImageFilterVIUC3IUS3_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterVIUC3IUS3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterVIUC3IUS3 self) -> itkSLICImageFilterVIUC3IUS3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterVIUC3IUS3 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterVIUC3IUS3 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterVIUC3IUS3 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterVIUC3IUS3 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterVIUC3IUS3 self) -> itkFixedArrayUI3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterVIUC3IUS3 self, itkFixedArrayUI3 _arg)
        SetSuperGridSize(itkSLICImageFilterVIUC3IUS3 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterVIUC3IUS3 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterVIUC3IUS3 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterVIUC3IUS3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterVIUC3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterVIUC3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterVIUC3IUS3 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterVIUC3IUS3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterVIUC3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterVIUC3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterVIUC3IUS3 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC3IUS3

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVIUC3IUS3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUC3IUS3

        Create a new object of the class itkSLICImageFilterVIUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUC3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUC3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVIUC3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVIUC3IUS3.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Clone, None, itkSLICImageFilterVIUC3IUS3)
itkSLICImageFilterVIUC3IUS3.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_SetSpatialProximityWeight, None, itkSLICImageFilterVIUC3IUS3)
itkSLICImageFilterVIUC3IUS3.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetSpatialProximityWeight, None, itkSLICImageFilterVIUC3IUS3)
itkSLICImageFilterVIUC3IUS3.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_SetMaximumNumberOfIterations, None, itkSLICImageFilterVIUC3IUS3)
itkSLICImageFilterVIUC3IUS3.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetMaximumNumberOfIterations, None, itkSLICImageFilterVIUC3IUS3)
itkSLICImageFilterVIUC3IUS3.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetSuperGridSize, None, itkSLICImageFilterVIUC3IUS3)
itkSLICImageFilterVIUC3IUS3.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_SetSuperGridSize, None, itkSLICImageFilterVIUC3IUS3)
itkSLICImageFilterVIUC3IUS3.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_SetInitializationPerturbation, None, itkSLICImageFilterVIUC3IUS3)
itkSLICImageFilterVIUC3IUS3.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetInitializationPerturbation, None, itkSLICImageFilterVIUC3IUS3)
itkSLICImageFilterVIUC3IUS3.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_InitializationPerturbationOn, None, itkSLICImageFilterVIUC3IUS3)
itkSLICImageFilterVIUC3IUS3.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_InitializationPerturbationOff, None, itkSLICImageFilterVIUC3IUS3)
itkSLICImageFilterVIUC3IUS3.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_SetEnforceConnectivity, None, itkSLICImageFilterVIUC3IUS3)
itkSLICImageFilterVIUC3IUS3.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetEnforceConnectivity, None, itkSLICImageFilterVIUC3IUS3)
itkSLICImageFilterVIUC3IUS3.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_EnforceConnectivityOn, None, itkSLICImageFilterVIUC3IUS3)
itkSLICImageFilterVIUC3IUS3.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_EnforceConnectivityOff, None, itkSLICImageFilterVIUC3IUS3)
itkSLICImageFilterVIUC3IUS3.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetAverageResidual, None, itkSLICImageFilterVIUC3IUS3)
itkSLICImageFilterVIUC3IUS3_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_swigregister
itkSLICImageFilterVIUC3IUS3_swigregister(itkSLICImageFilterVIUC3IUS3)

def itkSLICImageFilterVIUC3IUS3___New_orig__():
    """itkSLICImageFilterVIUC3IUS3___New_orig__() -> itkSLICImageFilterVIUC3IUS3_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3___New_orig__()

def itkSLICImageFilterVIUC3IUS3_cast(obj):
    """itkSLICImageFilterVIUC3IUS3_cast(itkLightObject obj) -> itkSLICImageFilterVIUC3IUS3"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_cast(obj)

class itkSLICImageFilterVIUS2IUL2(itkSLICImageFilterVIUS2IUL2_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterVIUS2IUL2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterVIUS2IUL2 self) -> itkSLICImageFilterVIUS2IUL2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterVIUS2IUL2 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterVIUS2IUL2 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterVIUS2IUL2 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterVIUS2IUL2 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterVIUS2IUL2 self) -> itkFixedArrayUI2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterVIUS2IUL2 self, itkFixedArrayUI2 _arg)
        SetSuperGridSize(itkSLICImageFilterVIUS2IUL2 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterVIUS2IUL2 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterVIUS2IUL2 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterVIUS2IUL2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterVIUS2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterVIUS2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterVIUS2IUL2 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterVIUS2IUL2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterVIUS2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterVIUS2IUL2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterVIUS2IUL2 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS2IUL2

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVIUS2IUL2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUS2IUL2

        Create a new object of the class itkSLICImageFilterVIUS2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUS2IUL2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUS2IUL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVIUS2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVIUS2IUL2.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Clone, None, itkSLICImageFilterVIUS2IUL2)
itkSLICImageFilterVIUS2IUL2.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_SetSpatialProximityWeight, None, itkSLICImageFilterVIUS2IUL2)
itkSLICImageFilterVIUS2IUL2.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_GetSpatialProximityWeight, None, itkSLICImageFilterVIUS2IUL2)
itkSLICImageFilterVIUS2IUL2.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_SetMaximumNumberOfIterations, None, itkSLICImageFilterVIUS2IUL2)
itkSLICImageFilterVIUS2IUL2.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_GetMaximumNumberOfIterations, None, itkSLICImageFilterVIUS2IUL2)
itkSLICImageFilterVIUS2IUL2.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_GetSuperGridSize, None, itkSLICImageFilterVIUS2IUL2)
itkSLICImageFilterVIUS2IUL2.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_SetSuperGridSize, None, itkSLICImageFilterVIUS2IUL2)
itkSLICImageFilterVIUS2IUL2.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_SetInitializationPerturbation, None, itkSLICImageFilterVIUS2IUL2)
itkSLICImageFilterVIUS2IUL2.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_GetInitializationPerturbation, None, itkSLICImageFilterVIUS2IUL2)
itkSLICImageFilterVIUS2IUL2.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_InitializationPerturbationOn, None, itkSLICImageFilterVIUS2IUL2)
itkSLICImageFilterVIUS2IUL2.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_InitializationPerturbationOff, None, itkSLICImageFilterVIUS2IUL2)
itkSLICImageFilterVIUS2IUL2.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_SetEnforceConnectivity, None, itkSLICImageFilterVIUS2IUL2)
itkSLICImageFilterVIUS2IUL2.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_GetEnforceConnectivity, None, itkSLICImageFilterVIUS2IUL2)
itkSLICImageFilterVIUS2IUL2.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_EnforceConnectivityOn, None, itkSLICImageFilterVIUS2IUL2)
itkSLICImageFilterVIUS2IUL2.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_EnforceConnectivityOff, None, itkSLICImageFilterVIUS2IUL2)
itkSLICImageFilterVIUS2IUL2.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_GetAverageResidual, None, itkSLICImageFilterVIUS2IUL2)
itkSLICImageFilterVIUS2IUL2_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_swigregister
itkSLICImageFilterVIUS2IUL2_swigregister(itkSLICImageFilterVIUS2IUL2)

def itkSLICImageFilterVIUS2IUL2___New_orig__():
    """itkSLICImageFilterVIUS2IUL2___New_orig__() -> itkSLICImageFilterVIUS2IUL2_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2___New_orig__()

def itkSLICImageFilterVIUS2IUL2_cast(obj):
    """itkSLICImageFilterVIUS2IUL2_cast(itkLightObject obj) -> itkSLICImageFilterVIUS2IUL2"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_cast(obj)

class itkSLICImageFilterVIUS2IUS2(itkSLICImageFilterVIUS2IUS2_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterVIUS2IUS2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterVIUS2IUS2 self) -> itkSLICImageFilterVIUS2IUS2_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterVIUS2IUS2 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterVIUS2IUS2 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterVIUS2IUS2 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterVIUS2IUS2 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterVIUS2IUS2 self) -> itkFixedArrayUI2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterVIUS2IUS2 self, itkFixedArrayUI2 _arg)
        SetSuperGridSize(itkSLICImageFilterVIUS2IUS2 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterVIUS2IUS2 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterVIUS2IUS2 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterVIUS2IUS2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterVIUS2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterVIUS2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterVIUS2IUS2 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterVIUS2IUS2 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterVIUS2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterVIUS2IUS2 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterVIUS2IUS2 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS2IUS2

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVIUS2IUS2"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUS2IUS2

        Create a new object of the class itkSLICImageFilterVIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVIUS2IUS2.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Clone, None, itkSLICImageFilterVIUS2IUS2)
itkSLICImageFilterVIUS2IUS2.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_SetSpatialProximityWeight, None, itkSLICImageFilterVIUS2IUS2)
itkSLICImageFilterVIUS2IUS2.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetSpatialProximityWeight, None, itkSLICImageFilterVIUS2IUS2)
itkSLICImageFilterVIUS2IUS2.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_SetMaximumNumberOfIterations, None, itkSLICImageFilterVIUS2IUS2)
itkSLICImageFilterVIUS2IUS2.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetMaximumNumberOfIterations, None, itkSLICImageFilterVIUS2IUS2)
itkSLICImageFilterVIUS2IUS2.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetSuperGridSize, None, itkSLICImageFilterVIUS2IUS2)
itkSLICImageFilterVIUS2IUS2.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_SetSuperGridSize, None, itkSLICImageFilterVIUS2IUS2)
itkSLICImageFilterVIUS2IUS2.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_SetInitializationPerturbation, None, itkSLICImageFilterVIUS2IUS2)
itkSLICImageFilterVIUS2IUS2.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetInitializationPerturbation, None, itkSLICImageFilterVIUS2IUS2)
itkSLICImageFilterVIUS2IUS2.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_InitializationPerturbationOn, None, itkSLICImageFilterVIUS2IUS2)
itkSLICImageFilterVIUS2IUS2.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_InitializationPerturbationOff, None, itkSLICImageFilterVIUS2IUS2)
itkSLICImageFilterVIUS2IUS2.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_SetEnforceConnectivity, None, itkSLICImageFilterVIUS2IUS2)
itkSLICImageFilterVIUS2IUS2.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetEnforceConnectivity, None, itkSLICImageFilterVIUS2IUS2)
itkSLICImageFilterVIUS2IUS2.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_EnforceConnectivityOn, None, itkSLICImageFilterVIUS2IUS2)
itkSLICImageFilterVIUS2IUS2.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_EnforceConnectivityOff, None, itkSLICImageFilterVIUS2IUS2)
itkSLICImageFilterVIUS2IUS2.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetAverageResidual, None, itkSLICImageFilterVIUS2IUS2)
itkSLICImageFilterVIUS2IUS2_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_swigregister
itkSLICImageFilterVIUS2IUS2_swigregister(itkSLICImageFilterVIUS2IUS2)

def itkSLICImageFilterVIUS2IUS2___New_orig__():
    """itkSLICImageFilterVIUS2IUS2___New_orig__() -> itkSLICImageFilterVIUS2IUS2_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2___New_orig__()

def itkSLICImageFilterVIUS2IUS2_cast(obj):
    """itkSLICImageFilterVIUS2IUS2_cast(itkLightObject obj) -> itkSLICImageFilterVIUS2IUS2"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_cast(obj)

class itkSLICImageFilterVIUS3IUL3(itkSLICImageFilterVIUS3IUL3_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterVIUS3IUL3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterVIUS3IUL3 self) -> itkSLICImageFilterVIUS3IUL3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterVIUS3IUL3 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterVIUS3IUL3 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterVIUS3IUL3 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterVIUS3IUL3 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterVIUS3IUL3 self) -> itkFixedArrayUI3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterVIUS3IUL3 self, itkFixedArrayUI3 _arg)
        SetSuperGridSize(itkSLICImageFilterVIUS3IUL3 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterVIUS3IUL3 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterVIUS3IUL3 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterVIUS3IUL3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterVIUS3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterVIUS3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterVIUS3IUL3 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterVIUS3IUL3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterVIUS3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterVIUS3IUL3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterVIUS3IUL3 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS3IUL3

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVIUS3IUL3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUS3IUL3

        Create a new object of the class itkSLICImageFilterVIUS3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUS3IUL3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUS3IUL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVIUS3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVIUS3IUL3.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Clone, None, itkSLICImageFilterVIUS3IUL3)
itkSLICImageFilterVIUS3IUL3.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_SetSpatialProximityWeight, None, itkSLICImageFilterVIUS3IUL3)
itkSLICImageFilterVIUS3IUL3.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_GetSpatialProximityWeight, None, itkSLICImageFilterVIUS3IUL3)
itkSLICImageFilterVIUS3IUL3.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_SetMaximumNumberOfIterations, None, itkSLICImageFilterVIUS3IUL3)
itkSLICImageFilterVIUS3IUL3.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_GetMaximumNumberOfIterations, None, itkSLICImageFilterVIUS3IUL3)
itkSLICImageFilterVIUS3IUL3.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_GetSuperGridSize, None, itkSLICImageFilterVIUS3IUL3)
itkSLICImageFilterVIUS3IUL3.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_SetSuperGridSize, None, itkSLICImageFilterVIUS3IUL3)
itkSLICImageFilterVIUS3IUL3.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_SetInitializationPerturbation, None, itkSLICImageFilterVIUS3IUL3)
itkSLICImageFilterVIUS3IUL3.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_GetInitializationPerturbation, None, itkSLICImageFilterVIUS3IUL3)
itkSLICImageFilterVIUS3IUL3.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_InitializationPerturbationOn, None, itkSLICImageFilterVIUS3IUL3)
itkSLICImageFilterVIUS3IUL3.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_InitializationPerturbationOff, None, itkSLICImageFilterVIUS3IUL3)
itkSLICImageFilterVIUS3IUL3.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_SetEnforceConnectivity, None, itkSLICImageFilterVIUS3IUL3)
itkSLICImageFilterVIUS3IUL3.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_GetEnforceConnectivity, None, itkSLICImageFilterVIUS3IUL3)
itkSLICImageFilterVIUS3IUL3.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_EnforceConnectivityOn, None, itkSLICImageFilterVIUS3IUL3)
itkSLICImageFilterVIUS3IUL3.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_EnforceConnectivityOff, None, itkSLICImageFilterVIUS3IUL3)
itkSLICImageFilterVIUS3IUL3.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_GetAverageResidual, None, itkSLICImageFilterVIUS3IUL3)
itkSLICImageFilterVIUS3IUL3_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_swigregister
itkSLICImageFilterVIUS3IUL3_swigregister(itkSLICImageFilterVIUS3IUL3)

def itkSLICImageFilterVIUS3IUL3___New_orig__():
    """itkSLICImageFilterVIUS3IUL3___New_orig__() -> itkSLICImageFilterVIUS3IUL3_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3___New_orig__()

def itkSLICImageFilterVIUS3IUL3_cast(obj):
    """itkSLICImageFilterVIUS3IUL3_cast(itkLightObject obj) -> itkSLICImageFilterVIUS3IUL3"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_cast(obj)

class itkSLICImageFilterVIUS3IUS3(itkSLICImageFilterVIUS3IUS3_Superclass):
    """


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596

    C++ includes: itkSLICImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSLICImageFilterVIUS3IUS3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSLICImageFilterVIUS3IUS3 self) -> itkSLICImageFilterVIUS3IUS3_Pointer"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Clone(self)


    def SetSpatialProximityWeight(self, _arg):
        """
        SetSpatialProximityWeight(itkSLICImageFilterVIUS3IUS3 self, double const _arg)

        The
        spatial weight for the distance function.

        Increasing this value makes the superpixel shape more regular, but
        more varied in image values. The range of the pixel values and image
        dimension can effect the appropriate value. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_SetSpatialProximityWeight(self, _arg)


    def GetSpatialProximityWeight(self):
        """GetSpatialProximityWeight(itkSLICImageFilterVIUS3IUS3 self) -> double"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetSpatialProximityWeight(self)


    def SetMaximumNumberOfIterations(self, _arg):
        """
        SetMaximumNumberOfIterations(itkSLICImageFilterVIUS3IUS3 self, unsigned int const _arg)

        Number
        of iterations to run.

        Specify the number of iterations to run when optimizing the clusters.

        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self):
        """GetMaximumNumberOfIterations(itkSLICImageFilterVIUS3IUS3 self) -> unsigned int"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetMaximumNumberOfIterations(self)


    def GetSuperGridSize(self):
        """GetSuperGridSize(itkSLICImageFilterVIUS3IUS3 self) -> itkFixedArrayUI3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetSuperGridSize(self)


    def SetSuperGridSize(self, *args):
        """
        SetSuperGridSize(itkSLICImageFilterVIUS3IUS3 self, itkFixedArrayUI3 _arg)
        SetSuperGridSize(itkSLICImageFilterVIUS3IUS3 self, unsigned int factor)
        SetSuperGridSize(itkSLICImageFilterVIUS3IUS3 self, unsigned int i, unsigned int factor)

        The expected
        superpixel size and shape.

        The requested size of a superpixel used to form a regular grid for
        initialization and limits the search space for pixels. The size may be
        set anisotropically to provide a directional bias. This may be set to
        reflect spacing of this image. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_SetSuperGridSize(self, *args)


    def SetInitializationPerturbation(self, _arg):
        """
        SetInitializationPerturbation(itkSLICImageFilterVIUS3IUS3 self, bool const _arg)

        Enable perturbation of initial cluster center location.

        After grid based initialization, this option enables moving the
        initial cluster center location to the minimum gradient in a small
        neighborhood. If the grid size is less than three this is
        automatically disabled. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_SetInitializationPerturbation(self, _arg)


    def GetInitializationPerturbation(self):
        """GetInitializationPerturbation(itkSLICImageFilterVIUS3IUS3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetInitializationPerturbation(self)


    def InitializationPerturbationOn(self):
        """InitializationPerturbationOn(itkSLICImageFilterVIUS3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_InitializationPerturbationOn(self)


    def InitializationPerturbationOff(self):
        """InitializationPerturbationOff(itkSLICImageFilterVIUS3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_InitializationPerturbationOff(self)


    def SetEnforceConnectivity(self, _arg):
        """
        SetEnforceConnectivity(itkSLICImageFilterVIUS3IUS3 self, bool const _arg)

        Post
        processing step to enforce superpixel morphology.

        Enable an additional computation which ensures all label pixels of the
        same value are spatially connected. Disconnected labeled components
        are assigned a new value if of sufficient size, or are relabeled to
        the previously encountered value if small. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_SetEnforceConnectivity(self, _arg)


    def GetEnforceConnectivity(self):
        """GetEnforceConnectivity(itkSLICImageFilterVIUS3IUS3 self) -> bool"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetEnforceConnectivity(self)


    def EnforceConnectivityOn(self):
        """EnforceConnectivityOn(itkSLICImageFilterVIUS3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_EnforceConnectivityOn(self)


    def EnforceConnectivityOff(self):
        """EnforceConnectivityOff(itkSLICImageFilterVIUS3IUS3 self)"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_EnforceConnectivityOff(self)


    def GetAverageResidual(self):
        """
        GetAverageResidual(itkSLICImageFilterVIUS3IUS3 self) -> double

        Get the current
        average cluster residual.

        After each iteration the residual is computed as the distance between
        the current clusters and the previous. This is averaged so that the
        value is independent of the number of clusters. 
        """
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetAverageResidual(self)

    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS3IUS3

    def cast(obj):
        """cast(itkLightObject obj) -> itkSLICImageFilterVIUS3IUS3"""
        return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUS3IUS3

        Create a new object of the class itkSLICImageFilterVIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSLICImageFilterVIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSLICImageFilterVIUS3IUS3.Clone = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Clone, None, itkSLICImageFilterVIUS3IUS3)
itkSLICImageFilterVIUS3IUS3.SetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_SetSpatialProximityWeight, None, itkSLICImageFilterVIUS3IUS3)
itkSLICImageFilterVIUS3IUS3.GetSpatialProximityWeight = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetSpatialProximityWeight, None, itkSLICImageFilterVIUS3IUS3)
itkSLICImageFilterVIUS3IUS3.SetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_SetMaximumNumberOfIterations, None, itkSLICImageFilterVIUS3IUS3)
itkSLICImageFilterVIUS3IUS3.GetMaximumNumberOfIterations = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetMaximumNumberOfIterations, None, itkSLICImageFilterVIUS3IUS3)
itkSLICImageFilterVIUS3IUS3.GetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetSuperGridSize, None, itkSLICImageFilterVIUS3IUS3)
itkSLICImageFilterVIUS3IUS3.SetSuperGridSize = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_SetSuperGridSize, None, itkSLICImageFilterVIUS3IUS3)
itkSLICImageFilterVIUS3IUS3.SetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_SetInitializationPerturbation, None, itkSLICImageFilterVIUS3IUS3)
itkSLICImageFilterVIUS3IUS3.GetInitializationPerturbation = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetInitializationPerturbation, None, itkSLICImageFilterVIUS3IUS3)
itkSLICImageFilterVIUS3IUS3.InitializationPerturbationOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_InitializationPerturbationOn, None, itkSLICImageFilterVIUS3IUS3)
itkSLICImageFilterVIUS3IUS3.InitializationPerturbationOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_InitializationPerturbationOff, None, itkSLICImageFilterVIUS3IUS3)
itkSLICImageFilterVIUS3IUS3.SetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_SetEnforceConnectivity, None, itkSLICImageFilterVIUS3IUS3)
itkSLICImageFilterVIUS3IUS3.GetEnforceConnectivity = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetEnforceConnectivity, None, itkSLICImageFilterVIUS3IUS3)
itkSLICImageFilterVIUS3IUS3.EnforceConnectivityOn = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_EnforceConnectivityOn, None, itkSLICImageFilterVIUS3IUS3)
itkSLICImageFilterVIUS3IUS3.EnforceConnectivityOff = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_EnforceConnectivityOff, None, itkSLICImageFilterVIUS3IUS3)
itkSLICImageFilterVIUS3IUS3.GetAverageResidual = new_instancemethod(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetAverageResidual, None, itkSLICImageFilterVIUS3IUS3)
itkSLICImageFilterVIUS3IUS3_swigregister = _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_swigregister
itkSLICImageFilterVIUS3IUS3_swigregister(itkSLICImageFilterVIUS3IUS3)

def itkSLICImageFilterVIUS3IUS3___New_orig__():
    """itkSLICImageFilterVIUS3IUS3___New_orig__() -> itkSLICImageFilterVIUS3IUS3_Pointer"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3___New_orig__()

def itkSLICImageFilterVIUS3IUS3_cast(obj):
    """itkSLICImageFilterVIUS3IUS3_cast(itkLightObject obj) -> itkSLICImageFilterVIUS3IUS3"""
    return _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_cast(obj)


def slic_image_filter(*args, **kwargs):
    """Procedural interface for SLICImageFilter"""
    import itk
    instance = itk.SLICImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def slic_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.SLICImageFilter, itkTemplate.itkTemplate):
        slic_image_filter.__doc__ = itk.SLICImageFilter.values()[0].__doc__
    else:
        slic_image_filter.__doc__ = itk.SLICImageFilter.__doc__

def image_to_image_filter(*args, **kwargs):
    """Procedural interface for ImageToImageFilter"""
    import itk
    instance = itk.ImageToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def image_to_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.ImageToImageFilter, itkTemplate.itkTemplate):
        image_to_image_filter.__doc__ = itk.ImageToImageFilter.values()[0].__doc__
    else:
        image_to_image_filter.__doc__ = itk.ImageToImageFilter.__doc__




