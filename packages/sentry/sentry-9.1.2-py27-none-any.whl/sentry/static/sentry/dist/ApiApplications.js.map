{"version":3,"sources":["webpack:///./app/views/settings/account/apiApplications.jsx"],"names":["ROUTE_PREFIX","ApiApplicationRow","createReactClass","displayName","propTypes","app","PropTypes","object","isRequired","onRemove","func","mixins","ApiMixin","getInitialState","loading","handleRemove","_this","this","state","props","setState","loadingIndicator","IndicatorStore","add","t","api","request","concat","id","method","success","data","remove","error","duration","render","btnClassName","react__WEBPACK_IMPORTED_MODULE_8___default","a","createElement","app_components_panels__WEBPACK_IMPORTED_MODULE_10__","justify","px","py","grid_emotion__WEBPACK_IMPORTED_MODULE_5__","flex","style","marginBottom","react_router__WEBPACK_IMPORTED_MODULE_6__","to","getDynamicText","value","name","fixed","color","clientID","align","pl","onClick","className","disabled","ApiApplications","handleCreateApplication","indicator","addLoadingMessage","_this2","addSuccessMessage","removeIndicator","context","router","push","addErrorMessage","handleRemoveApplication","appList","filter","_this3","action","app_components_button__WEBPACK_IMPORTED_MODULE_15__","priority","size","icon","isEmpty","length","app_views_settings_components_settingsPageHeader__WEBPACK_IMPORTED_MODULE_18__","title","disablePadding","app_views_settings_components_emptyMessage__WEBPACK_IMPORTED_MODULE_16__","map","key","AsyncView","contextTypes"],"mappings":"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","file":"ApiApplications.js","sourcesContent":["import {Box, Flex} from 'grid-emotion';\nimport {Link} from 'react-router';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport createReactClass from 'create-react-class';\n\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n  removeIndicator,\n} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport ApiMixin from 'app/mixins/apiMixin';\nimport AsyncView from 'app/views/asyncView';\nimport Button from 'app/components/button';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport IndicatorStore from 'app/stores/indicatorStore';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport getDynamicText from 'app/utils/getDynamicText';\n\nconst ROUTE_PREFIX = '/settings/account/api/';\n\nconst ApiApplicationRow = createReactClass({\n  displayName: 'ApiApplicationRow',\n\n  propTypes: {\n    app: PropTypes.object.isRequired,\n    onRemove: PropTypes.func.isRequired,\n  },\n\n  mixins: [ApiMixin],\n\n  getInitialState() {\n    return {\n      loading: false,\n    };\n  },\n\n  handleRemove() {\n    if (this.state.loading) {\n      return;\n    }\n\n    const app = this.props.app;\n\n    this.setState(\n      {\n        loading: true,\n      },\n      () => {\n        const loadingIndicator = IndicatorStore.add(t('Saving changes..'));\n        this.api.request(`/api-applications/${app.id}/`, {\n          method: 'DELETE',\n          success: data => {\n            IndicatorStore.remove(loadingIndicator);\n            this.props.onRemove(app);\n          },\n          error: () => {\n            IndicatorStore.remove(loadingIndicator);\n            IndicatorStore.add(\n              t('Unable to remove application. Please try again.'),\n              'error',\n              {\n                duration: 3000,\n              }\n            );\n          },\n        });\n      }\n    );\n  },\n\n  render() {\n    const app = this.props.app;\n\n    let btnClassName = 'btn btn-default';\n    if (this.state.loading) {\n      btnClassName += ' disabled';\n    }\n\n    return (\n      <PanelItem justify=\"space-between\" px={2} py={2}>\n        <Box flex=\"1\">\n          <h4 style={{marginBottom: 5}}>\n            <Link to={`${ROUTE_PREFIX}applications/${app.id}/`}>\n              {getDynamicText({value: app.name, fixed: 'PERCY_APPLICATION_NAME'})}\n            </Link>\n          </h4>\n          <small style={{color: '#999'}}>\n            {getDynamicText({value: app.clientID, fixed: 'PERCY_CLIENT_ID'})}\n          </small>\n        </Box>\n\n        <Flex align=\"center\">\n          <Box pl={2}>\n            <a\n              onClick={this.handleRemove}\n              className={btnClassName}\n              disabled={this.state.loading}\n            >\n              <span className=\"icon icon-trash\" />\n            </a>\n          </Box>\n        </Flex>\n      </PanelItem>\n    );\n  },\n});\n\nclass ApiApplications extends AsyncView {\n  static contextTypes = {\n    router: PropTypes.object.isRequired,\n  };\n\n  getEndpoints() {\n    return [['appList', '/api-applications/']];\n  }\n\n  getTitle() {\n    return 'API Applications';\n  }\n\n  handleCreateApplication = () => {\n    const indicator = addLoadingMessage();\n    this.api.request('/api-applications/', {\n      method: 'POST',\n      success: app => {\n        addSuccessMessage(t('Created a new API Application'));\n        removeIndicator(indicator);\n        this.context.router.push(`${ROUTE_PREFIX}applications/${app.id}/`);\n      },\n      error: error => {\n        removeIndicator(indicator);\n        addErrorMessage(t('Unable to remove application. Please try again.'));\n      },\n    });\n  };\n\n  handleRemoveApplication = app => {\n    this.setState({\n      appList: this.state.appList.filter(a => a.id !== app.id),\n    });\n  };\n\n  renderBody() {\n    const action = (\n      <Button\n        priority=\"primary\"\n        size=\"small\"\n        className=\"ref-create-application\"\n        onClick={this.handleCreateApplication}\n        icon=\"icon-circle-add\"\n      >\n        {t('Create New Application')}\n      </Button>\n    );\n\n    const isEmpty = this.state.appList.length === 0;\n\n    return (\n      <div>\n        <SettingsPageHeader title=\"API Applications\" action={action} />\n\n        <Panel>\n          <PanelHeader disablePadding>\n            <Flex align=\"center\">\n              <Box px={2} flex=\"1\">\n                {t('Application Name')}\n              </Box>\n            </Flex>\n          </PanelHeader>\n\n          <PanelBody>\n            {!isEmpty ? (\n              this.state.appList.map(app => {\n                return (\n                  <ApiApplicationRow\n                    key={app.id}\n                    app={app}\n                    onRemove={this.handleRemoveApplication}\n                  />\n                );\n              })\n            ) : (\n              <EmptyMessage>\n                {t(\"You haven't created any applications yet.\")}\n              </EmptyMessage>\n            )}\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nexport default ApiApplications;\n"],"sourceRoot":""}