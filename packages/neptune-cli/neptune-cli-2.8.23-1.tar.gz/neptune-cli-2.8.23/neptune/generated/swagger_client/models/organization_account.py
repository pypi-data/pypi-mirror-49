# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class OrganizationAccount(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, pending_payments=None, instance_deletion=None, bonus=None, billing_email=None, balance=None, customer_id=None, id=None, pending_payments_from_previous_months=None, pricing_plan=None):
        """
        OrganizationAccount - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'pending_payments': 'float',
            'instance_deletion': 'datetime',
            'bonus': 'float',
            'billing_email': 'str',
            'balance': 'float',
            'customer_id': 'str',
            'id': 'str',
            'pending_payments_from_previous_months': 'float',
            'pricing_plan': 'PricingPlan'
        }

        self.attribute_map = {
            'pending_payments': 'pendingPayments',
            'instance_deletion': 'instanceDeletion',
            'bonus': 'bonus',
            'billing_email': 'billingEmail',
            'balance': 'balance',
            'customer_id': 'customerId',
            'id': 'id',
            'pending_payments_from_previous_months': 'pendingPaymentsFromPreviousMonths',
            'pricing_plan': 'pricingPlan'
        }

        self._pending_payments = pending_payments
        self._instance_deletion = instance_deletion
        self._bonus = bonus
        self._billing_email = billing_email
        self._balance = balance
        self._customer_id = customer_id
        self._id = id
        self._pending_payments_from_previous_months = pending_payments_from_previous_months
        self._pricing_plan = pricing_plan

    @property
    def pending_payments(self):
        """
        Gets the pending_payments of this OrganizationAccount.


        :return: The pending_payments of this OrganizationAccount.
        :rtype: float
        """
        return self._pending_payments

    @pending_payments.setter
    def pending_payments(self, pending_payments):
        """
        Sets the pending_payments of this OrganizationAccount.


        :param pending_payments: The pending_payments of this OrganizationAccount.
        :type: float
        """
        
        self._pending_payments = pending_payments

    @property
    def instance_deletion(self):
        """
        Gets the instance_deletion of this OrganizationAccount.


        :return: The instance_deletion of this OrganizationAccount.
        :rtype: datetime
        """
        return self._instance_deletion

    @instance_deletion.setter
    def instance_deletion(self, instance_deletion):
        """
        Sets the instance_deletion of this OrganizationAccount.


        :param instance_deletion: The instance_deletion of this OrganizationAccount.
        :type: datetime
        """
        
        self._instance_deletion = instance_deletion

    @property
    def bonus(self):
        """
        Gets the bonus of this OrganizationAccount.


        :return: The bonus of this OrganizationAccount.
        :rtype: float
        """
        return self._bonus

    @bonus.setter
    def bonus(self, bonus):
        """
        Sets the bonus of this OrganizationAccount.


        :param bonus: The bonus of this OrganizationAccount.
        :type: float
        """
        
        self._bonus = bonus

    @property
    def billing_email(self):
        """
        Gets the billing_email of this OrganizationAccount.


        :return: The billing_email of this OrganizationAccount.
        :rtype: str
        """
        return self._billing_email

    @billing_email.setter
    def billing_email(self, billing_email):
        """
        Sets the billing_email of this OrganizationAccount.


        :param billing_email: The billing_email of this OrganizationAccount.
        :type: str
        """
        
        self._billing_email = billing_email

    @property
    def balance(self):
        """
        Gets the balance of this OrganizationAccount.


        :return: The balance of this OrganizationAccount.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """
        Sets the balance of this OrganizationAccount.


        :param balance: The balance of this OrganizationAccount.
        :type: float
        """
        
        self._balance = balance

    @property
    def customer_id(self):
        """
        Gets the customer_id of this OrganizationAccount.


        :return: The customer_id of this OrganizationAccount.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """
        Sets the customer_id of this OrganizationAccount.


        :param customer_id: The customer_id of this OrganizationAccount.
        :type: str
        """
        
        self._customer_id = customer_id

    @property
    def id(self):
        """
        Gets the id of this OrganizationAccount.


        :return: The id of this OrganizationAccount.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this OrganizationAccount.


        :param id: The id of this OrganizationAccount.
        :type: str
        """
        
        self._id = id

    @property
    def pending_payments_from_previous_months(self):
        """
        Gets the pending_payments_from_previous_months of this OrganizationAccount.


        :return: The pending_payments_from_previous_months of this OrganizationAccount.
        :rtype: float
        """
        return self._pending_payments_from_previous_months

    @pending_payments_from_previous_months.setter
    def pending_payments_from_previous_months(self, pending_payments_from_previous_months):
        """
        Sets the pending_payments_from_previous_months of this OrganizationAccount.


        :param pending_payments_from_previous_months: The pending_payments_from_previous_months of this OrganizationAccount.
        :type: float
        """
        
        self._pending_payments_from_previous_months = pending_payments_from_previous_months

    @property
    def pricing_plan(self):
        """
        Gets the pricing_plan of this OrganizationAccount.


        :return: The pricing_plan of this OrganizationAccount.
        :rtype: PricingPlan
        """
        return self._pricing_plan

    @pricing_plan.setter
    def pricing_plan(self, pricing_plan):
        """
        Sets the pricing_plan of this OrganizationAccount.


        :param pricing_plan: The pricing_plan of this OrganizationAccount.
        :type: PricingPlan
        """
        
        self._pricing_plan = pricing_plan

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




