# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class Series(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, series_type=None, alias_id=None, label=None, channel_name=None, channel_id=None):
        """
        Series - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'series_type': 'SeriesType',
            'alias_id': 'str',
            'label': 'str',
            'channel_name': 'str',
            'channel_id': 'str'
        }

        self.attribute_map = {
            'series_type': 'seriesType',
            'alias_id': 'aliasId',
            'label': 'label',
            'channel_name': 'channelName',
            'channel_id': 'channelId'
        }

        self._series_type = series_type
        self._alias_id = alias_id
        self._label = label
        self._channel_name = channel_name
        self._channel_id = channel_id

    @property
    def series_type(self):
        """
        Gets the series_type of this Series.


        :return: The series_type of this Series.
        :rtype: SeriesType
        """
        return self._series_type

    @series_type.setter
    def series_type(self, series_type):
        """
        Sets the series_type of this Series.


        :param series_type: The series_type of this Series.
        :type: SeriesType
        """
        
        self._series_type = series_type

    @property
    def alias_id(self):
        """
        Gets the alias_id of this Series.


        :return: The alias_id of this Series.
        :rtype: str
        """
        return self._alias_id

    @alias_id.setter
    def alias_id(self, alias_id):
        """
        Sets the alias_id of this Series.


        :param alias_id: The alias_id of this Series.
        :type: str
        """
        
        self._alias_id = alias_id

    @property
    def label(self):
        """
        Gets the label of this Series.


        :return: The label of this Series.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this Series.


        :param label: The label of this Series.
        :type: str
        """
        
        self._label = label

    @property
    def channel_name(self):
        """
        Gets the channel_name of this Series.


        :return: The channel_name of this Series.
        :rtype: str
        """
        return self._channel_name

    @channel_name.setter
    def channel_name(self, channel_name):
        """
        Sets the channel_name of this Series.


        :param channel_name: The channel_name of this Series.
        :type: str
        """
        
        self._channel_name = channel_name

    @property
    def channel_id(self):
        """
        Gets the channel_id of this Series.


        :return: The channel_id of this Series.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """
        Sets the channel_id of this Series.


        :param channel_id: The channel_id of this Series.
        :type: str
        """
        
        self._channel_id = channel_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




