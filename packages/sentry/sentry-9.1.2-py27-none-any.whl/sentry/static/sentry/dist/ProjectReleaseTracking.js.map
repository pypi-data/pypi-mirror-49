{"version":3,"sources":["webpack:///./app/views/settings/components/forms/textCopyInput.jsx","webpack:///./app/views/settings/project/projectReleaseTracking.jsx"],"names":["StyledInput","styled","props","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","target","inputStyles","p","theme","offWhite","OverflowContainer","StyledCopyButton","Button","TextCopyInput","_this","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default","this","_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3___default","call","handleCopyClick","e","textRef","current","onCopy","handleSelectText","children","stopPropagation","selectText","ReactDOM","findDOMNode","React","createRef","_this$props","style","grid_emotion__WEBPACK_IMPORTED_MODULE_5__","readOnly","ref","value","onClick","app_components_clipboard__WEBPACK_IMPORTED_MODULE_13__","hideUnsupported","type","size","app_components_inlineSvg__WEBPACK_IMPORTED_MODULE_14__","src","Component","propTypes","PropTypes","string","isRequired","object","func","defaultProps","ProjectReleaseTracking","handleRegenerateToken","_this$props$params","params","orgId","projectId","api","request","concat","method","data","project","success","setState","token","webhookUrl","addSuccessMessage","t","error","addErrorMessage","_this$props$params2","allowError","err","status","state","organization","plugins","hasWrite","access","includes","loading","react__WEBPACK_IMPORTED_MODULE_6___default","app_components_loadingIndicator__WEBPACK_IMPORTED_MODULE_17__","pluginList","filter","hasConfiguration","_ref2","getDynamicText","fixed","app_views_settings_components_settingsPageHeader__WEBPACK_IMPORTED_MODULE_20__","title","app_components_alert__WEBPACK_IMPORTED_MODULE_10__","icon","app_components_panels__WEBPACK_IMPORTED_MODULE_7__","disablePadding","flex","tct","link","href","release","app_views_settings_components_forms_field__WEBPACK_IMPORTED_MODULE_16__","label","help","app_views_settings_components_forms_textCopyInput__WEBPACK_IMPORTED_MODULE_21__","app_components_confirm__WEBPACK_IMPORTED_MODULE_14__","disabled","priority","onConfirm","message","app_components_button__WEBPACK_IMPORTED_MODULE_13__","app_components_autoSelectText__WEBPACK_IMPORTED_MODULE_12__","app_components_dynamicWrapper__WEBPACK_IMPORTED_MODULE_15__","getReleaseWebhookIntructions","app_components_pluginList__WEBPACK_IMPORTED_MODULE_18__","AsyncView","SentryTypes","PluginsStore","withPlugins"],"mappings":"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","file":"ProjectReleaseTracking.js","sourcesContent":["import {Flex} from 'grid-emotion';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from 'react-emotion';\n\nimport {inputStyles} from 'app/styles/input';\nimport {selectText} from 'app/utils/selectText';\nimport Button from 'app/components/button';\nimport Clipboard from 'app/components/clipboard';\nimport InlineSvg from 'app/components/inlineSvg';\n\nconst StyledInput = styled(props => {\n  return <input {...props} />;\n})`\n  ${inputStyles};\n  background-color: ${p => p.theme.offWhite};\n  border-right-width: 0;\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n\n  &:hover,\n  &:focus {\n    background-color: ${p => p.theme.offWhite};\n    border-right-width: 0;\n  }\n`;\n\nconst OverflowContainer = styled('div')`\n  flex-grow: 1;\n  border: none;\n`;\n\nconst StyledCopyButton = styled(Button)`\n  flex-shrink: 1;\n  border-radius: 0 0.25em 0.25em 0;\n  box-shadow: none;\n`;\n\nclass TextCopyInput extends React.Component {\n  static propTypes = {\n    /**\n     * Text to copy\n     */\n    children: PropTypes.string.isRequired,\n    /**\n     * CSS style object\n     */\n    style: PropTypes.object,\n    onCopy: PropTypes.func,\n  };\n\n  static defaultProps = {\n    onCopy: () => {},\n  };\n\n  constructor(props) {\n    super(props);\n    this.textRef = React.createRef();\n  }\n\n  // Select text when copy button is clicked\n  handleCopyClick = e => {\n    if (!this.textRef.current) {\n      return;\n    }\n\n    const {onCopy} = this.props;\n\n    this.handleSelectText();\n\n    onCopy(this.props.children, e);\n\n    e.stopPropagation();\n  };\n\n  handleSelectText = () => {\n    if (!this.textRef.current) {\n      return;\n    }\n\n    // We use findDOMNode here because `this.textRef` is not a dom node,\n    // it's a ref to AutoSelectText\n    selectText(ReactDOM.findDOMNode(this.textRef.current));\n  };\n\n  render() {\n    const {style, children} = this.props;\n\n    return (\n      <Flex>\n        <OverflowContainer>\n          <StyledInput\n            readOnly\n            ref={this.textRef}\n            style={style}\n            value={children}\n            onClick={this.handleSelectText}\n          />\n        </OverflowContainer>\n        <Clipboard hideUnsupported onClick={this.handleCopyClick} value={children}>\n          <StyledCopyButton type=\"button\" size=\"xsmall\" onClick={this.handleCopyClick}>\n            <InlineSvg src=\"icon-clipboard\" size=\"1.25em\" />\n          </StyledCopyButton>\n        </Clipboard>\n      </Flex>\n    );\n  }\n}\n\nexport default TextCopyInput;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {t, tct} from 'app/locale';\nimport Alert from 'app/components/alert';\nimport AsyncView from 'app/views/asyncView';\nimport AutoSelectText from 'app/components/autoSelectText';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport DynamicWrapper from 'app/components/dynamicWrapper';\nimport Field from 'app/views/settings/components/forms/field';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport PluginList from 'app/components/pluginList';\nimport SentryTypes from 'app/sentryTypes';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextCopyInput from 'app/views/settings/components/forms/textCopyInput';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport withPlugins from 'app/utils/withPlugins';\n\nconst TOKEN_PLACEHOLDER = 'YOUR_TOKEN';\nconst WEBHOOK_PLACEHOLDER = 'YOUR_WEBHOOK_URL';\n\nclass ProjectReleaseTracking extends AsyncView {\n  static propTypes = {\n    organization: PropTypes.object,\n    project: PropTypes.object,\n    plugins: SentryTypes.PluginsStore,\n  };\n\n  getTitle() {\n    return 'Release Tracking';\n  }\n\n  getEndpoints() {\n    const {orgId, projectId} = this.props.params;\n\n    // Allow 403s\n    return [\n      [\n        'data',\n        `/projects/${orgId}/${projectId}/releases/token/`,\n        {},\n        {allowError: err => err && err.status === 403},\n      ],\n    ];\n  }\n\n  handleRegenerateToken = () => {\n    const {orgId, projectId} = this.props.params;\n    this.api.request(`/projects/${orgId}/${projectId}/releases/token/`, {\n      method: 'POST',\n      data: {project: projectId},\n      success: data => {\n        this.setState({\n          token: data.token,\n          webhookUrl: data.webhookUrl,\n        });\n        addSuccessMessage(\n          t(\n            'Your deploy token has been regenerated. You will need to update any existing deploy hooks.'\n          )\n        );\n      },\n      error: () => {\n        addErrorMessage(t('Unable to regenerate deploy token, please try again'));\n      },\n    });\n  };\n\n  getReleaseWebhookIntructions() {\n    const {webhookUrl} = this.state.data || {webhookUrl: WEBHOOK_PLACEHOLDER};\n    return (\n      'curl ' +\n      webhookUrl +\n      ' \\\\' +\n      '\\n  ' +\n      '-X POST \\\\' +\n      '\\n  ' +\n      \"-H 'Content-Type: application/json' \\\\\" +\n      '\\n  ' +\n      '-d \\'{\"version\": \"abcdefg\"}\\''\n    );\n  }\n\n  renderBody() {\n    const {organization, project, plugins} = this.props;\n    const hasWrite = organization.access.includes('project:write');\n\n    if (plugins.loading) {\n      return <LoadingIndicator />;\n    }\n\n    const pluginList = plugins.plugins.filter(\n      p => p.type === 'release-tracking' && p.hasConfiguration\n    );\n\n    let {token, webhookUrl} = this.state.data || {\n      token: TOKEN_PLACEHOLDER,\n      webhookUrl: WEBHOOK_PLACEHOLDER,\n    };\n\n    token = token && getDynamicText({value: token, fixed: '__TOKEN__'});\n    webhookUrl =\n      webhookUrl && getDynamicText({value: webhookUrl, fixed: '__WEBHOOK_URL__'});\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('Release Tracking')} />\n        {!hasWrite && (\n          <Alert icon=\"icon-circle-exclamation\" type=\"warning\">\n            {t(\n              'You do not have sufficient permissions to access Release tokens, placeholders are displayed below.'\n            )}\n          </Alert>\n        )}\n        <p>\n          {t(\n            'Configure release tracking for this project to automatically record new releases of your application.'\n          )}\n        </p>\n\n        <Panel>\n          <PanelHeader>{t('Client Configuration')}</PanelHeader>\n          <PanelBody disablePadding={false} flex>\n            <p>\n              {tct(\n                'Start by binding the [release] attribute in your application, take a look at [link] to see how to configure this for the SDK you are using.',\n                {\n                  link: (\n                    <a href=\"https://docs.sentry.io/workflow/releases/?platform=javascript#tag-errors\">\n                      our docs\n                    </a>\n                  ),\n                  release: <code>release</code>,\n                }\n              )}\n            </p>\n            <p>\n              {t(\n                \"This will annotate each event with the version of your application, as well as automatically create a release entity in the system the first time it's seen.\"\n              )}\n            </p>\n            <p>\n              {t(\n                'In addition you may configure a release hook (or use our API) to push a release and include additional metadata with it.'\n              )}\n            </p>\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Deploy Token')}</PanelHeader>\n          <PanelBody flex>\n            <Field\n              label={t('Token')}\n              help={t('A unique secret which is used to generate deploy hook URLs')}\n            >\n              <TextCopyInput>{token}</TextCopyInput>\n            </Field>\n            <Field\n              label={t('Regenerate Token')}\n              help={t(\n                'If a service becomes compromised, you should regenerate the token and re-configure any deploy hooks with the newly generated URL.'\n              )}\n            >\n              <div>\n                <Confirm\n                  disabled={!hasWrite}\n                  priority=\"danger\"\n                  onConfirm={this.handleRegenerateToken}\n                  message={t(\n                    'Are you sure you want to regenerate your token? Your current token will no longer be usable.'\n                  )}\n                >\n                  <Button type=\"button\" priority=\"danger\" disabled={!hasWrite}>\n                    {t('Regenerate Token')}\n                  </Button>\n                </Confirm>\n              </div>\n            </Field>\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Webhook')}</PanelHeader>\n          <PanelBody disablePadding={false} flex>\n            <p>\n              {t(\n                'If you simply want to integrate with an existing system, sometimes its easiest just to use a webhook.'\n              )}\n            </p>\n\n            <AutoSelectText>\n              <pre>{webhookUrl}</pre>\n            </AutoSelectText>\n\n            <p>\n              {t(\n                'The release webhook accepts the same parameters as the \"Create a new Release\" API endpoint.'\n              )}\n            </p>\n\n            <DynamicWrapper\n              value={\n                <AutoSelectText>\n                  <pre>{this.getReleaseWebhookIntructions()}</pre>\n                </AutoSelectText>\n              }\n              fixed={\n                <pre>\n                  {`curl __WEBHOOK_URL__ \\\\\n  -X POST \\\\\n  -H 'Content-Type: application/json' \\\\\n  -d \\'{\"version\": \"abcdefg\"}\\'`}\n                </pre>\n              }\n            />\n          </PanelBody>\n        </Panel>\n\n        <PluginList\n          organization={organization}\n          project={project}\n          pluginList={pluginList}\n        />\n\n        <Panel>\n          <PanelHeader>{t('API')}</PanelHeader>\n          <PanelBody disablePadding={false} flex>\n            <p>\n              {t(\n                'You can notify Sentry when you release new versions of your application via our HTTP API.'\n              )}\n            </p>\n\n            <p>\n              {tct('See the [link:releases documentation] for more information.', {\n                link: <a href=\"https://docs.sentry.io/workflow/releases/\" />,\n              })}\n            </p>\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nexport default withPlugins(ProjectReleaseTracking);\n\n// Export for tests\nexport {ProjectReleaseTracking};\n"],"sourceRoot":""}