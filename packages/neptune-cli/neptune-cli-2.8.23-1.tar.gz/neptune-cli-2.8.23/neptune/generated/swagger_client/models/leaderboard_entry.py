# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class LeaderboardEntry(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, channels_last_values=None, name=None, source_size=None, size=None, source_md5=None, trashed=None, state=None, description=None, tags=None, time_of_completion=None, commit_id=None, time_of_creation=None, project_id=None, running_time=None, id=None, properties=None, short_id=None, experiment_states=None, entry_type=None, worker_type=None, environment=None, responding=None, owner=None, parameters=None, deleted=None):
        """
        LeaderboardEntry - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'channels_last_values': 'list[ChannelWithValue]',
            'name': 'str',
            'source_size': 'int',
            'size': 'int',
            'source_md5': 'str',
            'trashed': 'bool',
            'state': 'ExperimentState',
            'description': 'str',
            'tags': 'list[str]',
            'time_of_completion': 'datetime',
            'commit_id': 'str',
            'time_of_creation': 'datetime',
            'project_id': 'str',
            'running_time': 'int',
            'id': 'str',
            'properties': 'list[KeyValueProperty]',
            'short_id': 'str',
            'experiment_states': 'ExperimentStates',
            'entry_type': 'EntryTypeEnum',
            'worker_type': 'str',
            'environment': 'str',
            'responding': 'bool',
            'owner': 'str',
            'parameters': 'list[Parameter]',
            'deleted': 'bool'
        }

        self.attribute_map = {
            'channels_last_values': 'channelsLastValues',
            'name': 'name',
            'source_size': 'sourceSize',
            'size': 'size',
            'source_md5': 'sourceMd5',
            'trashed': 'trashed',
            'state': 'state',
            'description': 'description',
            'tags': 'tags',
            'time_of_completion': 'timeOfCompletion',
            'commit_id': 'commitId',
            'time_of_creation': 'timeOfCreation',
            'project_id': 'projectId',
            'running_time': 'runningTime',
            'id': 'id',
            'properties': 'properties',
            'short_id': 'shortId',
            'experiment_states': 'experimentStates',
            'entry_type': 'entryType',
            'worker_type': 'workerType',
            'environment': 'environment',
            'responding': 'responding',
            'owner': 'owner',
            'parameters': 'parameters',
            'deleted': 'deleted'
        }

        self._channels_last_values = channels_last_values
        self._name = name
        self._source_size = source_size
        self._size = size
        self._source_md5 = source_md5
        self._trashed = trashed
        self._state = state
        self._description = description
        self._tags = tags
        self._time_of_completion = time_of_completion
        self._commit_id = commit_id
        self._time_of_creation = time_of_creation
        self._project_id = project_id
        self._running_time = running_time
        self._id = id
        self._properties = properties
        self._short_id = short_id
        self._experiment_states = experiment_states
        self._entry_type = entry_type
        self._worker_type = worker_type
        self._environment = environment
        self._responding = responding
        self._owner = owner
        self._parameters = parameters
        self._deleted = deleted

    @property
    def channels_last_values(self):
        """
        Gets the channels_last_values of this LeaderboardEntry.


        :return: The channels_last_values of this LeaderboardEntry.
        :rtype: list[ChannelWithValue]
        """
        return self._channels_last_values

    @channels_last_values.setter
    def channels_last_values(self, channels_last_values):
        """
        Sets the channels_last_values of this LeaderboardEntry.


        :param channels_last_values: The channels_last_values of this LeaderboardEntry.
        :type: list[ChannelWithValue]
        """
        
        self._channels_last_values = channels_last_values

    @property
    def name(self):
        """
        Gets the name of this LeaderboardEntry.


        :return: The name of this LeaderboardEntry.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LeaderboardEntry.


        :param name: The name of this LeaderboardEntry.
        :type: str
        """
        
        self._name = name

    @property
    def source_size(self):
        """
        Gets the source_size of this LeaderboardEntry.


        :return: The source_size of this LeaderboardEntry.
        :rtype: int
        """
        return self._source_size

    @source_size.setter
    def source_size(self, source_size):
        """
        Sets the source_size of this LeaderboardEntry.


        :param source_size: The source_size of this LeaderboardEntry.
        :type: int
        """
        
        self._source_size = source_size

    @property
    def size(self):
        """
        Gets the size of this LeaderboardEntry.


        :return: The size of this LeaderboardEntry.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this LeaderboardEntry.


        :param size: The size of this LeaderboardEntry.
        :type: int
        """
        
        self._size = size

    @property
    def source_md5(self):
        """
        Gets the source_md5 of this LeaderboardEntry.


        :return: The source_md5 of this LeaderboardEntry.
        :rtype: str
        """
        return self._source_md5

    @source_md5.setter
    def source_md5(self, source_md5):
        """
        Sets the source_md5 of this LeaderboardEntry.


        :param source_md5: The source_md5 of this LeaderboardEntry.
        :type: str
        """
        
        self._source_md5 = source_md5

    @property
    def trashed(self):
        """
        Gets the trashed of this LeaderboardEntry.


        :return: The trashed of this LeaderboardEntry.
        :rtype: bool
        """
        return self._trashed

    @trashed.setter
    def trashed(self, trashed):
        """
        Sets the trashed of this LeaderboardEntry.


        :param trashed: The trashed of this LeaderboardEntry.
        :type: bool
        """
        
        self._trashed = trashed

    @property
    def state(self):
        """
        Gets the state of this LeaderboardEntry.


        :return: The state of this LeaderboardEntry.
        :rtype: ExperimentState
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this LeaderboardEntry.


        :param state: The state of this LeaderboardEntry.
        :type: ExperimentState
        """
        
        self._state = state

    @property
    def description(self):
        """
        Gets the description of this LeaderboardEntry.


        :return: The description of this LeaderboardEntry.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this LeaderboardEntry.


        :param description: The description of this LeaderboardEntry.
        :type: str
        """
        
        self._description = description

    @property
    def tags(self):
        """
        Gets the tags of this LeaderboardEntry.


        :return: The tags of this LeaderboardEntry.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this LeaderboardEntry.


        :param tags: The tags of this LeaderboardEntry.
        :type: list[str]
        """
        
        self._tags = tags

    @property
    def time_of_completion(self):
        """
        Gets the time_of_completion of this LeaderboardEntry.


        :return: The time_of_completion of this LeaderboardEntry.
        :rtype: datetime
        """
        return self._time_of_completion

    @time_of_completion.setter
    def time_of_completion(self, time_of_completion):
        """
        Sets the time_of_completion of this LeaderboardEntry.


        :param time_of_completion: The time_of_completion of this LeaderboardEntry.
        :type: datetime
        """
        
        self._time_of_completion = time_of_completion

    @property
    def commit_id(self):
        """
        Gets the commit_id of this LeaderboardEntry.


        :return: The commit_id of this LeaderboardEntry.
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """
        Sets the commit_id of this LeaderboardEntry.


        :param commit_id: The commit_id of this LeaderboardEntry.
        :type: str
        """
        
        self._commit_id = commit_id

    @property
    def time_of_creation(self):
        """
        Gets the time_of_creation of this LeaderboardEntry.


        :return: The time_of_creation of this LeaderboardEntry.
        :rtype: datetime
        """
        return self._time_of_creation

    @time_of_creation.setter
    def time_of_creation(self, time_of_creation):
        """
        Sets the time_of_creation of this LeaderboardEntry.


        :param time_of_creation: The time_of_creation of this LeaderboardEntry.
        :type: datetime
        """
        
        self._time_of_creation = time_of_creation

    @property
    def project_id(self):
        """
        Gets the project_id of this LeaderboardEntry.


        :return: The project_id of this LeaderboardEntry.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """
        Sets the project_id of this LeaderboardEntry.


        :param project_id: The project_id of this LeaderboardEntry.
        :type: str
        """
        
        self._project_id = project_id

    @property
    def running_time(self):
        """
        Gets the running_time of this LeaderboardEntry.


        :return: The running_time of this LeaderboardEntry.
        :rtype: int
        """
        return self._running_time

    @running_time.setter
    def running_time(self, running_time):
        """
        Sets the running_time of this LeaderboardEntry.


        :param running_time: The running_time of this LeaderboardEntry.
        :type: int
        """
        
        self._running_time = running_time

    @property
    def id(self):
        """
        Gets the id of this LeaderboardEntry.


        :return: The id of this LeaderboardEntry.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LeaderboardEntry.


        :param id: The id of this LeaderboardEntry.
        :type: str
        """
        
        self._id = id

    @property
    def properties(self):
        """
        Gets the properties of this LeaderboardEntry.


        :return: The properties of this LeaderboardEntry.
        :rtype: list[KeyValueProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """
        Sets the properties of this LeaderboardEntry.


        :param properties: The properties of this LeaderboardEntry.
        :type: list[KeyValueProperty]
        """
        
        self._properties = properties

    @property
    def short_id(self):
        """
        Gets the short_id of this LeaderboardEntry.


        :return: The short_id of this LeaderboardEntry.
        :rtype: str
        """
        return self._short_id

    @short_id.setter
    def short_id(self, short_id):
        """
        Sets the short_id of this LeaderboardEntry.


        :param short_id: The short_id of this LeaderboardEntry.
        :type: str
        """
        
        self._short_id = short_id

    @property
    def experiment_states(self):
        """
        Gets the experiment_states of this LeaderboardEntry.


        :return: The experiment_states of this LeaderboardEntry.
        :rtype: ExperimentStates
        """
        return self._experiment_states

    @experiment_states.setter
    def experiment_states(self, experiment_states):
        """
        Sets the experiment_states of this LeaderboardEntry.


        :param experiment_states: The experiment_states of this LeaderboardEntry.
        :type: ExperimentStates
        """
        
        self._experiment_states = experiment_states

    @property
    def entry_type(self):
        """
        Gets the entry_type of this LeaderboardEntry.


        :return: The entry_type of this LeaderboardEntry.
        :rtype: EntryTypeEnum
        """
        return self._entry_type

    @entry_type.setter
    def entry_type(self, entry_type):
        """
        Sets the entry_type of this LeaderboardEntry.


        :param entry_type: The entry_type of this LeaderboardEntry.
        :type: EntryTypeEnum
        """
        
        self._entry_type = entry_type

    @property
    def worker_type(self):
        """
        Gets the worker_type of this LeaderboardEntry.


        :return: The worker_type of this LeaderboardEntry.
        :rtype: str
        """
        return self._worker_type

    @worker_type.setter
    def worker_type(self, worker_type):
        """
        Sets the worker_type of this LeaderboardEntry.


        :param worker_type: The worker_type of this LeaderboardEntry.
        :type: str
        """
        
        self._worker_type = worker_type

    @property
    def environment(self):
        """
        Gets the environment of this LeaderboardEntry.


        :return: The environment of this LeaderboardEntry.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """
        Sets the environment of this LeaderboardEntry.


        :param environment: The environment of this LeaderboardEntry.
        :type: str
        """
        
        self._environment = environment

    @property
    def responding(self):
        """
        Gets the responding of this LeaderboardEntry.


        :return: The responding of this LeaderboardEntry.
        :rtype: bool
        """
        return self._responding

    @responding.setter
    def responding(self, responding):
        """
        Sets the responding of this LeaderboardEntry.


        :param responding: The responding of this LeaderboardEntry.
        :type: bool
        """
        
        self._responding = responding

    @property
    def owner(self):
        """
        Gets the owner of this LeaderboardEntry.


        :return: The owner of this LeaderboardEntry.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this LeaderboardEntry.


        :param owner: The owner of this LeaderboardEntry.
        :type: str
        """
        
        self._owner = owner

    @property
    def parameters(self):
        """
        Gets the parameters of this LeaderboardEntry.


        :return: The parameters of this LeaderboardEntry.
        :rtype: list[Parameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this LeaderboardEntry.


        :param parameters: The parameters of this LeaderboardEntry.
        :type: list[Parameter]
        """
        
        self._parameters = parameters

    @property
    def deleted(self):
        """
        Gets the deleted of this LeaderboardEntry.


        :return: The deleted of this LeaderboardEntry.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this LeaderboardEntry.


        :param deleted: The deleted of this LeaderboardEntry.
        :type: bool
        """
        
        self._deleted = deleted

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




