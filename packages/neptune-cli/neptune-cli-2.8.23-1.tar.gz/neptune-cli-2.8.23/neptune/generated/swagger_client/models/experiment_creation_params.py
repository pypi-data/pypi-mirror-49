# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ExperimentCreationParams(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, notebook_creation_params=None, hostname=None, remote_params=None, description=None, tags=None, project_id=None, entrypoint=None, properties=None, config_path=None, exec_args_template=None, parameters=None, enqueue_command=None):
        """
        ExperimentCreationParams - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'notebook_creation_params': 'NotebookCreationParams',
            'hostname': 'str',
            'remote_params': 'QueuedRemoteExperimentParams',
            'description': 'str',
            'tags': 'list[str]',
            'project_id': 'str',
            'entrypoint': 'str',
            'properties': 'list[KeyValueProperty]',
            'config_path': 'str',
            'exec_args_template': 'str',
            'parameters': 'list[Parameter]',
            'enqueue_command': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'notebook_creation_params': 'notebookCreationParams',
            'hostname': 'hostname',
            'remote_params': 'remoteParams',
            'description': 'description',
            'tags': 'tags',
            'project_id': 'projectId',
            'entrypoint': 'entrypoint',
            'properties': 'properties',
            'config_path': 'configPath',
            'exec_args_template': 'execArgsTemplate',
            'parameters': 'parameters',
            'enqueue_command': 'enqueueCommand'
        }

        self._name = name
        self._notebook_creation_params = notebook_creation_params
        self._hostname = hostname
        self._remote_params = remote_params
        self._description = description
        self._tags = tags
        self._project_id = project_id
        self._entrypoint = entrypoint
        self._properties = properties
        self._config_path = config_path
        self._exec_args_template = exec_args_template
        self._parameters = parameters
        self._enqueue_command = enqueue_command

    @property
    def name(self):
        """
        Gets the name of this ExperimentCreationParams.


        :return: The name of this ExperimentCreationParams.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ExperimentCreationParams.


        :param name: The name of this ExperimentCreationParams.
        :type: str
        """
        
        self._name = name

    @property
    def notebook_creation_params(self):
        """
        Gets the notebook_creation_params of this ExperimentCreationParams.


        :return: The notebook_creation_params of this ExperimentCreationParams.
        :rtype: NotebookCreationParams
        """
        return self._notebook_creation_params

    @notebook_creation_params.setter
    def notebook_creation_params(self, notebook_creation_params):
        """
        Sets the notebook_creation_params of this ExperimentCreationParams.


        :param notebook_creation_params: The notebook_creation_params of this ExperimentCreationParams.
        :type: NotebookCreationParams
        """
        
        self._notebook_creation_params = notebook_creation_params

    @property
    def hostname(self):
        """
        Gets the hostname of this ExperimentCreationParams.


        :return: The hostname of this ExperimentCreationParams.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """
        Sets the hostname of this ExperimentCreationParams.


        :param hostname: The hostname of this ExperimentCreationParams.
        :type: str
        """
        
        self._hostname = hostname

    @property
    def remote_params(self):
        """
        Gets the remote_params of this ExperimentCreationParams.


        :return: The remote_params of this ExperimentCreationParams.
        :rtype: QueuedRemoteExperimentParams
        """
        return self._remote_params

    @remote_params.setter
    def remote_params(self, remote_params):
        """
        Sets the remote_params of this ExperimentCreationParams.


        :param remote_params: The remote_params of this ExperimentCreationParams.
        :type: QueuedRemoteExperimentParams
        """
        
        self._remote_params = remote_params

    @property
    def description(self):
        """
        Gets the description of this ExperimentCreationParams.


        :return: The description of this ExperimentCreationParams.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ExperimentCreationParams.


        :param description: The description of this ExperimentCreationParams.
        :type: str
        """
        
        self._description = description

    @property
    def tags(self):
        """
        Gets the tags of this ExperimentCreationParams.


        :return: The tags of this ExperimentCreationParams.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this ExperimentCreationParams.


        :param tags: The tags of this ExperimentCreationParams.
        :type: list[str]
        """
        
        self._tags = tags

    @property
    def project_id(self):
        """
        Gets the project_id of this ExperimentCreationParams.


        :return: The project_id of this ExperimentCreationParams.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """
        Sets the project_id of this ExperimentCreationParams.


        :param project_id: The project_id of this ExperimentCreationParams.
        :type: str
        """
        
        self._project_id = project_id

    @property
    def entrypoint(self):
        """
        Gets the entrypoint of this ExperimentCreationParams.


        :return: The entrypoint of this ExperimentCreationParams.
        :rtype: str
        """
        return self._entrypoint

    @entrypoint.setter
    def entrypoint(self, entrypoint):
        """
        Sets the entrypoint of this ExperimentCreationParams.


        :param entrypoint: The entrypoint of this ExperimentCreationParams.
        :type: str
        """
        
        self._entrypoint = entrypoint

    @property
    def properties(self):
        """
        Gets the properties of this ExperimentCreationParams.


        :return: The properties of this ExperimentCreationParams.
        :rtype: list[KeyValueProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """
        Sets the properties of this ExperimentCreationParams.


        :param properties: The properties of this ExperimentCreationParams.
        :type: list[KeyValueProperty]
        """
        
        self._properties = properties

    @property
    def config_path(self):
        """
        Gets the config_path of this ExperimentCreationParams.


        :return: The config_path of this ExperimentCreationParams.
        :rtype: str
        """
        return self._config_path

    @config_path.setter
    def config_path(self, config_path):
        """
        Sets the config_path of this ExperimentCreationParams.


        :param config_path: The config_path of this ExperimentCreationParams.
        :type: str
        """
        
        self._config_path = config_path

    @property
    def exec_args_template(self):
        """
        Gets the exec_args_template of this ExperimentCreationParams.


        :return: The exec_args_template of this ExperimentCreationParams.
        :rtype: str
        """
        return self._exec_args_template

    @exec_args_template.setter
    def exec_args_template(self, exec_args_template):
        """
        Sets the exec_args_template of this ExperimentCreationParams.


        :param exec_args_template: The exec_args_template of this ExperimentCreationParams.
        :type: str
        """
        
        self._exec_args_template = exec_args_template

    @property
    def parameters(self):
        """
        Gets the parameters of this ExperimentCreationParams.


        :return: The parameters of this ExperimentCreationParams.
        :rtype: list[Parameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this ExperimentCreationParams.


        :param parameters: The parameters of this ExperimentCreationParams.
        :type: list[Parameter]
        """
        
        self._parameters = parameters

    @property
    def enqueue_command(self):
        """
        Gets the enqueue_command of this ExperimentCreationParams.


        :return: The enqueue_command of this ExperimentCreationParams.
        :rtype: str
        """
        return self._enqueue_command

    @enqueue_command.setter
    def enqueue_command(self, enqueue_command):
        """
        Sets the enqueue_command of this ExperimentCreationParams.


        :param enqueue_command: The enqueue_command of this ExperimentCreationParams.
        :type: str
        """
        
        self._enqueue_command = enqueue_command

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




