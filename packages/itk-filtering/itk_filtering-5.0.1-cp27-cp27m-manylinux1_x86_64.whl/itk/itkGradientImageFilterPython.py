# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkGradientImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkGradientImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkGradientImageFilterPython
            return _itkGradientImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkGradientImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkGradientImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkGradientImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageBoundaryConditionPython
import stdcomplexPython
import pyBasePython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkImagePython
import itkRGBPixelPython
import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import ITKCommonBasePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkRGBAPixelPython
import itkImageToImageFilterBPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython

def itkGradientImageFilterIF3FF_New():
  return itkGradientImageFilterIF3FF.New()


def itkGradientImageFilterIUS3FF_New():
  return itkGradientImageFilterIUS3FF.New()


def itkGradientImageFilterIUC3FF_New():
  return itkGradientImageFilterIUC3FF.New()


def itkGradientImageFilterISS3FF_New():
  return itkGradientImageFilterISS3FF.New()


def itkGradientImageFilterIF2FF_New():
  return itkGradientImageFilterIF2FF.New()


def itkGradientImageFilterIUS2FF_New():
  return itkGradientImageFilterIUS2FF.New()


def itkGradientImageFilterIUC2FF_New():
  return itkGradientImageFilterIUC2FF.New()


def itkGradientImageFilterISS2FF_New():
  return itkGradientImageFilterISS2FF.New()

class itkGradientImageFilterIF2FF(itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22):
    """


    Computes the gradient of an image using directional derivatives.

    Computes the gradient of an image using directional derivatives. The
    directional derivative at each pixel location is computed by
    convolution with a first-order derivative operator.

    The second template parameter defines the value type used in the
    derivative operator (defaults to float). The third template parameter
    defines the value type used for output image (defaults to float). The
    output image is defined as a covariant vector image whose value type
    is specified as this third template parameter.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator

    C++ includes: itkGradientImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkGradientImageFilterIF2FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkGradientImageFilterIF2FF self) -> itkGradientImageFilterIF2FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_Clone(self)


    def GenerateInputRequestedRegion(self):
        """
        GenerateInputRequestedRegion(itkGradientImageFilterIF2FF self)

        GradientImageFilter needs a larger input requested region than the
        output requested region. As such, GradientImageFilter needs to provide
        an implementation for GenerateInputRequestedRegion() in order to
        inform the pipeline execution model.

        See:  ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_GenerateInputRequestedRegion(self)


    def SetUseImageSpacingOn(self):
        """
        SetUseImageSpacingOn(itkGradientImageFilterIF2FF self)

        Use the image
        spacing information in calculations. Use this option if you want
        derivatives in physical space. Default is UseImageSpacingOn. 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self):
        """
        SetUseImageSpacingOff(itkGradientImageFilterIF2FF self)

        Ignore the
        image spacing. Use this option if you want derivatives in isotropic
        pixel space. Default is UseImageSpacingOn. 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, _arg):
        """
        SetUseImageSpacing(itkGradientImageFilterIF2FF self, bool const _arg)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self):
        """GetUseImageSpacing(itkGradientImageFilterIF2FF self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_GetUseImageSpacing(self)


    def UseImageSpacingOn(self):
        """UseImageSpacingOn(itkGradientImageFilterIF2FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_UseImageSpacingOn(self)


    def UseImageSpacingOff(self):
        """UseImageSpacingOff(itkGradientImageFilterIF2FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_UseImageSpacingOff(self)


    def OverrideBoundaryCondition(self, boundaryCondition):
        """
        OverrideBoundaryCondition(itkGradientImageFilterIF2FF self, itkImageBoundaryConditionIF2 boundaryCondition)

        Allows to
        change the default boundary condition 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_OverrideBoundaryCondition(self, boundaryCondition)

    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_InputConvertibleToOutputCheck
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_OutputHasNumericTraitsCheck

    def SetUseImageDirection(self, _arg):
        """
        SetUseImageDirection(itkGradientImageFilterIF2FF self, bool const _arg)

        The
        UseImageDirection flag determines whether image derivatives are
        computed with respect to the image grid or with respect to the
        physical space. When this flag is ON the derivatives are computed with
        respect to the coordinate system of physical space. The difference is
        whether we take into account the image Direction or not. The flag ON
        will take into account the image direction and will result in an extra
        matrix multiplication compared to the amount of computation performed
        when the flag is OFF. The default value of this flag is On. 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_SetUseImageDirection(self, _arg)


    def GetUseImageDirection(self):
        """GetUseImageDirection(itkGradientImageFilterIF2FF self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_GetUseImageDirection(self)


    def UseImageDirectionOn(self):
        """UseImageDirectionOn(itkGradientImageFilterIF2FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_UseImageDirectionOn(self)


    def UseImageDirectionOff(self):
        """UseImageDirectionOff(itkGradientImageFilterIF2FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_UseImageDirectionOff(self)

    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterIF2FF

    def cast(obj):
        """cast(itkLightObject obj) -> itkGradientImageFilterIF2FF"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterIF2FF

        Create a new object of the class itkGradientImageFilterIF2FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterIF2FF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterIF2FF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGradientImageFilterIF2FF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGradientImageFilterIF2FF.Clone = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_Clone, None, itkGradientImageFilterIF2FF)
itkGradientImageFilterIF2FF.GenerateInputRequestedRegion = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_GenerateInputRequestedRegion, None, itkGradientImageFilterIF2FF)
itkGradientImageFilterIF2FF.SetUseImageSpacingOn = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_SetUseImageSpacingOn, None, itkGradientImageFilterIF2FF)
itkGradientImageFilterIF2FF.SetUseImageSpacingOff = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_SetUseImageSpacingOff, None, itkGradientImageFilterIF2FF)
itkGradientImageFilterIF2FF.SetUseImageSpacing = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_SetUseImageSpacing, None, itkGradientImageFilterIF2FF)
itkGradientImageFilterIF2FF.GetUseImageSpacing = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_GetUseImageSpacing, None, itkGradientImageFilterIF2FF)
itkGradientImageFilterIF2FF.UseImageSpacingOn = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_UseImageSpacingOn, None, itkGradientImageFilterIF2FF)
itkGradientImageFilterIF2FF.UseImageSpacingOff = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_UseImageSpacingOff, None, itkGradientImageFilterIF2FF)
itkGradientImageFilterIF2FF.OverrideBoundaryCondition = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_OverrideBoundaryCondition, None, itkGradientImageFilterIF2FF)
itkGradientImageFilterIF2FF.SetUseImageDirection = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_SetUseImageDirection, None, itkGradientImageFilterIF2FF)
itkGradientImageFilterIF2FF.GetUseImageDirection = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_GetUseImageDirection, None, itkGradientImageFilterIF2FF)
itkGradientImageFilterIF2FF.UseImageDirectionOn = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_UseImageDirectionOn, None, itkGradientImageFilterIF2FF)
itkGradientImageFilterIF2FF.UseImageDirectionOff = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_UseImageDirectionOff, None, itkGradientImageFilterIF2FF)
itkGradientImageFilterIF2FF_swigregister = _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_swigregister
itkGradientImageFilterIF2FF_swigregister(itkGradientImageFilterIF2FF)

def itkGradientImageFilterIF2FF___New_orig__():
    """itkGradientImageFilterIF2FF___New_orig__() -> itkGradientImageFilterIF2FF_Pointer"""
    return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF___New_orig__()

def itkGradientImageFilterIF2FF_cast(obj):
    """itkGradientImageFilterIF2FF_cast(itkLightObject obj) -> itkGradientImageFilterIF2FF"""
    return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_cast(obj)

class itkGradientImageFilterIF3FF(itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33):
    """


    Computes the gradient of an image using directional derivatives.

    Computes the gradient of an image using directional derivatives. The
    directional derivative at each pixel location is computed by
    convolution with a first-order derivative operator.

    The second template parameter defines the value type used in the
    derivative operator (defaults to float). The third template parameter
    defines the value type used for output image (defaults to float). The
    output image is defined as a covariant vector image whose value type
    is specified as this third template parameter.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator

    C++ includes: itkGradientImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkGradientImageFilterIF3FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkGradientImageFilterIF3FF self) -> itkGradientImageFilterIF3FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_Clone(self)


    def GenerateInputRequestedRegion(self):
        """
        GenerateInputRequestedRegion(itkGradientImageFilterIF3FF self)

        GradientImageFilter needs a larger input requested region than the
        output requested region. As such, GradientImageFilter needs to provide
        an implementation for GenerateInputRequestedRegion() in order to
        inform the pipeline execution model.

        See:  ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_GenerateInputRequestedRegion(self)


    def SetUseImageSpacingOn(self):
        """
        SetUseImageSpacingOn(itkGradientImageFilterIF3FF self)

        Use the image
        spacing information in calculations. Use this option if you want
        derivatives in physical space. Default is UseImageSpacingOn. 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self):
        """
        SetUseImageSpacingOff(itkGradientImageFilterIF3FF self)

        Ignore the
        image spacing. Use this option if you want derivatives in isotropic
        pixel space. Default is UseImageSpacingOn. 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, _arg):
        """
        SetUseImageSpacing(itkGradientImageFilterIF3FF self, bool const _arg)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self):
        """GetUseImageSpacing(itkGradientImageFilterIF3FF self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_GetUseImageSpacing(self)


    def UseImageSpacingOn(self):
        """UseImageSpacingOn(itkGradientImageFilterIF3FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_UseImageSpacingOn(self)


    def UseImageSpacingOff(self):
        """UseImageSpacingOff(itkGradientImageFilterIF3FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_UseImageSpacingOff(self)


    def OverrideBoundaryCondition(self, boundaryCondition):
        """
        OverrideBoundaryCondition(itkGradientImageFilterIF3FF self, itkImageBoundaryConditionIF3 boundaryCondition)

        Allows to
        change the default boundary condition 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_OverrideBoundaryCondition(self, boundaryCondition)

    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_InputConvertibleToOutputCheck
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_OutputHasNumericTraitsCheck

    def SetUseImageDirection(self, _arg):
        """
        SetUseImageDirection(itkGradientImageFilterIF3FF self, bool const _arg)

        The
        UseImageDirection flag determines whether image derivatives are
        computed with respect to the image grid or with respect to the
        physical space. When this flag is ON the derivatives are computed with
        respect to the coordinate system of physical space. The difference is
        whether we take into account the image Direction or not. The flag ON
        will take into account the image direction and will result in an extra
        matrix multiplication compared to the amount of computation performed
        when the flag is OFF. The default value of this flag is On. 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_SetUseImageDirection(self, _arg)


    def GetUseImageDirection(self):
        """GetUseImageDirection(itkGradientImageFilterIF3FF self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_GetUseImageDirection(self)


    def UseImageDirectionOn(self):
        """UseImageDirectionOn(itkGradientImageFilterIF3FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_UseImageDirectionOn(self)


    def UseImageDirectionOff(self):
        """UseImageDirectionOff(itkGradientImageFilterIF3FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_UseImageDirectionOff(self)

    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterIF3FF

    def cast(obj):
        """cast(itkLightObject obj) -> itkGradientImageFilterIF3FF"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterIF3FF

        Create a new object of the class itkGradientImageFilterIF3FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterIF3FF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterIF3FF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGradientImageFilterIF3FF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGradientImageFilterIF3FF.Clone = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_Clone, None, itkGradientImageFilterIF3FF)
itkGradientImageFilterIF3FF.GenerateInputRequestedRegion = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_GenerateInputRequestedRegion, None, itkGradientImageFilterIF3FF)
itkGradientImageFilterIF3FF.SetUseImageSpacingOn = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_SetUseImageSpacingOn, None, itkGradientImageFilterIF3FF)
itkGradientImageFilterIF3FF.SetUseImageSpacingOff = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_SetUseImageSpacingOff, None, itkGradientImageFilterIF3FF)
itkGradientImageFilterIF3FF.SetUseImageSpacing = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_SetUseImageSpacing, None, itkGradientImageFilterIF3FF)
itkGradientImageFilterIF3FF.GetUseImageSpacing = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_GetUseImageSpacing, None, itkGradientImageFilterIF3FF)
itkGradientImageFilterIF3FF.UseImageSpacingOn = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_UseImageSpacingOn, None, itkGradientImageFilterIF3FF)
itkGradientImageFilterIF3FF.UseImageSpacingOff = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_UseImageSpacingOff, None, itkGradientImageFilterIF3FF)
itkGradientImageFilterIF3FF.OverrideBoundaryCondition = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_OverrideBoundaryCondition, None, itkGradientImageFilterIF3FF)
itkGradientImageFilterIF3FF.SetUseImageDirection = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_SetUseImageDirection, None, itkGradientImageFilterIF3FF)
itkGradientImageFilterIF3FF.GetUseImageDirection = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_GetUseImageDirection, None, itkGradientImageFilterIF3FF)
itkGradientImageFilterIF3FF.UseImageDirectionOn = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_UseImageDirectionOn, None, itkGradientImageFilterIF3FF)
itkGradientImageFilterIF3FF.UseImageDirectionOff = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_UseImageDirectionOff, None, itkGradientImageFilterIF3FF)
itkGradientImageFilterIF3FF_swigregister = _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_swigregister
itkGradientImageFilterIF3FF_swigregister(itkGradientImageFilterIF3FF)

def itkGradientImageFilterIF3FF___New_orig__():
    """itkGradientImageFilterIF3FF___New_orig__() -> itkGradientImageFilterIF3FF_Pointer"""
    return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF___New_orig__()

def itkGradientImageFilterIF3FF_cast(obj):
    """itkGradientImageFilterIF3FF_cast(itkLightObject obj) -> itkGradientImageFilterIF3FF"""
    return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_cast(obj)

class itkGradientImageFilterISS2FF(itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22):
    """


    Computes the gradient of an image using directional derivatives.

    Computes the gradient of an image using directional derivatives. The
    directional derivative at each pixel location is computed by
    convolution with a first-order derivative operator.

    The second template parameter defines the value type used in the
    derivative operator (defaults to float). The third template parameter
    defines the value type used for output image (defaults to float). The
    output image is defined as a covariant vector image whose value type
    is specified as this third template parameter.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator

    C++ includes: itkGradientImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkGradientImageFilterISS2FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkGradientImageFilterISS2FF self) -> itkGradientImageFilterISS2FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_Clone(self)


    def GenerateInputRequestedRegion(self):
        """
        GenerateInputRequestedRegion(itkGradientImageFilterISS2FF self)

        GradientImageFilter needs a larger input requested region than the
        output requested region. As such, GradientImageFilter needs to provide
        an implementation for GenerateInputRequestedRegion() in order to
        inform the pipeline execution model.

        See:  ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_GenerateInputRequestedRegion(self)


    def SetUseImageSpacingOn(self):
        """
        SetUseImageSpacingOn(itkGradientImageFilterISS2FF self)

        Use the image
        spacing information in calculations. Use this option if you want
        derivatives in physical space. Default is UseImageSpacingOn. 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self):
        """
        SetUseImageSpacingOff(itkGradientImageFilterISS2FF self)

        Ignore the
        image spacing. Use this option if you want derivatives in isotropic
        pixel space. Default is UseImageSpacingOn. 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, _arg):
        """
        SetUseImageSpacing(itkGradientImageFilterISS2FF self, bool const _arg)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self):
        """GetUseImageSpacing(itkGradientImageFilterISS2FF self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_GetUseImageSpacing(self)


    def UseImageSpacingOn(self):
        """UseImageSpacingOn(itkGradientImageFilterISS2FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_UseImageSpacingOn(self)


    def UseImageSpacingOff(self):
        """UseImageSpacingOff(itkGradientImageFilterISS2FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_UseImageSpacingOff(self)


    def OverrideBoundaryCondition(self, boundaryCondition):
        """
        OverrideBoundaryCondition(itkGradientImageFilterISS2FF self, itkImageBoundaryConditionISS2 boundaryCondition)

        Allows to
        change the default boundary condition 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_OverrideBoundaryCondition(self, boundaryCondition)

    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_InputConvertibleToOutputCheck
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_OutputHasNumericTraitsCheck

    def SetUseImageDirection(self, _arg):
        """
        SetUseImageDirection(itkGradientImageFilterISS2FF self, bool const _arg)

        The
        UseImageDirection flag determines whether image derivatives are
        computed with respect to the image grid or with respect to the
        physical space. When this flag is ON the derivatives are computed with
        respect to the coordinate system of physical space. The difference is
        whether we take into account the image Direction or not. The flag ON
        will take into account the image direction and will result in an extra
        matrix multiplication compared to the amount of computation performed
        when the flag is OFF. The default value of this flag is On. 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_SetUseImageDirection(self, _arg)


    def GetUseImageDirection(self):
        """GetUseImageDirection(itkGradientImageFilterISS2FF self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_GetUseImageDirection(self)


    def UseImageDirectionOn(self):
        """UseImageDirectionOn(itkGradientImageFilterISS2FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_UseImageDirectionOn(self)


    def UseImageDirectionOff(self):
        """UseImageDirectionOff(itkGradientImageFilterISS2FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_UseImageDirectionOff(self)

    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterISS2FF

    def cast(obj):
        """cast(itkLightObject obj) -> itkGradientImageFilterISS2FF"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterISS2FF

        Create a new object of the class itkGradientImageFilterISS2FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterISS2FF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterISS2FF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGradientImageFilterISS2FF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGradientImageFilterISS2FF.Clone = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_Clone, None, itkGradientImageFilterISS2FF)
itkGradientImageFilterISS2FF.GenerateInputRequestedRegion = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_GenerateInputRequestedRegion, None, itkGradientImageFilterISS2FF)
itkGradientImageFilterISS2FF.SetUseImageSpacingOn = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_SetUseImageSpacingOn, None, itkGradientImageFilterISS2FF)
itkGradientImageFilterISS2FF.SetUseImageSpacingOff = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_SetUseImageSpacingOff, None, itkGradientImageFilterISS2FF)
itkGradientImageFilterISS2FF.SetUseImageSpacing = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_SetUseImageSpacing, None, itkGradientImageFilterISS2FF)
itkGradientImageFilterISS2FF.GetUseImageSpacing = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_GetUseImageSpacing, None, itkGradientImageFilterISS2FF)
itkGradientImageFilterISS2FF.UseImageSpacingOn = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_UseImageSpacingOn, None, itkGradientImageFilterISS2FF)
itkGradientImageFilterISS2FF.UseImageSpacingOff = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_UseImageSpacingOff, None, itkGradientImageFilterISS2FF)
itkGradientImageFilterISS2FF.OverrideBoundaryCondition = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_OverrideBoundaryCondition, None, itkGradientImageFilterISS2FF)
itkGradientImageFilterISS2FF.SetUseImageDirection = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_SetUseImageDirection, None, itkGradientImageFilterISS2FF)
itkGradientImageFilterISS2FF.GetUseImageDirection = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_GetUseImageDirection, None, itkGradientImageFilterISS2FF)
itkGradientImageFilterISS2FF.UseImageDirectionOn = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_UseImageDirectionOn, None, itkGradientImageFilterISS2FF)
itkGradientImageFilterISS2FF.UseImageDirectionOff = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_UseImageDirectionOff, None, itkGradientImageFilterISS2FF)
itkGradientImageFilterISS2FF_swigregister = _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_swigregister
itkGradientImageFilterISS2FF_swigregister(itkGradientImageFilterISS2FF)

def itkGradientImageFilterISS2FF___New_orig__():
    """itkGradientImageFilterISS2FF___New_orig__() -> itkGradientImageFilterISS2FF_Pointer"""
    return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF___New_orig__()

def itkGradientImageFilterISS2FF_cast(obj):
    """itkGradientImageFilterISS2FF_cast(itkLightObject obj) -> itkGradientImageFilterISS2FF"""
    return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_cast(obj)

class itkGradientImageFilterISS3FF(itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33):
    """


    Computes the gradient of an image using directional derivatives.

    Computes the gradient of an image using directional derivatives. The
    directional derivative at each pixel location is computed by
    convolution with a first-order derivative operator.

    The second template parameter defines the value type used in the
    derivative operator (defaults to float). The third template parameter
    defines the value type used for output image (defaults to float). The
    output image is defined as a covariant vector image whose value type
    is specified as this third template parameter.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator

    C++ includes: itkGradientImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkGradientImageFilterISS3FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkGradientImageFilterISS3FF self) -> itkGradientImageFilterISS3FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_Clone(self)


    def GenerateInputRequestedRegion(self):
        """
        GenerateInputRequestedRegion(itkGradientImageFilterISS3FF self)

        GradientImageFilter needs a larger input requested region than the
        output requested region. As such, GradientImageFilter needs to provide
        an implementation for GenerateInputRequestedRegion() in order to
        inform the pipeline execution model.

        See:  ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_GenerateInputRequestedRegion(self)


    def SetUseImageSpacingOn(self):
        """
        SetUseImageSpacingOn(itkGradientImageFilterISS3FF self)

        Use the image
        spacing information in calculations. Use this option if you want
        derivatives in physical space. Default is UseImageSpacingOn. 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self):
        """
        SetUseImageSpacingOff(itkGradientImageFilterISS3FF self)

        Ignore the
        image spacing. Use this option if you want derivatives in isotropic
        pixel space. Default is UseImageSpacingOn. 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, _arg):
        """
        SetUseImageSpacing(itkGradientImageFilterISS3FF self, bool const _arg)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self):
        """GetUseImageSpacing(itkGradientImageFilterISS3FF self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_GetUseImageSpacing(self)


    def UseImageSpacingOn(self):
        """UseImageSpacingOn(itkGradientImageFilterISS3FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_UseImageSpacingOn(self)


    def UseImageSpacingOff(self):
        """UseImageSpacingOff(itkGradientImageFilterISS3FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_UseImageSpacingOff(self)


    def OverrideBoundaryCondition(self, boundaryCondition):
        """
        OverrideBoundaryCondition(itkGradientImageFilterISS3FF self, itkImageBoundaryConditionISS3 boundaryCondition)

        Allows to
        change the default boundary condition 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_OverrideBoundaryCondition(self, boundaryCondition)

    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_InputConvertibleToOutputCheck
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_OutputHasNumericTraitsCheck

    def SetUseImageDirection(self, _arg):
        """
        SetUseImageDirection(itkGradientImageFilterISS3FF self, bool const _arg)

        The
        UseImageDirection flag determines whether image derivatives are
        computed with respect to the image grid or with respect to the
        physical space. When this flag is ON the derivatives are computed with
        respect to the coordinate system of physical space. The difference is
        whether we take into account the image Direction or not. The flag ON
        will take into account the image direction and will result in an extra
        matrix multiplication compared to the amount of computation performed
        when the flag is OFF. The default value of this flag is On. 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_SetUseImageDirection(self, _arg)


    def GetUseImageDirection(self):
        """GetUseImageDirection(itkGradientImageFilterISS3FF self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_GetUseImageDirection(self)


    def UseImageDirectionOn(self):
        """UseImageDirectionOn(itkGradientImageFilterISS3FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_UseImageDirectionOn(self)


    def UseImageDirectionOff(self):
        """UseImageDirectionOff(itkGradientImageFilterISS3FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_UseImageDirectionOff(self)

    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterISS3FF

    def cast(obj):
        """cast(itkLightObject obj) -> itkGradientImageFilterISS3FF"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterISS3FF

        Create a new object of the class itkGradientImageFilterISS3FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterISS3FF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterISS3FF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGradientImageFilterISS3FF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGradientImageFilterISS3FF.Clone = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_Clone, None, itkGradientImageFilterISS3FF)
itkGradientImageFilterISS3FF.GenerateInputRequestedRegion = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_GenerateInputRequestedRegion, None, itkGradientImageFilterISS3FF)
itkGradientImageFilterISS3FF.SetUseImageSpacingOn = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_SetUseImageSpacingOn, None, itkGradientImageFilterISS3FF)
itkGradientImageFilterISS3FF.SetUseImageSpacingOff = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_SetUseImageSpacingOff, None, itkGradientImageFilterISS3FF)
itkGradientImageFilterISS3FF.SetUseImageSpacing = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_SetUseImageSpacing, None, itkGradientImageFilterISS3FF)
itkGradientImageFilterISS3FF.GetUseImageSpacing = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_GetUseImageSpacing, None, itkGradientImageFilterISS3FF)
itkGradientImageFilterISS3FF.UseImageSpacingOn = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_UseImageSpacingOn, None, itkGradientImageFilterISS3FF)
itkGradientImageFilterISS3FF.UseImageSpacingOff = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_UseImageSpacingOff, None, itkGradientImageFilterISS3FF)
itkGradientImageFilterISS3FF.OverrideBoundaryCondition = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_OverrideBoundaryCondition, None, itkGradientImageFilterISS3FF)
itkGradientImageFilterISS3FF.SetUseImageDirection = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_SetUseImageDirection, None, itkGradientImageFilterISS3FF)
itkGradientImageFilterISS3FF.GetUseImageDirection = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_GetUseImageDirection, None, itkGradientImageFilterISS3FF)
itkGradientImageFilterISS3FF.UseImageDirectionOn = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_UseImageDirectionOn, None, itkGradientImageFilterISS3FF)
itkGradientImageFilterISS3FF.UseImageDirectionOff = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_UseImageDirectionOff, None, itkGradientImageFilterISS3FF)
itkGradientImageFilterISS3FF_swigregister = _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_swigregister
itkGradientImageFilterISS3FF_swigregister(itkGradientImageFilterISS3FF)

def itkGradientImageFilterISS3FF___New_orig__():
    """itkGradientImageFilterISS3FF___New_orig__() -> itkGradientImageFilterISS3FF_Pointer"""
    return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF___New_orig__()

def itkGradientImageFilterISS3FF_cast(obj):
    """itkGradientImageFilterISS3FF_cast(itkLightObject obj) -> itkGradientImageFilterISS3FF"""
    return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_cast(obj)

class itkGradientImageFilterIUC2FF(itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22):
    """


    Computes the gradient of an image using directional derivatives.

    Computes the gradient of an image using directional derivatives. The
    directional derivative at each pixel location is computed by
    convolution with a first-order derivative operator.

    The second template parameter defines the value type used in the
    derivative operator (defaults to float). The third template parameter
    defines the value type used for output image (defaults to float). The
    output image is defined as a covariant vector image whose value type
    is specified as this third template parameter.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator

    C++ includes: itkGradientImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkGradientImageFilterIUC2FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkGradientImageFilterIUC2FF self) -> itkGradientImageFilterIUC2FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_Clone(self)


    def GenerateInputRequestedRegion(self):
        """
        GenerateInputRequestedRegion(itkGradientImageFilterIUC2FF self)

        GradientImageFilter needs a larger input requested region than the
        output requested region. As such, GradientImageFilter needs to provide
        an implementation for GenerateInputRequestedRegion() in order to
        inform the pipeline execution model.

        See:  ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_GenerateInputRequestedRegion(self)


    def SetUseImageSpacingOn(self):
        """
        SetUseImageSpacingOn(itkGradientImageFilterIUC2FF self)

        Use the image
        spacing information in calculations. Use this option if you want
        derivatives in physical space. Default is UseImageSpacingOn. 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self):
        """
        SetUseImageSpacingOff(itkGradientImageFilterIUC2FF self)

        Ignore the
        image spacing. Use this option if you want derivatives in isotropic
        pixel space. Default is UseImageSpacingOn. 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, _arg):
        """
        SetUseImageSpacing(itkGradientImageFilterIUC2FF self, bool const _arg)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self):
        """GetUseImageSpacing(itkGradientImageFilterIUC2FF self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_GetUseImageSpacing(self)


    def UseImageSpacingOn(self):
        """UseImageSpacingOn(itkGradientImageFilterIUC2FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_UseImageSpacingOn(self)


    def UseImageSpacingOff(self):
        """UseImageSpacingOff(itkGradientImageFilterIUC2FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_UseImageSpacingOff(self)


    def OverrideBoundaryCondition(self, boundaryCondition):
        """
        OverrideBoundaryCondition(itkGradientImageFilterIUC2FF self, itkImageBoundaryConditionIUC2 boundaryCondition)

        Allows to
        change the default boundary condition 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_OverrideBoundaryCondition(self, boundaryCondition)

    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_InputConvertibleToOutputCheck
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_OutputHasNumericTraitsCheck

    def SetUseImageDirection(self, _arg):
        """
        SetUseImageDirection(itkGradientImageFilterIUC2FF self, bool const _arg)

        The
        UseImageDirection flag determines whether image derivatives are
        computed with respect to the image grid or with respect to the
        physical space. When this flag is ON the derivatives are computed with
        respect to the coordinate system of physical space. The difference is
        whether we take into account the image Direction or not. The flag ON
        will take into account the image direction and will result in an extra
        matrix multiplication compared to the amount of computation performed
        when the flag is OFF. The default value of this flag is On. 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_SetUseImageDirection(self, _arg)


    def GetUseImageDirection(self):
        """GetUseImageDirection(itkGradientImageFilterIUC2FF self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_GetUseImageDirection(self)


    def UseImageDirectionOn(self):
        """UseImageDirectionOn(itkGradientImageFilterIUC2FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_UseImageDirectionOn(self)


    def UseImageDirectionOff(self):
        """UseImageDirectionOff(itkGradientImageFilterIUC2FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_UseImageDirectionOff(self)

    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterIUC2FF

    def cast(obj):
        """cast(itkLightObject obj) -> itkGradientImageFilterIUC2FF"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterIUC2FF

        Create a new object of the class itkGradientImageFilterIUC2FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterIUC2FF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterIUC2FF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGradientImageFilterIUC2FF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGradientImageFilterIUC2FF.Clone = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_Clone, None, itkGradientImageFilterIUC2FF)
itkGradientImageFilterIUC2FF.GenerateInputRequestedRegion = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_GenerateInputRequestedRegion, None, itkGradientImageFilterIUC2FF)
itkGradientImageFilterIUC2FF.SetUseImageSpacingOn = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_SetUseImageSpacingOn, None, itkGradientImageFilterIUC2FF)
itkGradientImageFilterIUC2FF.SetUseImageSpacingOff = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_SetUseImageSpacingOff, None, itkGradientImageFilterIUC2FF)
itkGradientImageFilterIUC2FF.SetUseImageSpacing = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_SetUseImageSpacing, None, itkGradientImageFilterIUC2FF)
itkGradientImageFilterIUC2FF.GetUseImageSpacing = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_GetUseImageSpacing, None, itkGradientImageFilterIUC2FF)
itkGradientImageFilterIUC2FF.UseImageSpacingOn = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_UseImageSpacingOn, None, itkGradientImageFilterIUC2FF)
itkGradientImageFilterIUC2FF.UseImageSpacingOff = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_UseImageSpacingOff, None, itkGradientImageFilterIUC2FF)
itkGradientImageFilterIUC2FF.OverrideBoundaryCondition = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_OverrideBoundaryCondition, None, itkGradientImageFilterIUC2FF)
itkGradientImageFilterIUC2FF.SetUseImageDirection = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_SetUseImageDirection, None, itkGradientImageFilterIUC2FF)
itkGradientImageFilterIUC2FF.GetUseImageDirection = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_GetUseImageDirection, None, itkGradientImageFilterIUC2FF)
itkGradientImageFilterIUC2FF.UseImageDirectionOn = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_UseImageDirectionOn, None, itkGradientImageFilterIUC2FF)
itkGradientImageFilterIUC2FF.UseImageDirectionOff = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_UseImageDirectionOff, None, itkGradientImageFilterIUC2FF)
itkGradientImageFilterIUC2FF_swigregister = _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_swigregister
itkGradientImageFilterIUC2FF_swigregister(itkGradientImageFilterIUC2FF)

def itkGradientImageFilterIUC2FF___New_orig__():
    """itkGradientImageFilterIUC2FF___New_orig__() -> itkGradientImageFilterIUC2FF_Pointer"""
    return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF___New_orig__()

def itkGradientImageFilterIUC2FF_cast(obj):
    """itkGradientImageFilterIUC2FF_cast(itkLightObject obj) -> itkGradientImageFilterIUC2FF"""
    return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_cast(obj)

class itkGradientImageFilterIUC3FF(itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33):
    """


    Computes the gradient of an image using directional derivatives.

    Computes the gradient of an image using directional derivatives. The
    directional derivative at each pixel location is computed by
    convolution with a first-order derivative operator.

    The second template parameter defines the value type used in the
    derivative operator (defaults to float). The third template parameter
    defines the value type used for output image (defaults to float). The
    output image is defined as a covariant vector image whose value type
    is specified as this third template parameter.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator

    C++ includes: itkGradientImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkGradientImageFilterIUC3FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkGradientImageFilterIUC3FF self) -> itkGradientImageFilterIUC3FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_Clone(self)


    def GenerateInputRequestedRegion(self):
        """
        GenerateInputRequestedRegion(itkGradientImageFilterIUC3FF self)

        GradientImageFilter needs a larger input requested region than the
        output requested region. As such, GradientImageFilter needs to provide
        an implementation for GenerateInputRequestedRegion() in order to
        inform the pipeline execution model.

        See:  ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_GenerateInputRequestedRegion(self)


    def SetUseImageSpacingOn(self):
        """
        SetUseImageSpacingOn(itkGradientImageFilterIUC3FF self)

        Use the image
        spacing information in calculations. Use this option if you want
        derivatives in physical space. Default is UseImageSpacingOn. 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self):
        """
        SetUseImageSpacingOff(itkGradientImageFilterIUC3FF self)

        Ignore the
        image spacing. Use this option if you want derivatives in isotropic
        pixel space. Default is UseImageSpacingOn. 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, _arg):
        """
        SetUseImageSpacing(itkGradientImageFilterIUC3FF self, bool const _arg)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self):
        """GetUseImageSpacing(itkGradientImageFilterIUC3FF self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_GetUseImageSpacing(self)


    def UseImageSpacingOn(self):
        """UseImageSpacingOn(itkGradientImageFilterIUC3FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_UseImageSpacingOn(self)


    def UseImageSpacingOff(self):
        """UseImageSpacingOff(itkGradientImageFilterIUC3FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_UseImageSpacingOff(self)


    def OverrideBoundaryCondition(self, boundaryCondition):
        """
        OverrideBoundaryCondition(itkGradientImageFilterIUC3FF self, itkImageBoundaryConditionIUC3 boundaryCondition)

        Allows to
        change the default boundary condition 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_OverrideBoundaryCondition(self, boundaryCondition)

    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_InputConvertibleToOutputCheck
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_OutputHasNumericTraitsCheck

    def SetUseImageDirection(self, _arg):
        """
        SetUseImageDirection(itkGradientImageFilterIUC3FF self, bool const _arg)

        The
        UseImageDirection flag determines whether image derivatives are
        computed with respect to the image grid or with respect to the
        physical space. When this flag is ON the derivatives are computed with
        respect to the coordinate system of physical space. The difference is
        whether we take into account the image Direction or not. The flag ON
        will take into account the image direction and will result in an extra
        matrix multiplication compared to the amount of computation performed
        when the flag is OFF. The default value of this flag is On. 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_SetUseImageDirection(self, _arg)


    def GetUseImageDirection(self):
        """GetUseImageDirection(itkGradientImageFilterIUC3FF self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_GetUseImageDirection(self)


    def UseImageDirectionOn(self):
        """UseImageDirectionOn(itkGradientImageFilterIUC3FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_UseImageDirectionOn(self)


    def UseImageDirectionOff(self):
        """UseImageDirectionOff(itkGradientImageFilterIUC3FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_UseImageDirectionOff(self)

    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterIUC3FF

    def cast(obj):
        """cast(itkLightObject obj) -> itkGradientImageFilterIUC3FF"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterIUC3FF

        Create a new object of the class itkGradientImageFilterIUC3FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterIUC3FF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterIUC3FF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGradientImageFilterIUC3FF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGradientImageFilterIUC3FF.Clone = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_Clone, None, itkGradientImageFilterIUC3FF)
itkGradientImageFilterIUC3FF.GenerateInputRequestedRegion = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_GenerateInputRequestedRegion, None, itkGradientImageFilterIUC3FF)
itkGradientImageFilterIUC3FF.SetUseImageSpacingOn = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_SetUseImageSpacingOn, None, itkGradientImageFilterIUC3FF)
itkGradientImageFilterIUC3FF.SetUseImageSpacingOff = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_SetUseImageSpacingOff, None, itkGradientImageFilterIUC3FF)
itkGradientImageFilterIUC3FF.SetUseImageSpacing = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_SetUseImageSpacing, None, itkGradientImageFilterIUC3FF)
itkGradientImageFilterIUC3FF.GetUseImageSpacing = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_GetUseImageSpacing, None, itkGradientImageFilterIUC3FF)
itkGradientImageFilterIUC3FF.UseImageSpacingOn = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_UseImageSpacingOn, None, itkGradientImageFilterIUC3FF)
itkGradientImageFilterIUC3FF.UseImageSpacingOff = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_UseImageSpacingOff, None, itkGradientImageFilterIUC3FF)
itkGradientImageFilterIUC3FF.OverrideBoundaryCondition = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_OverrideBoundaryCondition, None, itkGradientImageFilterIUC3FF)
itkGradientImageFilterIUC3FF.SetUseImageDirection = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_SetUseImageDirection, None, itkGradientImageFilterIUC3FF)
itkGradientImageFilterIUC3FF.GetUseImageDirection = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_GetUseImageDirection, None, itkGradientImageFilterIUC3FF)
itkGradientImageFilterIUC3FF.UseImageDirectionOn = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_UseImageDirectionOn, None, itkGradientImageFilterIUC3FF)
itkGradientImageFilterIUC3FF.UseImageDirectionOff = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_UseImageDirectionOff, None, itkGradientImageFilterIUC3FF)
itkGradientImageFilterIUC3FF_swigregister = _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_swigregister
itkGradientImageFilterIUC3FF_swigregister(itkGradientImageFilterIUC3FF)

def itkGradientImageFilterIUC3FF___New_orig__():
    """itkGradientImageFilterIUC3FF___New_orig__() -> itkGradientImageFilterIUC3FF_Pointer"""
    return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF___New_orig__()

def itkGradientImageFilterIUC3FF_cast(obj):
    """itkGradientImageFilterIUC3FF_cast(itkLightObject obj) -> itkGradientImageFilterIUC3FF"""
    return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_cast(obj)

class itkGradientImageFilterIUS2FF(itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22):
    """


    Computes the gradient of an image using directional derivatives.

    Computes the gradient of an image using directional derivatives. The
    directional derivative at each pixel location is computed by
    convolution with a first-order derivative operator.

    The second template parameter defines the value type used in the
    derivative operator (defaults to float). The third template parameter
    defines the value type used for output image (defaults to float). The
    output image is defined as a covariant vector image whose value type
    is specified as this third template parameter.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator

    C++ includes: itkGradientImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkGradientImageFilterIUS2FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkGradientImageFilterIUS2FF self) -> itkGradientImageFilterIUS2FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_Clone(self)


    def GenerateInputRequestedRegion(self):
        """
        GenerateInputRequestedRegion(itkGradientImageFilterIUS2FF self)

        GradientImageFilter needs a larger input requested region than the
        output requested region. As such, GradientImageFilter needs to provide
        an implementation for GenerateInputRequestedRegion() in order to
        inform the pipeline execution model.

        See:  ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_GenerateInputRequestedRegion(self)


    def SetUseImageSpacingOn(self):
        """
        SetUseImageSpacingOn(itkGradientImageFilterIUS2FF self)

        Use the image
        spacing information in calculations. Use this option if you want
        derivatives in physical space. Default is UseImageSpacingOn. 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self):
        """
        SetUseImageSpacingOff(itkGradientImageFilterIUS2FF self)

        Ignore the
        image spacing. Use this option if you want derivatives in isotropic
        pixel space. Default is UseImageSpacingOn. 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, _arg):
        """
        SetUseImageSpacing(itkGradientImageFilterIUS2FF self, bool const _arg)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self):
        """GetUseImageSpacing(itkGradientImageFilterIUS2FF self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_GetUseImageSpacing(self)


    def UseImageSpacingOn(self):
        """UseImageSpacingOn(itkGradientImageFilterIUS2FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_UseImageSpacingOn(self)


    def UseImageSpacingOff(self):
        """UseImageSpacingOff(itkGradientImageFilterIUS2FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_UseImageSpacingOff(self)


    def OverrideBoundaryCondition(self, boundaryCondition):
        """
        OverrideBoundaryCondition(itkGradientImageFilterIUS2FF self, itkImageBoundaryConditionIUS2 boundaryCondition)

        Allows to
        change the default boundary condition 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_OverrideBoundaryCondition(self, boundaryCondition)

    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_InputConvertibleToOutputCheck
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_OutputHasNumericTraitsCheck

    def SetUseImageDirection(self, _arg):
        """
        SetUseImageDirection(itkGradientImageFilterIUS2FF self, bool const _arg)

        The
        UseImageDirection flag determines whether image derivatives are
        computed with respect to the image grid or with respect to the
        physical space. When this flag is ON the derivatives are computed with
        respect to the coordinate system of physical space. The difference is
        whether we take into account the image Direction or not. The flag ON
        will take into account the image direction and will result in an extra
        matrix multiplication compared to the amount of computation performed
        when the flag is OFF. The default value of this flag is On. 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_SetUseImageDirection(self, _arg)


    def GetUseImageDirection(self):
        """GetUseImageDirection(itkGradientImageFilterIUS2FF self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_GetUseImageDirection(self)


    def UseImageDirectionOn(self):
        """UseImageDirectionOn(itkGradientImageFilterIUS2FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_UseImageDirectionOn(self)


    def UseImageDirectionOff(self):
        """UseImageDirectionOff(itkGradientImageFilterIUS2FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_UseImageDirectionOff(self)

    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterIUS2FF

    def cast(obj):
        """cast(itkLightObject obj) -> itkGradientImageFilterIUS2FF"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterIUS2FF

        Create a new object of the class itkGradientImageFilterIUS2FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterIUS2FF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterIUS2FF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGradientImageFilterIUS2FF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGradientImageFilterIUS2FF.Clone = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_Clone, None, itkGradientImageFilterIUS2FF)
itkGradientImageFilterIUS2FF.GenerateInputRequestedRegion = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_GenerateInputRequestedRegion, None, itkGradientImageFilterIUS2FF)
itkGradientImageFilterIUS2FF.SetUseImageSpacingOn = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_SetUseImageSpacingOn, None, itkGradientImageFilterIUS2FF)
itkGradientImageFilterIUS2FF.SetUseImageSpacingOff = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_SetUseImageSpacingOff, None, itkGradientImageFilterIUS2FF)
itkGradientImageFilterIUS2FF.SetUseImageSpacing = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_SetUseImageSpacing, None, itkGradientImageFilterIUS2FF)
itkGradientImageFilterIUS2FF.GetUseImageSpacing = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_GetUseImageSpacing, None, itkGradientImageFilterIUS2FF)
itkGradientImageFilterIUS2FF.UseImageSpacingOn = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_UseImageSpacingOn, None, itkGradientImageFilterIUS2FF)
itkGradientImageFilterIUS2FF.UseImageSpacingOff = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_UseImageSpacingOff, None, itkGradientImageFilterIUS2FF)
itkGradientImageFilterIUS2FF.OverrideBoundaryCondition = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_OverrideBoundaryCondition, None, itkGradientImageFilterIUS2FF)
itkGradientImageFilterIUS2FF.SetUseImageDirection = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_SetUseImageDirection, None, itkGradientImageFilterIUS2FF)
itkGradientImageFilterIUS2FF.GetUseImageDirection = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_GetUseImageDirection, None, itkGradientImageFilterIUS2FF)
itkGradientImageFilterIUS2FF.UseImageDirectionOn = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_UseImageDirectionOn, None, itkGradientImageFilterIUS2FF)
itkGradientImageFilterIUS2FF.UseImageDirectionOff = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_UseImageDirectionOff, None, itkGradientImageFilterIUS2FF)
itkGradientImageFilterIUS2FF_swigregister = _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_swigregister
itkGradientImageFilterIUS2FF_swigregister(itkGradientImageFilterIUS2FF)

def itkGradientImageFilterIUS2FF___New_orig__():
    """itkGradientImageFilterIUS2FF___New_orig__() -> itkGradientImageFilterIUS2FF_Pointer"""
    return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF___New_orig__()

def itkGradientImageFilterIUS2FF_cast(obj):
    """itkGradientImageFilterIUS2FF_cast(itkLightObject obj) -> itkGradientImageFilterIUS2FF"""
    return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_cast(obj)

class itkGradientImageFilterIUS3FF(itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33):
    """


    Computes the gradient of an image using directional derivatives.

    Computes the gradient of an image using directional derivatives. The
    directional derivative at each pixel location is computed by
    convolution with a first-order derivative operator.

    The second template parameter defines the value type used in the
    derivative operator (defaults to float). The third template parameter
    defines the value type used for output image (defaults to float). The
    output image is defined as a covariant vector image whose value type
    is specified as this third template parameter.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator

    C++ includes: itkGradientImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkGradientImageFilterIUS3FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkGradientImageFilterIUS3FF self) -> itkGradientImageFilterIUS3FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_Clone(self)


    def GenerateInputRequestedRegion(self):
        """
        GenerateInputRequestedRegion(itkGradientImageFilterIUS3FF self)

        GradientImageFilter needs a larger input requested region than the
        output requested region. As such, GradientImageFilter needs to provide
        an implementation for GenerateInputRequestedRegion() in order to
        inform the pipeline execution model.

        See:  ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_GenerateInputRequestedRegion(self)


    def SetUseImageSpacingOn(self):
        """
        SetUseImageSpacingOn(itkGradientImageFilterIUS3FF self)

        Use the image
        spacing information in calculations. Use this option if you want
        derivatives in physical space. Default is UseImageSpacingOn. 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self):
        """
        SetUseImageSpacingOff(itkGradientImageFilterIUS3FF self)

        Ignore the
        image spacing. Use this option if you want derivatives in isotropic
        pixel space. Default is UseImageSpacingOn. 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, _arg):
        """
        SetUseImageSpacing(itkGradientImageFilterIUS3FF self, bool const _arg)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self):
        """GetUseImageSpacing(itkGradientImageFilterIUS3FF self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_GetUseImageSpacing(self)


    def UseImageSpacingOn(self):
        """UseImageSpacingOn(itkGradientImageFilterIUS3FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_UseImageSpacingOn(self)


    def UseImageSpacingOff(self):
        """UseImageSpacingOff(itkGradientImageFilterIUS3FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_UseImageSpacingOff(self)


    def OverrideBoundaryCondition(self, boundaryCondition):
        """
        OverrideBoundaryCondition(itkGradientImageFilterIUS3FF self, itkImageBoundaryConditionIUS3 boundaryCondition)

        Allows to
        change the default boundary condition 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_OverrideBoundaryCondition(self, boundaryCondition)

    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_InputConvertibleToOutputCheck
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_OutputHasNumericTraitsCheck

    def SetUseImageDirection(self, _arg):
        """
        SetUseImageDirection(itkGradientImageFilterIUS3FF self, bool const _arg)

        The
        UseImageDirection flag determines whether image derivatives are
        computed with respect to the image grid or with respect to the
        physical space. When this flag is ON the derivatives are computed with
        respect to the coordinate system of physical space. The difference is
        whether we take into account the image Direction or not. The flag ON
        will take into account the image direction and will result in an extra
        matrix multiplication compared to the amount of computation performed
        when the flag is OFF. The default value of this flag is On. 
        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_SetUseImageDirection(self, _arg)


    def GetUseImageDirection(self):
        """GetUseImageDirection(itkGradientImageFilterIUS3FF self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_GetUseImageDirection(self)


    def UseImageDirectionOn(self):
        """UseImageDirectionOn(itkGradientImageFilterIUS3FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_UseImageDirectionOn(self)


    def UseImageDirectionOff(self):
        """UseImageDirectionOff(itkGradientImageFilterIUS3FF self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_UseImageDirectionOff(self)

    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterIUS3FF

    def cast(obj):
        """cast(itkLightObject obj) -> itkGradientImageFilterIUS3FF"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterIUS3FF

        Create a new object of the class itkGradientImageFilterIUS3FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterIUS3FF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterIUS3FF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGradientImageFilterIUS3FF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGradientImageFilterIUS3FF.Clone = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_Clone, None, itkGradientImageFilterIUS3FF)
itkGradientImageFilterIUS3FF.GenerateInputRequestedRegion = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_GenerateInputRequestedRegion, None, itkGradientImageFilterIUS3FF)
itkGradientImageFilterIUS3FF.SetUseImageSpacingOn = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_SetUseImageSpacingOn, None, itkGradientImageFilterIUS3FF)
itkGradientImageFilterIUS3FF.SetUseImageSpacingOff = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_SetUseImageSpacingOff, None, itkGradientImageFilterIUS3FF)
itkGradientImageFilterIUS3FF.SetUseImageSpacing = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_SetUseImageSpacing, None, itkGradientImageFilterIUS3FF)
itkGradientImageFilterIUS3FF.GetUseImageSpacing = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_GetUseImageSpacing, None, itkGradientImageFilterIUS3FF)
itkGradientImageFilterIUS3FF.UseImageSpacingOn = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_UseImageSpacingOn, None, itkGradientImageFilterIUS3FF)
itkGradientImageFilterIUS3FF.UseImageSpacingOff = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_UseImageSpacingOff, None, itkGradientImageFilterIUS3FF)
itkGradientImageFilterIUS3FF.OverrideBoundaryCondition = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_OverrideBoundaryCondition, None, itkGradientImageFilterIUS3FF)
itkGradientImageFilterIUS3FF.SetUseImageDirection = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_SetUseImageDirection, None, itkGradientImageFilterIUS3FF)
itkGradientImageFilterIUS3FF.GetUseImageDirection = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_GetUseImageDirection, None, itkGradientImageFilterIUS3FF)
itkGradientImageFilterIUS3FF.UseImageDirectionOn = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_UseImageDirectionOn, None, itkGradientImageFilterIUS3FF)
itkGradientImageFilterIUS3FF.UseImageDirectionOff = new_instancemethod(_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_UseImageDirectionOff, None, itkGradientImageFilterIUS3FF)
itkGradientImageFilterIUS3FF_swigregister = _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_swigregister
itkGradientImageFilterIUS3FF_swigregister(itkGradientImageFilterIUS3FF)

def itkGradientImageFilterIUS3FF___New_orig__():
    """itkGradientImageFilterIUS3FF___New_orig__() -> itkGradientImageFilterIUS3FF_Pointer"""
    return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF___New_orig__()

def itkGradientImageFilterIUS3FF_cast(obj):
    """itkGradientImageFilterIUS3FF_cast(itkLightObject obj) -> itkGradientImageFilterIUS3FF"""
    return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_cast(obj)


def gradient_image_filter(*args, **kwargs):
    """Procedural interface for GradientImageFilter"""
    import itk
    instance = itk.GradientImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def gradient_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.GradientImageFilter, itkTemplate.itkTemplate):
        gradient_image_filter.__doc__ = itk.GradientImageFilter.values()[0].__doc__
    else:
        gradient_image_filter.__doc__ = itk.GradientImageFilter.__doc__




