# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ActionInvocation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, action_invocation_state=None, action_id=None, finished=None, result=None, action_invocation_id=None, action_name=None, started=None, argument=None):
        """
        ActionInvocation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'action_invocation_state': 'ActionEventType',
            'action_id': 'str',
            'finished': 'datetime',
            'result': 'str',
            'action_invocation_id': 'str',
            'action_name': 'str',
            'started': 'datetime',
            'argument': 'str'
        }

        self.attribute_map = {
            'action_invocation_state': 'actionInvocationState',
            'action_id': 'actionId',
            'finished': 'finished',
            'result': 'result',
            'action_invocation_id': 'actionInvocationId',
            'action_name': 'actionName',
            'started': 'started',
            'argument': 'argument'
        }

        self._action_invocation_state = action_invocation_state
        self._action_id = action_id
        self._finished = finished
        self._result = result
        self._action_invocation_id = action_invocation_id
        self._action_name = action_name
        self._started = started
        self._argument = argument

    @property
    def action_invocation_state(self):
        """
        Gets the action_invocation_state of this ActionInvocation.


        :return: The action_invocation_state of this ActionInvocation.
        :rtype: ActionEventType
        """
        return self._action_invocation_state

    @action_invocation_state.setter
    def action_invocation_state(self, action_invocation_state):
        """
        Sets the action_invocation_state of this ActionInvocation.


        :param action_invocation_state: The action_invocation_state of this ActionInvocation.
        :type: ActionEventType
        """
        
        self._action_invocation_state = action_invocation_state

    @property
    def action_id(self):
        """
        Gets the action_id of this ActionInvocation.


        :return: The action_id of this ActionInvocation.
        :rtype: str
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """
        Sets the action_id of this ActionInvocation.


        :param action_id: The action_id of this ActionInvocation.
        :type: str
        """
        
        self._action_id = action_id

    @property
    def finished(self):
        """
        Gets the finished of this ActionInvocation.


        :return: The finished of this ActionInvocation.
        :rtype: datetime
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """
        Sets the finished of this ActionInvocation.


        :param finished: The finished of this ActionInvocation.
        :type: datetime
        """
        
        self._finished = finished

    @property
    def result(self):
        """
        Gets the result of this ActionInvocation.


        :return: The result of this ActionInvocation.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """
        Sets the result of this ActionInvocation.


        :param result: The result of this ActionInvocation.
        :type: str
        """
        
        self._result = result

    @property
    def action_invocation_id(self):
        """
        Gets the action_invocation_id of this ActionInvocation.


        :return: The action_invocation_id of this ActionInvocation.
        :rtype: str
        """
        return self._action_invocation_id

    @action_invocation_id.setter
    def action_invocation_id(self, action_invocation_id):
        """
        Sets the action_invocation_id of this ActionInvocation.


        :param action_invocation_id: The action_invocation_id of this ActionInvocation.
        :type: str
        """
        
        self._action_invocation_id = action_invocation_id

    @property
    def action_name(self):
        """
        Gets the action_name of this ActionInvocation.


        :return: The action_name of this ActionInvocation.
        :rtype: str
        """
        return self._action_name

    @action_name.setter
    def action_name(self, action_name):
        """
        Sets the action_name of this ActionInvocation.


        :param action_name: The action_name of this ActionInvocation.
        :type: str
        """
        
        self._action_name = action_name

    @property
    def started(self):
        """
        Gets the started of this ActionInvocation.


        :return: The started of this ActionInvocation.
        :rtype: datetime
        """
        return self._started

    @started.setter
    def started(self, started):
        """
        Sets the started of this ActionInvocation.


        :param started: The started of this ActionInvocation.
        :type: datetime
        """
        
        self._started = started

    @property
    def argument(self):
        """
        Gets the argument of this ActionInvocation.


        :return: The argument of this ActionInvocation.
        :rtype: str
        """
        return self._argument

    @argument.setter
    def argument(self, argument):
        """
        Sets the argument of this ActionInvocation.


        :param argument: The argument of this ActionInvocation.
        :type: str
        """
        
        self._argument = argument

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




