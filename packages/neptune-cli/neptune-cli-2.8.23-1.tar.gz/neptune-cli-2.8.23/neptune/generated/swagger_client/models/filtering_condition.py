# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class FilteringCondition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, trashed=None, state=None, tags=None, time_of_creation=None, owner_name=None, responding=None):
        """
        FilteringCondition - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'StringFilter',
            'trashed': 'BooleanFilter',
            'state': 'ExperimentStateFilter',
            'tags': 'TagsFilter',
            'time_of_creation': 'DateTimeFilter',
            'owner_name': 'StringFilter',
            'responding': 'BooleanFilter'
        }

        self.attribute_map = {
            'name': 'name',
            'trashed': 'trashed',
            'state': 'state',
            'tags': 'tags',
            'time_of_creation': 'timeOfCreation',
            'owner_name': 'ownerName',
            'responding': 'responding'
        }

        self._name = name
        self._trashed = trashed
        self._state = state
        self._tags = tags
        self._time_of_creation = time_of_creation
        self._owner_name = owner_name
        self._responding = responding

    @property
    def name(self):
        """
        Gets the name of this FilteringCondition.


        :return: The name of this FilteringCondition.
        :rtype: StringFilter
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this FilteringCondition.


        :param name: The name of this FilteringCondition.
        :type: StringFilter
        """
        
        self._name = name

    @property
    def trashed(self):
        """
        Gets the trashed of this FilteringCondition.


        :return: The trashed of this FilteringCondition.
        :rtype: BooleanFilter
        """
        return self._trashed

    @trashed.setter
    def trashed(self, trashed):
        """
        Sets the trashed of this FilteringCondition.


        :param trashed: The trashed of this FilteringCondition.
        :type: BooleanFilter
        """
        
        self._trashed = trashed

    @property
    def state(self):
        """
        Gets the state of this FilteringCondition.


        :return: The state of this FilteringCondition.
        :rtype: ExperimentStateFilter
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this FilteringCondition.


        :param state: The state of this FilteringCondition.
        :type: ExperimentStateFilter
        """
        
        self._state = state

    @property
    def tags(self):
        """
        Gets the tags of this FilteringCondition.


        :return: The tags of this FilteringCondition.
        :rtype: TagsFilter
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this FilteringCondition.


        :param tags: The tags of this FilteringCondition.
        :type: TagsFilter
        """
        
        self._tags = tags

    @property
    def time_of_creation(self):
        """
        Gets the time_of_creation of this FilteringCondition.


        :return: The time_of_creation of this FilteringCondition.
        :rtype: DateTimeFilter
        """
        return self._time_of_creation

    @time_of_creation.setter
    def time_of_creation(self, time_of_creation):
        """
        Sets the time_of_creation of this FilteringCondition.


        :param time_of_creation: The time_of_creation of this FilteringCondition.
        :type: DateTimeFilter
        """
        
        self._time_of_creation = time_of_creation

    @property
    def owner_name(self):
        """
        Gets the owner_name of this FilteringCondition.


        :return: The owner_name of this FilteringCondition.
        :rtype: StringFilter
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """
        Sets the owner_name of this FilteringCondition.


        :param owner_name: The owner_name of this FilteringCondition.
        :type: StringFilter
        """
        
        self._owner_name = owner_name

    @property
    def responding(self):
        """
        Gets the responding of this FilteringCondition.


        :return: The responding of this FilteringCondition.
        :rtype: BooleanFilter
        """
        return self._responding

    @responding.setter
    def responding(self, responding):
        """
        Sets the responding of this FilteringCondition.


        :param responding: The responding of this FilteringCondition.
        :type: BooleanFilter
        """
        
        self._responding = responding

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




