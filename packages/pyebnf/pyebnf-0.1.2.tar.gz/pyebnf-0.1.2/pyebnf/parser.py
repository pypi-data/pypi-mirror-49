"""This parser was generated by pyebnf on 2015-09-15T18:05:07.498519."""
from enum import Enum

from pyebnf import parser_base as PB
from pyebnf.primitive import alternation, concatenation, exclusion, one_or_more
from pyebnf.primitive import option, repeated, repetition, terminal, zero_or_more


class TokenType(Enum):
  """The token types for parse nodes generated by the Parser."""
  grammar = 1
  comment = 2
  rule = 3
  identifier = 4
  expression = 5
  expression_terminal = 6
  option_group = 7
  repetition_group = 8
  grouping_group = 9
  special_handling = 10
  number = 11
  terminal = 12
  operator = 13
  op_mult = 14
  op_add = 15
  alpha_character = 16
  digit = 17
  printable = 18


class Parser(PB.ParserBase):
  """This class contains methods for reading source code and generating a parse tree."""
  entry_point = "grammar"

  def grammar(self, text):
    """grammar = {comment} , rule , {comment | rule} ;"""
    self._attempting(text)
    return concatenation([
      zero_or_more(
        self.comment,
        ignore_whitespace=True
      ),
      self.rule,
      zero_or_more(
        alternation([
          self.comment,
          self.rule,
        ]),
        ignore_whitespace=True
      ),
    ], ignore_whitespace=True)(text).retyped(TokenType.grammar)
  
  def comment(self, text):
    """comment = "(*" . {printable - "*" | "*" . printable - ")"} . "*)" ;"""
    self._attempting(text)
    return concatenation([
      "(*",
      zero_or_more(
        alternation([
          exclusion(
            self.printable,
            "*"
          ),
          concatenation([
            "*",
            exclusion(
              self.printable,
              ")"
            ),
          ], ignore_whitespace=False),
        ]),
        ignore_whitespace=False
      ),
      "*)",
    ], ignore_whitespace=False)(text).compressed(TokenType.comment)
  
  def rule(self, text):
    """rule = identifier , "=" , expression , ";" ;"""
    self._attempting(text)
    return concatenation([
      self.identifier,
      "=",
      self.expression,
      ";",
    ], ignore_whitespace=True)(text).retyped(TokenType.rule)
  
  def identifier(self, text):
    """identifier = (alpha_character | "_") . {alpha_character | "_" | digit} ;"""
    self._attempting(text)
    return concatenation([
      alternation([
        self.alpha_character,
        "_",
      ]),
      zero_or_more(
        alternation([
          self.alpha_character,
          "_",
          self.digit,
        ]),
        ignore_whitespace=False
      ),
    ], ignore_whitespace=False)(text).compressed(TokenType.identifier)
  
  def expression(self, text):
    """expression = number , op_mult , expression
                  | expression_terminal , op_mult , number , [operator , expression]
                  | expression_terminal , op_add , [operator , expression]
                  | expression_terminal , [operator , expression] ;"""
    self._attempting(text)
    return alternation([
      concatenation([
        self.number,
        self.op_mult,
        self.expression,
      ], ignore_whitespace=True),
      concatenation([
        self.expression_terminal,
        self.op_mult,
        self.number,
        option(
          concatenation([
            self.operator,
            self.expression,
          ], ignore_whitespace=True)
        ),
      ], ignore_whitespace=True),
      concatenation([
        self.expression_terminal,
        self.op_add,
        option(
          concatenation([
            self.operator,
            self.expression,
          ], ignore_whitespace=True)
        ),
      ], ignore_whitespace=True),
      concatenation([
        self.expression_terminal,
        option(
          concatenation([
            self.operator,
            self.expression,
          ], ignore_whitespace=True)
        ),
      ], ignore_whitespace=True),
    ])(text).retyped(TokenType.expression)
  
  def expression_terminal(self, text):
    """expression_terminal = identifier
                           | terminal
                           | option_group
                           | repetition_group
                           | grouping_group
                           | special_handling ;"""
    self._attempting(text)
    return alternation([
      self.identifier,
      self.terminal,
      self.option_group,
      self.repetition_group,
      self.grouping_group,
      self.special_handling,
    ])(text)
  
  def option_group(self, text):
    """option_group = "[" , expression , "]" ;"""
    self._attempting(text)
    return concatenation([
      "[",
      self.expression,
      "]",
    ], ignore_whitespace=True)(text).retyped(TokenType.option_group)
  
  def repetition_group(self, text):
    """repetition_group = "{" , expression , "}" ;"""
    self._attempting(text)
    return concatenation([
      "{",
      self.expression,
      "}",
    ], ignore_whitespace=True)(text).retyped(TokenType.repetition_group)
  
  def grouping_group(self, text):
    """grouping_group = "(" , expression , ")" ;"""
    self._attempting(text)
    return concatenation([
      "(",
      self.expression,
      ")",
    ], ignore_whitespace=True)(text).retyped(TokenType.grouping_group)
  
  def special_handling(self, text):
    """special_handling = "?" , identifier , "?" ;"""
    self._attempting(text)
    return concatenation([
      "?",
      self.identifier,
      "?",
    ], ignore_whitespace=True)(text).retyped(TokenType.special_handling)
  
  def number(self, text):
    """number = digit - "0" . {digit} ;"""
    self._attempting(text)
    return concatenation([
      exclusion(
        self.digit,
        "0"
      ),
      zero_or_more(
        self.digit,
        ignore_whitespace=False
      ),
    ], ignore_whitespace=False)(text).compressed(TokenType.number)
  
  def terminal(self, text):
    """terminal = '"' . (printable - '"') + . '"'
                | "'" . (printable - "'") + . "'" ;"""
    self._attempting(text)
    return alternation([
      concatenation([
        '"',
        one_or_more(
          exclusion(
            self.printable,
            '"'
          ),
          ignore_whitespace=False
        ),
        '"',
      ], ignore_whitespace=False),
      concatenation([
        "'",
        one_or_more(
          exclusion(
            self.printable,
            "'"
          ),
          ignore_whitespace=False
        ),
        "'",
      ], ignore_whitespace=False),
    ])(text).compressed(TokenType.terminal)
  
  def operator(self, text):
    """operator = "|" | "." | "," | "-" ;"""
    self._attempting(text)
    return alternation([
      "|",
      ".",
      ",",
      "-",
    ])(text).retyped(TokenType.operator)
  
  def op_mult(self, text):
    """op_mult = "*" ;"""
    self._attempting(text)
    return terminal("*")(text).retyped(TokenType.op_mult)
  
  def op_add(self, text):
    """op_add = "+" ;"""
    self._attempting(text)
    return terminal("+")(text).retyped(TokenType.op_add)
  
  def alpha_character(self, text):
    """alpha_character = ? get_ascii_letter ? ;"""
    self._attempting(text)
    return PB.get_ascii_letter(text)
  
  def digit(self, text):
    """digit = ? get_digit ? ;"""
    self._attempting(text)
    return PB.get_digit(text)
  
  def printable(self, text):
    """printable = ? get_printable ? ;"""
    self._attempting(text)
    return PB.get_printable(text)
  


