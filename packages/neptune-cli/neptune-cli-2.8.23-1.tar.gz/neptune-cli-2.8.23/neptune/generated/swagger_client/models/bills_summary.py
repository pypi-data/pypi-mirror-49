# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class BillsSummary(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, computing_power=None, users=None, total=None, transfer=None, storage=None):
        """
        BillsSummary - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'computing_power': 'float',
            'users': 'float',
            'total': 'float',
            'transfer': 'float',
            'storage': 'float'
        }

        self.attribute_map = {
            'computing_power': 'computingPower',
            'users': 'users',
            'total': 'total',
            'transfer': 'transfer',
            'storage': 'storage'
        }

        self._computing_power = computing_power
        self._users = users
        self._total = total
        self._transfer = transfer
        self._storage = storage

    @property
    def computing_power(self):
        """
        Gets the computing_power of this BillsSummary.


        :return: The computing_power of this BillsSummary.
        :rtype: float
        """
        return self._computing_power

    @computing_power.setter
    def computing_power(self, computing_power):
        """
        Sets the computing_power of this BillsSummary.


        :param computing_power: The computing_power of this BillsSummary.
        :type: float
        """
        
        self._computing_power = computing_power

    @property
    def users(self):
        """
        Gets the users of this BillsSummary.


        :return: The users of this BillsSummary.
        :rtype: float
        """
        return self._users

    @users.setter
    def users(self, users):
        """
        Sets the users of this BillsSummary.


        :param users: The users of this BillsSummary.
        :type: float
        """
        
        self._users = users

    @property
    def total(self):
        """
        Gets the total of this BillsSummary.


        :return: The total of this BillsSummary.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """
        Sets the total of this BillsSummary.


        :param total: The total of this BillsSummary.
        :type: float
        """
        
        self._total = total

    @property
    def transfer(self):
        """
        Gets the transfer of this BillsSummary.


        :return: The transfer of this BillsSummary.
        :rtype: float
        """
        return self._transfer

    @transfer.setter
    def transfer(self, transfer):
        """
        Sets the transfer of this BillsSummary.


        :param transfer: The transfer of this BillsSummary.
        :type: float
        """
        
        self._transfer = transfer

    @property
    def storage(self):
        """
        Gets the storage of this BillsSummary.


        :return: The storage of this BillsSummary.
        :rtype: float
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """
        Sets the storage of this BillsSummary.


        :param storage: The storage of this BillsSummary.
        :type: float
        """
        
        self._storage = storage

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




