{"version":3,"sources":["webpack:///./app/components/internalStatChart.jsx","webpack:///./app/views/admin/adminQueue.jsx"],"names":["createReactClass","displayName","propTypes","since","PropTypes","number","isRequired","resolution","string","stat","label","height","mixins","ApiMixin","getDefaultProps","getInitialState","error","loading","data","componentWillMount","this","fetchData","componentWillReceiveProps","nextProps","lodash_isEqual__WEBPACK_IMPORTED_MODULE_1___default","props","setState","shouldComponentUpdate","nextState","state","_this","api","request","method","key","success","getChartPoints","map","_ref","_ref2","_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default","x","y","render","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","app_components_loadingIndicator__WEBPACK_IMPORTED_MODULE_8__","app_components_loadingError__WEBPACK_IMPORTED_MODULE_7__","onRetry","app_components_barChart__WEBPACK_IMPORTED_MODULE_6__","points","className","AdminQueue","changeTask","value","activeTask","_babel_runtime_helpers_objectSpread__WEBPACK_IMPORTED_MODULE_1___default","_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_6___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default","prototype","call","timeWindow","Date","getTime","taskName","seconds","Error","_this2","_this$state","taskList","react__WEBPACK_IMPORTED_MODULE_8___default","r","concat","onClick","changeWindow","app_components_internalStatChart__WEBPACK_IMPORTED_MODULE_10__","app_components_forms__WEBPACK_IMPORTED_MODULE_11__","name","onChange","allowClear","choices","apply","_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default","t","AsyncView"],"mappings":"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","file":"AdminQueue.js","sourcesContent":["/*eslint getsentry/jsx-needs-il8n:0*/\nimport PropTypes from 'prop-types';\n\nimport React from 'react';\nimport createReactClass from 'create-react-class';\nimport _ from 'lodash';\n\nimport ApiMixin from 'app/mixins/apiMixin';\nimport BarChart from 'app/components/barChart';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\n\nexport default createReactClass({\n  displayName: 'internalStatChart',\n\n  propTypes: {\n    since: PropTypes.number.isRequired,\n    resolution: PropTypes.string.isRequired,\n    stat: PropTypes.string.isRequired,\n    label: PropTypes.string,\n    height: PropTypes.number,\n  },\n\n  mixins: [ApiMixin],\n\n  getDefaultProps() {\n    return {\n      height: 150,\n    };\n  },\n\n  getInitialState() {\n    return {\n      error: false,\n      loading: true,\n      data: null,\n    };\n  },\n\n  componentWillMount() {\n    this.fetchData();\n  },\n\n  componentWillReceiveProps(nextProps) {\n    if (!_.isEqual(nextProps, this.props)) {\n      this.setState(\n        {\n          loading: true,\n        },\n        this.fetchData\n      );\n    }\n  },\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.state.loading !== nextState.loading;\n  },\n\n  fetchData() {\n    this.api.request('/internal/stats/', {\n      method: 'GET',\n      data: {\n        since: this.props.since,\n        resolution: this.props.resolution,\n        key: this.props.stat,\n      },\n      success: data => {\n        this.setState({\n          data,\n          loading: false,\n          error: false,\n        });\n      },\n      error: data => {\n        this.setState({\n          error: true,\n        });\n      },\n    });\n  },\n\n  getChartPoints() {\n    return this.state.data.map(([x, y]) => {\n      return {x, y};\n    });\n  },\n\n  render() {\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    } else if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    return (\n      <BarChart\n        points={this.getChartPoints()}\n        className=\"standard-barchart\"\n        label={this.props.label}\n        height={this.props.height}\n      />\n    );\n  },\n});\n","/*eslint getsentry/jsx-needs-il8n:0*/\nimport React from 'react';\n\nimport AsyncView from 'app/views/asyncView';\nimport InternalStatChart from 'app/components/internalStatChart';\nimport {SelectField} from 'app/components/forms';\n\nexport default class AdminQueue extends AsyncView {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      timeWindow: '1w',\n      since: new Date().getTime() / 1000 - 3600 * 24 * 7,\n      resolution: '1h',\n      taskName: null,\n    };\n  }\n\n  getEndpoints() {\n    return [['taskList', '/internal/queue/tasks/']];\n  }\n\n  changeWindow(timeWindow) {\n    let seconds;\n    if (timeWindow === '1h') {\n      seconds = 3600;\n    } else if (timeWindow === '1d') {\n      seconds = 3600 * 24;\n    } else if (timeWindow === '1w') {\n      seconds = 3600 * 24 * 7;\n    } else {\n      throw new Error('Invalid time window');\n    }\n    this.setState({\n      since: new Date().getTime() / 1000 - seconds,\n      timeWindow,\n    });\n  }\n\n  changeTask = value => {\n    this.setState({activeTask: value});\n  };\n\n  renderBody() {\n    const {activeTask, taskList} = this.state;\n\n    return (\n      <div>\n        <div className=\"btn-group pull-right\">\n          {['1h', '1d', '1w'].map(r => {\n            return (\n              <a\n                className={`btn btn-sm ${r == this.state.timeWindow\n                  ? 'btn-primary'\n                  : 'btn-default'}`}\n                onClick={() => this.changeWindow(r)}\n                key={r}\n              >\n                {r}\n              </a>\n            );\n          })}\n        </div>\n\n        <h3 className=\"no-border\">Queue Overview</h3>\n\n        <div className=\"box\">\n          <div className=\"box-header\">\n            <h3>Global Throughput</h3>\n          </div>\n          <InternalStatChart\n            since={this.state.since}\n            resolution={this.state.resolution}\n            stat=\"jobs.all.started\"\n            label=\"jobs started\"\n          />\n        </div>\n\n        <h3 className=\"no-border\">Task Details</h3>\n\n        <div>\n          <div>\n            <label>Show details for task:</label>\n            <SelectField\n              name=\"task\"\n              onChange={this.changeTask}\n              value={activeTask}\n              allowClear={true}\n              choices={[''].concat(...taskList).map(t => [t, t])}\n            />\n          </div>\n          {activeTask ? (\n            <div>\n              <div className=\"box box-mini\" key=\"jobs.started\">\n                <div className=\"box-header\">\n                  Jobs Started <small>{activeTask}</small>\n                </div>\n                <InternalStatChart\n                  since={this.state.since}\n                  resolution={this.state.resolution}\n                  stat={`jobs.started.${this.state.activeTask}`}\n                  label=\"jobs\"\n                  height={100}\n                />\n              </div>\n              <div className=\"box box-mini\" key=\"jobs.finished\">\n                <div className=\"box-header\">\n                  Jobs Finished <small>{activeTask}</small>\n                </div>\n                <InternalStatChart\n                  since={this.state.since}\n                  resolution={this.state.resolution}\n                  stat={`jobs.finished.${this.state.activeTask}`}\n                  label=\"jobs\"\n                  height={100}\n                />\n              </div>\n            </div>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}