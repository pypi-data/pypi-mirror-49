{"version":3,"sources":["webpack:///./app/components/internalStatChart.jsx","webpack:///./app/views/admin/adminBuffer.jsx"],"names":["createReactClass","displayName","propTypes","since","PropTypes","number","isRequired","resolution","string","stat","label","height","mixins","ApiMixin","getDefaultProps","getInitialState","error","loading","data","componentWillMount","this","fetchData","componentWillReceiveProps","nextProps","lodash_isEqual__WEBPACK_IMPORTED_MODULE_1___default","props","setState","shouldComponentUpdate","nextState","state","_this","api","request","method","key","success","getChartPoints","map","_ref","_ref2","_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default","x","y","render","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","app_components_loadingIndicator__WEBPACK_IMPORTED_MODULE_8__","app_components_loadingError__WEBPACK_IMPORTED_MODULE_7__","onRetry","app_components_barChart__WEBPACK_IMPORTED_MODULE_6__","points","className","AdminBuffer","Date","getTime","react__WEBPACK_IMPORTED_MODULE_6___default","app_components_internalStatChart__WEBPACK_IMPORTED_MODULE_7__","React","Component","defaultProps"],"mappings":"oNAYeA,QAAiB,CAC9BC,YAAa,oBAEbC,UAAW,CACTC,MAAOC,IAAUC,OAAOC,WACxBC,WAAYH,IAAUI,OAAOF,WAC7BG,KAAML,IAAUI,OAAOF,WACvBI,MAAON,IAAUI,OACjBG,OAAQP,IAAUC,QAGpBO,OAAQ,CAACC,WAETC,gBAb8B,WAc5B,MAAO,CACLH,OAAQ,MAIZI,gBAnB8B,WAoB5B,MAAO,CACLC,OAAO,EACPC,SAAS,EACTC,KAAM,OAIVC,mBA3B8B,WA4B5BC,KAAKC,aAGPC,0BA/B8B,SA+BJC,GACnBC,IAAUD,EAAWH,KAAKK,QAC7BL,KAAKM,SACH,CACET,SAAS,GAEXG,KAAKC,YAKXM,sBA1C8B,SA0CRJ,EAAWK,GAC/B,OAAOR,KAAKS,MAAMZ,UAAYW,EAAUX,SAG1CI,UA9C8B,WA8ClB,IAAAS,EAAAV,KACVA,KAAKW,IAAIC,QAAQ,mBAAoB,CACnCC,OAAQ,MACRf,KAAM,CACJf,MAAOiB,KAAKK,MAAMtB,MAClBI,WAAYa,KAAKK,MAAMlB,WACvB2B,IAAKd,KAAKK,MAAMhB,MAElB0B,QAAS,SAAAjB,GACPY,EAAKJ,SAAS,CACZR,OACAD,SAAS,EACTD,OAAO,KAGXA,MAAO,SAAAE,GACLY,EAAKJ,SAAS,CACZV,OAAO,QAMfoB,eArE8B,WAsE5B,OAAOhB,KAAKS,MAAMX,KAAKmB,IAAI,SAAAC,GAAY,IAAAC,EAAAC,IAAAF,EAAA,GACrC,MAAO,CAACG,EAD6BF,EAAA,GAC1BG,EAD0BH,EAAA,OAKzCI,OA3E8B,WA4E5B,OAAIvB,KAAKS,MAAMZ,QACN2B,EAAAC,EAAAC,cAACC,EAAA,QAAD,MACE3B,KAAKS,MAAMb,MACb4B,EAAAC,EAAAC,cAACE,EAAA,QAAD,CAAcC,QAAS7B,KAAKC,YAInCuB,EAAAC,EAAAC,cAACI,EAAA,QAAD,CACEC,OAAQ/B,KAAKgB,iBACbgB,UAAU,oBACV1C,MAAOU,KAAKK,MAAMf,MAClBC,OAAQS,KAAKK,MAAMd,0NC9FN0C,2IASV,IAEA9C,EAAca,KAAKK,MAAnBlB,WACDJ,GAAQ,IAAImD,MAAOC,UAAY,IAAO,OAE5C,OACEC,EAAAX,EAAAC,cAAA,WACEU,EAAAX,EAAAC,cAAA,qBAEAU,EAAAX,EAAAC,cAAA,OAAKM,UAAU,OACbI,EAAAX,EAAAC,cAAA,OAAKM,UAAU,cACbI,EAAAX,EAAAC,cAAA,oBAGFU,EAAAX,EAAAC,cAAA,OAAKM,UAAU,4BACbI,EAAAX,EAAAC,cAAA,2JAEsE,IACpEU,EAAAX,EAAAC,cAAA,uBAHF,kGAUJU,EAAAX,EAAAC,cAAA,OAAKM,UAAU,OACbI,EAAAX,EAAAC,cAAA,OAAKM,UAAU,cACbI,EAAAX,EAAAC,cAAA,gCAEFU,EAAAX,EAAAC,cAACW,EAAA,EAAD,CACEtD,MAAOA,EACPI,WAAYA,EACZE,KAAK,yDACLC,MAAM,UAIV8C,EAAAX,EAAAC,cAAA,OAAKM,UAAU,OACbI,EAAAX,EAAAC,cAAA,OAAKM,UAAU,cACbI,EAAAX,EAAAC,cAAA,8BAEFU,EAAAX,EAAAC,cAACW,EAAA,EAAD,CACEtD,MAAOA,EACPI,WAAYA,EACZE,KAAK,iBACLC,MAAM,kBAtDuBgD,IAAMC,WAA1BN,EACZnD,UAAY,CACjBK,WAAYH,IAAUI,OAAOF,YAFZ+C,EAKZO,aAAe,CACpBrD,WAAY","file":"AdminBuffer.js","sourcesContent":["/*eslint getsentry/jsx-needs-il8n:0*/\nimport PropTypes from 'prop-types';\n\nimport React from 'react';\nimport createReactClass from 'create-react-class';\nimport _ from 'lodash';\n\nimport ApiMixin from 'app/mixins/apiMixin';\nimport BarChart from 'app/components/barChart';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\n\nexport default createReactClass({\n  displayName: 'internalStatChart',\n\n  propTypes: {\n    since: PropTypes.number.isRequired,\n    resolution: PropTypes.string.isRequired,\n    stat: PropTypes.string.isRequired,\n    label: PropTypes.string,\n    height: PropTypes.number,\n  },\n\n  mixins: [ApiMixin],\n\n  getDefaultProps() {\n    return {\n      height: 150,\n    };\n  },\n\n  getInitialState() {\n    return {\n      error: false,\n      loading: true,\n      data: null,\n    };\n  },\n\n  componentWillMount() {\n    this.fetchData();\n  },\n\n  componentWillReceiveProps(nextProps) {\n    if (!_.isEqual(nextProps, this.props)) {\n      this.setState(\n        {\n          loading: true,\n        },\n        this.fetchData\n      );\n    }\n  },\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.state.loading !== nextState.loading;\n  },\n\n  fetchData() {\n    this.api.request('/internal/stats/', {\n      method: 'GET',\n      data: {\n        since: this.props.since,\n        resolution: this.props.resolution,\n        key: this.props.stat,\n      },\n      success: data => {\n        this.setState({\n          data,\n          loading: false,\n          error: false,\n        });\n      },\n      error: data => {\n        this.setState({\n          error: true,\n        });\n      },\n    });\n  },\n\n  getChartPoints() {\n    return this.state.data.map(([x, y]) => {\n      return {x, y};\n    });\n  },\n\n  render() {\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    } else if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    return (\n      <BarChart\n        points={this.getChartPoints()}\n        className=\"standard-barchart\"\n        label={this.props.label}\n        height={this.props.height}\n      />\n    );\n  },\n});\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport InternalStatChart from 'app/components/internalStatChart';\n\nexport default class AdminBuffer extends React.Component {\n  static propTypes = {\n    resolution: PropTypes.string.isRequired,\n  };\n\n  static defaultProps = {\n    resolution: '1h',\n  };\n\n  render() {\n    // TODO(dcramer): show buffer configuration when its moved into option store\n    const {resolution} = this.props;\n    const since = new Date().getTime() / 1000 - 3600 * 24 * 7;\n\n    return (\n      <div>\n        <h3>Buffers</h3>\n\n        <div className=\"box\">\n          <div className=\"box-header\">\n            <h4>About</h4>\n          </div>\n\n          <div className=\"box-content with-padding\">\n            <p>\n              Sentry buffers are responsible for making changes to cardinality counters —\n              such as an issues event count — as well as updating attributes like{' '}\n              <em>last seen</em>\n              . These are flushed on a regularly interval, and are directly affected by\n              the queue backlog.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"box\">\n          <div className=\"box-header\">\n            <h4>Updates Processed</h4>\n          </div>\n          <InternalStatChart\n            since={since}\n            resolution={resolution}\n            stat=\"jobs.finished.sentry.tasks.process_buffer.process_incr\"\n            label=\"Jobs\"\n          />\n        </div>\n\n        <div className=\"box\">\n          <div className=\"box-header\">\n            <h4>Revoked Updates</h4>\n          </div>\n          <InternalStatChart\n            since={since}\n            resolution={resolution}\n            stat=\"buffer.revoked\"\n            label=\"Jobs\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}