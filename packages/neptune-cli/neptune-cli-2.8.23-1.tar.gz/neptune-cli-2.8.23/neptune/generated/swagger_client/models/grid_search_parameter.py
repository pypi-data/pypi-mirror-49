# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class GridSearchParameter(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, description=None, parameter_type=None, id=None, values=None, ranges=None):
        """
        GridSearchParameter - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'description': 'str',
            'parameter_type': 'ParameterTypeEnum',
            'id': 'str',
            'values': 'list[ArrayValueSet]',
            'ranges': 'list[RangeValueSet]'
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'parameter_type': 'parameterType',
            'id': 'id',
            'values': 'values',
            'ranges': 'ranges'
        }

        self._name = name
        self._description = description
        self._parameter_type = parameter_type
        self._id = id
        self._values = values
        self._ranges = ranges

    @property
    def name(self):
        """
        Gets the name of this GridSearchParameter.


        :return: The name of this GridSearchParameter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this GridSearchParameter.


        :param name: The name of this GridSearchParameter.
        :type: str
        """
        
        self._name = name

    @property
    def description(self):
        """
        Gets the description of this GridSearchParameter.


        :return: The description of this GridSearchParameter.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this GridSearchParameter.


        :param description: The description of this GridSearchParameter.
        :type: str
        """
        
        self._description = description

    @property
    def parameter_type(self):
        """
        Gets the parameter_type of this GridSearchParameter.


        :return: The parameter_type of this GridSearchParameter.
        :rtype: ParameterTypeEnum
        """
        return self._parameter_type

    @parameter_type.setter
    def parameter_type(self, parameter_type):
        """
        Sets the parameter_type of this GridSearchParameter.


        :param parameter_type: The parameter_type of this GridSearchParameter.
        :type: ParameterTypeEnum
        """
        
        self._parameter_type = parameter_type

    @property
    def id(self):
        """
        Gets the id of this GridSearchParameter.


        :return: The id of this GridSearchParameter.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this GridSearchParameter.


        :param id: The id of this GridSearchParameter.
        :type: str
        """
        
        self._id = id

    @property
    def values(self):
        """
        Gets the values of this GridSearchParameter.


        :return: The values of this GridSearchParameter.
        :rtype: list[ArrayValueSet]
        """
        return self._values

    @values.setter
    def values(self, values):
        """
        Sets the values of this GridSearchParameter.


        :param values: The values of this GridSearchParameter.
        :type: list[ArrayValueSet]
        """
        
        self._values = values

    @property
    def ranges(self):
        """
        Gets the ranges of this GridSearchParameter.


        :return: The ranges of this GridSearchParameter.
        :rtype: list[RangeValueSet]
        """
        return self._ranges

    @ranges.setter
    def ranges(self, ranges):
        """
        Sets the ranges of this GridSearchParameter.


        :param ranges: The ranges of this GridSearchParameter.
        :type: list[RangeValueSet]
        """
        
        self._ranges = ranges

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other




